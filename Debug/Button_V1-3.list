
Button_V1-3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c798  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000009a4  0800c858  0800c858  0001c858  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d1fc  0800d1fc  000201f0  2**0
                  CONTENTS
  4 .ARM          00000008  0800d1fc  0800d1fc  0001d1fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d204  0800d204  000201f0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d204  0800d204  0001d204  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800d208  0800d208  0001d208  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f0  20000000  0800d20c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001d4  200001f0  0800d3fc  000201f0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200003c4  0800d3fc  000203c4  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  000201f0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010d82  00000000  00000000  00020218  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002447  00000000  00000000  00030f9a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000fa8  00000000  00000000  000333e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000eb0  00000000  00000000  00034390  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00014757  00000000  00000000  00035240  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000119d2  00000000  00000000  00049997  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0007b13a  00000000  00000000  0005b369  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000d64a3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004f08  00000000  00000000  000d64f4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	200001f0 	.word	0x200001f0
 80000e0:	00000000 	.word	0x00000000
 80000e4:	0800c840 	.word	0x0800c840

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	200001f4 	.word	0x200001f4
 8000104:	0800c840 	.word	0x0800c840

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__gnu_thumb1_case_uqi>:
 8000118:	b402      	push	{r1}
 800011a:	4671      	mov	r1, lr
 800011c:	0849      	lsrs	r1, r1, #1
 800011e:	0049      	lsls	r1, r1, #1
 8000120:	5c09      	ldrb	r1, [r1, r0]
 8000122:	0049      	lsls	r1, r1, #1
 8000124:	448e      	add	lr, r1
 8000126:	bc02      	pop	{r1}
 8000128:	4770      	bx	lr
 800012a:	46c0      	nop			; (mov r8, r8)

0800012c <__gnu_thumb1_case_shi>:
 800012c:	b403      	push	{r0, r1}
 800012e:	4671      	mov	r1, lr
 8000130:	0849      	lsrs	r1, r1, #1
 8000132:	0040      	lsls	r0, r0, #1
 8000134:	0049      	lsls	r1, r1, #1
 8000136:	5e09      	ldrsh	r1, [r1, r0]
 8000138:	0049      	lsls	r1, r1, #1
 800013a:	448e      	add	lr, r1
 800013c:	bc03      	pop	{r0, r1}
 800013e:	4770      	bx	lr

08000140 <__udivsi3>:
 8000140:	2200      	movs	r2, #0
 8000142:	0843      	lsrs	r3, r0, #1
 8000144:	428b      	cmp	r3, r1
 8000146:	d374      	bcc.n	8000232 <__udivsi3+0xf2>
 8000148:	0903      	lsrs	r3, r0, #4
 800014a:	428b      	cmp	r3, r1
 800014c:	d35f      	bcc.n	800020e <__udivsi3+0xce>
 800014e:	0a03      	lsrs	r3, r0, #8
 8000150:	428b      	cmp	r3, r1
 8000152:	d344      	bcc.n	80001de <__udivsi3+0x9e>
 8000154:	0b03      	lsrs	r3, r0, #12
 8000156:	428b      	cmp	r3, r1
 8000158:	d328      	bcc.n	80001ac <__udivsi3+0x6c>
 800015a:	0c03      	lsrs	r3, r0, #16
 800015c:	428b      	cmp	r3, r1
 800015e:	d30d      	bcc.n	800017c <__udivsi3+0x3c>
 8000160:	22ff      	movs	r2, #255	; 0xff
 8000162:	0209      	lsls	r1, r1, #8
 8000164:	ba12      	rev	r2, r2
 8000166:	0c03      	lsrs	r3, r0, #16
 8000168:	428b      	cmp	r3, r1
 800016a:	d302      	bcc.n	8000172 <__udivsi3+0x32>
 800016c:	1212      	asrs	r2, r2, #8
 800016e:	0209      	lsls	r1, r1, #8
 8000170:	d065      	beq.n	800023e <__udivsi3+0xfe>
 8000172:	0b03      	lsrs	r3, r0, #12
 8000174:	428b      	cmp	r3, r1
 8000176:	d319      	bcc.n	80001ac <__udivsi3+0x6c>
 8000178:	e000      	b.n	800017c <__udivsi3+0x3c>
 800017a:	0a09      	lsrs	r1, r1, #8
 800017c:	0bc3      	lsrs	r3, r0, #15
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x46>
 8000182:	03cb      	lsls	r3, r1, #15
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0b83      	lsrs	r3, r0, #14
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x52>
 800018e:	038b      	lsls	r3, r1, #14
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0b43      	lsrs	r3, r0, #13
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x5e>
 800019a:	034b      	lsls	r3, r1, #13
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0b03      	lsrs	r3, r0, #12
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x6a>
 80001a6:	030b      	lsls	r3, r1, #12
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0ac3      	lsrs	r3, r0, #11
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x76>
 80001b2:	02cb      	lsls	r3, r1, #11
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	0a83      	lsrs	r3, r0, #10
 80001ba:	428b      	cmp	r3, r1
 80001bc:	d301      	bcc.n	80001c2 <__udivsi3+0x82>
 80001be:	028b      	lsls	r3, r1, #10
 80001c0:	1ac0      	subs	r0, r0, r3
 80001c2:	4152      	adcs	r2, r2
 80001c4:	0a43      	lsrs	r3, r0, #9
 80001c6:	428b      	cmp	r3, r1
 80001c8:	d301      	bcc.n	80001ce <__udivsi3+0x8e>
 80001ca:	024b      	lsls	r3, r1, #9
 80001cc:	1ac0      	subs	r0, r0, r3
 80001ce:	4152      	adcs	r2, r2
 80001d0:	0a03      	lsrs	r3, r0, #8
 80001d2:	428b      	cmp	r3, r1
 80001d4:	d301      	bcc.n	80001da <__udivsi3+0x9a>
 80001d6:	020b      	lsls	r3, r1, #8
 80001d8:	1ac0      	subs	r0, r0, r3
 80001da:	4152      	adcs	r2, r2
 80001dc:	d2cd      	bcs.n	800017a <__udivsi3+0x3a>
 80001de:	09c3      	lsrs	r3, r0, #7
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xa8>
 80001e4:	01cb      	lsls	r3, r1, #7
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0983      	lsrs	r3, r0, #6
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xb4>
 80001f0:	018b      	lsls	r3, r1, #6
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0943      	lsrs	r3, r0, #5
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xc0>
 80001fc:	014b      	lsls	r3, r1, #5
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0903      	lsrs	r3, r0, #4
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xcc>
 8000208:	010b      	lsls	r3, r1, #4
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	08c3      	lsrs	r3, r0, #3
 8000210:	428b      	cmp	r3, r1
 8000212:	d301      	bcc.n	8000218 <__udivsi3+0xd8>
 8000214:	00cb      	lsls	r3, r1, #3
 8000216:	1ac0      	subs	r0, r0, r3
 8000218:	4152      	adcs	r2, r2
 800021a:	0883      	lsrs	r3, r0, #2
 800021c:	428b      	cmp	r3, r1
 800021e:	d301      	bcc.n	8000224 <__udivsi3+0xe4>
 8000220:	008b      	lsls	r3, r1, #2
 8000222:	1ac0      	subs	r0, r0, r3
 8000224:	4152      	adcs	r2, r2
 8000226:	0843      	lsrs	r3, r0, #1
 8000228:	428b      	cmp	r3, r1
 800022a:	d301      	bcc.n	8000230 <__udivsi3+0xf0>
 800022c:	004b      	lsls	r3, r1, #1
 800022e:	1ac0      	subs	r0, r0, r3
 8000230:	4152      	adcs	r2, r2
 8000232:	1a41      	subs	r1, r0, r1
 8000234:	d200      	bcs.n	8000238 <__udivsi3+0xf8>
 8000236:	4601      	mov	r1, r0
 8000238:	4152      	adcs	r2, r2
 800023a:	4610      	mov	r0, r2
 800023c:	4770      	bx	lr
 800023e:	e7ff      	b.n	8000240 <__udivsi3+0x100>
 8000240:	b501      	push	{r0, lr}
 8000242:	2000      	movs	r0, #0
 8000244:	f000 f8f0 	bl	8000428 <__aeabi_idiv0>
 8000248:	bd02      	pop	{r1, pc}
 800024a:	46c0      	nop			; (mov r8, r8)

0800024c <__aeabi_uidivmod>:
 800024c:	2900      	cmp	r1, #0
 800024e:	d0f7      	beq.n	8000240 <__udivsi3+0x100>
 8000250:	e776      	b.n	8000140 <__udivsi3>
 8000252:	4770      	bx	lr

08000254 <__divsi3>:
 8000254:	4603      	mov	r3, r0
 8000256:	430b      	orrs	r3, r1
 8000258:	d47f      	bmi.n	800035a <__divsi3+0x106>
 800025a:	2200      	movs	r2, #0
 800025c:	0843      	lsrs	r3, r0, #1
 800025e:	428b      	cmp	r3, r1
 8000260:	d374      	bcc.n	800034c <__divsi3+0xf8>
 8000262:	0903      	lsrs	r3, r0, #4
 8000264:	428b      	cmp	r3, r1
 8000266:	d35f      	bcc.n	8000328 <__divsi3+0xd4>
 8000268:	0a03      	lsrs	r3, r0, #8
 800026a:	428b      	cmp	r3, r1
 800026c:	d344      	bcc.n	80002f8 <__divsi3+0xa4>
 800026e:	0b03      	lsrs	r3, r0, #12
 8000270:	428b      	cmp	r3, r1
 8000272:	d328      	bcc.n	80002c6 <__divsi3+0x72>
 8000274:	0c03      	lsrs	r3, r0, #16
 8000276:	428b      	cmp	r3, r1
 8000278:	d30d      	bcc.n	8000296 <__divsi3+0x42>
 800027a:	22ff      	movs	r2, #255	; 0xff
 800027c:	0209      	lsls	r1, r1, #8
 800027e:	ba12      	rev	r2, r2
 8000280:	0c03      	lsrs	r3, r0, #16
 8000282:	428b      	cmp	r3, r1
 8000284:	d302      	bcc.n	800028c <__divsi3+0x38>
 8000286:	1212      	asrs	r2, r2, #8
 8000288:	0209      	lsls	r1, r1, #8
 800028a:	d065      	beq.n	8000358 <__divsi3+0x104>
 800028c:	0b03      	lsrs	r3, r0, #12
 800028e:	428b      	cmp	r3, r1
 8000290:	d319      	bcc.n	80002c6 <__divsi3+0x72>
 8000292:	e000      	b.n	8000296 <__divsi3+0x42>
 8000294:	0a09      	lsrs	r1, r1, #8
 8000296:	0bc3      	lsrs	r3, r0, #15
 8000298:	428b      	cmp	r3, r1
 800029a:	d301      	bcc.n	80002a0 <__divsi3+0x4c>
 800029c:	03cb      	lsls	r3, r1, #15
 800029e:	1ac0      	subs	r0, r0, r3
 80002a0:	4152      	adcs	r2, r2
 80002a2:	0b83      	lsrs	r3, r0, #14
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d301      	bcc.n	80002ac <__divsi3+0x58>
 80002a8:	038b      	lsls	r3, r1, #14
 80002aa:	1ac0      	subs	r0, r0, r3
 80002ac:	4152      	adcs	r2, r2
 80002ae:	0b43      	lsrs	r3, r0, #13
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0x64>
 80002b4:	034b      	lsls	r3, r1, #13
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	4152      	adcs	r2, r2
 80002ba:	0b03      	lsrs	r3, r0, #12
 80002bc:	428b      	cmp	r3, r1
 80002be:	d301      	bcc.n	80002c4 <__divsi3+0x70>
 80002c0:	030b      	lsls	r3, r1, #12
 80002c2:	1ac0      	subs	r0, r0, r3
 80002c4:	4152      	adcs	r2, r2
 80002c6:	0ac3      	lsrs	r3, r0, #11
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d301      	bcc.n	80002d0 <__divsi3+0x7c>
 80002cc:	02cb      	lsls	r3, r1, #11
 80002ce:	1ac0      	subs	r0, r0, r3
 80002d0:	4152      	adcs	r2, r2
 80002d2:	0a83      	lsrs	r3, r0, #10
 80002d4:	428b      	cmp	r3, r1
 80002d6:	d301      	bcc.n	80002dc <__divsi3+0x88>
 80002d8:	028b      	lsls	r3, r1, #10
 80002da:	1ac0      	subs	r0, r0, r3
 80002dc:	4152      	adcs	r2, r2
 80002de:	0a43      	lsrs	r3, r0, #9
 80002e0:	428b      	cmp	r3, r1
 80002e2:	d301      	bcc.n	80002e8 <__divsi3+0x94>
 80002e4:	024b      	lsls	r3, r1, #9
 80002e6:	1ac0      	subs	r0, r0, r3
 80002e8:	4152      	adcs	r2, r2
 80002ea:	0a03      	lsrs	r3, r0, #8
 80002ec:	428b      	cmp	r3, r1
 80002ee:	d301      	bcc.n	80002f4 <__divsi3+0xa0>
 80002f0:	020b      	lsls	r3, r1, #8
 80002f2:	1ac0      	subs	r0, r0, r3
 80002f4:	4152      	adcs	r2, r2
 80002f6:	d2cd      	bcs.n	8000294 <__divsi3+0x40>
 80002f8:	09c3      	lsrs	r3, r0, #7
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d301      	bcc.n	8000302 <__divsi3+0xae>
 80002fe:	01cb      	lsls	r3, r1, #7
 8000300:	1ac0      	subs	r0, r0, r3
 8000302:	4152      	adcs	r2, r2
 8000304:	0983      	lsrs	r3, r0, #6
 8000306:	428b      	cmp	r3, r1
 8000308:	d301      	bcc.n	800030e <__divsi3+0xba>
 800030a:	018b      	lsls	r3, r1, #6
 800030c:	1ac0      	subs	r0, r0, r3
 800030e:	4152      	adcs	r2, r2
 8000310:	0943      	lsrs	r3, r0, #5
 8000312:	428b      	cmp	r3, r1
 8000314:	d301      	bcc.n	800031a <__divsi3+0xc6>
 8000316:	014b      	lsls	r3, r1, #5
 8000318:	1ac0      	subs	r0, r0, r3
 800031a:	4152      	adcs	r2, r2
 800031c:	0903      	lsrs	r3, r0, #4
 800031e:	428b      	cmp	r3, r1
 8000320:	d301      	bcc.n	8000326 <__divsi3+0xd2>
 8000322:	010b      	lsls	r3, r1, #4
 8000324:	1ac0      	subs	r0, r0, r3
 8000326:	4152      	adcs	r2, r2
 8000328:	08c3      	lsrs	r3, r0, #3
 800032a:	428b      	cmp	r3, r1
 800032c:	d301      	bcc.n	8000332 <__divsi3+0xde>
 800032e:	00cb      	lsls	r3, r1, #3
 8000330:	1ac0      	subs	r0, r0, r3
 8000332:	4152      	adcs	r2, r2
 8000334:	0883      	lsrs	r3, r0, #2
 8000336:	428b      	cmp	r3, r1
 8000338:	d301      	bcc.n	800033e <__divsi3+0xea>
 800033a:	008b      	lsls	r3, r1, #2
 800033c:	1ac0      	subs	r0, r0, r3
 800033e:	4152      	adcs	r2, r2
 8000340:	0843      	lsrs	r3, r0, #1
 8000342:	428b      	cmp	r3, r1
 8000344:	d301      	bcc.n	800034a <__divsi3+0xf6>
 8000346:	004b      	lsls	r3, r1, #1
 8000348:	1ac0      	subs	r0, r0, r3
 800034a:	4152      	adcs	r2, r2
 800034c:	1a41      	subs	r1, r0, r1
 800034e:	d200      	bcs.n	8000352 <__divsi3+0xfe>
 8000350:	4601      	mov	r1, r0
 8000352:	4152      	adcs	r2, r2
 8000354:	4610      	mov	r0, r2
 8000356:	4770      	bx	lr
 8000358:	e05d      	b.n	8000416 <__divsi3+0x1c2>
 800035a:	0fca      	lsrs	r2, r1, #31
 800035c:	d000      	beq.n	8000360 <__divsi3+0x10c>
 800035e:	4249      	negs	r1, r1
 8000360:	1003      	asrs	r3, r0, #32
 8000362:	d300      	bcc.n	8000366 <__divsi3+0x112>
 8000364:	4240      	negs	r0, r0
 8000366:	4053      	eors	r3, r2
 8000368:	2200      	movs	r2, #0
 800036a:	469c      	mov	ip, r3
 800036c:	0903      	lsrs	r3, r0, #4
 800036e:	428b      	cmp	r3, r1
 8000370:	d32d      	bcc.n	80003ce <__divsi3+0x17a>
 8000372:	0a03      	lsrs	r3, r0, #8
 8000374:	428b      	cmp	r3, r1
 8000376:	d312      	bcc.n	800039e <__divsi3+0x14a>
 8000378:	22fc      	movs	r2, #252	; 0xfc
 800037a:	0189      	lsls	r1, r1, #6
 800037c:	ba12      	rev	r2, r2
 800037e:	0a03      	lsrs	r3, r0, #8
 8000380:	428b      	cmp	r3, r1
 8000382:	d30c      	bcc.n	800039e <__divsi3+0x14a>
 8000384:	0189      	lsls	r1, r1, #6
 8000386:	1192      	asrs	r2, r2, #6
 8000388:	428b      	cmp	r3, r1
 800038a:	d308      	bcc.n	800039e <__divsi3+0x14a>
 800038c:	0189      	lsls	r1, r1, #6
 800038e:	1192      	asrs	r2, r2, #6
 8000390:	428b      	cmp	r3, r1
 8000392:	d304      	bcc.n	800039e <__divsi3+0x14a>
 8000394:	0189      	lsls	r1, r1, #6
 8000396:	d03a      	beq.n	800040e <__divsi3+0x1ba>
 8000398:	1192      	asrs	r2, r2, #6
 800039a:	e000      	b.n	800039e <__divsi3+0x14a>
 800039c:	0989      	lsrs	r1, r1, #6
 800039e:	09c3      	lsrs	r3, r0, #7
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d301      	bcc.n	80003a8 <__divsi3+0x154>
 80003a4:	01cb      	lsls	r3, r1, #7
 80003a6:	1ac0      	subs	r0, r0, r3
 80003a8:	4152      	adcs	r2, r2
 80003aa:	0983      	lsrs	r3, r0, #6
 80003ac:	428b      	cmp	r3, r1
 80003ae:	d301      	bcc.n	80003b4 <__divsi3+0x160>
 80003b0:	018b      	lsls	r3, r1, #6
 80003b2:	1ac0      	subs	r0, r0, r3
 80003b4:	4152      	adcs	r2, r2
 80003b6:	0943      	lsrs	r3, r0, #5
 80003b8:	428b      	cmp	r3, r1
 80003ba:	d301      	bcc.n	80003c0 <__divsi3+0x16c>
 80003bc:	014b      	lsls	r3, r1, #5
 80003be:	1ac0      	subs	r0, r0, r3
 80003c0:	4152      	adcs	r2, r2
 80003c2:	0903      	lsrs	r3, r0, #4
 80003c4:	428b      	cmp	r3, r1
 80003c6:	d301      	bcc.n	80003cc <__divsi3+0x178>
 80003c8:	010b      	lsls	r3, r1, #4
 80003ca:	1ac0      	subs	r0, r0, r3
 80003cc:	4152      	adcs	r2, r2
 80003ce:	08c3      	lsrs	r3, r0, #3
 80003d0:	428b      	cmp	r3, r1
 80003d2:	d301      	bcc.n	80003d8 <__divsi3+0x184>
 80003d4:	00cb      	lsls	r3, r1, #3
 80003d6:	1ac0      	subs	r0, r0, r3
 80003d8:	4152      	adcs	r2, r2
 80003da:	0883      	lsrs	r3, r0, #2
 80003dc:	428b      	cmp	r3, r1
 80003de:	d301      	bcc.n	80003e4 <__divsi3+0x190>
 80003e0:	008b      	lsls	r3, r1, #2
 80003e2:	1ac0      	subs	r0, r0, r3
 80003e4:	4152      	adcs	r2, r2
 80003e6:	d2d9      	bcs.n	800039c <__divsi3+0x148>
 80003e8:	0843      	lsrs	r3, r0, #1
 80003ea:	428b      	cmp	r3, r1
 80003ec:	d301      	bcc.n	80003f2 <__divsi3+0x19e>
 80003ee:	004b      	lsls	r3, r1, #1
 80003f0:	1ac0      	subs	r0, r0, r3
 80003f2:	4152      	adcs	r2, r2
 80003f4:	1a41      	subs	r1, r0, r1
 80003f6:	d200      	bcs.n	80003fa <__divsi3+0x1a6>
 80003f8:	4601      	mov	r1, r0
 80003fa:	4663      	mov	r3, ip
 80003fc:	4152      	adcs	r2, r2
 80003fe:	105b      	asrs	r3, r3, #1
 8000400:	4610      	mov	r0, r2
 8000402:	d301      	bcc.n	8000408 <__divsi3+0x1b4>
 8000404:	4240      	negs	r0, r0
 8000406:	2b00      	cmp	r3, #0
 8000408:	d500      	bpl.n	800040c <__divsi3+0x1b8>
 800040a:	4249      	negs	r1, r1
 800040c:	4770      	bx	lr
 800040e:	4663      	mov	r3, ip
 8000410:	105b      	asrs	r3, r3, #1
 8000412:	d300      	bcc.n	8000416 <__divsi3+0x1c2>
 8000414:	4240      	negs	r0, r0
 8000416:	b501      	push	{r0, lr}
 8000418:	2000      	movs	r0, #0
 800041a:	f000 f805 	bl	8000428 <__aeabi_idiv0>
 800041e:	bd02      	pop	{r1, pc}

08000420 <__aeabi_idivmod>:
 8000420:	2900      	cmp	r1, #0
 8000422:	d0f8      	beq.n	8000416 <__divsi3+0x1c2>
 8000424:	e716      	b.n	8000254 <__divsi3>
 8000426:	4770      	bx	lr

08000428 <__aeabi_idiv0>:
 8000428:	4770      	bx	lr
 800042a:	46c0      	nop			; (mov r8, r8)

0800042c <__aeabi_cdrcmple>:
 800042c:	4684      	mov	ip, r0
 800042e:	0010      	movs	r0, r2
 8000430:	4662      	mov	r2, ip
 8000432:	468c      	mov	ip, r1
 8000434:	0019      	movs	r1, r3
 8000436:	4663      	mov	r3, ip
 8000438:	e000      	b.n	800043c <__aeabi_cdcmpeq>
 800043a:	46c0      	nop			; (mov r8, r8)

0800043c <__aeabi_cdcmpeq>:
 800043c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800043e:	f001 fc01 	bl	8001c44 <__ledf2>
 8000442:	2800      	cmp	r0, #0
 8000444:	d401      	bmi.n	800044a <__aeabi_cdcmpeq+0xe>
 8000446:	2100      	movs	r1, #0
 8000448:	42c8      	cmn	r0, r1
 800044a:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

0800044c <__aeabi_dcmpeq>:
 800044c:	b510      	push	{r4, lr}
 800044e:	f001 fb51 	bl	8001af4 <__eqdf2>
 8000452:	4240      	negs	r0, r0
 8000454:	3001      	adds	r0, #1
 8000456:	bd10      	pop	{r4, pc}

08000458 <__aeabi_dcmplt>:
 8000458:	b510      	push	{r4, lr}
 800045a:	f001 fbf3 	bl	8001c44 <__ledf2>
 800045e:	2800      	cmp	r0, #0
 8000460:	db01      	blt.n	8000466 <__aeabi_dcmplt+0xe>
 8000462:	2000      	movs	r0, #0
 8000464:	bd10      	pop	{r4, pc}
 8000466:	2001      	movs	r0, #1
 8000468:	bd10      	pop	{r4, pc}
 800046a:	46c0      	nop			; (mov r8, r8)

0800046c <__aeabi_dcmple>:
 800046c:	b510      	push	{r4, lr}
 800046e:	f001 fbe9 	bl	8001c44 <__ledf2>
 8000472:	2800      	cmp	r0, #0
 8000474:	dd01      	ble.n	800047a <__aeabi_dcmple+0xe>
 8000476:	2000      	movs	r0, #0
 8000478:	bd10      	pop	{r4, pc}
 800047a:	2001      	movs	r0, #1
 800047c:	bd10      	pop	{r4, pc}
 800047e:	46c0      	nop			; (mov r8, r8)

08000480 <__aeabi_dcmpgt>:
 8000480:	b510      	push	{r4, lr}
 8000482:	f001 fb79 	bl	8001b78 <__gedf2>
 8000486:	2800      	cmp	r0, #0
 8000488:	dc01      	bgt.n	800048e <__aeabi_dcmpgt+0xe>
 800048a:	2000      	movs	r0, #0
 800048c:	bd10      	pop	{r4, pc}
 800048e:	2001      	movs	r0, #1
 8000490:	bd10      	pop	{r4, pc}
 8000492:	46c0      	nop			; (mov r8, r8)

08000494 <__aeabi_dcmpge>:
 8000494:	b510      	push	{r4, lr}
 8000496:	f001 fb6f 	bl	8001b78 <__gedf2>
 800049a:	2800      	cmp	r0, #0
 800049c:	da01      	bge.n	80004a2 <__aeabi_dcmpge+0xe>
 800049e:	2000      	movs	r0, #0
 80004a0:	bd10      	pop	{r4, pc}
 80004a2:	2001      	movs	r0, #1
 80004a4:	bd10      	pop	{r4, pc}
 80004a6:	46c0      	nop			; (mov r8, r8)

080004a8 <__aeabi_cfrcmple>:
 80004a8:	4684      	mov	ip, r0
 80004aa:	0008      	movs	r0, r1
 80004ac:	4661      	mov	r1, ip
 80004ae:	e7ff      	b.n	80004b0 <__aeabi_cfcmpeq>

080004b0 <__aeabi_cfcmpeq>:
 80004b0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80004b2:	f000 fb41 	bl	8000b38 <__lesf2>
 80004b6:	2800      	cmp	r0, #0
 80004b8:	d401      	bmi.n	80004be <__aeabi_cfcmpeq+0xe>
 80004ba:	2100      	movs	r1, #0
 80004bc:	42c8      	cmn	r0, r1
 80004be:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

080004c0 <__aeabi_fcmpeq>:
 80004c0:	b510      	push	{r4, lr}
 80004c2:	f000 facd 	bl	8000a60 <__eqsf2>
 80004c6:	4240      	negs	r0, r0
 80004c8:	3001      	adds	r0, #1
 80004ca:	bd10      	pop	{r4, pc}

080004cc <__aeabi_fcmplt>:
 80004cc:	b510      	push	{r4, lr}
 80004ce:	f000 fb33 	bl	8000b38 <__lesf2>
 80004d2:	2800      	cmp	r0, #0
 80004d4:	db01      	blt.n	80004da <__aeabi_fcmplt+0xe>
 80004d6:	2000      	movs	r0, #0
 80004d8:	bd10      	pop	{r4, pc}
 80004da:	2001      	movs	r0, #1
 80004dc:	bd10      	pop	{r4, pc}
 80004de:	46c0      	nop			; (mov r8, r8)

080004e0 <__aeabi_fcmple>:
 80004e0:	b510      	push	{r4, lr}
 80004e2:	f000 fb29 	bl	8000b38 <__lesf2>
 80004e6:	2800      	cmp	r0, #0
 80004e8:	dd01      	ble.n	80004ee <__aeabi_fcmple+0xe>
 80004ea:	2000      	movs	r0, #0
 80004ec:	bd10      	pop	{r4, pc}
 80004ee:	2001      	movs	r0, #1
 80004f0:	bd10      	pop	{r4, pc}
 80004f2:	46c0      	nop			; (mov r8, r8)

080004f4 <__aeabi_fcmpgt>:
 80004f4:	b510      	push	{r4, lr}
 80004f6:	f000 fad9 	bl	8000aac <__gesf2>
 80004fa:	2800      	cmp	r0, #0
 80004fc:	dc01      	bgt.n	8000502 <__aeabi_fcmpgt+0xe>
 80004fe:	2000      	movs	r0, #0
 8000500:	bd10      	pop	{r4, pc}
 8000502:	2001      	movs	r0, #1
 8000504:	bd10      	pop	{r4, pc}
 8000506:	46c0      	nop			; (mov r8, r8)

08000508 <__aeabi_fcmpge>:
 8000508:	b510      	push	{r4, lr}
 800050a:	f000 facf 	bl	8000aac <__gesf2>
 800050e:	2800      	cmp	r0, #0
 8000510:	da01      	bge.n	8000516 <__aeabi_fcmpge+0xe>
 8000512:	2000      	movs	r0, #0
 8000514:	bd10      	pop	{r4, pc}
 8000516:	2001      	movs	r0, #1
 8000518:	bd10      	pop	{r4, pc}
 800051a:	46c0      	nop			; (mov r8, r8)

0800051c <__aeabi_uldivmod>:
 800051c:	2b00      	cmp	r3, #0
 800051e:	d111      	bne.n	8000544 <__aeabi_uldivmod+0x28>
 8000520:	2a00      	cmp	r2, #0
 8000522:	d10f      	bne.n	8000544 <__aeabi_uldivmod+0x28>
 8000524:	2900      	cmp	r1, #0
 8000526:	d100      	bne.n	800052a <__aeabi_uldivmod+0xe>
 8000528:	2800      	cmp	r0, #0
 800052a:	d002      	beq.n	8000532 <__aeabi_uldivmod+0x16>
 800052c:	2100      	movs	r1, #0
 800052e:	43c9      	mvns	r1, r1
 8000530:	0008      	movs	r0, r1
 8000532:	b407      	push	{r0, r1, r2}
 8000534:	4802      	ldr	r0, [pc, #8]	; (8000540 <__aeabi_uldivmod+0x24>)
 8000536:	a102      	add	r1, pc, #8	; (adr r1, 8000540 <__aeabi_uldivmod+0x24>)
 8000538:	1840      	adds	r0, r0, r1
 800053a:	9002      	str	r0, [sp, #8]
 800053c:	bd03      	pop	{r0, r1, pc}
 800053e:	46c0      	nop			; (mov r8, r8)
 8000540:	fffffee9 	.word	0xfffffee9
 8000544:	b403      	push	{r0, r1}
 8000546:	4668      	mov	r0, sp
 8000548:	b501      	push	{r0, lr}
 800054a:	9802      	ldr	r0, [sp, #8]
 800054c:	f000 f8a4 	bl	8000698 <__udivmoddi4>
 8000550:	9b01      	ldr	r3, [sp, #4]
 8000552:	469e      	mov	lr, r3
 8000554:	b002      	add	sp, #8
 8000556:	bc0c      	pop	{r2, r3}
 8000558:	4770      	bx	lr
 800055a:	46c0      	nop			; (mov r8, r8)

0800055c <__aeabi_lmul>:
 800055c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800055e:	46ce      	mov	lr, r9
 8000560:	4647      	mov	r7, r8
 8000562:	b580      	push	{r7, lr}
 8000564:	0007      	movs	r7, r0
 8000566:	4699      	mov	r9, r3
 8000568:	0c3b      	lsrs	r3, r7, #16
 800056a:	469c      	mov	ip, r3
 800056c:	0413      	lsls	r3, r2, #16
 800056e:	0c1b      	lsrs	r3, r3, #16
 8000570:	001d      	movs	r5, r3
 8000572:	000e      	movs	r6, r1
 8000574:	4661      	mov	r1, ip
 8000576:	0400      	lsls	r0, r0, #16
 8000578:	0c14      	lsrs	r4, r2, #16
 800057a:	0c00      	lsrs	r0, r0, #16
 800057c:	4345      	muls	r5, r0
 800057e:	434b      	muls	r3, r1
 8000580:	4360      	muls	r0, r4
 8000582:	4361      	muls	r1, r4
 8000584:	18c0      	adds	r0, r0, r3
 8000586:	0c2c      	lsrs	r4, r5, #16
 8000588:	1820      	adds	r0, r4, r0
 800058a:	468c      	mov	ip, r1
 800058c:	4283      	cmp	r3, r0
 800058e:	d903      	bls.n	8000598 <__aeabi_lmul+0x3c>
 8000590:	2380      	movs	r3, #128	; 0x80
 8000592:	025b      	lsls	r3, r3, #9
 8000594:	4698      	mov	r8, r3
 8000596:	44c4      	add	ip, r8
 8000598:	4649      	mov	r1, r9
 800059a:	4379      	muls	r1, r7
 800059c:	4372      	muls	r2, r6
 800059e:	0c03      	lsrs	r3, r0, #16
 80005a0:	4463      	add	r3, ip
 80005a2:	042d      	lsls	r5, r5, #16
 80005a4:	0c2d      	lsrs	r5, r5, #16
 80005a6:	18c9      	adds	r1, r1, r3
 80005a8:	0400      	lsls	r0, r0, #16
 80005aa:	1940      	adds	r0, r0, r5
 80005ac:	1889      	adds	r1, r1, r2
 80005ae:	bcc0      	pop	{r6, r7}
 80005b0:	46b9      	mov	r9, r7
 80005b2:	46b0      	mov	r8, r6
 80005b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80005b6:	46c0      	nop			; (mov r8, r8)

080005b8 <__aeabi_d2uiz>:
 80005b8:	b570      	push	{r4, r5, r6, lr}
 80005ba:	2200      	movs	r2, #0
 80005bc:	4b0c      	ldr	r3, [pc, #48]	; (80005f0 <__aeabi_d2uiz+0x38>)
 80005be:	0004      	movs	r4, r0
 80005c0:	000d      	movs	r5, r1
 80005c2:	f7ff ff67 	bl	8000494 <__aeabi_dcmpge>
 80005c6:	2800      	cmp	r0, #0
 80005c8:	d104      	bne.n	80005d4 <__aeabi_d2uiz+0x1c>
 80005ca:	0020      	movs	r0, r4
 80005cc:	0029      	movs	r1, r5
 80005ce:	f002 f9b9 	bl	8002944 <__aeabi_d2iz>
 80005d2:	bd70      	pop	{r4, r5, r6, pc}
 80005d4:	4b06      	ldr	r3, [pc, #24]	; (80005f0 <__aeabi_d2uiz+0x38>)
 80005d6:	2200      	movs	r2, #0
 80005d8:	0020      	movs	r0, r4
 80005da:	0029      	movs	r1, r5
 80005dc:	f001 fe02 	bl	80021e4 <__aeabi_dsub>
 80005e0:	f002 f9b0 	bl	8002944 <__aeabi_d2iz>
 80005e4:	2380      	movs	r3, #128	; 0x80
 80005e6:	061b      	lsls	r3, r3, #24
 80005e8:	469c      	mov	ip, r3
 80005ea:	4460      	add	r0, ip
 80005ec:	e7f1      	b.n	80005d2 <__aeabi_d2uiz+0x1a>
 80005ee:	46c0      	nop			; (mov r8, r8)
 80005f0:	41e00000 	.word	0x41e00000

080005f4 <__aeabi_d2lz>:
 80005f4:	b570      	push	{r4, r5, r6, lr}
 80005f6:	0005      	movs	r5, r0
 80005f8:	000c      	movs	r4, r1
 80005fa:	2200      	movs	r2, #0
 80005fc:	2300      	movs	r3, #0
 80005fe:	0028      	movs	r0, r5
 8000600:	0021      	movs	r1, r4
 8000602:	f7ff ff29 	bl	8000458 <__aeabi_dcmplt>
 8000606:	2800      	cmp	r0, #0
 8000608:	d108      	bne.n	800061c <__aeabi_d2lz+0x28>
 800060a:	0028      	movs	r0, r5
 800060c:	0021      	movs	r1, r4
 800060e:	f000 f80f 	bl	8000630 <__aeabi_d2ulz>
 8000612:	0002      	movs	r2, r0
 8000614:	000b      	movs	r3, r1
 8000616:	0010      	movs	r0, r2
 8000618:	0019      	movs	r1, r3
 800061a:	bd70      	pop	{r4, r5, r6, pc}
 800061c:	2380      	movs	r3, #128	; 0x80
 800061e:	061b      	lsls	r3, r3, #24
 8000620:	18e1      	adds	r1, r4, r3
 8000622:	0028      	movs	r0, r5
 8000624:	f000 f804 	bl	8000630 <__aeabi_d2ulz>
 8000628:	2300      	movs	r3, #0
 800062a:	4242      	negs	r2, r0
 800062c:	418b      	sbcs	r3, r1
 800062e:	e7f2      	b.n	8000616 <__aeabi_d2lz+0x22>

08000630 <__aeabi_d2ulz>:
 8000630:	b570      	push	{r4, r5, r6, lr}
 8000632:	2200      	movs	r2, #0
 8000634:	4b0b      	ldr	r3, [pc, #44]	; (8000664 <__aeabi_d2ulz+0x34>)
 8000636:	000d      	movs	r5, r1
 8000638:	0004      	movs	r4, r0
 800063a:	f001 fb67 	bl	8001d0c <__aeabi_dmul>
 800063e:	f7ff ffbb 	bl	80005b8 <__aeabi_d2uiz>
 8000642:	0006      	movs	r6, r0
 8000644:	f002 f9e4 	bl	8002a10 <__aeabi_ui2d>
 8000648:	2200      	movs	r2, #0
 800064a:	4b07      	ldr	r3, [pc, #28]	; (8000668 <__aeabi_d2ulz+0x38>)
 800064c:	f001 fb5e 	bl	8001d0c <__aeabi_dmul>
 8000650:	0002      	movs	r2, r0
 8000652:	000b      	movs	r3, r1
 8000654:	0020      	movs	r0, r4
 8000656:	0029      	movs	r1, r5
 8000658:	f001 fdc4 	bl	80021e4 <__aeabi_dsub>
 800065c:	f7ff ffac 	bl	80005b8 <__aeabi_d2uiz>
 8000660:	0031      	movs	r1, r6
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	3df00000 	.word	0x3df00000
 8000668:	41f00000 	.word	0x41f00000

0800066c <__aeabi_l2d>:
 800066c:	b570      	push	{r4, r5, r6, lr}
 800066e:	0006      	movs	r6, r0
 8000670:	0008      	movs	r0, r1
 8000672:	f002 f99d 	bl	80029b0 <__aeabi_i2d>
 8000676:	2200      	movs	r2, #0
 8000678:	4b06      	ldr	r3, [pc, #24]	; (8000694 <__aeabi_l2d+0x28>)
 800067a:	f001 fb47 	bl	8001d0c <__aeabi_dmul>
 800067e:	000d      	movs	r5, r1
 8000680:	0004      	movs	r4, r0
 8000682:	0030      	movs	r0, r6
 8000684:	f002 f9c4 	bl	8002a10 <__aeabi_ui2d>
 8000688:	002b      	movs	r3, r5
 800068a:	0022      	movs	r2, r4
 800068c:	f000 fc00 	bl	8000e90 <__aeabi_dadd>
 8000690:	bd70      	pop	{r4, r5, r6, pc}
 8000692:	46c0      	nop			; (mov r8, r8)
 8000694:	41f00000 	.word	0x41f00000

08000698 <__udivmoddi4>:
 8000698:	b5f0      	push	{r4, r5, r6, r7, lr}
 800069a:	4657      	mov	r7, sl
 800069c:	464e      	mov	r6, r9
 800069e:	4645      	mov	r5, r8
 80006a0:	46de      	mov	lr, fp
 80006a2:	b5e0      	push	{r5, r6, r7, lr}
 80006a4:	0004      	movs	r4, r0
 80006a6:	000d      	movs	r5, r1
 80006a8:	4692      	mov	sl, r2
 80006aa:	4699      	mov	r9, r3
 80006ac:	b083      	sub	sp, #12
 80006ae:	428b      	cmp	r3, r1
 80006b0:	d830      	bhi.n	8000714 <__udivmoddi4+0x7c>
 80006b2:	d02d      	beq.n	8000710 <__udivmoddi4+0x78>
 80006b4:	4649      	mov	r1, r9
 80006b6:	4650      	mov	r0, sl
 80006b8:	f002 fabe 	bl	8002c38 <__clzdi2>
 80006bc:	0029      	movs	r1, r5
 80006be:	0006      	movs	r6, r0
 80006c0:	0020      	movs	r0, r4
 80006c2:	f002 fab9 	bl	8002c38 <__clzdi2>
 80006c6:	1a33      	subs	r3, r6, r0
 80006c8:	4698      	mov	r8, r3
 80006ca:	3b20      	subs	r3, #32
 80006cc:	469b      	mov	fp, r3
 80006ce:	d433      	bmi.n	8000738 <__udivmoddi4+0xa0>
 80006d0:	465a      	mov	r2, fp
 80006d2:	4653      	mov	r3, sl
 80006d4:	4093      	lsls	r3, r2
 80006d6:	4642      	mov	r2, r8
 80006d8:	001f      	movs	r7, r3
 80006da:	4653      	mov	r3, sl
 80006dc:	4093      	lsls	r3, r2
 80006de:	001e      	movs	r6, r3
 80006e0:	42af      	cmp	r7, r5
 80006e2:	d83a      	bhi.n	800075a <__udivmoddi4+0xc2>
 80006e4:	42af      	cmp	r7, r5
 80006e6:	d100      	bne.n	80006ea <__udivmoddi4+0x52>
 80006e8:	e078      	b.n	80007dc <__udivmoddi4+0x144>
 80006ea:	465b      	mov	r3, fp
 80006ec:	1ba4      	subs	r4, r4, r6
 80006ee:	41bd      	sbcs	r5, r7
 80006f0:	2b00      	cmp	r3, #0
 80006f2:	da00      	bge.n	80006f6 <__udivmoddi4+0x5e>
 80006f4:	e075      	b.n	80007e2 <__udivmoddi4+0x14a>
 80006f6:	2200      	movs	r2, #0
 80006f8:	2300      	movs	r3, #0
 80006fa:	9200      	str	r2, [sp, #0]
 80006fc:	9301      	str	r3, [sp, #4]
 80006fe:	2301      	movs	r3, #1
 8000700:	465a      	mov	r2, fp
 8000702:	4093      	lsls	r3, r2
 8000704:	9301      	str	r3, [sp, #4]
 8000706:	2301      	movs	r3, #1
 8000708:	4642      	mov	r2, r8
 800070a:	4093      	lsls	r3, r2
 800070c:	9300      	str	r3, [sp, #0]
 800070e:	e028      	b.n	8000762 <__udivmoddi4+0xca>
 8000710:	4282      	cmp	r2, r0
 8000712:	d9cf      	bls.n	80006b4 <__udivmoddi4+0x1c>
 8000714:	2200      	movs	r2, #0
 8000716:	2300      	movs	r3, #0
 8000718:	9200      	str	r2, [sp, #0]
 800071a:	9301      	str	r3, [sp, #4]
 800071c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800071e:	2b00      	cmp	r3, #0
 8000720:	d001      	beq.n	8000726 <__udivmoddi4+0x8e>
 8000722:	601c      	str	r4, [r3, #0]
 8000724:	605d      	str	r5, [r3, #4]
 8000726:	9800      	ldr	r0, [sp, #0]
 8000728:	9901      	ldr	r1, [sp, #4]
 800072a:	b003      	add	sp, #12
 800072c:	bcf0      	pop	{r4, r5, r6, r7}
 800072e:	46bb      	mov	fp, r7
 8000730:	46b2      	mov	sl, r6
 8000732:	46a9      	mov	r9, r5
 8000734:	46a0      	mov	r8, r4
 8000736:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000738:	4642      	mov	r2, r8
 800073a:	2320      	movs	r3, #32
 800073c:	1a9b      	subs	r3, r3, r2
 800073e:	4652      	mov	r2, sl
 8000740:	40da      	lsrs	r2, r3
 8000742:	4641      	mov	r1, r8
 8000744:	0013      	movs	r3, r2
 8000746:	464a      	mov	r2, r9
 8000748:	408a      	lsls	r2, r1
 800074a:	0017      	movs	r7, r2
 800074c:	4642      	mov	r2, r8
 800074e:	431f      	orrs	r7, r3
 8000750:	4653      	mov	r3, sl
 8000752:	4093      	lsls	r3, r2
 8000754:	001e      	movs	r6, r3
 8000756:	42af      	cmp	r7, r5
 8000758:	d9c4      	bls.n	80006e4 <__udivmoddi4+0x4c>
 800075a:	2200      	movs	r2, #0
 800075c:	2300      	movs	r3, #0
 800075e:	9200      	str	r2, [sp, #0]
 8000760:	9301      	str	r3, [sp, #4]
 8000762:	4643      	mov	r3, r8
 8000764:	2b00      	cmp	r3, #0
 8000766:	d0d9      	beq.n	800071c <__udivmoddi4+0x84>
 8000768:	07fb      	lsls	r3, r7, #31
 800076a:	0872      	lsrs	r2, r6, #1
 800076c:	431a      	orrs	r2, r3
 800076e:	4646      	mov	r6, r8
 8000770:	087b      	lsrs	r3, r7, #1
 8000772:	e00e      	b.n	8000792 <__udivmoddi4+0xfa>
 8000774:	42ab      	cmp	r3, r5
 8000776:	d101      	bne.n	800077c <__udivmoddi4+0xe4>
 8000778:	42a2      	cmp	r2, r4
 800077a:	d80c      	bhi.n	8000796 <__udivmoddi4+0xfe>
 800077c:	1aa4      	subs	r4, r4, r2
 800077e:	419d      	sbcs	r5, r3
 8000780:	2001      	movs	r0, #1
 8000782:	1924      	adds	r4, r4, r4
 8000784:	416d      	adcs	r5, r5
 8000786:	2100      	movs	r1, #0
 8000788:	3e01      	subs	r6, #1
 800078a:	1824      	adds	r4, r4, r0
 800078c:	414d      	adcs	r5, r1
 800078e:	2e00      	cmp	r6, #0
 8000790:	d006      	beq.n	80007a0 <__udivmoddi4+0x108>
 8000792:	42ab      	cmp	r3, r5
 8000794:	d9ee      	bls.n	8000774 <__udivmoddi4+0xdc>
 8000796:	3e01      	subs	r6, #1
 8000798:	1924      	adds	r4, r4, r4
 800079a:	416d      	adcs	r5, r5
 800079c:	2e00      	cmp	r6, #0
 800079e:	d1f8      	bne.n	8000792 <__udivmoddi4+0xfa>
 80007a0:	9800      	ldr	r0, [sp, #0]
 80007a2:	9901      	ldr	r1, [sp, #4]
 80007a4:	465b      	mov	r3, fp
 80007a6:	1900      	adds	r0, r0, r4
 80007a8:	4169      	adcs	r1, r5
 80007aa:	2b00      	cmp	r3, #0
 80007ac:	db24      	blt.n	80007f8 <__udivmoddi4+0x160>
 80007ae:	002b      	movs	r3, r5
 80007b0:	465a      	mov	r2, fp
 80007b2:	4644      	mov	r4, r8
 80007b4:	40d3      	lsrs	r3, r2
 80007b6:	002a      	movs	r2, r5
 80007b8:	40e2      	lsrs	r2, r4
 80007ba:	001c      	movs	r4, r3
 80007bc:	465b      	mov	r3, fp
 80007be:	0015      	movs	r5, r2
 80007c0:	2b00      	cmp	r3, #0
 80007c2:	db2a      	blt.n	800081a <__udivmoddi4+0x182>
 80007c4:	0026      	movs	r6, r4
 80007c6:	409e      	lsls	r6, r3
 80007c8:	0033      	movs	r3, r6
 80007ca:	0026      	movs	r6, r4
 80007cc:	4647      	mov	r7, r8
 80007ce:	40be      	lsls	r6, r7
 80007d0:	0032      	movs	r2, r6
 80007d2:	1a80      	subs	r0, r0, r2
 80007d4:	4199      	sbcs	r1, r3
 80007d6:	9000      	str	r0, [sp, #0]
 80007d8:	9101      	str	r1, [sp, #4]
 80007da:	e79f      	b.n	800071c <__udivmoddi4+0x84>
 80007dc:	42a3      	cmp	r3, r4
 80007de:	d8bc      	bhi.n	800075a <__udivmoddi4+0xc2>
 80007e0:	e783      	b.n	80006ea <__udivmoddi4+0x52>
 80007e2:	4642      	mov	r2, r8
 80007e4:	2320      	movs	r3, #32
 80007e6:	2100      	movs	r1, #0
 80007e8:	1a9b      	subs	r3, r3, r2
 80007ea:	2200      	movs	r2, #0
 80007ec:	9100      	str	r1, [sp, #0]
 80007ee:	9201      	str	r2, [sp, #4]
 80007f0:	2201      	movs	r2, #1
 80007f2:	40da      	lsrs	r2, r3
 80007f4:	9201      	str	r2, [sp, #4]
 80007f6:	e786      	b.n	8000706 <__udivmoddi4+0x6e>
 80007f8:	4642      	mov	r2, r8
 80007fa:	2320      	movs	r3, #32
 80007fc:	1a9b      	subs	r3, r3, r2
 80007fe:	002a      	movs	r2, r5
 8000800:	4646      	mov	r6, r8
 8000802:	409a      	lsls	r2, r3
 8000804:	0023      	movs	r3, r4
 8000806:	40f3      	lsrs	r3, r6
 8000808:	4644      	mov	r4, r8
 800080a:	4313      	orrs	r3, r2
 800080c:	002a      	movs	r2, r5
 800080e:	40e2      	lsrs	r2, r4
 8000810:	001c      	movs	r4, r3
 8000812:	465b      	mov	r3, fp
 8000814:	0015      	movs	r5, r2
 8000816:	2b00      	cmp	r3, #0
 8000818:	dad4      	bge.n	80007c4 <__udivmoddi4+0x12c>
 800081a:	4642      	mov	r2, r8
 800081c:	002f      	movs	r7, r5
 800081e:	2320      	movs	r3, #32
 8000820:	0026      	movs	r6, r4
 8000822:	4097      	lsls	r7, r2
 8000824:	1a9b      	subs	r3, r3, r2
 8000826:	40de      	lsrs	r6, r3
 8000828:	003b      	movs	r3, r7
 800082a:	4333      	orrs	r3, r6
 800082c:	e7cd      	b.n	80007ca <__udivmoddi4+0x132>
 800082e:	46c0      	nop			; (mov r8, r8)

08000830 <__aeabi_fdiv>:
 8000830:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000832:	464f      	mov	r7, r9
 8000834:	4646      	mov	r6, r8
 8000836:	46d6      	mov	lr, sl
 8000838:	0245      	lsls	r5, r0, #9
 800083a:	b5c0      	push	{r6, r7, lr}
 800083c:	0047      	lsls	r7, r0, #1
 800083e:	1c0c      	adds	r4, r1, #0
 8000840:	0a6d      	lsrs	r5, r5, #9
 8000842:	0e3f      	lsrs	r7, r7, #24
 8000844:	0fc6      	lsrs	r6, r0, #31
 8000846:	2f00      	cmp	r7, #0
 8000848:	d100      	bne.n	800084c <__aeabi_fdiv+0x1c>
 800084a:	e070      	b.n	800092e <__aeabi_fdiv+0xfe>
 800084c:	2fff      	cmp	r7, #255	; 0xff
 800084e:	d100      	bne.n	8000852 <__aeabi_fdiv+0x22>
 8000850:	e075      	b.n	800093e <__aeabi_fdiv+0x10e>
 8000852:	00eb      	lsls	r3, r5, #3
 8000854:	2580      	movs	r5, #128	; 0x80
 8000856:	04ed      	lsls	r5, r5, #19
 8000858:	431d      	orrs	r5, r3
 800085a:	2300      	movs	r3, #0
 800085c:	4699      	mov	r9, r3
 800085e:	469a      	mov	sl, r3
 8000860:	3f7f      	subs	r7, #127	; 0x7f
 8000862:	0260      	lsls	r0, r4, #9
 8000864:	0a43      	lsrs	r3, r0, #9
 8000866:	4698      	mov	r8, r3
 8000868:	0063      	lsls	r3, r4, #1
 800086a:	0e1b      	lsrs	r3, r3, #24
 800086c:	0fe4      	lsrs	r4, r4, #31
 800086e:	2b00      	cmp	r3, #0
 8000870:	d04e      	beq.n	8000910 <__aeabi_fdiv+0xe0>
 8000872:	2bff      	cmp	r3, #255	; 0xff
 8000874:	d046      	beq.n	8000904 <__aeabi_fdiv+0xd4>
 8000876:	4642      	mov	r2, r8
 8000878:	00d0      	lsls	r0, r2, #3
 800087a:	2280      	movs	r2, #128	; 0x80
 800087c:	04d2      	lsls	r2, r2, #19
 800087e:	4302      	orrs	r2, r0
 8000880:	4690      	mov	r8, r2
 8000882:	2200      	movs	r2, #0
 8000884:	3b7f      	subs	r3, #127	; 0x7f
 8000886:	0031      	movs	r1, r6
 8000888:	1aff      	subs	r7, r7, r3
 800088a:	464b      	mov	r3, r9
 800088c:	4061      	eors	r1, r4
 800088e:	b2c9      	uxtb	r1, r1
 8000890:	4313      	orrs	r3, r2
 8000892:	2b0f      	cmp	r3, #15
 8000894:	d900      	bls.n	8000898 <__aeabi_fdiv+0x68>
 8000896:	e0b5      	b.n	8000a04 <__aeabi_fdiv+0x1d4>
 8000898:	486e      	ldr	r0, [pc, #440]	; (8000a54 <__aeabi_fdiv+0x224>)
 800089a:	009b      	lsls	r3, r3, #2
 800089c:	58c3      	ldr	r3, [r0, r3]
 800089e:	469f      	mov	pc, r3
 80008a0:	2300      	movs	r3, #0
 80008a2:	4698      	mov	r8, r3
 80008a4:	0026      	movs	r6, r4
 80008a6:	4645      	mov	r5, r8
 80008a8:	4692      	mov	sl, r2
 80008aa:	4653      	mov	r3, sl
 80008ac:	2b02      	cmp	r3, #2
 80008ae:	d100      	bne.n	80008b2 <__aeabi_fdiv+0x82>
 80008b0:	e089      	b.n	80009c6 <__aeabi_fdiv+0x196>
 80008b2:	2b03      	cmp	r3, #3
 80008b4:	d100      	bne.n	80008b8 <__aeabi_fdiv+0x88>
 80008b6:	e09e      	b.n	80009f6 <__aeabi_fdiv+0x1c6>
 80008b8:	2b01      	cmp	r3, #1
 80008ba:	d018      	beq.n	80008ee <__aeabi_fdiv+0xbe>
 80008bc:	003b      	movs	r3, r7
 80008be:	337f      	adds	r3, #127	; 0x7f
 80008c0:	2b00      	cmp	r3, #0
 80008c2:	dd69      	ble.n	8000998 <__aeabi_fdiv+0x168>
 80008c4:	076a      	lsls	r2, r5, #29
 80008c6:	d004      	beq.n	80008d2 <__aeabi_fdiv+0xa2>
 80008c8:	220f      	movs	r2, #15
 80008ca:	402a      	ands	r2, r5
 80008cc:	2a04      	cmp	r2, #4
 80008ce:	d000      	beq.n	80008d2 <__aeabi_fdiv+0xa2>
 80008d0:	3504      	adds	r5, #4
 80008d2:	012a      	lsls	r2, r5, #4
 80008d4:	d503      	bpl.n	80008de <__aeabi_fdiv+0xae>
 80008d6:	4b60      	ldr	r3, [pc, #384]	; (8000a58 <__aeabi_fdiv+0x228>)
 80008d8:	401d      	ands	r5, r3
 80008da:	003b      	movs	r3, r7
 80008dc:	3380      	adds	r3, #128	; 0x80
 80008de:	2bfe      	cmp	r3, #254	; 0xfe
 80008e0:	dd00      	ble.n	80008e4 <__aeabi_fdiv+0xb4>
 80008e2:	e070      	b.n	80009c6 <__aeabi_fdiv+0x196>
 80008e4:	01ad      	lsls	r5, r5, #6
 80008e6:	0a6d      	lsrs	r5, r5, #9
 80008e8:	b2d8      	uxtb	r0, r3
 80008ea:	e002      	b.n	80008f2 <__aeabi_fdiv+0xc2>
 80008ec:	000e      	movs	r6, r1
 80008ee:	2000      	movs	r0, #0
 80008f0:	2500      	movs	r5, #0
 80008f2:	05c0      	lsls	r0, r0, #23
 80008f4:	4328      	orrs	r0, r5
 80008f6:	07f6      	lsls	r6, r6, #31
 80008f8:	4330      	orrs	r0, r6
 80008fa:	bce0      	pop	{r5, r6, r7}
 80008fc:	46ba      	mov	sl, r7
 80008fe:	46b1      	mov	r9, r6
 8000900:	46a8      	mov	r8, r5
 8000902:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000904:	4643      	mov	r3, r8
 8000906:	2b00      	cmp	r3, #0
 8000908:	d13f      	bne.n	800098a <__aeabi_fdiv+0x15a>
 800090a:	2202      	movs	r2, #2
 800090c:	3fff      	subs	r7, #255	; 0xff
 800090e:	e003      	b.n	8000918 <__aeabi_fdiv+0xe8>
 8000910:	4643      	mov	r3, r8
 8000912:	2b00      	cmp	r3, #0
 8000914:	d12d      	bne.n	8000972 <__aeabi_fdiv+0x142>
 8000916:	2201      	movs	r2, #1
 8000918:	0031      	movs	r1, r6
 800091a:	464b      	mov	r3, r9
 800091c:	4061      	eors	r1, r4
 800091e:	b2c9      	uxtb	r1, r1
 8000920:	4313      	orrs	r3, r2
 8000922:	2b0f      	cmp	r3, #15
 8000924:	d834      	bhi.n	8000990 <__aeabi_fdiv+0x160>
 8000926:	484d      	ldr	r0, [pc, #308]	; (8000a5c <__aeabi_fdiv+0x22c>)
 8000928:	009b      	lsls	r3, r3, #2
 800092a:	58c3      	ldr	r3, [r0, r3]
 800092c:	469f      	mov	pc, r3
 800092e:	2d00      	cmp	r5, #0
 8000930:	d113      	bne.n	800095a <__aeabi_fdiv+0x12a>
 8000932:	2304      	movs	r3, #4
 8000934:	4699      	mov	r9, r3
 8000936:	3b03      	subs	r3, #3
 8000938:	2700      	movs	r7, #0
 800093a:	469a      	mov	sl, r3
 800093c:	e791      	b.n	8000862 <__aeabi_fdiv+0x32>
 800093e:	2d00      	cmp	r5, #0
 8000940:	d105      	bne.n	800094e <__aeabi_fdiv+0x11e>
 8000942:	2308      	movs	r3, #8
 8000944:	4699      	mov	r9, r3
 8000946:	3b06      	subs	r3, #6
 8000948:	27ff      	movs	r7, #255	; 0xff
 800094a:	469a      	mov	sl, r3
 800094c:	e789      	b.n	8000862 <__aeabi_fdiv+0x32>
 800094e:	230c      	movs	r3, #12
 8000950:	4699      	mov	r9, r3
 8000952:	3b09      	subs	r3, #9
 8000954:	27ff      	movs	r7, #255	; 0xff
 8000956:	469a      	mov	sl, r3
 8000958:	e783      	b.n	8000862 <__aeabi_fdiv+0x32>
 800095a:	0028      	movs	r0, r5
 800095c:	f002 f94e 	bl	8002bfc <__clzsi2>
 8000960:	2776      	movs	r7, #118	; 0x76
 8000962:	1f43      	subs	r3, r0, #5
 8000964:	409d      	lsls	r5, r3
 8000966:	2300      	movs	r3, #0
 8000968:	427f      	negs	r7, r7
 800096a:	4699      	mov	r9, r3
 800096c:	469a      	mov	sl, r3
 800096e:	1a3f      	subs	r7, r7, r0
 8000970:	e777      	b.n	8000862 <__aeabi_fdiv+0x32>
 8000972:	4640      	mov	r0, r8
 8000974:	f002 f942 	bl	8002bfc <__clzsi2>
 8000978:	4642      	mov	r2, r8
 800097a:	1f43      	subs	r3, r0, #5
 800097c:	409a      	lsls	r2, r3
 800097e:	2376      	movs	r3, #118	; 0x76
 8000980:	425b      	negs	r3, r3
 8000982:	4690      	mov	r8, r2
 8000984:	1a1b      	subs	r3, r3, r0
 8000986:	2200      	movs	r2, #0
 8000988:	e77d      	b.n	8000886 <__aeabi_fdiv+0x56>
 800098a:	23ff      	movs	r3, #255	; 0xff
 800098c:	2203      	movs	r2, #3
 800098e:	e77a      	b.n	8000886 <__aeabi_fdiv+0x56>
 8000990:	000e      	movs	r6, r1
 8000992:	20ff      	movs	r0, #255	; 0xff
 8000994:	2500      	movs	r5, #0
 8000996:	e7ac      	b.n	80008f2 <__aeabi_fdiv+0xc2>
 8000998:	2001      	movs	r0, #1
 800099a:	1ac0      	subs	r0, r0, r3
 800099c:	281b      	cmp	r0, #27
 800099e:	dca6      	bgt.n	80008ee <__aeabi_fdiv+0xbe>
 80009a0:	379e      	adds	r7, #158	; 0x9e
 80009a2:	002a      	movs	r2, r5
 80009a4:	40bd      	lsls	r5, r7
 80009a6:	40c2      	lsrs	r2, r0
 80009a8:	1e6b      	subs	r3, r5, #1
 80009aa:	419d      	sbcs	r5, r3
 80009ac:	4315      	orrs	r5, r2
 80009ae:	076b      	lsls	r3, r5, #29
 80009b0:	d004      	beq.n	80009bc <__aeabi_fdiv+0x18c>
 80009b2:	230f      	movs	r3, #15
 80009b4:	402b      	ands	r3, r5
 80009b6:	2b04      	cmp	r3, #4
 80009b8:	d000      	beq.n	80009bc <__aeabi_fdiv+0x18c>
 80009ba:	3504      	adds	r5, #4
 80009bc:	016b      	lsls	r3, r5, #5
 80009be:	d544      	bpl.n	8000a4a <__aeabi_fdiv+0x21a>
 80009c0:	2001      	movs	r0, #1
 80009c2:	2500      	movs	r5, #0
 80009c4:	e795      	b.n	80008f2 <__aeabi_fdiv+0xc2>
 80009c6:	20ff      	movs	r0, #255	; 0xff
 80009c8:	2500      	movs	r5, #0
 80009ca:	e792      	b.n	80008f2 <__aeabi_fdiv+0xc2>
 80009cc:	2580      	movs	r5, #128	; 0x80
 80009ce:	2600      	movs	r6, #0
 80009d0:	20ff      	movs	r0, #255	; 0xff
 80009d2:	03ed      	lsls	r5, r5, #15
 80009d4:	e78d      	b.n	80008f2 <__aeabi_fdiv+0xc2>
 80009d6:	2300      	movs	r3, #0
 80009d8:	4698      	mov	r8, r3
 80009da:	2080      	movs	r0, #128	; 0x80
 80009dc:	03c0      	lsls	r0, r0, #15
 80009de:	4205      	tst	r5, r0
 80009e0:	d009      	beq.n	80009f6 <__aeabi_fdiv+0x1c6>
 80009e2:	4643      	mov	r3, r8
 80009e4:	4203      	tst	r3, r0
 80009e6:	d106      	bne.n	80009f6 <__aeabi_fdiv+0x1c6>
 80009e8:	4645      	mov	r5, r8
 80009ea:	4305      	orrs	r5, r0
 80009ec:	026d      	lsls	r5, r5, #9
 80009ee:	0026      	movs	r6, r4
 80009f0:	20ff      	movs	r0, #255	; 0xff
 80009f2:	0a6d      	lsrs	r5, r5, #9
 80009f4:	e77d      	b.n	80008f2 <__aeabi_fdiv+0xc2>
 80009f6:	2080      	movs	r0, #128	; 0x80
 80009f8:	03c0      	lsls	r0, r0, #15
 80009fa:	4305      	orrs	r5, r0
 80009fc:	026d      	lsls	r5, r5, #9
 80009fe:	20ff      	movs	r0, #255	; 0xff
 8000a00:	0a6d      	lsrs	r5, r5, #9
 8000a02:	e776      	b.n	80008f2 <__aeabi_fdiv+0xc2>
 8000a04:	4642      	mov	r2, r8
 8000a06:	016b      	lsls	r3, r5, #5
 8000a08:	0150      	lsls	r0, r2, #5
 8000a0a:	4283      	cmp	r3, r0
 8000a0c:	d219      	bcs.n	8000a42 <__aeabi_fdiv+0x212>
 8000a0e:	221b      	movs	r2, #27
 8000a10:	2500      	movs	r5, #0
 8000a12:	3f01      	subs	r7, #1
 8000a14:	2601      	movs	r6, #1
 8000a16:	001c      	movs	r4, r3
 8000a18:	006d      	lsls	r5, r5, #1
 8000a1a:	005b      	lsls	r3, r3, #1
 8000a1c:	2c00      	cmp	r4, #0
 8000a1e:	db01      	blt.n	8000a24 <__aeabi_fdiv+0x1f4>
 8000a20:	4298      	cmp	r0, r3
 8000a22:	d801      	bhi.n	8000a28 <__aeabi_fdiv+0x1f8>
 8000a24:	1a1b      	subs	r3, r3, r0
 8000a26:	4335      	orrs	r5, r6
 8000a28:	3a01      	subs	r2, #1
 8000a2a:	2a00      	cmp	r2, #0
 8000a2c:	d1f3      	bne.n	8000a16 <__aeabi_fdiv+0x1e6>
 8000a2e:	1e5a      	subs	r2, r3, #1
 8000a30:	4193      	sbcs	r3, r2
 8000a32:	431d      	orrs	r5, r3
 8000a34:	003b      	movs	r3, r7
 8000a36:	337f      	adds	r3, #127	; 0x7f
 8000a38:	000e      	movs	r6, r1
 8000a3a:	2b00      	cmp	r3, #0
 8000a3c:	dd00      	ble.n	8000a40 <__aeabi_fdiv+0x210>
 8000a3e:	e741      	b.n	80008c4 <__aeabi_fdiv+0x94>
 8000a40:	e7aa      	b.n	8000998 <__aeabi_fdiv+0x168>
 8000a42:	221a      	movs	r2, #26
 8000a44:	2501      	movs	r5, #1
 8000a46:	1a1b      	subs	r3, r3, r0
 8000a48:	e7e4      	b.n	8000a14 <__aeabi_fdiv+0x1e4>
 8000a4a:	01ad      	lsls	r5, r5, #6
 8000a4c:	2000      	movs	r0, #0
 8000a4e:	0a6d      	lsrs	r5, r5, #9
 8000a50:	e74f      	b.n	80008f2 <__aeabi_fdiv+0xc2>
 8000a52:	46c0      	nop			; (mov r8, r8)
 8000a54:	0800cb70 	.word	0x0800cb70
 8000a58:	f7ffffff 	.word	0xf7ffffff
 8000a5c:	0800cbb0 	.word	0x0800cbb0

08000a60 <__eqsf2>:
 8000a60:	b570      	push	{r4, r5, r6, lr}
 8000a62:	0042      	lsls	r2, r0, #1
 8000a64:	0245      	lsls	r5, r0, #9
 8000a66:	024e      	lsls	r6, r1, #9
 8000a68:	004c      	lsls	r4, r1, #1
 8000a6a:	0fc3      	lsrs	r3, r0, #31
 8000a6c:	0a6d      	lsrs	r5, r5, #9
 8000a6e:	2001      	movs	r0, #1
 8000a70:	0e12      	lsrs	r2, r2, #24
 8000a72:	0a76      	lsrs	r6, r6, #9
 8000a74:	0e24      	lsrs	r4, r4, #24
 8000a76:	0fc9      	lsrs	r1, r1, #31
 8000a78:	2aff      	cmp	r2, #255	; 0xff
 8000a7a:	d006      	beq.n	8000a8a <__eqsf2+0x2a>
 8000a7c:	2cff      	cmp	r4, #255	; 0xff
 8000a7e:	d003      	beq.n	8000a88 <__eqsf2+0x28>
 8000a80:	42a2      	cmp	r2, r4
 8000a82:	d101      	bne.n	8000a88 <__eqsf2+0x28>
 8000a84:	42b5      	cmp	r5, r6
 8000a86:	d006      	beq.n	8000a96 <__eqsf2+0x36>
 8000a88:	bd70      	pop	{r4, r5, r6, pc}
 8000a8a:	2d00      	cmp	r5, #0
 8000a8c:	d1fc      	bne.n	8000a88 <__eqsf2+0x28>
 8000a8e:	2cff      	cmp	r4, #255	; 0xff
 8000a90:	d1fa      	bne.n	8000a88 <__eqsf2+0x28>
 8000a92:	2e00      	cmp	r6, #0
 8000a94:	d1f8      	bne.n	8000a88 <__eqsf2+0x28>
 8000a96:	428b      	cmp	r3, r1
 8000a98:	d006      	beq.n	8000aa8 <__eqsf2+0x48>
 8000a9a:	2001      	movs	r0, #1
 8000a9c:	2a00      	cmp	r2, #0
 8000a9e:	d1f3      	bne.n	8000a88 <__eqsf2+0x28>
 8000aa0:	0028      	movs	r0, r5
 8000aa2:	1e43      	subs	r3, r0, #1
 8000aa4:	4198      	sbcs	r0, r3
 8000aa6:	e7ef      	b.n	8000a88 <__eqsf2+0x28>
 8000aa8:	2000      	movs	r0, #0
 8000aaa:	e7ed      	b.n	8000a88 <__eqsf2+0x28>

08000aac <__gesf2>:
 8000aac:	b570      	push	{r4, r5, r6, lr}
 8000aae:	0042      	lsls	r2, r0, #1
 8000ab0:	0245      	lsls	r5, r0, #9
 8000ab2:	024e      	lsls	r6, r1, #9
 8000ab4:	004c      	lsls	r4, r1, #1
 8000ab6:	0fc3      	lsrs	r3, r0, #31
 8000ab8:	0a6d      	lsrs	r5, r5, #9
 8000aba:	0e12      	lsrs	r2, r2, #24
 8000abc:	0a76      	lsrs	r6, r6, #9
 8000abe:	0e24      	lsrs	r4, r4, #24
 8000ac0:	0fc8      	lsrs	r0, r1, #31
 8000ac2:	2aff      	cmp	r2, #255	; 0xff
 8000ac4:	d01b      	beq.n	8000afe <__gesf2+0x52>
 8000ac6:	2cff      	cmp	r4, #255	; 0xff
 8000ac8:	d00e      	beq.n	8000ae8 <__gesf2+0x3c>
 8000aca:	2a00      	cmp	r2, #0
 8000acc:	d11b      	bne.n	8000b06 <__gesf2+0x5a>
 8000ace:	2c00      	cmp	r4, #0
 8000ad0:	d101      	bne.n	8000ad6 <__gesf2+0x2a>
 8000ad2:	2e00      	cmp	r6, #0
 8000ad4:	d01c      	beq.n	8000b10 <__gesf2+0x64>
 8000ad6:	2d00      	cmp	r5, #0
 8000ad8:	d00c      	beq.n	8000af4 <__gesf2+0x48>
 8000ada:	4283      	cmp	r3, r0
 8000adc:	d01c      	beq.n	8000b18 <__gesf2+0x6c>
 8000ade:	2102      	movs	r1, #2
 8000ae0:	1e58      	subs	r0, r3, #1
 8000ae2:	4008      	ands	r0, r1
 8000ae4:	3801      	subs	r0, #1
 8000ae6:	bd70      	pop	{r4, r5, r6, pc}
 8000ae8:	2e00      	cmp	r6, #0
 8000aea:	d122      	bne.n	8000b32 <__gesf2+0x86>
 8000aec:	2a00      	cmp	r2, #0
 8000aee:	d1f4      	bne.n	8000ada <__gesf2+0x2e>
 8000af0:	2d00      	cmp	r5, #0
 8000af2:	d1f2      	bne.n	8000ada <__gesf2+0x2e>
 8000af4:	2800      	cmp	r0, #0
 8000af6:	d1f6      	bne.n	8000ae6 <__gesf2+0x3a>
 8000af8:	2001      	movs	r0, #1
 8000afa:	4240      	negs	r0, r0
 8000afc:	e7f3      	b.n	8000ae6 <__gesf2+0x3a>
 8000afe:	2d00      	cmp	r5, #0
 8000b00:	d117      	bne.n	8000b32 <__gesf2+0x86>
 8000b02:	2cff      	cmp	r4, #255	; 0xff
 8000b04:	d0f0      	beq.n	8000ae8 <__gesf2+0x3c>
 8000b06:	2c00      	cmp	r4, #0
 8000b08:	d1e7      	bne.n	8000ada <__gesf2+0x2e>
 8000b0a:	2e00      	cmp	r6, #0
 8000b0c:	d1e5      	bne.n	8000ada <__gesf2+0x2e>
 8000b0e:	e7e6      	b.n	8000ade <__gesf2+0x32>
 8000b10:	2000      	movs	r0, #0
 8000b12:	2d00      	cmp	r5, #0
 8000b14:	d0e7      	beq.n	8000ae6 <__gesf2+0x3a>
 8000b16:	e7e2      	b.n	8000ade <__gesf2+0x32>
 8000b18:	42a2      	cmp	r2, r4
 8000b1a:	dc05      	bgt.n	8000b28 <__gesf2+0x7c>
 8000b1c:	dbea      	blt.n	8000af4 <__gesf2+0x48>
 8000b1e:	42b5      	cmp	r5, r6
 8000b20:	d802      	bhi.n	8000b28 <__gesf2+0x7c>
 8000b22:	d3e7      	bcc.n	8000af4 <__gesf2+0x48>
 8000b24:	2000      	movs	r0, #0
 8000b26:	e7de      	b.n	8000ae6 <__gesf2+0x3a>
 8000b28:	4243      	negs	r3, r0
 8000b2a:	4158      	adcs	r0, r3
 8000b2c:	0040      	lsls	r0, r0, #1
 8000b2e:	3801      	subs	r0, #1
 8000b30:	e7d9      	b.n	8000ae6 <__gesf2+0x3a>
 8000b32:	2002      	movs	r0, #2
 8000b34:	4240      	negs	r0, r0
 8000b36:	e7d6      	b.n	8000ae6 <__gesf2+0x3a>

08000b38 <__lesf2>:
 8000b38:	b570      	push	{r4, r5, r6, lr}
 8000b3a:	0042      	lsls	r2, r0, #1
 8000b3c:	0245      	lsls	r5, r0, #9
 8000b3e:	024e      	lsls	r6, r1, #9
 8000b40:	004c      	lsls	r4, r1, #1
 8000b42:	0fc3      	lsrs	r3, r0, #31
 8000b44:	0a6d      	lsrs	r5, r5, #9
 8000b46:	0e12      	lsrs	r2, r2, #24
 8000b48:	0a76      	lsrs	r6, r6, #9
 8000b4a:	0e24      	lsrs	r4, r4, #24
 8000b4c:	0fc8      	lsrs	r0, r1, #31
 8000b4e:	2aff      	cmp	r2, #255	; 0xff
 8000b50:	d00b      	beq.n	8000b6a <__lesf2+0x32>
 8000b52:	2cff      	cmp	r4, #255	; 0xff
 8000b54:	d00d      	beq.n	8000b72 <__lesf2+0x3a>
 8000b56:	2a00      	cmp	r2, #0
 8000b58:	d11f      	bne.n	8000b9a <__lesf2+0x62>
 8000b5a:	2c00      	cmp	r4, #0
 8000b5c:	d116      	bne.n	8000b8c <__lesf2+0x54>
 8000b5e:	2e00      	cmp	r6, #0
 8000b60:	d114      	bne.n	8000b8c <__lesf2+0x54>
 8000b62:	2000      	movs	r0, #0
 8000b64:	2d00      	cmp	r5, #0
 8000b66:	d010      	beq.n	8000b8a <__lesf2+0x52>
 8000b68:	e009      	b.n	8000b7e <__lesf2+0x46>
 8000b6a:	2d00      	cmp	r5, #0
 8000b6c:	d10c      	bne.n	8000b88 <__lesf2+0x50>
 8000b6e:	2cff      	cmp	r4, #255	; 0xff
 8000b70:	d113      	bne.n	8000b9a <__lesf2+0x62>
 8000b72:	2e00      	cmp	r6, #0
 8000b74:	d108      	bne.n	8000b88 <__lesf2+0x50>
 8000b76:	2a00      	cmp	r2, #0
 8000b78:	d008      	beq.n	8000b8c <__lesf2+0x54>
 8000b7a:	4283      	cmp	r3, r0
 8000b7c:	d012      	beq.n	8000ba4 <__lesf2+0x6c>
 8000b7e:	2102      	movs	r1, #2
 8000b80:	1e58      	subs	r0, r3, #1
 8000b82:	4008      	ands	r0, r1
 8000b84:	3801      	subs	r0, #1
 8000b86:	e000      	b.n	8000b8a <__lesf2+0x52>
 8000b88:	2002      	movs	r0, #2
 8000b8a:	bd70      	pop	{r4, r5, r6, pc}
 8000b8c:	2d00      	cmp	r5, #0
 8000b8e:	d1f4      	bne.n	8000b7a <__lesf2+0x42>
 8000b90:	2800      	cmp	r0, #0
 8000b92:	d1fa      	bne.n	8000b8a <__lesf2+0x52>
 8000b94:	2001      	movs	r0, #1
 8000b96:	4240      	negs	r0, r0
 8000b98:	e7f7      	b.n	8000b8a <__lesf2+0x52>
 8000b9a:	2c00      	cmp	r4, #0
 8000b9c:	d1ed      	bne.n	8000b7a <__lesf2+0x42>
 8000b9e:	2e00      	cmp	r6, #0
 8000ba0:	d1eb      	bne.n	8000b7a <__lesf2+0x42>
 8000ba2:	e7ec      	b.n	8000b7e <__lesf2+0x46>
 8000ba4:	42a2      	cmp	r2, r4
 8000ba6:	dc05      	bgt.n	8000bb4 <__lesf2+0x7c>
 8000ba8:	dbf2      	blt.n	8000b90 <__lesf2+0x58>
 8000baa:	42b5      	cmp	r5, r6
 8000bac:	d802      	bhi.n	8000bb4 <__lesf2+0x7c>
 8000bae:	d3ef      	bcc.n	8000b90 <__lesf2+0x58>
 8000bb0:	2000      	movs	r0, #0
 8000bb2:	e7ea      	b.n	8000b8a <__lesf2+0x52>
 8000bb4:	4243      	negs	r3, r0
 8000bb6:	4158      	adcs	r0, r3
 8000bb8:	0040      	lsls	r0, r0, #1
 8000bba:	3801      	subs	r0, #1
 8000bbc:	e7e5      	b.n	8000b8a <__lesf2+0x52>
 8000bbe:	46c0      	nop			; (mov r8, r8)

08000bc0 <__aeabi_fmul>:
 8000bc0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000bc2:	464f      	mov	r7, r9
 8000bc4:	4646      	mov	r6, r8
 8000bc6:	46d6      	mov	lr, sl
 8000bc8:	0244      	lsls	r4, r0, #9
 8000bca:	0045      	lsls	r5, r0, #1
 8000bcc:	b5c0      	push	{r6, r7, lr}
 8000bce:	0a64      	lsrs	r4, r4, #9
 8000bd0:	1c0f      	adds	r7, r1, #0
 8000bd2:	0e2d      	lsrs	r5, r5, #24
 8000bd4:	0fc6      	lsrs	r6, r0, #31
 8000bd6:	2d00      	cmp	r5, #0
 8000bd8:	d100      	bne.n	8000bdc <__aeabi_fmul+0x1c>
 8000bda:	e08d      	b.n	8000cf8 <__aeabi_fmul+0x138>
 8000bdc:	2dff      	cmp	r5, #255	; 0xff
 8000bde:	d100      	bne.n	8000be2 <__aeabi_fmul+0x22>
 8000be0:	e092      	b.n	8000d08 <__aeabi_fmul+0x148>
 8000be2:	2300      	movs	r3, #0
 8000be4:	2080      	movs	r0, #128	; 0x80
 8000be6:	4699      	mov	r9, r3
 8000be8:	469a      	mov	sl, r3
 8000bea:	00e4      	lsls	r4, r4, #3
 8000bec:	04c0      	lsls	r0, r0, #19
 8000bee:	4304      	orrs	r4, r0
 8000bf0:	3d7f      	subs	r5, #127	; 0x7f
 8000bf2:	0278      	lsls	r0, r7, #9
 8000bf4:	0a43      	lsrs	r3, r0, #9
 8000bf6:	4698      	mov	r8, r3
 8000bf8:	007b      	lsls	r3, r7, #1
 8000bfa:	0e1b      	lsrs	r3, r3, #24
 8000bfc:	0fff      	lsrs	r7, r7, #31
 8000bfe:	2b00      	cmp	r3, #0
 8000c00:	d100      	bne.n	8000c04 <__aeabi_fmul+0x44>
 8000c02:	e070      	b.n	8000ce6 <__aeabi_fmul+0x126>
 8000c04:	2bff      	cmp	r3, #255	; 0xff
 8000c06:	d100      	bne.n	8000c0a <__aeabi_fmul+0x4a>
 8000c08:	e086      	b.n	8000d18 <__aeabi_fmul+0x158>
 8000c0a:	4642      	mov	r2, r8
 8000c0c:	00d0      	lsls	r0, r2, #3
 8000c0e:	2280      	movs	r2, #128	; 0x80
 8000c10:	3b7f      	subs	r3, #127	; 0x7f
 8000c12:	18ed      	adds	r5, r5, r3
 8000c14:	2300      	movs	r3, #0
 8000c16:	04d2      	lsls	r2, r2, #19
 8000c18:	4302      	orrs	r2, r0
 8000c1a:	4690      	mov	r8, r2
 8000c1c:	469c      	mov	ip, r3
 8000c1e:	0031      	movs	r1, r6
 8000c20:	464b      	mov	r3, r9
 8000c22:	4079      	eors	r1, r7
 8000c24:	1c68      	adds	r0, r5, #1
 8000c26:	2b0f      	cmp	r3, #15
 8000c28:	d81c      	bhi.n	8000c64 <__aeabi_fmul+0xa4>
 8000c2a:	4a76      	ldr	r2, [pc, #472]	; (8000e04 <__aeabi_fmul+0x244>)
 8000c2c:	009b      	lsls	r3, r3, #2
 8000c2e:	58d3      	ldr	r3, [r2, r3]
 8000c30:	469f      	mov	pc, r3
 8000c32:	0039      	movs	r1, r7
 8000c34:	4644      	mov	r4, r8
 8000c36:	46e2      	mov	sl, ip
 8000c38:	4653      	mov	r3, sl
 8000c3a:	2b02      	cmp	r3, #2
 8000c3c:	d00f      	beq.n	8000c5e <__aeabi_fmul+0x9e>
 8000c3e:	2b03      	cmp	r3, #3
 8000c40:	d100      	bne.n	8000c44 <__aeabi_fmul+0x84>
 8000c42:	e0d7      	b.n	8000df4 <__aeabi_fmul+0x234>
 8000c44:	2b01      	cmp	r3, #1
 8000c46:	d137      	bne.n	8000cb8 <__aeabi_fmul+0xf8>
 8000c48:	2000      	movs	r0, #0
 8000c4a:	2400      	movs	r4, #0
 8000c4c:	05c0      	lsls	r0, r0, #23
 8000c4e:	4320      	orrs	r0, r4
 8000c50:	07c9      	lsls	r1, r1, #31
 8000c52:	4308      	orrs	r0, r1
 8000c54:	bce0      	pop	{r5, r6, r7}
 8000c56:	46ba      	mov	sl, r7
 8000c58:	46b1      	mov	r9, r6
 8000c5a:	46a8      	mov	r8, r5
 8000c5c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000c5e:	20ff      	movs	r0, #255	; 0xff
 8000c60:	2400      	movs	r4, #0
 8000c62:	e7f3      	b.n	8000c4c <__aeabi_fmul+0x8c>
 8000c64:	0c26      	lsrs	r6, r4, #16
 8000c66:	0424      	lsls	r4, r4, #16
 8000c68:	0c22      	lsrs	r2, r4, #16
 8000c6a:	4644      	mov	r4, r8
 8000c6c:	0424      	lsls	r4, r4, #16
 8000c6e:	0c24      	lsrs	r4, r4, #16
 8000c70:	4643      	mov	r3, r8
 8000c72:	0027      	movs	r7, r4
 8000c74:	0c1b      	lsrs	r3, r3, #16
 8000c76:	4357      	muls	r7, r2
 8000c78:	4374      	muls	r4, r6
 8000c7a:	435a      	muls	r2, r3
 8000c7c:	435e      	muls	r6, r3
 8000c7e:	1912      	adds	r2, r2, r4
 8000c80:	0c3b      	lsrs	r3, r7, #16
 8000c82:	189b      	adds	r3, r3, r2
 8000c84:	429c      	cmp	r4, r3
 8000c86:	d903      	bls.n	8000c90 <__aeabi_fmul+0xd0>
 8000c88:	2280      	movs	r2, #128	; 0x80
 8000c8a:	0252      	lsls	r2, r2, #9
 8000c8c:	4694      	mov	ip, r2
 8000c8e:	4466      	add	r6, ip
 8000c90:	043f      	lsls	r7, r7, #16
 8000c92:	041a      	lsls	r2, r3, #16
 8000c94:	0c3f      	lsrs	r7, r7, #16
 8000c96:	19d2      	adds	r2, r2, r7
 8000c98:	0194      	lsls	r4, r2, #6
 8000c9a:	1e67      	subs	r7, r4, #1
 8000c9c:	41bc      	sbcs	r4, r7
 8000c9e:	0c1b      	lsrs	r3, r3, #16
 8000ca0:	0e92      	lsrs	r2, r2, #26
 8000ca2:	199b      	adds	r3, r3, r6
 8000ca4:	4314      	orrs	r4, r2
 8000ca6:	019b      	lsls	r3, r3, #6
 8000ca8:	431c      	orrs	r4, r3
 8000caa:	011b      	lsls	r3, r3, #4
 8000cac:	d400      	bmi.n	8000cb0 <__aeabi_fmul+0xf0>
 8000cae:	e09b      	b.n	8000de8 <__aeabi_fmul+0x228>
 8000cb0:	2301      	movs	r3, #1
 8000cb2:	0862      	lsrs	r2, r4, #1
 8000cb4:	401c      	ands	r4, r3
 8000cb6:	4314      	orrs	r4, r2
 8000cb8:	0002      	movs	r2, r0
 8000cba:	327f      	adds	r2, #127	; 0x7f
 8000cbc:	2a00      	cmp	r2, #0
 8000cbe:	dd64      	ble.n	8000d8a <__aeabi_fmul+0x1ca>
 8000cc0:	0763      	lsls	r3, r4, #29
 8000cc2:	d004      	beq.n	8000cce <__aeabi_fmul+0x10e>
 8000cc4:	230f      	movs	r3, #15
 8000cc6:	4023      	ands	r3, r4
 8000cc8:	2b04      	cmp	r3, #4
 8000cca:	d000      	beq.n	8000cce <__aeabi_fmul+0x10e>
 8000ccc:	3404      	adds	r4, #4
 8000cce:	0123      	lsls	r3, r4, #4
 8000cd0:	d503      	bpl.n	8000cda <__aeabi_fmul+0x11a>
 8000cd2:	0002      	movs	r2, r0
 8000cd4:	4b4c      	ldr	r3, [pc, #304]	; (8000e08 <__aeabi_fmul+0x248>)
 8000cd6:	3280      	adds	r2, #128	; 0x80
 8000cd8:	401c      	ands	r4, r3
 8000cda:	2afe      	cmp	r2, #254	; 0xfe
 8000cdc:	dcbf      	bgt.n	8000c5e <__aeabi_fmul+0x9e>
 8000cde:	01a4      	lsls	r4, r4, #6
 8000ce0:	0a64      	lsrs	r4, r4, #9
 8000ce2:	b2d0      	uxtb	r0, r2
 8000ce4:	e7b2      	b.n	8000c4c <__aeabi_fmul+0x8c>
 8000ce6:	4643      	mov	r3, r8
 8000ce8:	2b00      	cmp	r3, #0
 8000cea:	d13d      	bne.n	8000d68 <__aeabi_fmul+0x1a8>
 8000cec:	464a      	mov	r2, r9
 8000cee:	3301      	adds	r3, #1
 8000cf0:	431a      	orrs	r2, r3
 8000cf2:	4691      	mov	r9, r2
 8000cf4:	469c      	mov	ip, r3
 8000cf6:	e792      	b.n	8000c1e <__aeabi_fmul+0x5e>
 8000cf8:	2c00      	cmp	r4, #0
 8000cfa:	d129      	bne.n	8000d50 <__aeabi_fmul+0x190>
 8000cfc:	2304      	movs	r3, #4
 8000cfe:	4699      	mov	r9, r3
 8000d00:	3b03      	subs	r3, #3
 8000d02:	2500      	movs	r5, #0
 8000d04:	469a      	mov	sl, r3
 8000d06:	e774      	b.n	8000bf2 <__aeabi_fmul+0x32>
 8000d08:	2c00      	cmp	r4, #0
 8000d0a:	d11b      	bne.n	8000d44 <__aeabi_fmul+0x184>
 8000d0c:	2308      	movs	r3, #8
 8000d0e:	4699      	mov	r9, r3
 8000d10:	3b06      	subs	r3, #6
 8000d12:	25ff      	movs	r5, #255	; 0xff
 8000d14:	469a      	mov	sl, r3
 8000d16:	e76c      	b.n	8000bf2 <__aeabi_fmul+0x32>
 8000d18:	4643      	mov	r3, r8
 8000d1a:	35ff      	adds	r5, #255	; 0xff
 8000d1c:	2b00      	cmp	r3, #0
 8000d1e:	d10b      	bne.n	8000d38 <__aeabi_fmul+0x178>
 8000d20:	2302      	movs	r3, #2
 8000d22:	464a      	mov	r2, r9
 8000d24:	431a      	orrs	r2, r3
 8000d26:	4691      	mov	r9, r2
 8000d28:	469c      	mov	ip, r3
 8000d2a:	e778      	b.n	8000c1e <__aeabi_fmul+0x5e>
 8000d2c:	4653      	mov	r3, sl
 8000d2e:	0031      	movs	r1, r6
 8000d30:	2b02      	cmp	r3, #2
 8000d32:	d000      	beq.n	8000d36 <__aeabi_fmul+0x176>
 8000d34:	e783      	b.n	8000c3e <__aeabi_fmul+0x7e>
 8000d36:	e792      	b.n	8000c5e <__aeabi_fmul+0x9e>
 8000d38:	2303      	movs	r3, #3
 8000d3a:	464a      	mov	r2, r9
 8000d3c:	431a      	orrs	r2, r3
 8000d3e:	4691      	mov	r9, r2
 8000d40:	469c      	mov	ip, r3
 8000d42:	e76c      	b.n	8000c1e <__aeabi_fmul+0x5e>
 8000d44:	230c      	movs	r3, #12
 8000d46:	4699      	mov	r9, r3
 8000d48:	3b09      	subs	r3, #9
 8000d4a:	25ff      	movs	r5, #255	; 0xff
 8000d4c:	469a      	mov	sl, r3
 8000d4e:	e750      	b.n	8000bf2 <__aeabi_fmul+0x32>
 8000d50:	0020      	movs	r0, r4
 8000d52:	f001 ff53 	bl	8002bfc <__clzsi2>
 8000d56:	2576      	movs	r5, #118	; 0x76
 8000d58:	1f43      	subs	r3, r0, #5
 8000d5a:	409c      	lsls	r4, r3
 8000d5c:	2300      	movs	r3, #0
 8000d5e:	426d      	negs	r5, r5
 8000d60:	4699      	mov	r9, r3
 8000d62:	469a      	mov	sl, r3
 8000d64:	1a2d      	subs	r5, r5, r0
 8000d66:	e744      	b.n	8000bf2 <__aeabi_fmul+0x32>
 8000d68:	4640      	mov	r0, r8
 8000d6a:	f001 ff47 	bl	8002bfc <__clzsi2>
 8000d6e:	4642      	mov	r2, r8
 8000d70:	1f43      	subs	r3, r0, #5
 8000d72:	409a      	lsls	r2, r3
 8000d74:	2300      	movs	r3, #0
 8000d76:	1a2d      	subs	r5, r5, r0
 8000d78:	4690      	mov	r8, r2
 8000d7a:	469c      	mov	ip, r3
 8000d7c:	3d76      	subs	r5, #118	; 0x76
 8000d7e:	e74e      	b.n	8000c1e <__aeabi_fmul+0x5e>
 8000d80:	2480      	movs	r4, #128	; 0x80
 8000d82:	2100      	movs	r1, #0
 8000d84:	20ff      	movs	r0, #255	; 0xff
 8000d86:	03e4      	lsls	r4, r4, #15
 8000d88:	e760      	b.n	8000c4c <__aeabi_fmul+0x8c>
 8000d8a:	2301      	movs	r3, #1
 8000d8c:	1a9b      	subs	r3, r3, r2
 8000d8e:	2b1b      	cmp	r3, #27
 8000d90:	dd00      	ble.n	8000d94 <__aeabi_fmul+0x1d4>
 8000d92:	e759      	b.n	8000c48 <__aeabi_fmul+0x88>
 8000d94:	0022      	movs	r2, r4
 8000d96:	309e      	adds	r0, #158	; 0x9e
 8000d98:	40da      	lsrs	r2, r3
 8000d9a:	4084      	lsls	r4, r0
 8000d9c:	0013      	movs	r3, r2
 8000d9e:	1e62      	subs	r2, r4, #1
 8000da0:	4194      	sbcs	r4, r2
 8000da2:	431c      	orrs	r4, r3
 8000da4:	0763      	lsls	r3, r4, #29
 8000da6:	d004      	beq.n	8000db2 <__aeabi_fmul+0x1f2>
 8000da8:	230f      	movs	r3, #15
 8000daa:	4023      	ands	r3, r4
 8000dac:	2b04      	cmp	r3, #4
 8000dae:	d000      	beq.n	8000db2 <__aeabi_fmul+0x1f2>
 8000db0:	3404      	adds	r4, #4
 8000db2:	0163      	lsls	r3, r4, #5
 8000db4:	d51a      	bpl.n	8000dec <__aeabi_fmul+0x22c>
 8000db6:	2001      	movs	r0, #1
 8000db8:	2400      	movs	r4, #0
 8000dba:	e747      	b.n	8000c4c <__aeabi_fmul+0x8c>
 8000dbc:	2080      	movs	r0, #128	; 0x80
 8000dbe:	03c0      	lsls	r0, r0, #15
 8000dc0:	4204      	tst	r4, r0
 8000dc2:	d009      	beq.n	8000dd8 <__aeabi_fmul+0x218>
 8000dc4:	4643      	mov	r3, r8
 8000dc6:	4203      	tst	r3, r0
 8000dc8:	d106      	bne.n	8000dd8 <__aeabi_fmul+0x218>
 8000dca:	4644      	mov	r4, r8
 8000dcc:	4304      	orrs	r4, r0
 8000dce:	0264      	lsls	r4, r4, #9
 8000dd0:	0039      	movs	r1, r7
 8000dd2:	20ff      	movs	r0, #255	; 0xff
 8000dd4:	0a64      	lsrs	r4, r4, #9
 8000dd6:	e739      	b.n	8000c4c <__aeabi_fmul+0x8c>
 8000dd8:	2080      	movs	r0, #128	; 0x80
 8000dda:	03c0      	lsls	r0, r0, #15
 8000ddc:	4304      	orrs	r4, r0
 8000dde:	0264      	lsls	r4, r4, #9
 8000de0:	0031      	movs	r1, r6
 8000de2:	20ff      	movs	r0, #255	; 0xff
 8000de4:	0a64      	lsrs	r4, r4, #9
 8000de6:	e731      	b.n	8000c4c <__aeabi_fmul+0x8c>
 8000de8:	0028      	movs	r0, r5
 8000dea:	e765      	b.n	8000cb8 <__aeabi_fmul+0xf8>
 8000dec:	01a4      	lsls	r4, r4, #6
 8000dee:	2000      	movs	r0, #0
 8000df0:	0a64      	lsrs	r4, r4, #9
 8000df2:	e72b      	b.n	8000c4c <__aeabi_fmul+0x8c>
 8000df4:	2080      	movs	r0, #128	; 0x80
 8000df6:	03c0      	lsls	r0, r0, #15
 8000df8:	4304      	orrs	r4, r0
 8000dfa:	0264      	lsls	r4, r4, #9
 8000dfc:	20ff      	movs	r0, #255	; 0xff
 8000dfe:	0a64      	lsrs	r4, r4, #9
 8000e00:	e724      	b.n	8000c4c <__aeabi_fmul+0x8c>
 8000e02:	46c0      	nop			; (mov r8, r8)
 8000e04:	0800cbf0 	.word	0x0800cbf0
 8000e08:	f7ffffff 	.word	0xf7ffffff

08000e0c <__aeabi_ui2f>:
 8000e0c:	b570      	push	{r4, r5, r6, lr}
 8000e0e:	1e05      	subs	r5, r0, #0
 8000e10:	d00e      	beq.n	8000e30 <__aeabi_ui2f+0x24>
 8000e12:	f001 fef3 	bl	8002bfc <__clzsi2>
 8000e16:	239e      	movs	r3, #158	; 0x9e
 8000e18:	0004      	movs	r4, r0
 8000e1a:	1a1b      	subs	r3, r3, r0
 8000e1c:	2b96      	cmp	r3, #150	; 0x96
 8000e1e:	dc0c      	bgt.n	8000e3a <__aeabi_ui2f+0x2e>
 8000e20:	2808      	cmp	r0, #8
 8000e22:	dd01      	ble.n	8000e28 <__aeabi_ui2f+0x1c>
 8000e24:	3c08      	subs	r4, #8
 8000e26:	40a5      	lsls	r5, r4
 8000e28:	026d      	lsls	r5, r5, #9
 8000e2a:	0a6d      	lsrs	r5, r5, #9
 8000e2c:	b2d8      	uxtb	r0, r3
 8000e2e:	e001      	b.n	8000e34 <__aeabi_ui2f+0x28>
 8000e30:	2000      	movs	r0, #0
 8000e32:	2500      	movs	r5, #0
 8000e34:	05c0      	lsls	r0, r0, #23
 8000e36:	4328      	orrs	r0, r5
 8000e38:	bd70      	pop	{r4, r5, r6, pc}
 8000e3a:	2b99      	cmp	r3, #153	; 0x99
 8000e3c:	dd09      	ble.n	8000e52 <__aeabi_ui2f+0x46>
 8000e3e:	0002      	movs	r2, r0
 8000e40:	0029      	movs	r1, r5
 8000e42:	321b      	adds	r2, #27
 8000e44:	4091      	lsls	r1, r2
 8000e46:	1e4a      	subs	r2, r1, #1
 8000e48:	4191      	sbcs	r1, r2
 8000e4a:	2205      	movs	r2, #5
 8000e4c:	1a12      	subs	r2, r2, r0
 8000e4e:	40d5      	lsrs	r5, r2
 8000e50:	430d      	orrs	r5, r1
 8000e52:	2c05      	cmp	r4, #5
 8000e54:	dc12      	bgt.n	8000e7c <__aeabi_ui2f+0x70>
 8000e56:	0029      	movs	r1, r5
 8000e58:	4e0c      	ldr	r6, [pc, #48]	; (8000e8c <__aeabi_ui2f+0x80>)
 8000e5a:	4031      	ands	r1, r6
 8000e5c:	076a      	lsls	r2, r5, #29
 8000e5e:	d009      	beq.n	8000e74 <__aeabi_ui2f+0x68>
 8000e60:	200f      	movs	r0, #15
 8000e62:	4028      	ands	r0, r5
 8000e64:	2804      	cmp	r0, #4
 8000e66:	d005      	beq.n	8000e74 <__aeabi_ui2f+0x68>
 8000e68:	3104      	adds	r1, #4
 8000e6a:	014a      	lsls	r2, r1, #5
 8000e6c:	d502      	bpl.n	8000e74 <__aeabi_ui2f+0x68>
 8000e6e:	239f      	movs	r3, #159	; 0x9f
 8000e70:	4031      	ands	r1, r6
 8000e72:	1b1b      	subs	r3, r3, r4
 8000e74:	0189      	lsls	r1, r1, #6
 8000e76:	0a4d      	lsrs	r5, r1, #9
 8000e78:	b2d8      	uxtb	r0, r3
 8000e7a:	e7db      	b.n	8000e34 <__aeabi_ui2f+0x28>
 8000e7c:	1f62      	subs	r2, r4, #5
 8000e7e:	4095      	lsls	r5, r2
 8000e80:	0029      	movs	r1, r5
 8000e82:	4e02      	ldr	r6, [pc, #8]	; (8000e8c <__aeabi_ui2f+0x80>)
 8000e84:	4031      	ands	r1, r6
 8000e86:	076a      	lsls	r2, r5, #29
 8000e88:	d0f4      	beq.n	8000e74 <__aeabi_ui2f+0x68>
 8000e8a:	e7e9      	b.n	8000e60 <__aeabi_ui2f+0x54>
 8000e8c:	fbffffff 	.word	0xfbffffff

08000e90 <__aeabi_dadd>:
 8000e90:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000e92:	464f      	mov	r7, r9
 8000e94:	4646      	mov	r6, r8
 8000e96:	46d6      	mov	lr, sl
 8000e98:	000d      	movs	r5, r1
 8000e9a:	0004      	movs	r4, r0
 8000e9c:	b5c0      	push	{r6, r7, lr}
 8000e9e:	001f      	movs	r7, r3
 8000ea0:	0011      	movs	r1, r2
 8000ea2:	0328      	lsls	r0, r5, #12
 8000ea4:	0f62      	lsrs	r2, r4, #29
 8000ea6:	0a40      	lsrs	r0, r0, #9
 8000ea8:	4310      	orrs	r0, r2
 8000eaa:	007a      	lsls	r2, r7, #1
 8000eac:	0d52      	lsrs	r2, r2, #21
 8000eae:	00e3      	lsls	r3, r4, #3
 8000eb0:	033c      	lsls	r4, r7, #12
 8000eb2:	4691      	mov	r9, r2
 8000eb4:	0a64      	lsrs	r4, r4, #9
 8000eb6:	0ffa      	lsrs	r2, r7, #31
 8000eb8:	0f4f      	lsrs	r7, r1, #29
 8000eba:	006e      	lsls	r6, r5, #1
 8000ebc:	4327      	orrs	r7, r4
 8000ebe:	4692      	mov	sl, r2
 8000ec0:	46b8      	mov	r8, r7
 8000ec2:	0d76      	lsrs	r6, r6, #21
 8000ec4:	0fed      	lsrs	r5, r5, #31
 8000ec6:	00c9      	lsls	r1, r1, #3
 8000ec8:	4295      	cmp	r5, r2
 8000eca:	d100      	bne.n	8000ece <__aeabi_dadd+0x3e>
 8000ecc:	e099      	b.n	8001002 <__aeabi_dadd+0x172>
 8000ece:	464c      	mov	r4, r9
 8000ed0:	1b34      	subs	r4, r6, r4
 8000ed2:	46a4      	mov	ip, r4
 8000ed4:	2c00      	cmp	r4, #0
 8000ed6:	dc00      	bgt.n	8000eda <__aeabi_dadd+0x4a>
 8000ed8:	e07c      	b.n	8000fd4 <__aeabi_dadd+0x144>
 8000eda:	464a      	mov	r2, r9
 8000edc:	2a00      	cmp	r2, #0
 8000ede:	d100      	bne.n	8000ee2 <__aeabi_dadd+0x52>
 8000ee0:	e0b8      	b.n	8001054 <__aeabi_dadd+0x1c4>
 8000ee2:	4ac5      	ldr	r2, [pc, #788]	; (80011f8 <__aeabi_dadd+0x368>)
 8000ee4:	4296      	cmp	r6, r2
 8000ee6:	d100      	bne.n	8000eea <__aeabi_dadd+0x5a>
 8000ee8:	e11c      	b.n	8001124 <__aeabi_dadd+0x294>
 8000eea:	2280      	movs	r2, #128	; 0x80
 8000eec:	003c      	movs	r4, r7
 8000eee:	0412      	lsls	r2, r2, #16
 8000ef0:	4314      	orrs	r4, r2
 8000ef2:	46a0      	mov	r8, r4
 8000ef4:	4662      	mov	r2, ip
 8000ef6:	2a38      	cmp	r2, #56	; 0x38
 8000ef8:	dd00      	ble.n	8000efc <__aeabi_dadd+0x6c>
 8000efa:	e161      	b.n	80011c0 <__aeabi_dadd+0x330>
 8000efc:	2a1f      	cmp	r2, #31
 8000efe:	dd00      	ble.n	8000f02 <__aeabi_dadd+0x72>
 8000f00:	e1cc      	b.n	800129c <__aeabi_dadd+0x40c>
 8000f02:	4664      	mov	r4, ip
 8000f04:	2220      	movs	r2, #32
 8000f06:	1b12      	subs	r2, r2, r4
 8000f08:	4644      	mov	r4, r8
 8000f0a:	4094      	lsls	r4, r2
 8000f0c:	000f      	movs	r7, r1
 8000f0e:	46a1      	mov	r9, r4
 8000f10:	4664      	mov	r4, ip
 8000f12:	4091      	lsls	r1, r2
 8000f14:	40e7      	lsrs	r7, r4
 8000f16:	464c      	mov	r4, r9
 8000f18:	1e4a      	subs	r2, r1, #1
 8000f1a:	4191      	sbcs	r1, r2
 8000f1c:	433c      	orrs	r4, r7
 8000f1e:	4642      	mov	r2, r8
 8000f20:	4321      	orrs	r1, r4
 8000f22:	4664      	mov	r4, ip
 8000f24:	40e2      	lsrs	r2, r4
 8000f26:	1a80      	subs	r0, r0, r2
 8000f28:	1a5c      	subs	r4, r3, r1
 8000f2a:	42a3      	cmp	r3, r4
 8000f2c:	419b      	sbcs	r3, r3
 8000f2e:	425f      	negs	r7, r3
 8000f30:	1bc7      	subs	r7, r0, r7
 8000f32:	023b      	lsls	r3, r7, #8
 8000f34:	d400      	bmi.n	8000f38 <__aeabi_dadd+0xa8>
 8000f36:	e0d0      	b.n	80010da <__aeabi_dadd+0x24a>
 8000f38:	027f      	lsls	r7, r7, #9
 8000f3a:	0a7f      	lsrs	r7, r7, #9
 8000f3c:	2f00      	cmp	r7, #0
 8000f3e:	d100      	bne.n	8000f42 <__aeabi_dadd+0xb2>
 8000f40:	e0ff      	b.n	8001142 <__aeabi_dadd+0x2b2>
 8000f42:	0038      	movs	r0, r7
 8000f44:	f001 fe5a 	bl	8002bfc <__clzsi2>
 8000f48:	0001      	movs	r1, r0
 8000f4a:	3908      	subs	r1, #8
 8000f4c:	2320      	movs	r3, #32
 8000f4e:	0022      	movs	r2, r4
 8000f50:	1a5b      	subs	r3, r3, r1
 8000f52:	408f      	lsls	r7, r1
 8000f54:	40da      	lsrs	r2, r3
 8000f56:	408c      	lsls	r4, r1
 8000f58:	4317      	orrs	r7, r2
 8000f5a:	42b1      	cmp	r1, r6
 8000f5c:	da00      	bge.n	8000f60 <__aeabi_dadd+0xd0>
 8000f5e:	e0ff      	b.n	8001160 <__aeabi_dadd+0x2d0>
 8000f60:	1b89      	subs	r1, r1, r6
 8000f62:	1c4b      	adds	r3, r1, #1
 8000f64:	2b1f      	cmp	r3, #31
 8000f66:	dd00      	ble.n	8000f6a <__aeabi_dadd+0xda>
 8000f68:	e0a8      	b.n	80010bc <__aeabi_dadd+0x22c>
 8000f6a:	2220      	movs	r2, #32
 8000f6c:	0039      	movs	r1, r7
 8000f6e:	1ad2      	subs	r2, r2, r3
 8000f70:	0020      	movs	r0, r4
 8000f72:	4094      	lsls	r4, r2
 8000f74:	4091      	lsls	r1, r2
 8000f76:	40d8      	lsrs	r0, r3
 8000f78:	1e62      	subs	r2, r4, #1
 8000f7a:	4194      	sbcs	r4, r2
 8000f7c:	40df      	lsrs	r7, r3
 8000f7e:	2600      	movs	r6, #0
 8000f80:	4301      	orrs	r1, r0
 8000f82:	430c      	orrs	r4, r1
 8000f84:	0763      	lsls	r3, r4, #29
 8000f86:	d009      	beq.n	8000f9c <__aeabi_dadd+0x10c>
 8000f88:	230f      	movs	r3, #15
 8000f8a:	4023      	ands	r3, r4
 8000f8c:	2b04      	cmp	r3, #4
 8000f8e:	d005      	beq.n	8000f9c <__aeabi_dadd+0x10c>
 8000f90:	1d23      	adds	r3, r4, #4
 8000f92:	42a3      	cmp	r3, r4
 8000f94:	41a4      	sbcs	r4, r4
 8000f96:	4264      	negs	r4, r4
 8000f98:	193f      	adds	r7, r7, r4
 8000f9a:	001c      	movs	r4, r3
 8000f9c:	023b      	lsls	r3, r7, #8
 8000f9e:	d400      	bmi.n	8000fa2 <__aeabi_dadd+0x112>
 8000fa0:	e09e      	b.n	80010e0 <__aeabi_dadd+0x250>
 8000fa2:	4b95      	ldr	r3, [pc, #596]	; (80011f8 <__aeabi_dadd+0x368>)
 8000fa4:	3601      	adds	r6, #1
 8000fa6:	429e      	cmp	r6, r3
 8000fa8:	d100      	bne.n	8000fac <__aeabi_dadd+0x11c>
 8000faa:	e0b7      	b.n	800111c <__aeabi_dadd+0x28c>
 8000fac:	4a93      	ldr	r2, [pc, #588]	; (80011fc <__aeabi_dadd+0x36c>)
 8000fae:	08e4      	lsrs	r4, r4, #3
 8000fb0:	4017      	ands	r7, r2
 8000fb2:	077b      	lsls	r3, r7, #29
 8000fb4:	0571      	lsls	r1, r6, #21
 8000fb6:	027f      	lsls	r7, r7, #9
 8000fb8:	4323      	orrs	r3, r4
 8000fba:	0b3f      	lsrs	r7, r7, #12
 8000fbc:	0d4a      	lsrs	r2, r1, #21
 8000fbe:	0512      	lsls	r2, r2, #20
 8000fc0:	433a      	orrs	r2, r7
 8000fc2:	07ed      	lsls	r5, r5, #31
 8000fc4:	432a      	orrs	r2, r5
 8000fc6:	0018      	movs	r0, r3
 8000fc8:	0011      	movs	r1, r2
 8000fca:	bce0      	pop	{r5, r6, r7}
 8000fcc:	46ba      	mov	sl, r7
 8000fce:	46b1      	mov	r9, r6
 8000fd0:	46a8      	mov	r8, r5
 8000fd2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000fd4:	2c00      	cmp	r4, #0
 8000fd6:	d04b      	beq.n	8001070 <__aeabi_dadd+0x1e0>
 8000fd8:	464c      	mov	r4, r9
 8000fda:	1ba4      	subs	r4, r4, r6
 8000fdc:	46a4      	mov	ip, r4
 8000fde:	2e00      	cmp	r6, #0
 8000fe0:	d000      	beq.n	8000fe4 <__aeabi_dadd+0x154>
 8000fe2:	e123      	b.n	800122c <__aeabi_dadd+0x39c>
 8000fe4:	0004      	movs	r4, r0
 8000fe6:	431c      	orrs	r4, r3
 8000fe8:	d100      	bne.n	8000fec <__aeabi_dadd+0x15c>
 8000fea:	e1af      	b.n	800134c <__aeabi_dadd+0x4bc>
 8000fec:	4662      	mov	r2, ip
 8000fee:	1e54      	subs	r4, r2, #1
 8000ff0:	2a01      	cmp	r2, #1
 8000ff2:	d100      	bne.n	8000ff6 <__aeabi_dadd+0x166>
 8000ff4:	e215      	b.n	8001422 <__aeabi_dadd+0x592>
 8000ff6:	4d80      	ldr	r5, [pc, #512]	; (80011f8 <__aeabi_dadd+0x368>)
 8000ff8:	45ac      	cmp	ip, r5
 8000ffa:	d100      	bne.n	8000ffe <__aeabi_dadd+0x16e>
 8000ffc:	e1c8      	b.n	8001390 <__aeabi_dadd+0x500>
 8000ffe:	46a4      	mov	ip, r4
 8001000:	e11b      	b.n	800123a <__aeabi_dadd+0x3aa>
 8001002:	464a      	mov	r2, r9
 8001004:	1ab2      	subs	r2, r6, r2
 8001006:	4694      	mov	ip, r2
 8001008:	2a00      	cmp	r2, #0
 800100a:	dc00      	bgt.n	800100e <__aeabi_dadd+0x17e>
 800100c:	e0ac      	b.n	8001168 <__aeabi_dadd+0x2d8>
 800100e:	464a      	mov	r2, r9
 8001010:	2a00      	cmp	r2, #0
 8001012:	d043      	beq.n	800109c <__aeabi_dadd+0x20c>
 8001014:	4a78      	ldr	r2, [pc, #480]	; (80011f8 <__aeabi_dadd+0x368>)
 8001016:	4296      	cmp	r6, r2
 8001018:	d100      	bne.n	800101c <__aeabi_dadd+0x18c>
 800101a:	e1af      	b.n	800137c <__aeabi_dadd+0x4ec>
 800101c:	2280      	movs	r2, #128	; 0x80
 800101e:	003c      	movs	r4, r7
 8001020:	0412      	lsls	r2, r2, #16
 8001022:	4314      	orrs	r4, r2
 8001024:	46a0      	mov	r8, r4
 8001026:	4662      	mov	r2, ip
 8001028:	2a38      	cmp	r2, #56	; 0x38
 800102a:	dc67      	bgt.n	80010fc <__aeabi_dadd+0x26c>
 800102c:	2a1f      	cmp	r2, #31
 800102e:	dc00      	bgt.n	8001032 <__aeabi_dadd+0x1a2>
 8001030:	e15f      	b.n	80012f2 <__aeabi_dadd+0x462>
 8001032:	4647      	mov	r7, r8
 8001034:	3a20      	subs	r2, #32
 8001036:	40d7      	lsrs	r7, r2
 8001038:	4662      	mov	r2, ip
 800103a:	2a20      	cmp	r2, #32
 800103c:	d005      	beq.n	800104a <__aeabi_dadd+0x1ba>
 800103e:	4664      	mov	r4, ip
 8001040:	2240      	movs	r2, #64	; 0x40
 8001042:	1b12      	subs	r2, r2, r4
 8001044:	4644      	mov	r4, r8
 8001046:	4094      	lsls	r4, r2
 8001048:	4321      	orrs	r1, r4
 800104a:	1e4a      	subs	r2, r1, #1
 800104c:	4191      	sbcs	r1, r2
 800104e:	000c      	movs	r4, r1
 8001050:	433c      	orrs	r4, r7
 8001052:	e057      	b.n	8001104 <__aeabi_dadd+0x274>
 8001054:	003a      	movs	r2, r7
 8001056:	430a      	orrs	r2, r1
 8001058:	d100      	bne.n	800105c <__aeabi_dadd+0x1cc>
 800105a:	e105      	b.n	8001268 <__aeabi_dadd+0x3d8>
 800105c:	0022      	movs	r2, r4
 800105e:	3a01      	subs	r2, #1
 8001060:	2c01      	cmp	r4, #1
 8001062:	d100      	bne.n	8001066 <__aeabi_dadd+0x1d6>
 8001064:	e182      	b.n	800136c <__aeabi_dadd+0x4dc>
 8001066:	4c64      	ldr	r4, [pc, #400]	; (80011f8 <__aeabi_dadd+0x368>)
 8001068:	45a4      	cmp	ip, r4
 800106a:	d05b      	beq.n	8001124 <__aeabi_dadd+0x294>
 800106c:	4694      	mov	ip, r2
 800106e:	e741      	b.n	8000ef4 <__aeabi_dadd+0x64>
 8001070:	4c63      	ldr	r4, [pc, #396]	; (8001200 <__aeabi_dadd+0x370>)
 8001072:	1c77      	adds	r7, r6, #1
 8001074:	4227      	tst	r7, r4
 8001076:	d000      	beq.n	800107a <__aeabi_dadd+0x1ea>
 8001078:	e0c4      	b.n	8001204 <__aeabi_dadd+0x374>
 800107a:	0004      	movs	r4, r0
 800107c:	431c      	orrs	r4, r3
 800107e:	2e00      	cmp	r6, #0
 8001080:	d000      	beq.n	8001084 <__aeabi_dadd+0x1f4>
 8001082:	e169      	b.n	8001358 <__aeabi_dadd+0x4c8>
 8001084:	2c00      	cmp	r4, #0
 8001086:	d100      	bne.n	800108a <__aeabi_dadd+0x1fa>
 8001088:	e1bf      	b.n	800140a <__aeabi_dadd+0x57a>
 800108a:	4644      	mov	r4, r8
 800108c:	430c      	orrs	r4, r1
 800108e:	d000      	beq.n	8001092 <__aeabi_dadd+0x202>
 8001090:	e1d0      	b.n	8001434 <__aeabi_dadd+0x5a4>
 8001092:	0742      	lsls	r2, r0, #29
 8001094:	08db      	lsrs	r3, r3, #3
 8001096:	4313      	orrs	r3, r2
 8001098:	08c0      	lsrs	r0, r0, #3
 800109a:	e029      	b.n	80010f0 <__aeabi_dadd+0x260>
 800109c:	003a      	movs	r2, r7
 800109e:	430a      	orrs	r2, r1
 80010a0:	d100      	bne.n	80010a4 <__aeabi_dadd+0x214>
 80010a2:	e170      	b.n	8001386 <__aeabi_dadd+0x4f6>
 80010a4:	4662      	mov	r2, ip
 80010a6:	4664      	mov	r4, ip
 80010a8:	3a01      	subs	r2, #1
 80010aa:	2c01      	cmp	r4, #1
 80010ac:	d100      	bne.n	80010b0 <__aeabi_dadd+0x220>
 80010ae:	e0e0      	b.n	8001272 <__aeabi_dadd+0x3e2>
 80010b0:	4c51      	ldr	r4, [pc, #324]	; (80011f8 <__aeabi_dadd+0x368>)
 80010b2:	45a4      	cmp	ip, r4
 80010b4:	d100      	bne.n	80010b8 <__aeabi_dadd+0x228>
 80010b6:	e161      	b.n	800137c <__aeabi_dadd+0x4ec>
 80010b8:	4694      	mov	ip, r2
 80010ba:	e7b4      	b.n	8001026 <__aeabi_dadd+0x196>
 80010bc:	003a      	movs	r2, r7
 80010be:	391f      	subs	r1, #31
 80010c0:	40ca      	lsrs	r2, r1
 80010c2:	0011      	movs	r1, r2
 80010c4:	2b20      	cmp	r3, #32
 80010c6:	d003      	beq.n	80010d0 <__aeabi_dadd+0x240>
 80010c8:	2240      	movs	r2, #64	; 0x40
 80010ca:	1ad3      	subs	r3, r2, r3
 80010cc:	409f      	lsls	r7, r3
 80010ce:	433c      	orrs	r4, r7
 80010d0:	1e63      	subs	r3, r4, #1
 80010d2:	419c      	sbcs	r4, r3
 80010d4:	2700      	movs	r7, #0
 80010d6:	2600      	movs	r6, #0
 80010d8:	430c      	orrs	r4, r1
 80010da:	0763      	lsls	r3, r4, #29
 80010dc:	d000      	beq.n	80010e0 <__aeabi_dadd+0x250>
 80010de:	e753      	b.n	8000f88 <__aeabi_dadd+0xf8>
 80010e0:	46b4      	mov	ip, r6
 80010e2:	08e4      	lsrs	r4, r4, #3
 80010e4:	077b      	lsls	r3, r7, #29
 80010e6:	4323      	orrs	r3, r4
 80010e8:	08f8      	lsrs	r0, r7, #3
 80010ea:	4a43      	ldr	r2, [pc, #268]	; (80011f8 <__aeabi_dadd+0x368>)
 80010ec:	4594      	cmp	ip, r2
 80010ee:	d01d      	beq.n	800112c <__aeabi_dadd+0x29c>
 80010f0:	4662      	mov	r2, ip
 80010f2:	0307      	lsls	r7, r0, #12
 80010f4:	0552      	lsls	r2, r2, #21
 80010f6:	0b3f      	lsrs	r7, r7, #12
 80010f8:	0d52      	lsrs	r2, r2, #21
 80010fa:	e760      	b.n	8000fbe <__aeabi_dadd+0x12e>
 80010fc:	4644      	mov	r4, r8
 80010fe:	430c      	orrs	r4, r1
 8001100:	1e62      	subs	r2, r4, #1
 8001102:	4194      	sbcs	r4, r2
 8001104:	18e4      	adds	r4, r4, r3
 8001106:	429c      	cmp	r4, r3
 8001108:	419b      	sbcs	r3, r3
 800110a:	425f      	negs	r7, r3
 800110c:	183f      	adds	r7, r7, r0
 800110e:	023b      	lsls	r3, r7, #8
 8001110:	d5e3      	bpl.n	80010da <__aeabi_dadd+0x24a>
 8001112:	4b39      	ldr	r3, [pc, #228]	; (80011f8 <__aeabi_dadd+0x368>)
 8001114:	3601      	adds	r6, #1
 8001116:	429e      	cmp	r6, r3
 8001118:	d000      	beq.n	800111c <__aeabi_dadd+0x28c>
 800111a:	e0b5      	b.n	8001288 <__aeabi_dadd+0x3f8>
 800111c:	0032      	movs	r2, r6
 800111e:	2700      	movs	r7, #0
 8001120:	2300      	movs	r3, #0
 8001122:	e74c      	b.n	8000fbe <__aeabi_dadd+0x12e>
 8001124:	0742      	lsls	r2, r0, #29
 8001126:	08db      	lsrs	r3, r3, #3
 8001128:	4313      	orrs	r3, r2
 800112a:	08c0      	lsrs	r0, r0, #3
 800112c:	001a      	movs	r2, r3
 800112e:	4302      	orrs	r2, r0
 8001130:	d100      	bne.n	8001134 <__aeabi_dadd+0x2a4>
 8001132:	e1e1      	b.n	80014f8 <__aeabi_dadd+0x668>
 8001134:	2780      	movs	r7, #128	; 0x80
 8001136:	033f      	lsls	r7, r7, #12
 8001138:	4307      	orrs	r7, r0
 800113a:	033f      	lsls	r7, r7, #12
 800113c:	4a2e      	ldr	r2, [pc, #184]	; (80011f8 <__aeabi_dadd+0x368>)
 800113e:	0b3f      	lsrs	r7, r7, #12
 8001140:	e73d      	b.n	8000fbe <__aeabi_dadd+0x12e>
 8001142:	0020      	movs	r0, r4
 8001144:	f001 fd5a 	bl	8002bfc <__clzsi2>
 8001148:	0001      	movs	r1, r0
 800114a:	3118      	adds	r1, #24
 800114c:	291f      	cmp	r1, #31
 800114e:	dc00      	bgt.n	8001152 <__aeabi_dadd+0x2c2>
 8001150:	e6fc      	b.n	8000f4c <__aeabi_dadd+0xbc>
 8001152:	3808      	subs	r0, #8
 8001154:	4084      	lsls	r4, r0
 8001156:	0027      	movs	r7, r4
 8001158:	2400      	movs	r4, #0
 800115a:	42b1      	cmp	r1, r6
 800115c:	db00      	blt.n	8001160 <__aeabi_dadd+0x2d0>
 800115e:	e6ff      	b.n	8000f60 <__aeabi_dadd+0xd0>
 8001160:	4a26      	ldr	r2, [pc, #152]	; (80011fc <__aeabi_dadd+0x36c>)
 8001162:	1a76      	subs	r6, r6, r1
 8001164:	4017      	ands	r7, r2
 8001166:	e70d      	b.n	8000f84 <__aeabi_dadd+0xf4>
 8001168:	2a00      	cmp	r2, #0
 800116a:	d02f      	beq.n	80011cc <__aeabi_dadd+0x33c>
 800116c:	464a      	mov	r2, r9
 800116e:	1b92      	subs	r2, r2, r6
 8001170:	4694      	mov	ip, r2
 8001172:	2e00      	cmp	r6, #0
 8001174:	d100      	bne.n	8001178 <__aeabi_dadd+0x2e8>
 8001176:	e0ad      	b.n	80012d4 <__aeabi_dadd+0x444>
 8001178:	4a1f      	ldr	r2, [pc, #124]	; (80011f8 <__aeabi_dadd+0x368>)
 800117a:	4591      	cmp	r9, r2
 800117c:	d100      	bne.n	8001180 <__aeabi_dadd+0x2f0>
 800117e:	e10f      	b.n	80013a0 <__aeabi_dadd+0x510>
 8001180:	2280      	movs	r2, #128	; 0x80
 8001182:	0412      	lsls	r2, r2, #16
 8001184:	4310      	orrs	r0, r2
 8001186:	4662      	mov	r2, ip
 8001188:	2a38      	cmp	r2, #56	; 0x38
 800118a:	dd00      	ble.n	800118e <__aeabi_dadd+0x2fe>
 800118c:	e10f      	b.n	80013ae <__aeabi_dadd+0x51e>
 800118e:	2a1f      	cmp	r2, #31
 8001190:	dd00      	ble.n	8001194 <__aeabi_dadd+0x304>
 8001192:	e180      	b.n	8001496 <__aeabi_dadd+0x606>
 8001194:	4664      	mov	r4, ip
 8001196:	2220      	movs	r2, #32
 8001198:	001e      	movs	r6, r3
 800119a:	1b12      	subs	r2, r2, r4
 800119c:	4667      	mov	r7, ip
 800119e:	0004      	movs	r4, r0
 80011a0:	4093      	lsls	r3, r2
 80011a2:	4094      	lsls	r4, r2
 80011a4:	40fe      	lsrs	r6, r7
 80011a6:	1e5a      	subs	r2, r3, #1
 80011a8:	4193      	sbcs	r3, r2
 80011aa:	40f8      	lsrs	r0, r7
 80011ac:	4334      	orrs	r4, r6
 80011ae:	431c      	orrs	r4, r3
 80011b0:	4480      	add	r8, r0
 80011b2:	1864      	adds	r4, r4, r1
 80011b4:	428c      	cmp	r4, r1
 80011b6:	41bf      	sbcs	r7, r7
 80011b8:	427f      	negs	r7, r7
 80011ba:	464e      	mov	r6, r9
 80011bc:	4447      	add	r7, r8
 80011be:	e7a6      	b.n	800110e <__aeabi_dadd+0x27e>
 80011c0:	4642      	mov	r2, r8
 80011c2:	430a      	orrs	r2, r1
 80011c4:	0011      	movs	r1, r2
 80011c6:	1e4a      	subs	r2, r1, #1
 80011c8:	4191      	sbcs	r1, r2
 80011ca:	e6ad      	b.n	8000f28 <__aeabi_dadd+0x98>
 80011cc:	4c0c      	ldr	r4, [pc, #48]	; (8001200 <__aeabi_dadd+0x370>)
 80011ce:	1c72      	adds	r2, r6, #1
 80011d0:	4222      	tst	r2, r4
 80011d2:	d000      	beq.n	80011d6 <__aeabi_dadd+0x346>
 80011d4:	e0a1      	b.n	800131a <__aeabi_dadd+0x48a>
 80011d6:	0002      	movs	r2, r0
 80011d8:	431a      	orrs	r2, r3
 80011da:	2e00      	cmp	r6, #0
 80011dc:	d000      	beq.n	80011e0 <__aeabi_dadd+0x350>
 80011de:	e0fa      	b.n	80013d6 <__aeabi_dadd+0x546>
 80011e0:	2a00      	cmp	r2, #0
 80011e2:	d100      	bne.n	80011e6 <__aeabi_dadd+0x356>
 80011e4:	e145      	b.n	8001472 <__aeabi_dadd+0x5e2>
 80011e6:	003a      	movs	r2, r7
 80011e8:	430a      	orrs	r2, r1
 80011ea:	d000      	beq.n	80011ee <__aeabi_dadd+0x35e>
 80011ec:	e146      	b.n	800147c <__aeabi_dadd+0x5ec>
 80011ee:	0742      	lsls	r2, r0, #29
 80011f0:	08db      	lsrs	r3, r3, #3
 80011f2:	4313      	orrs	r3, r2
 80011f4:	08c0      	lsrs	r0, r0, #3
 80011f6:	e77b      	b.n	80010f0 <__aeabi_dadd+0x260>
 80011f8:	000007ff 	.word	0x000007ff
 80011fc:	ff7fffff 	.word	0xff7fffff
 8001200:	000007fe 	.word	0x000007fe
 8001204:	4647      	mov	r7, r8
 8001206:	1a5c      	subs	r4, r3, r1
 8001208:	1bc2      	subs	r2, r0, r7
 800120a:	42a3      	cmp	r3, r4
 800120c:	41bf      	sbcs	r7, r7
 800120e:	427f      	negs	r7, r7
 8001210:	46b9      	mov	r9, r7
 8001212:	0017      	movs	r7, r2
 8001214:	464a      	mov	r2, r9
 8001216:	1abf      	subs	r7, r7, r2
 8001218:	023a      	lsls	r2, r7, #8
 800121a:	d500      	bpl.n	800121e <__aeabi_dadd+0x38e>
 800121c:	e08d      	b.n	800133a <__aeabi_dadd+0x4aa>
 800121e:	0023      	movs	r3, r4
 8001220:	433b      	orrs	r3, r7
 8001222:	d000      	beq.n	8001226 <__aeabi_dadd+0x396>
 8001224:	e68a      	b.n	8000f3c <__aeabi_dadd+0xac>
 8001226:	2000      	movs	r0, #0
 8001228:	2500      	movs	r5, #0
 800122a:	e761      	b.n	80010f0 <__aeabi_dadd+0x260>
 800122c:	4cb4      	ldr	r4, [pc, #720]	; (8001500 <__aeabi_dadd+0x670>)
 800122e:	45a1      	cmp	r9, r4
 8001230:	d100      	bne.n	8001234 <__aeabi_dadd+0x3a4>
 8001232:	e0ad      	b.n	8001390 <__aeabi_dadd+0x500>
 8001234:	2480      	movs	r4, #128	; 0x80
 8001236:	0424      	lsls	r4, r4, #16
 8001238:	4320      	orrs	r0, r4
 800123a:	4664      	mov	r4, ip
 800123c:	2c38      	cmp	r4, #56	; 0x38
 800123e:	dc3d      	bgt.n	80012bc <__aeabi_dadd+0x42c>
 8001240:	4662      	mov	r2, ip
 8001242:	2c1f      	cmp	r4, #31
 8001244:	dd00      	ble.n	8001248 <__aeabi_dadd+0x3b8>
 8001246:	e0b7      	b.n	80013b8 <__aeabi_dadd+0x528>
 8001248:	2520      	movs	r5, #32
 800124a:	001e      	movs	r6, r3
 800124c:	1b2d      	subs	r5, r5, r4
 800124e:	0004      	movs	r4, r0
 8001250:	40ab      	lsls	r3, r5
 8001252:	40ac      	lsls	r4, r5
 8001254:	40d6      	lsrs	r6, r2
 8001256:	40d0      	lsrs	r0, r2
 8001258:	4642      	mov	r2, r8
 800125a:	1e5d      	subs	r5, r3, #1
 800125c:	41ab      	sbcs	r3, r5
 800125e:	4334      	orrs	r4, r6
 8001260:	1a12      	subs	r2, r2, r0
 8001262:	4690      	mov	r8, r2
 8001264:	4323      	orrs	r3, r4
 8001266:	e02c      	b.n	80012c2 <__aeabi_dadd+0x432>
 8001268:	0742      	lsls	r2, r0, #29
 800126a:	08db      	lsrs	r3, r3, #3
 800126c:	4313      	orrs	r3, r2
 800126e:	08c0      	lsrs	r0, r0, #3
 8001270:	e73b      	b.n	80010ea <__aeabi_dadd+0x25a>
 8001272:	185c      	adds	r4, r3, r1
 8001274:	429c      	cmp	r4, r3
 8001276:	419b      	sbcs	r3, r3
 8001278:	4440      	add	r0, r8
 800127a:	425b      	negs	r3, r3
 800127c:	18c7      	adds	r7, r0, r3
 800127e:	2601      	movs	r6, #1
 8001280:	023b      	lsls	r3, r7, #8
 8001282:	d400      	bmi.n	8001286 <__aeabi_dadd+0x3f6>
 8001284:	e729      	b.n	80010da <__aeabi_dadd+0x24a>
 8001286:	2602      	movs	r6, #2
 8001288:	4a9e      	ldr	r2, [pc, #632]	; (8001504 <__aeabi_dadd+0x674>)
 800128a:	0863      	lsrs	r3, r4, #1
 800128c:	4017      	ands	r7, r2
 800128e:	2201      	movs	r2, #1
 8001290:	4014      	ands	r4, r2
 8001292:	431c      	orrs	r4, r3
 8001294:	07fb      	lsls	r3, r7, #31
 8001296:	431c      	orrs	r4, r3
 8001298:	087f      	lsrs	r7, r7, #1
 800129a:	e673      	b.n	8000f84 <__aeabi_dadd+0xf4>
 800129c:	4644      	mov	r4, r8
 800129e:	3a20      	subs	r2, #32
 80012a0:	40d4      	lsrs	r4, r2
 80012a2:	4662      	mov	r2, ip
 80012a4:	2a20      	cmp	r2, #32
 80012a6:	d005      	beq.n	80012b4 <__aeabi_dadd+0x424>
 80012a8:	4667      	mov	r7, ip
 80012aa:	2240      	movs	r2, #64	; 0x40
 80012ac:	1bd2      	subs	r2, r2, r7
 80012ae:	4647      	mov	r7, r8
 80012b0:	4097      	lsls	r7, r2
 80012b2:	4339      	orrs	r1, r7
 80012b4:	1e4a      	subs	r2, r1, #1
 80012b6:	4191      	sbcs	r1, r2
 80012b8:	4321      	orrs	r1, r4
 80012ba:	e635      	b.n	8000f28 <__aeabi_dadd+0x98>
 80012bc:	4303      	orrs	r3, r0
 80012be:	1e58      	subs	r0, r3, #1
 80012c0:	4183      	sbcs	r3, r0
 80012c2:	1acc      	subs	r4, r1, r3
 80012c4:	42a1      	cmp	r1, r4
 80012c6:	41bf      	sbcs	r7, r7
 80012c8:	4643      	mov	r3, r8
 80012ca:	427f      	negs	r7, r7
 80012cc:	4655      	mov	r5, sl
 80012ce:	464e      	mov	r6, r9
 80012d0:	1bdf      	subs	r7, r3, r7
 80012d2:	e62e      	b.n	8000f32 <__aeabi_dadd+0xa2>
 80012d4:	0002      	movs	r2, r0
 80012d6:	431a      	orrs	r2, r3
 80012d8:	d100      	bne.n	80012dc <__aeabi_dadd+0x44c>
 80012da:	e0bd      	b.n	8001458 <__aeabi_dadd+0x5c8>
 80012dc:	4662      	mov	r2, ip
 80012de:	4664      	mov	r4, ip
 80012e0:	3a01      	subs	r2, #1
 80012e2:	2c01      	cmp	r4, #1
 80012e4:	d100      	bne.n	80012e8 <__aeabi_dadd+0x458>
 80012e6:	e0e5      	b.n	80014b4 <__aeabi_dadd+0x624>
 80012e8:	4c85      	ldr	r4, [pc, #532]	; (8001500 <__aeabi_dadd+0x670>)
 80012ea:	45a4      	cmp	ip, r4
 80012ec:	d058      	beq.n	80013a0 <__aeabi_dadd+0x510>
 80012ee:	4694      	mov	ip, r2
 80012f0:	e749      	b.n	8001186 <__aeabi_dadd+0x2f6>
 80012f2:	4664      	mov	r4, ip
 80012f4:	2220      	movs	r2, #32
 80012f6:	1b12      	subs	r2, r2, r4
 80012f8:	4644      	mov	r4, r8
 80012fa:	4094      	lsls	r4, r2
 80012fc:	000f      	movs	r7, r1
 80012fe:	46a1      	mov	r9, r4
 8001300:	4664      	mov	r4, ip
 8001302:	4091      	lsls	r1, r2
 8001304:	40e7      	lsrs	r7, r4
 8001306:	464c      	mov	r4, r9
 8001308:	1e4a      	subs	r2, r1, #1
 800130a:	4191      	sbcs	r1, r2
 800130c:	433c      	orrs	r4, r7
 800130e:	4642      	mov	r2, r8
 8001310:	430c      	orrs	r4, r1
 8001312:	4661      	mov	r1, ip
 8001314:	40ca      	lsrs	r2, r1
 8001316:	1880      	adds	r0, r0, r2
 8001318:	e6f4      	b.n	8001104 <__aeabi_dadd+0x274>
 800131a:	4c79      	ldr	r4, [pc, #484]	; (8001500 <__aeabi_dadd+0x670>)
 800131c:	42a2      	cmp	r2, r4
 800131e:	d100      	bne.n	8001322 <__aeabi_dadd+0x492>
 8001320:	e6fd      	b.n	800111e <__aeabi_dadd+0x28e>
 8001322:	1859      	adds	r1, r3, r1
 8001324:	4299      	cmp	r1, r3
 8001326:	419b      	sbcs	r3, r3
 8001328:	4440      	add	r0, r8
 800132a:	425f      	negs	r7, r3
 800132c:	19c7      	adds	r7, r0, r7
 800132e:	07fc      	lsls	r4, r7, #31
 8001330:	0849      	lsrs	r1, r1, #1
 8001332:	0016      	movs	r6, r2
 8001334:	430c      	orrs	r4, r1
 8001336:	087f      	lsrs	r7, r7, #1
 8001338:	e6cf      	b.n	80010da <__aeabi_dadd+0x24a>
 800133a:	1acc      	subs	r4, r1, r3
 800133c:	42a1      	cmp	r1, r4
 800133e:	41bf      	sbcs	r7, r7
 8001340:	4643      	mov	r3, r8
 8001342:	427f      	negs	r7, r7
 8001344:	1a18      	subs	r0, r3, r0
 8001346:	4655      	mov	r5, sl
 8001348:	1bc7      	subs	r7, r0, r7
 800134a:	e5f7      	b.n	8000f3c <__aeabi_dadd+0xac>
 800134c:	08c9      	lsrs	r1, r1, #3
 800134e:	077b      	lsls	r3, r7, #29
 8001350:	4655      	mov	r5, sl
 8001352:	430b      	orrs	r3, r1
 8001354:	08f8      	lsrs	r0, r7, #3
 8001356:	e6c8      	b.n	80010ea <__aeabi_dadd+0x25a>
 8001358:	2c00      	cmp	r4, #0
 800135a:	d000      	beq.n	800135e <__aeabi_dadd+0x4ce>
 800135c:	e081      	b.n	8001462 <__aeabi_dadd+0x5d2>
 800135e:	4643      	mov	r3, r8
 8001360:	430b      	orrs	r3, r1
 8001362:	d115      	bne.n	8001390 <__aeabi_dadd+0x500>
 8001364:	2080      	movs	r0, #128	; 0x80
 8001366:	2500      	movs	r5, #0
 8001368:	0300      	lsls	r0, r0, #12
 800136a:	e6e3      	b.n	8001134 <__aeabi_dadd+0x2a4>
 800136c:	1a5c      	subs	r4, r3, r1
 800136e:	42a3      	cmp	r3, r4
 8001370:	419b      	sbcs	r3, r3
 8001372:	1bc7      	subs	r7, r0, r7
 8001374:	425b      	negs	r3, r3
 8001376:	2601      	movs	r6, #1
 8001378:	1aff      	subs	r7, r7, r3
 800137a:	e5da      	b.n	8000f32 <__aeabi_dadd+0xa2>
 800137c:	0742      	lsls	r2, r0, #29
 800137e:	08db      	lsrs	r3, r3, #3
 8001380:	4313      	orrs	r3, r2
 8001382:	08c0      	lsrs	r0, r0, #3
 8001384:	e6d2      	b.n	800112c <__aeabi_dadd+0x29c>
 8001386:	0742      	lsls	r2, r0, #29
 8001388:	08db      	lsrs	r3, r3, #3
 800138a:	4313      	orrs	r3, r2
 800138c:	08c0      	lsrs	r0, r0, #3
 800138e:	e6ac      	b.n	80010ea <__aeabi_dadd+0x25a>
 8001390:	4643      	mov	r3, r8
 8001392:	4642      	mov	r2, r8
 8001394:	08c9      	lsrs	r1, r1, #3
 8001396:	075b      	lsls	r3, r3, #29
 8001398:	4655      	mov	r5, sl
 800139a:	430b      	orrs	r3, r1
 800139c:	08d0      	lsrs	r0, r2, #3
 800139e:	e6c5      	b.n	800112c <__aeabi_dadd+0x29c>
 80013a0:	4643      	mov	r3, r8
 80013a2:	4642      	mov	r2, r8
 80013a4:	075b      	lsls	r3, r3, #29
 80013a6:	08c9      	lsrs	r1, r1, #3
 80013a8:	430b      	orrs	r3, r1
 80013aa:	08d0      	lsrs	r0, r2, #3
 80013ac:	e6be      	b.n	800112c <__aeabi_dadd+0x29c>
 80013ae:	4303      	orrs	r3, r0
 80013b0:	001c      	movs	r4, r3
 80013b2:	1e63      	subs	r3, r4, #1
 80013b4:	419c      	sbcs	r4, r3
 80013b6:	e6fc      	b.n	80011b2 <__aeabi_dadd+0x322>
 80013b8:	0002      	movs	r2, r0
 80013ba:	3c20      	subs	r4, #32
 80013bc:	40e2      	lsrs	r2, r4
 80013be:	0014      	movs	r4, r2
 80013c0:	4662      	mov	r2, ip
 80013c2:	2a20      	cmp	r2, #32
 80013c4:	d003      	beq.n	80013ce <__aeabi_dadd+0x53e>
 80013c6:	2540      	movs	r5, #64	; 0x40
 80013c8:	1aad      	subs	r5, r5, r2
 80013ca:	40a8      	lsls	r0, r5
 80013cc:	4303      	orrs	r3, r0
 80013ce:	1e58      	subs	r0, r3, #1
 80013d0:	4183      	sbcs	r3, r0
 80013d2:	4323      	orrs	r3, r4
 80013d4:	e775      	b.n	80012c2 <__aeabi_dadd+0x432>
 80013d6:	2a00      	cmp	r2, #0
 80013d8:	d0e2      	beq.n	80013a0 <__aeabi_dadd+0x510>
 80013da:	003a      	movs	r2, r7
 80013dc:	430a      	orrs	r2, r1
 80013de:	d0cd      	beq.n	800137c <__aeabi_dadd+0x4ec>
 80013e0:	0742      	lsls	r2, r0, #29
 80013e2:	08db      	lsrs	r3, r3, #3
 80013e4:	4313      	orrs	r3, r2
 80013e6:	2280      	movs	r2, #128	; 0x80
 80013e8:	08c0      	lsrs	r0, r0, #3
 80013ea:	0312      	lsls	r2, r2, #12
 80013ec:	4210      	tst	r0, r2
 80013ee:	d006      	beq.n	80013fe <__aeabi_dadd+0x56e>
 80013f0:	08fc      	lsrs	r4, r7, #3
 80013f2:	4214      	tst	r4, r2
 80013f4:	d103      	bne.n	80013fe <__aeabi_dadd+0x56e>
 80013f6:	0020      	movs	r0, r4
 80013f8:	08cb      	lsrs	r3, r1, #3
 80013fa:	077a      	lsls	r2, r7, #29
 80013fc:	4313      	orrs	r3, r2
 80013fe:	0f5a      	lsrs	r2, r3, #29
 8001400:	00db      	lsls	r3, r3, #3
 8001402:	0752      	lsls	r2, r2, #29
 8001404:	08db      	lsrs	r3, r3, #3
 8001406:	4313      	orrs	r3, r2
 8001408:	e690      	b.n	800112c <__aeabi_dadd+0x29c>
 800140a:	4643      	mov	r3, r8
 800140c:	430b      	orrs	r3, r1
 800140e:	d100      	bne.n	8001412 <__aeabi_dadd+0x582>
 8001410:	e709      	b.n	8001226 <__aeabi_dadd+0x396>
 8001412:	4643      	mov	r3, r8
 8001414:	4642      	mov	r2, r8
 8001416:	08c9      	lsrs	r1, r1, #3
 8001418:	075b      	lsls	r3, r3, #29
 800141a:	4655      	mov	r5, sl
 800141c:	430b      	orrs	r3, r1
 800141e:	08d0      	lsrs	r0, r2, #3
 8001420:	e666      	b.n	80010f0 <__aeabi_dadd+0x260>
 8001422:	1acc      	subs	r4, r1, r3
 8001424:	42a1      	cmp	r1, r4
 8001426:	4189      	sbcs	r1, r1
 8001428:	1a3f      	subs	r7, r7, r0
 800142a:	4249      	negs	r1, r1
 800142c:	4655      	mov	r5, sl
 800142e:	2601      	movs	r6, #1
 8001430:	1a7f      	subs	r7, r7, r1
 8001432:	e57e      	b.n	8000f32 <__aeabi_dadd+0xa2>
 8001434:	4642      	mov	r2, r8
 8001436:	1a5c      	subs	r4, r3, r1
 8001438:	1a87      	subs	r7, r0, r2
 800143a:	42a3      	cmp	r3, r4
 800143c:	4192      	sbcs	r2, r2
 800143e:	4252      	negs	r2, r2
 8001440:	1abf      	subs	r7, r7, r2
 8001442:	023a      	lsls	r2, r7, #8
 8001444:	d53d      	bpl.n	80014c2 <__aeabi_dadd+0x632>
 8001446:	1acc      	subs	r4, r1, r3
 8001448:	42a1      	cmp	r1, r4
 800144a:	4189      	sbcs	r1, r1
 800144c:	4643      	mov	r3, r8
 800144e:	4249      	negs	r1, r1
 8001450:	1a1f      	subs	r7, r3, r0
 8001452:	4655      	mov	r5, sl
 8001454:	1a7f      	subs	r7, r7, r1
 8001456:	e595      	b.n	8000f84 <__aeabi_dadd+0xf4>
 8001458:	077b      	lsls	r3, r7, #29
 800145a:	08c9      	lsrs	r1, r1, #3
 800145c:	430b      	orrs	r3, r1
 800145e:	08f8      	lsrs	r0, r7, #3
 8001460:	e643      	b.n	80010ea <__aeabi_dadd+0x25a>
 8001462:	4644      	mov	r4, r8
 8001464:	08db      	lsrs	r3, r3, #3
 8001466:	430c      	orrs	r4, r1
 8001468:	d130      	bne.n	80014cc <__aeabi_dadd+0x63c>
 800146a:	0742      	lsls	r2, r0, #29
 800146c:	4313      	orrs	r3, r2
 800146e:	08c0      	lsrs	r0, r0, #3
 8001470:	e65c      	b.n	800112c <__aeabi_dadd+0x29c>
 8001472:	077b      	lsls	r3, r7, #29
 8001474:	08c9      	lsrs	r1, r1, #3
 8001476:	430b      	orrs	r3, r1
 8001478:	08f8      	lsrs	r0, r7, #3
 800147a:	e639      	b.n	80010f0 <__aeabi_dadd+0x260>
 800147c:	185c      	adds	r4, r3, r1
 800147e:	429c      	cmp	r4, r3
 8001480:	419b      	sbcs	r3, r3
 8001482:	4440      	add	r0, r8
 8001484:	425b      	negs	r3, r3
 8001486:	18c7      	adds	r7, r0, r3
 8001488:	023b      	lsls	r3, r7, #8
 800148a:	d400      	bmi.n	800148e <__aeabi_dadd+0x5fe>
 800148c:	e625      	b.n	80010da <__aeabi_dadd+0x24a>
 800148e:	4b1d      	ldr	r3, [pc, #116]	; (8001504 <__aeabi_dadd+0x674>)
 8001490:	2601      	movs	r6, #1
 8001492:	401f      	ands	r7, r3
 8001494:	e621      	b.n	80010da <__aeabi_dadd+0x24a>
 8001496:	0004      	movs	r4, r0
 8001498:	3a20      	subs	r2, #32
 800149a:	40d4      	lsrs	r4, r2
 800149c:	4662      	mov	r2, ip
 800149e:	2a20      	cmp	r2, #32
 80014a0:	d004      	beq.n	80014ac <__aeabi_dadd+0x61c>
 80014a2:	2240      	movs	r2, #64	; 0x40
 80014a4:	4666      	mov	r6, ip
 80014a6:	1b92      	subs	r2, r2, r6
 80014a8:	4090      	lsls	r0, r2
 80014aa:	4303      	orrs	r3, r0
 80014ac:	1e5a      	subs	r2, r3, #1
 80014ae:	4193      	sbcs	r3, r2
 80014b0:	431c      	orrs	r4, r3
 80014b2:	e67e      	b.n	80011b2 <__aeabi_dadd+0x322>
 80014b4:	185c      	adds	r4, r3, r1
 80014b6:	428c      	cmp	r4, r1
 80014b8:	4189      	sbcs	r1, r1
 80014ba:	4440      	add	r0, r8
 80014bc:	4249      	negs	r1, r1
 80014be:	1847      	adds	r7, r0, r1
 80014c0:	e6dd      	b.n	800127e <__aeabi_dadd+0x3ee>
 80014c2:	0023      	movs	r3, r4
 80014c4:	433b      	orrs	r3, r7
 80014c6:	d100      	bne.n	80014ca <__aeabi_dadd+0x63a>
 80014c8:	e6ad      	b.n	8001226 <__aeabi_dadd+0x396>
 80014ca:	e606      	b.n	80010da <__aeabi_dadd+0x24a>
 80014cc:	0744      	lsls	r4, r0, #29
 80014ce:	4323      	orrs	r3, r4
 80014d0:	2480      	movs	r4, #128	; 0x80
 80014d2:	08c0      	lsrs	r0, r0, #3
 80014d4:	0324      	lsls	r4, r4, #12
 80014d6:	4220      	tst	r0, r4
 80014d8:	d008      	beq.n	80014ec <__aeabi_dadd+0x65c>
 80014da:	4642      	mov	r2, r8
 80014dc:	08d6      	lsrs	r6, r2, #3
 80014de:	4226      	tst	r6, r4
 80014e0:	d104      	bne.n	80014ec <__aeabi_dadd+0x65c>
 80014e2:	4655      	mov	r5, sl
 80014e4:	0030      	movs	r0, r6
 80014e6:	08cb      	lsrs	r3, r1, #3
 80014e8:	0751      	lsls	r1, r2, #29
 80014ea:	430b      	orrs	r3, r1
 80014ec:	0f5a      	lsrs	r2, r3, #29
 80014ee:	00db      	lsls	r3, r3, #3
 80014f0:	08db      	lsrs	r3, r3, #3
 80014f2:	0752      	lsls	r2, r2, #29
 80014f4:	4313      	orrs	r3, r2
 80014f6:	e619      	b.n	800112c <__aeabi_dadd+0x29c>
 80014f8:	2300      	movs	r3, #0
 80014fa:	4a01      	ldr	r2, [pc, #4]	; (8001500 <__aeabi_dadd+0x670>)
 80014fc:	001f      	movs	r7, r3
 80014fe:	e55e      	b.n	8000fbe <__aeabi_dadd+0x12e>
 8001500:	000007ff 	.word	0x000007ff
 8001504:	ff7fffff 	.word	0xff7fffff

08001508 <__aeabi_ddiv>:
 8001508:	b5f0      	push	{r4, r5, r6, r7, lr}
 800150a:	4657      	mov	r7, sl
 800150c:	464e      	mov	r6, r9
 800150e:	4645      	mov	r5, r8
 8001510:	46de      	mov	lr, fp
 8001512:	b5e0      	push	{r5, r6, r7, lr}
 8001514:	4681      	mov	r9, r0
 8001516:	0005      	movs	r5, r0
 8001518:	030c      	lsls	r4, r1, #12
 800151a:	0048      	lsls	r0, r1, #1
 800151c:	4692      	mov	sl, r2
 800151e:	001f      	movs	r7, r3
 8001520:	b085      	sub	sp, #20
 8001522:	0b24      	lsrs	r4, r4, #12
 8001524:	0d40      	lsrs	r0, r0, #21
 8001526:	0fce      	lsrs	r6, r1, #31
 8001528:	2800      	cmp	r0, #0
 800152a:	d100      	bne.n	800152e <__aeabi_ddiv+0x26>
 800152c:	e156      	b.n	80017dc <__aeabi_ddiv+0x2d4>
 800152e:	4bd4      	ldr	r3, [pc, #848]	; (8001880 <__aeabi_ddiv+0x378>)
 8001530:	4298      	cmp	r0, r3
 8001532:	d100      	bne.n	8001536 <__aeabi_ddiv+0x2e>
 8001534:	e172      	b.n	800181c <__aeabi_ddiv+0x314>
 8001536:	0f6b      	lsrs	r3, r5, #29
 8001538:	00e4      	lsls	r4, r4, #3
 800153a:	431c      	orrs	r4, r3
 800153c:	2380      	movs	r3, #128	; 0x80
 800153e:	041b      	lsls	r3, r3, #16
 8001540:	4323      	orrs	r3, r4
 8001542:	4698      	mov	r8, r3
 8001544:	4bcf      	ldr	r3, [pc, #828]	; (8001884 <__aeabi_ddiv+0x37c>)
 8001546:	00ed      	lsls	r5, r5, #3
 8001548:	469b      	mov	fp, r3
 800154a:	2300      	movs	r3, #0
 800154c:	4699      	mov	r9, r3
 800154e:	4483      	add	fp, r0
 8001550:	9300      	str	r3, [sp, #0]
 8001552:	033c      	lsls	r4, r7, #12
 8001554:	007b      	lsls	r3, r7, #1
 8001556:	4650      	mov	r0, sl
 8001558:	0b24      	lsrs	r4, r4, #12
 800155a:	0d5b      	lsrs	r3, r3, #21
 800155c:	0fff      	lsrs	r7, r7, #31
 800155e:	2b00      	cmp	r3, #0
 8001560:	d100      	bne.n	8001564 <__aeabi_ddiv+0x5c>
 8001562:	e11f      	b.n	80017a4 <__aeabi_ddiv+0x29c>
 8001564:	4ac6      	ldr	r2, [pc, #792]	; (8001880 <__aeabi_ddiv+0x378>)
 8001566:	4293      	cmp	r3, r2
 8001568:	d100      	bne.n	800156c <__aeabi_ddiv+0x64>
 800156a:	e162      	b.n	8001832 <__aeabi_ddiv+0x32a>
 800156c:	49c5      	ldr	r1, [pc, #788]	; (8001884 <__aeabi_ddiv+0x37c>)
 800156e:	0f42      	lsrs	r2, r0, #29
 8001570:	468c      	mov	ip, r1
 8001572:	00e4      	lsls	r4, r4, #3
 8001574:	4659      	mov	r1, fp
 8001576:	4314      	orrs	r4, r2
 8001578:	2280      	movs	r2, #128	; 0x80
 800157a:	4463      	add	r3, ip
 800157c:	0412      	lsls	r2, r2, #16
 800157e:	1acb      	subs	r3, r1, r3
 8001580:	4314      	orrs	r4, r2
 8001582:	469b      	mov	fp, r3
 8001584:	00c2      	lsls	r2, r0, #3
 8001586:	2000      	movs	r0, #0
 8001588:	0033      	movs	r3, r6
 800158a:	407b      	eors	r3, r7
 800158c:	469a      	mov	sl, r3
 800158e:	464b      	mov	r3, r9
 8001590:	2b0f      	cmp	r3, #15
 8001592:	d827      	bhi.n	80015e4 <__aeabi_ddiv+0xdc>
 8001594:	49bc      	ldr	r1, [pc, #752]	; (8001888 <__aeabi_ddiv+0x380>)
 8001596:	009b      	lsls	r3, r3, #2
 8001598:	58cb      	ldr	r3, [r1, r3]
 800159a:	469f      	mov	pc, r3
 800159c:	46b2      	mov	sl, r6
 800159e:	9b00      	ldr	r3, [sp, #0]
 80015a0:	2b02      	cmp	r3, #2
 80015a2:	d016      	beq.n	80015d2 <__aeabi_ddiv+0xca>
 80015a4:	2b03      	cmp	r3, #3
 80015a6:	d100      	bne.n	80015aa <__aeabi_ddiv+0xa2>
 80015a8:	e28e      	b.n	8001ac8 <__aeabi_ddiv+0x5c0>
 80015aa:	2b01      	cmp	r3, #1
 80015ac:	d000      	beq.n	80015b0 <__aeabi_ddiv+0xa8>
 80015ae:	e0d9      	b.n	8001764 <__aeabi_ddiv+0x25c>
 80015b0:	2300      	movs	r3, #0
 80015b2:	2400      	movs	r4, #0
 80015b4:	2500      	movs	r5, #0
 80015b6:	4652      	mov	r2, sl
 80015b8:	051b      	lsls	r3, r3, #20
 80015ba:	4323      	orrs	r3, r4
 80015bc:	07d2      	lsls	r2, r2, #31
 80015be:	4313      	orrs	r3, r2
 80015c0:	0028      	movs	r0, r5
 80015c2:	0019      	movs	r1, r3
 80015c4:	b005      	add	sp, #20
 80015c6:	bcf0      	pop	{r4, r5, r6, r7}
 80015c8:	46bb      	mov	fp, r7
 80015ca:	46b2      	mov	sl, r6
 80015cc:	46a9      	mov	r9, r5
 80015ce:	46a0      	mov	r8, r4
 80015d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80015d2:	2400      	movs	r4, #0
 80015d4:	2500      	movs	r5, #0
 80015d6:	4baa      	ldr	r3, [pc, #680]	; (8001880 <__aeabi_ddiv+0x378>)
 80015d8:	e7ed      	b.n	80015b6 <__aeabi_ddiv+0xae>
 80015da:	46ba      	mov	sl, r7
 80015dc:	46a0      	mov	r8, r4
 80015de:	0015      	movs	r5, r2
 80015e0:	9000      	str	r0, [sp, #0]
 80015e2:	e7dc      	b.n	800159e <__aeabi_ddiv+0x96>
 80015e4:	4544      	cmp	r4, r8
 80015e6:	d200      	bcs.n	80015ea <__aeabi_ddiv+0xe2>
 80015e8:	e1c7      	b.n	800197a <__aeabi_ddiv+0x472>
 80015ea:	d100      	bne.n	80015ee <__aeabi_ddiv+0xe6>
 80015ec:	e1c2      	b.n	8001974 <__aeabi_ddiv+0x46c>
 80015ee:	2301      	movs	r3, #1
 80015f0:	425b      	negs	r3, r3
 80015f2:	469c      	mov	ip, r3
 80015f4:	002e      	movs	r6, r5
 80015f6:	4640      	mov	r0, r8
 80015f8:	2500      	movs	r5, #0
 80015fa:	44e3      	add	fp, ip
 80015fc:	0223      	lsls	r3, r4, #8
 80015fe:	0e14      	lsrs	r4, r2, #24
 8001600:	431c      	orrs	r4, r3
 8001602:	0c1b      	lsrs	r3, r3, #16
 8001604:	4699      	mov	r9, r3
 8001606:	0423      	lsls	r3, r4, #16
 8001608:	0c1f      	lsrs	r7, r3, #16
 800160a:	0212      	lsls	r2, r2, #8
 800160c:	4649      	mov	r1, r9
 800160e:	9200      	str	r2, [sp, #0]
 8001610:	9701      	str	r7, [sp, #4]
 8001612:	f7fe fe1b 	bl	800024c <__aeabi_uidivmod>
 8001616:	0002      	movs	r2, r0
 8001618:	437a      	muls	r2, r7
 800161a:	040b      	lsls	r3, r1, #16
 800161c:	0c31      	lsrs	r1, r6, #16
 800161e:	4680      	mov	r8, r0
 8001620:	4319      	orrs	r1, r3
 8001622:	428a      	cmp	r2, r1
 8001624:	d907      	bls.n	8001636 <__aeabi_ddiv+0x12e>
 8001626:	2301      	movs	r3, #1
 8001628:	425b      	negs	r3, r3
 800162a:	469c      	mov	ip, r3
 800162c:	1909      	adds	r1, r1, r4
 800162e:	44e0      	add	r8, ip
 8001630:	428c      	cmp	r4, r1
 8001632:	d800      	bhi.n	8001636 <__aeabi_ddiv+0x12e>
 8001634:	e207      	b.n	8001a46 <__aeabi_ddiv+0x53e>
 8001636:	1a88      	subs	r0, r1, r2
 8001638:	4649      	mov	r1, r9
 800163a:	f7fe fe07 	bl	800024c <__aeabi_uidivmod>
 800163e:	0409      	lsls	r1, r1, #16
 8001640:	468c      	mov	ip, r1
 8001642:	0431      	lsls	r1, r6, #16
 8001644:	4666      	mov	r6, ip
 8001646:	9a01      	ldr	r2, [sp, #4]
 8001648:	0c09      	lsrs	r1, r1, #16
 800164a:	4342      	muls	r2, r0
 800164c:	0003      	movs	r3, r0
 800164e:	4331      	orrs	r1, r6
 8001650:	428a      	cmp	r2, r1
 8001652:	d904      	bls.n	800165e <__aeabi_ddiv+0x156>
 8001654:	1909      	adds	r1, r1, r4
 8001656:	3b01      	subs	r3, #1
 8001658:	428c      	cmp	r4, r1
 800165a:	d800      	bhi.n	800165e <__aeabi_ddiv+0x156>
 800165c:	e1ed      	b.n	8001a3a <__aeabi_ddiv+0x532>
 800165e:	1a88      	subs	r0, r1, r2
 8001660:	4642      	mov	r2, r8
 8001662:	0412      	lsls	r2, r2, #16
 8001664:	431a      	orrs	r2, r3
 8001666:	4690      	mov	r8, r2
 8001668:	4641      	mov	r1, r8
 800166a:	9b00      	ldr	r3, [sp, #0]
 800166c:	040e      	lsls	r6, r1, #16
 800166e:	0c1b      	lsrs	r3, r3, #16
 8001670:	001f      	movs	r7, r3
 8001672:	9302      	str	r3, [sp, #8]
 8001674:	9b00      	ldr	r3, [sp, #0]
 8001676:	0c36      	lsrs	r6, r6, #16
 8001678:	041b      	lsls	r3, r3, #16
 800167a:	0c19      	lsrs	r1, r3, #16
 800167c:	000b      	movs	r3, r1
 800167e:	4373      	muls	r3, r6
 8001680:	0c12      	lsrs	r2, r2, #16
 8001682:	437e      	muls	r6, r7
 8001684:	9103      	str	r1, [sp, #12]
 8001686:	4351      	muls	r1, r2
 8001688:	437a      	muls	r2, r7
 800168a:	0c1f      	lsrs	r7, r3, #16
 800168c:	46bc      	mov	ip, r7
 800168e:	1876      	adds	r6, r6, r1
 8001690:	4466      	add	r6, ip
 8001692:	42b1      	cmp	r1, r6
 8001694:	d903      	bls.n	800169e <__aeabi_ddiv+0x196>
 8001696:	2180      	movs	r1, #128	; 0x80
 8001698:	0249      	lsls	r1, r1, #9
 800169a:	468c      	mov	ip, r1
 800169c:	4462      	add	r2, ip
 800169e:	0c31      	lsrs	r1, r6, #16
 80016a0:	188a      	adds	r2, r1, r2
 80016a2:	0431      	lsls	r1, r6, #16
 80016a4:	041e      	lsls	r6, r3, #16
 80016a6:	0c36      	lsrs	r6, r6, #16
 80016a8:	198e      	adds	r6, r1, r6
 80016aa:	4290      	cmp	r0, r2
 80016ac:	d302      	bcc.n	80016b4 <__aeabi_ddiv+0x1ac>
 80016ae:	d112      	bne.n	80016d6 <__aeabi_ddiv+0x1ce>
 80016b0:	42b5      	cmp	r5, r6
 80016b2:	d210      	bcs.n	80016d6 <__aeabi_ddiv+0x1ce>
 80016b4:	4643      	mov	r3, r8
 80016b6:	1e59      	subs	r1, r3, #1
 80016b8:	9b00      	ldr	r3, [sp, #0]
 80016ba:	469c      	mov	ip, r3
 80016bc:	4465      	add	r5, ip
 80016be:	001f      	movs	r7, r3
 80016c0:	429d      	cmp	r5, r3
 80016c2:	419b      	sbcs	r3, r3
 80016c4:	425b      	negs	r3, r3
 80016c6:	191b      	adds	r3, r3, r4
 80016c8:	18c0      	adds	r0, r0, r3
 80016ca:	4284      	cmp	r4, r0
 80016cc:	d200      	bcs.n	80016d0 <__aeabi_ddiv+0x1c8>
 80016ce:	e1a0      	b.n	8001a12 <__aeabi_ddiv+0x50a>
 80016d0:	d100      	bne.n	80016d4 <__aeabi_ddiv+0x1cc>
 80016d2:	e19b      	b.n	8001a0c <__aeabi_ddiv+0x504>
 80016d4:	4688      	mov	r8, r1
 80016d6:	1bae      	subs	r6, r5, r6
 80016d8:	42b5      	cmp	r5, r6
 80016da:	41ad      	sbcs	r5, r5
 80016dc:	1a80      	subs	r0, r0, r2
 80016de:	426d      	negs	r5, r5
 80016e0:	1b40      	subs	r0, r0, r5
 80016e2:	4284      	cmp	r4, r0
 80016e4:	d100      	bne.n	80016e8 <__aeabi_ddiv+0x1e0>
 80016e6:	e1d5      	b.n	8001a94 <__aeabi_ddiv+0x58c>
 80016e8:	4649      	mov	r1, r9
 80016ea:	f7fe fdaf 	bl	800024c <__aeabi_uidivmod>
 80016ee:	9a01      	ldr	r2, [sp, #4]
 80016f0:	040b      	lsls	r3, r1, #16
 80016f2:	4342      	muls	r2, r0
 80016f4:	0c31      	lsrs	r1, r6, #16
 80016f6:	0005      	movs	r5, r0
 80016f8:	4319      	orrs	r1, r3
 80016fa:	428a      	cmp	r2, r1
 80016fc:	d900      	bls.n	8001700 <__aeabi_ddiv+0x1f8>
 80016fe:	e16c      	b.n	80019da <__aeabi_ddiv+0x4d2>
 8001700:	1a88      	subs	r0, r1, r2
 8001702:	4649      	mov	r1, r9
 8001704:	f7fe fda2 	bl	800024c <__aeabi_uidivmod>
 8001708:	9a01      	ldr	r2, [sp, #4]
 800170a:	0436      	lsls	r6, r6, #16
 800170c:	4342      	muls	r2, r0
 800170e:	0409      	lsls	r1, r1, #16
 8001710:	0c36      	lsrs	r6, r6, #16
 8001712:	0003      	movs	r3, r0
 8001714:	430e      	orrs	r6, r1
 8001716:	42b2      	cmp	r2, r6
 8001718:	d900      	bls.n	800171c <__aeabi_ddiv+0x214>
 800171a:	e153      	b.n	80019c4 <__aeabi_ddiv+0x4bc>
 800171c:	9803      	ldr	r0, [sp, #12]
 800171e:	1ab6      	subs	r6, r6, r2
 8001720:	0002      	movs	r2, r0
 8001722:	042d      	lsls	r5, r5, #16
 8001724:	431d      	orrs	r5, r3
 8001726:	9f02      	ldr	r7, [sp, #8]
 8001728:	042b      	lsls	r3, r5, #16
 800172a:	0c1b      	lsrs	r3, r3, #16
 800172c:	435a      	muls	r2, r3
 800172e:	437b      	muls	r3, r7
 8001730:	469c      	mov	ip, r3
 8001732:	0c29      	lsrs	r1, r5, #16
 8001734:	4348      	muls	r0, r1
 8001736:	0c13      	lsrs	r3, r2, #16
 8001738:	4484      	add	ip, r0
 800173a:	4463      	add	r3, ip
 800173c:	4379      	muls	r1, r7
 800173e:	4298      	cmp	r0, r3
 8001740:	d903      	bls.n	800174a <__aeabi_ddiv+0x242>
 8001742:	2080      	movs	r0, #128	; 0x80
 8001744:	0240      	lsls	r0, r0, #9
 8001746:	4684      	mov	ip, r0
 8001748:	4461      	add	r1, ip
 800174a:	0c18      	lsrs	r0, r3, #16
 800174c:	0412      	lsls	r2, r2, #16
 800174e:	041b      	lsls	r3, r3, #16
 8001750:	0c12      	lsrs	r2, r2, #16
 8001752:	1841      	adds	r1, r0, r1
 8001754:	189b      	adds	r3, r3, r2
 8001756:	428e      	cmp	r6, r1
 8001758:	d200      	bcs.n	800175c <__aeabi_ddiv+0x254>
 800175a:	e0ff      	b.n	800195c <__aeabi_ddiv+0x454>
 800175c:	d100      	bne.n	8001760 <__aeabi_ddiv+0x258>
 800175e:	e0fa      	b.n	8001956 <__aeabi_ddiv+0x44e>
 8001760:	2301      	movs	r3, #1
 8001762:	431d      	orrs	r5, r3
 8001764:	4a49      	ldr	r2, [pc, #292]	; (800188c <__aeabi_ddiv+0x384>)
 8001766:	445a      	add	r2, fp
 8001768:	2a00      	cmp	r2, #0
 800176a:	dc00      	bgt.n	800176e <__aeabi_ddiv+0x266>
 800176c:	e0aa      	b.n	80018c4 <__aeabi_ddiv+0x3bc>
 800176e:	076b      	lsls	r3, r5, #29
 8001770:	d000      	beq.n	8001774 <__aeabi_ddiv+0x26c>
 8001772:	e13d      	b.n	80019f0 <__aeabi_ddiv+0x4e8>
 8001774:	08ed      	lsrs	r5, r5, #3
 8001776:	4643      	mov	r3, r8
 8001778:	01db      	lsls	r3, r3, #7
 800177a:	d506      	bpl.n	800178a <__aeabi_ddiv+0x282>
 800177c:	4642      	mov	r2, r8
 800177e:	4b44      	ldr	r3, [pc, #272]	; (8001890 <__aeabi_ddiv+0x388>)
 8001780:	401a      	ands	r2, r3
 8001782:	4690      	mov	r8, r2
 8001784:	2280      	movs	r2, #128	; 0x80
 8001786:	00d2      	lsls	r2, r2, #3
 8001788:	445a      	add	r2, fp
 800178a:	4b42      	ldr	r3, [pc, #264]	; (8001894 <__aeabi_ddiv+0x38c>)
 800178c:	429a      	cmp	r2, r3
 800178e:	dd00      	ble.n	8001792 <__aeabi_ddiv+0x28a>
 8001790:	e71f      	b.n	80015d2 <__aeabi_ddiv+0xca>
 8001792:	4643      	mov	r3, r8
 8001794:	075b      	lsls	r3, r3, #29
 8001796:	431d      	orrs	r5, r3
 8001798:	4643      	mov	r3, r8
 800179a:	0552      	lsls	r2, r2, #21
 800179c:	025c      	lsls	r4, r3, #9
 800179e:	0b24      	lsrs	r4, r4, #12
 80017a0:	0d53      	lsrs	r3, r2, #21
 80017a2:	e708      	b.n	80015b6 <__aeabi_ddiv+0xae>
 80017a4:	4652      	mov	r2, sl
 80017a6:	4322      	orrs	r2, r4
 80017a8:	d100      	bne.n	80017ac <__aeabi_ddiv+0x2a4>
 80017aa:	e07b      	b.n	80018a4 <__aeabi_ddiv+0x39c>
 80017ac:	2c00      	cmp	r4, #0
 80017ae:	d100      	bne.n	80017b2 <__aeabi_ddiv+0x2aa>
 80017b0:	e0fa      	b.n	80019a8 <__aeabi_ddiv+0x4a0>
 80017b2:	0020      	movs	r0, r4
 80017b4:	f001 fa22 	bl	8002bfc <__clzsi2>
 80017b8:	0002      	movs	r2, r0
 80017ba:	3a0b      	subs	r2, #11
 80017bc:	231d      	movs	r3, #29
 80017be:	0001      	movs	r1, r0
 80017c0:	1a9b      	subs	r3, r3, r2
 80017c2:	4652      	mov	r2, sl
 80017c4:	3908      	subs	r1, #8
 80017c6:	40da      	lsrs	r2, r3
 80017c8:	408c      	lsls	r4, r1
 80017ca:	4314      	orrs	r4, r2
 80017cc:	4652      	mov	r2, sl
 80017ce:	408a      	lsls	r2, r1
 80017d0:	4b31      	ldr	r3, [pc, #196]	; (8001898 <__aeabi_ddiv+0x390>)
 80017d2:	4458      	add	r0, fp
 80017d4:	469b      	mov	fp, r3
 80017d6:	4483      	add	fp, r0
 80017d8:	2000      	movs	r0, #0
 80017da:	e6d5      	b.n	8001588 <__aeabi_ddiv+0x80>
 80017dc:	464b      	mov	r3, r9
 80017de:	4323      	orrs	r3, r4
 80017e0:	4698      	mov	r8, r3
 80017e2:	d044      	beq.n	800186e <__aeabi_ddiv+0x366>
 80017e4:	2c00      	cmp	r4, #0
 80017e6:	d100      	bne.n	80017ea <__aeabi_ddiv+0x2e2>
 80017e8:	e0ce      	b.n	8001988 <__aeabi_ddiv+0x480>
 80017ea:	0020      	movs	r0, r4
 80017ec:	f001 fa06 	bl	8002bfc <__clzsi2>
 80017f0:	0001      	movs	r1, r0
 80017f2:	0002      	movs	r2, r0
 80017f4:	390b      	subs	r1, #11
 80017f6:	231d      	movs	r3, #29
 80017f8:	1a5b      	subs	r3, r3, r1
 80017fa:	4649      	mov	r1, r9
 80017fc:	0010      	movs	r0, r2
 80017fe:	40d9      	lsrs	r1, r3
 8001800:	3808      	subs	r0, #8
 8001802:	4084      	lsls	r4, r0
 8001804:	000b      	movs	r3, r1
 8001806:	464d      	mov	r5, r9
 8001808:	4323      	orrs	r3, r4
 800180a:	4698      	mov	r8, r3
 800180c:	4085      	lsls	r5, r0
 800180e:	4823      	ldr	r0, [pc, #140]	; (800189c <__aeabi_ddiv+0x394>)
 8001810:	1a83      	subs	r3, r0, r2
 8001812:	469b      	mov	fp, r3
 8001814:	2300      	movs	r3, #0
 8001816:	4699      	mov	r9, r3
 8001818:	9300      	str	r3, [sp, #0]
 800181a:	e69a      	b.n	8001552 <__aeabi_ddiv+0x4a>
 800181c:	464b      	mov	r3, r9
 800181e:	4323      	orrs	r3, r4
 8001820:	4698      	mov	r8, r3
 8001822:	d11d      	bne.n	8001860 <__aeabi_ddiv+0x358>
 8001824:	2308      	movs	r3, #8
 8001826:	4699      	mov	r9, r3
 8001828:	3b06      	subs	r3, #6
 800182a:	2500      	movs	r5, #0
 800182c:	4683      	mov	fp, r0
 800182e:	9300      	str	r3, [sp, #0]
 8001830:	e68f      	b.n	8001552 <__aeabi_ddiv+0x4a>
 8001832:	4652      	mov	r2, sl
 8001834:	4322      	orrs	r2, r4
 8001836:	d109      	bne.n	800184c <__aeabi_ddiv+0x344>
 8001838:	2302      	movs	r3, #2
 800183a:	4649      	mov	r1, r9
 800183c:	4319      	orrs	r1, r3
 800183e:	4b18      	ldr	r3, [pc, #96]	; (80018a0 <__aeabi_ddiv+0x398>)
 8001840:	4689      	mov	r9, r1
 8001842:	469c      	mov	ip, r3
 8001844:	2400      	movs	r4, #0
 8001846:	2002      	movs	r0, #2
 8001848:	44e3      	add	fp, ip
 800184a:	e69d      	b.n	8001588 <__aeabi_ddiv+0x80>
 800184c:	2303      	movs	r3, #3
 800184e:	464a      	mov	r2, r9
 8001850:	431a      	orrs	r2, r3
 8001852:	4b13      	ldr	r3, [pc, #76]	; (80018a0 <__aeabi_ddiv+0x398>)
 8001854:	4691      	mov	r9, r2
 8001856:	469c      	mov	ip, r3
 8001858:	4652      	mov	r2, sl
 800185a:	2003      	movs	r0, #3
 800185c:	44e3      	add	fp, ip
 800185e:	e693      	b.n	8001588 <__aeabi_ddiv+0x80>
 8001860:	230c      	movs	r3, #12
 8001862:	4699      	mov	r9, r3
 8001864:	3b09      	subs	r3, #9
 8001866:	46a0      	mov	r8, r4
 8001868:	4683      	mov	fp, r0
 800186a:	9300      	str	r3, [sp, #0]
 800186c:	e671      	b.n	8001552 <__aeabi_ddiv+0x4a>
 800186e:	2304      	movs	r3, #4
 8001870:	4699      	mov	r9, r3
 8001872:	2300      	movs	r3, #0
 8001874:	469b      	mov	fp, r3
 8001876:	3301      	adds	r3, #1
 8001878:	2500      	movs	r5, #0
 800187a:	9300      	str	r3, [sp, #0]
 800187c:	e669      	b.n	8001552 <__aeabi_ddiv+0x4a>
 800187e:	46c0      	nop			; (mov r8, r8)
 8001880:	000007ff 	.word	0x000007ff
 8001884:	fffffc01 	.word	0xfffffc01
 8001888:	0800cc30 	.word	0x0800cc30
 800188c:	000003ff 	.word	0x000003ff
 8001890:	feffffff 	.word	0xfeffffff
 8001894:	000007fe 	.word	0x000007fe
 8001898:	000003f3 	.word	0x000003f3
 800189c:	fffffc0d 	.word	0xfffffc0d
 80018a0:	fffff801 	.word	0xfffff801
 80018a4:	4649      	mov	r1, r9
 80018a6:	2301      	movs	r3, #1
 80018a8:	4319      	orrs	r1, r3
 80018aa:	4689      	mov	r9, r1
 80018ac:	2400      	movs	r4, #0
 80018ae:	2001      	movs	r0, #1
 80018b0:	e66a      	b.n	8001588 <__aeabi_ddiv+0x80>
 80018b2:	2300      	movs	r3, #0
 80018b4:	2480      	movs	r4, #128	; 0x80
 80018b6:	469a      	mov	sl, r3
 80018b8:	2500      	movs	r5, #0
 80018ba:	4b8a      	ldr	r3, [pc, #552]	; (8001ae4 <__aeabi_ddiv+0x5dc>)
 80018bc:	0324      	lsls	r4, r4, #12
 80018be:	e67a      	b.n	80015b6 <__aeabi_ddiv+0xae>
 80018c0:	2501      	movs	r5, #1
 80018c2:	426d      	negs	r5, r5
 80018c4:	2301      	movs	r3, #1
 80018c6:	1a9b      	subs	r3, r3, r2
 80018c8:	2b38      	cmp	r3, #56	; 0x38
 80018ca:	dd00      	ble.n	80018ce <__aeabi_ddiv+0x3c6>
 80018cc:	e670      	b.n	80015b0 <__aeabi_ddiv+0xa8>
 80018ce:	2b1f      	cmp	r3, #31
 80018d0:	dc00      	bgt.n	80018d4 <__aeabi_ddiv+0x3cc>
 80018d2:	e0bf      	b.n	8001a54 <__aeabi_ddiv+0x54c>
 80018d4:	211f      	movs	r1, #31
 80018d6:	4249      	negs	r1, r1
 80018d8:	1a8a      	subs	r2, r1, r2
 80018da:	4641      	mov	r1, r8
 80018dc:	40d1      	lsrs	r1, r2
 80018de:	000a      	movs	r2, r1
 80018e0:	2b20      	cmp	r3, #32
 80018e2:	d004      	beq.n	80018ee <__aeabi_ddiv+0x3e6>
 80018e4:	4641      	mov	r1, r8
 80018e6:	4b80      	ldr	r3, [pc, #512]	; (8001ae8 <__aeabi_ddiv+0x5e0>)
 80018e8:	445b      	add	r3, fp
 80018ea:	4099      	lsls	r1, r3
 80018ec:	430d      	orrs	r5, r1
 80018ee:	1e6b      	subs	r3, r5, #1
 80018f0:	419d      	sbcs	r5, r3
 80018f2:	2307      	movs	r3, #7
 80018f4:	432a      	orrs	r2, r5
 80018f6:	001d      	movs	r5, r3
 80018f8:	2400      	movs	r4, #0
 80018fa:	4015      	ands	r5, r2
 80018fc:	4213      	tst	r3, r2
 80018fe:	d100      	bne.n	8001902 <__aeabi_ddiv+0x3fa>
 8001900:	e0d4      	b.n	8001aac <__aeabi_ddiv+0x5a4>
 8001902:	210f      	movs	r1, #15
 8001904:	2300      	movs	r3, #0
 8001906:	4011      	ands	r1, r2
 8001908:	2904      	cmp	r1, #4
 800190a:	d100      	bne.n	800190e <__aeabi_ddiv+0x406>
 800190c:	e0cb      	b.n	8001aa6 <__aeabi_ddiv+0x59e>
 800190e:	1d11      	adds	r1, r2, #4
 8001910:	4291      	cmp	r1, r2
 8001912:	4192      	sbcs	r2, r2
 8001914:	4252      	negs	r2, r2
 8001916:	189b      	adds	r3, r3, r2
 8001918:	000a      	movs	r2, r1
 800191a:	0219      	lsls	r1, r3, #8
 800191c:	d400      	bmi.n	8001920 <__aeabi_ddiv+0x418>
 800191e:	e0c2      	b.n	8001aa6 <__aeabi_ddiv+0x59e>
 8001920:	2301      	movs	r3, #1
 8001922:	2400      	movs	r4, #0
 8001924:	2500      	movs	r5, #0
 8001926:	e646      	b.n	80015b6 <__aeabi_ddiv+0xae>
 8001928:	2380      	movs	r3, #128	; 0x80
 800192a:	4641      	mov	r1, r8
 800192c:	031b      	lsls	r3, r3, #12
 800192e:	4219      	tst	r1, r3
 8001930:	d008      	beq.n	8001944 <__aeabi_ddiv+0x43c>
 8001932:	421c      	tst	r4, r3
 8001934:	d106      	bne.n	8001944 <__aeabi_ddiv+0x43c>
 8001936:	431c      	orrs	r4, r3
 8001938:	0324      	lsls	r4, r4, #12
 800193a:	46ba      	mov	sl, r7
 800193c:	0015      	movs	r5, r2
 800193e:	4b69      	ldr	r3, [pc, #420]	; (8001ae4 <__aeabi_ddiv+0x5dc>)
 8001940:	0b24      	lsrs	r4, r4, #12
 8001942:	e638      	b.n	80015b6 <__aeabi_ddiv+0xae>
 8001944:	2480      	movs	r4, #128	; 0x80
 8001946:	4643      	mov	r3, r8
 8001948:	0324      	lsls	r4, r4, #12
 800194a:	431c      	orrs	r4, r3
 800194c:	0324      	lsls	r4, r4, #12
 800194e:	46b2      	mov	sl, r6
 8001950:	4b64      	ldr	r3, [pc, #400]	; (8001ae4 <__aeabi_ddiv+0x5dc>)
 8001952:	0b24      	lsrs	r4, r4, #12
 8001954:	e62f      	b.n	80015b6 <__aeabi_ddiv+0xae>
 8001956:	2b00      	cmp	r3, #0
 8001958:	d100      	bne.n	800195c <__aeabi_ddiv+0x454>
 800195a:	e703      	b.n	8001764 <__aeabi_ddiv+0x25c>
 800195c:	19a6      	adds	r6, r4, r6
 800195e:	1e68      	subs	r0, r5, #1
 8001960:	42a6      	cmp	r6, r4
 8001962:	d200      	bcs.n	8001966 <__aeabi_ddiv+0x45e>
 8001964:	e08d      	b.n	8001a82 <__aeabi_ddiv+0x57a>
 8001966:	428e      	cmp	r6, r1
 8001968:	d200      	bcs.n	800196c <__aeabi_ddiv+0x464>
 800196a:	e0a3      	b.n	8001ab4 <__aeabi_ddiv+0x5ac>
 800196c:	d100      	bne.n	8001970 <__aeabi_ddiv+0x468>
 800196e:	e0b3      	b.n	8001ad8 <__aeabi_ddiv+0x5d0>
 8001970:	0005      	movs	r5, r0
 8001972:	e6f5      	b.n	8001760 <__aeabi_ddiv+0x258>
 8001974:	42aa      	cmp	r2, r5
 8001976:	d900      	bls.n	800197a <__aeabi_ddiv+0x472>
 8001978:	e639      	b.n	80015ee <__aeabi_ddiv+0xe6>
 800197a:	4643      	mov	r3, r8
 800197c:	07de      	lsls	r6, r3, #31
 800197e:	0858      	lsrs	r0, r3, #1
 8001980:	086b      	lsrs	r3, r5, #1
 8001982:	431e      	orrs	r6, r3
 8001984:	07ed      	lsls	r5, r5, #31
 8001986:	e639      	b.n	80015fc <__aeabi_ddiv+0xf4>
 8001988:	4648      	mov	r0, r9
 800198a:	f001 f937 	bl	8002bfc <__clzsi2>
 800198e:	0001      	movs	r1, r0
 8001990:	0002      	movs	r2, r0
 8001992:	3115      	adds	r1, #21
 8001994:	3220      	adds	r2, #32
 8001996:	291c      	cmp	r1, #28
 8001998:	dc00      	bgt.n	800199c <__aeabi_ddiv+0x494>
 800199a:	e72c      	b.n	80017f6 <__aeabi_ddiv+0x2ee>
 800199c:	464b      	mov	r3, r9
 800199e:	3808      	subs	r0, #8
 80019a0:	4083      	lsls	r3, r0
 80019a2:	2500      	movs	r5, #0
 80019a4:	4698      	mov	r8, r3
 80019a6:	e732      	b.n	800180e <__aeabi_ddiv+0x306>
 80019a8:	f001 f928 	bl	8002bfc <__clzsi2>
 80019ac:	0003      	movs	r3, r0
 80019ae:	001a      	movs	r2, r3
 80019b0:	3215      	adds	r2, #21
 80019b2:	3020      	adds	r0, #32
 80019b4:	2a1c      	cmp	r2, #28
 80019b6:	dc00      	bgt.n	80019ba <__aeabi_ddiv+0x4b2>
 80019b8:	e700      	b.n	80017bc <__aeabi_ddiv+0x2b4>
 80019ba:	4654      	mov	r4, sl
 80019bc:	3b08      	subs	r3, #8
 80019be:	2200      	movs	r2, #0
 80019c0:	409c      	lsls	r4, r3
 80019c2:	e705      	b.n	80017d0 <__aeabi_ddiv+0x2c8>
 80019c4:	1936      	adds	r6, r6, r4
 80019c6:	3b01      	subs	r3, #1
 80019c8:	42b4      	cmp	r4, r6
 80019ca:	d900      	bls.n	80019ce <__aeabi_ddiv+0x4c6>
 80019cc:	e6a6      	b.n	800171c <__aeabi_ddiv+0x214>
 80019ce:	42b2      	cmp	r2, r6
 80019d0:	d800      	bhi.n	80019d4 <__aeabi_ddiv+0x4cc>
 80019d2:	e6a3      	b.n	800171c <__aeabi_ddiv+0x214>
 80019d4:	1e83      	subs	r3, r0, #2
 80019d6:	1936      	adds	r6, r6, r4
 80019d8:	e6a0      	b.n	800171c <__aeabi_ddiv+0x214>
 80019da:	1909      	adds	r1, r1, r4
 80019dc:	3d01      	subs	r5, #1
 80019de:	428c      	cmp	r4, r1
 80019e0:	d900      	bls.n	80019e4 <__aeabi_ddiv+0x4dc>
 80019e2:	e68d      	b.n	8001700 <__aeabi_ddiv+0x1f8>
 80019e4:	428a      	cmp	r2, r1
 80019e6:	d800      	bhi.n	80019ea <__aeabi_ddiv+0x4e2>
 80019e8:	e68a      	b.n	8001700 <__aeabi_ddiv+0x1f8>
 80019ea:	1e85      	subs	r5, r0, #2
 80019ec:	1909      	adds	r1, r1, r4
 80019ee:	e687      	b.n	8001700 <__aeabi_ddiv+0x1f8>
 80019f0:	230f      	movs	r3, #15
 80019f2:	402b      	ands	r3, r5
 80019f4:	2b04      	cmp	r3, #4
 80019f6:	d100      	bne.n	80019fa <__aeabi_ddiv+0x4f2>
 80019f8:	e6bc      	b.n	8001774 <__aeabi_ddiv+0x26c>
 80019fa:	2305      	movs	r3, #5
 80019fc:	425b      	negs	r3, r3
 80019fe:	42ab      	cmp	r3, r5
 8001a00:	419b      	sbcs	r3, r3
 8001a02:	3504      	adds	r5, #4
 8001a04:	425b      	negs	r3, r3
 8001a06:	08ed      	lsrs	r5, r5, #3
 8001a08:	4498      	add	r8, r3
 8001a0a:	e6b4      	b.n	8001776 <__aeabi_ddiv+0x26e>
 8001a0c:	42af      	cmp	r7, r5
 8001a0e:	d900      	bls.n	8001a12 <__aeabi_ddiv+0x50a>
 8001a10:	e660      	b.n	80016d4 <__aeabi_ddiv+0x1cc>
 8001a12:	4282      	cmp	r2, r0
 8001a14:	d804      	bhi.n	8001a20 <__aeabi_ddiv+0x518>
 8001a16:	d000      	beq.n	8001a1a <__aeabi_ddiv+0x512>
 8001a18:	e65c      	b.n	80016d4 <__aeabi_ddiv+0x1cc>
 8001a1a:	42ae      	cmp	r6, r5
 8001a1c:	d800      	bhi.n	8001a20 <__aeabi_ddiv+0x518>
 8001a1e:	e659      	b.n	80016d4 <__aeabi_ddiv+0x1cc>
 8001a20:	2302      	movs	r3, #2
 8001a22:	425b      	negs	r3, r3
 8001a24:	469c      	mov	ip, r3
 8001a26:	9b00      	ldr	r3, [sp, #0]
 8001a28:	44e0      	add	r8, ip
 8001a2a:	469c      	mov	ip, r3
 8001a2c:	4465      	add	r5, ip
 8001a2e:	429d      	cmp	r5, r3
 8001a30:	419b      	sbcs	r3, r3
 8001a32:	425b      	negs	r3, r3
 8001a34:	191b      	adds	r3, r3, r4
 8001a36:	18c0      	adds	r0, r0, r3
 8001a38:	e64d      	b.n	80016d6 <__aeabi_ddiv+0x1ce>
 8001a3a:	428a      	cmp	r2, r1
 8001a3c:	d800      	bhi.n	8001a40 <__aeabi_ddiv+0x538>
 8001a3e:	e60e      	b.n	800165e <__aeabi_ddiv+0x156>
 8001a40:	1e83      	subs	r3, r0, #2
 8001a42:	1909      	adds	r1, r1, r4
 8001a44:	e60b      	b.n	800165e <__aeabi_ddiv+0x156>
 8001a46:	428a      	cmp	r2, r1
 8001a48:	d800      	bhi.n	8001a4c <__aeabi_ddiv+0x544>
 8001a4a:	e5f4      	b.n	8001636 <__aeabi_ddiv+0x12e>
 8001a4c:	1e83      	subs	r3, r0, #2
 8001a4e:	4698      	mov	r8, r3
 8001a50:	1909      	adds	r1, r1, r4
 8001a52:	e5f0      	b.n	8001636 <__aeabi_ddiv+0x12e>
 8001a54:	4925      	ldr	r1, [pc, #148]	; (8001aec <__aeabi_ddiv+0x5e4>)
 8001a56:	0028      	movs	r0, r5
 8001a58:	4459      	add	r1, fp
 8001a5a:	408d      	lsls	r5, r1
 8001a5c:	4642      	mov	r2, r8
 8001a5e:	408a      	lsls	r2, r1
 8001a60:	1e69      	subs	r1, r5, #1
 8001a62:	418d      	sbcs	r5, r1
 8001a64:	4641      	mov	r1, r8
 8001a66:	40d8      	lsrs	r0, r3
 8001a68:	40d9      	lsrs	r1, r3
 8001a6a:	4302      	orrs	r2, r0
 8001a6c:	432a      	orrs	r2, r5
 8001a6e:	000b      	movs	r3, r1
 8001a70:	0751      	lsls	r1, r2, #29
 8001a72:	d100      	bne.n	8001a76 <__aeabi_ddiv+0x56e>
 8001a74:	e751      	b.n	800191a <__aeabi_ddiv+0x412>
 8001a76:	210f      	movs	r1, #15
 8001a78:	4011      	ands	r1, r2
 8001a7a:	2904      	cmp	r1, #4
 8001a7c:	d000      	beq.n	8001a80 <__aeabi_ddiv+0x578>
 8001a7e:	e746      	b.n	800190e <__aeabi_ddiv+0x406>
 8001a80:	e74b      	b.n	800191a <__aeabi_ddiv+0x412>
 8001a82:	0005      	movs	r5, r0
 8001a84:	428e      	cmp	r6, r1
 8001a86:	d000      	beq.n	8001a8a <__aeabi_ddiv+0x582>
 8001a88:	e66a      	b.n	8001760 <__aeabi_ddiv+0x258>
 8001a8a:	9a00      	ldr	r2, [sp, #0]
 8001a8c:	4293      	cmp	r3, r2
 8001a8e:	d000      	beq.n	8001a92 <__aeabi_ddiv+0x58a>
 8001a90:	e666      	b.n	8001760 <__aeabi_ddiv+0x258>
 8001a92:	e667      	b.n	8001764 <__aeabi_ddiv+0x25c>
 8001a94:	4a16      	ldr	r2, [pc, #88]	; (8001af0 <__aeabi_ddiv+0x5e8>)
 8001a96:	445a      	add	r2, fp
 8001a98:	2a00      	cmp	r2, #0
 8001a9a:	dc00      	bgt.n	8001a9e <__aeabi_ddiv+0x596>
 8001a9c:	e710      	b.n	80018c0 <__aeabi_ddiv+0x3b8>
 8001a9e:	2301      	movs	r3, #1
 8001aa0:	2500      	movs	r5, #0
 8001aa2:	4498      	add	r8, r3
 8001aa4:	e667      	b.n	8001776 <__aeabi_ddiv+0x26e>
 8001aa6:	075d      	lsls	r5, r3, #29
 8001aa8:	025b      	lsls	r3, r3, #9
 8001aaa:	0b1c      	lsrs	r4, r3, #12
 8001aac:	08d2      	lsrs	r2, r2, #3
 8001aae:	2300      	movs	r3, #0
 8001ab0:	4315      	orrs	r5, r2
 8001ab2:	e580      	b.n	80015b6 <__aeabi_ddiv+0xae>
 8001ab4:	9800      	ldr	r0, [sp, #0]
 8001ab6:	3d02      	subs	r5, #2
 8001ab8:	0042      	lsls	r2, r0, #1
 8001aba:	4282      	cmp	r2, r0
 8001abc:	41bf      	sbcs	r7, r7
 8001abe:	427f      	negs	r7, r7
 8001ac0:	193c      	adds	r4, r7, r4
 8001ac2:	1936      	adds	r6, r6, r4
 8001ac4:	9200      	str	r2, [sp, #0]
 8001ac6:	e7dd      	b.n	8001a84 <__aeabi_ddiv+0x57c>
 8001ac8:	2480      	movs	r4, #128	; 0x80
 8001aca:	4643      	mov	r3, r8
 8001acc:	0324      	lsls	r4, r4, #12
 8001ace:	431c      	orrs	r4, r3
 8001ad0:	0324      	lsls	r4, r4, #12
 8001ad2:	4b04      	ldr	r3, [pc, #16]	; (8001ae4 <__aeabi_ddiv+0x5dc>)
 8001ad4:	0b24      	lsrs	r4, r4, #12
 8001ad6:	e56e      	b.n	80015b6 <__aeabi_ddiv+0xae>
 8001ad8:	9a00      	ldr	r2, [sp, #0]
 8001ada:	429a      	cmp	r2, r3
 8001adc:	d3ea      	bcc.n	8001ab4 <__aeabi_ddiv+0x5ac>
 8001ade:	0005      	movs	r5, r0
 8001ae0:	e7d3      	b.n	8001a8a <__aeabi_ddiv+0x582>
 8001ae2:	46c0      	nop			; (mov r8, r8)
 8001ae4:	000007ff 	.word	0x000007ff
 8001ae8:	0000043e 	.word	0x0000043e
 8001aec:	0000041e 	.word	0x0000041e
 8001af0:	000003ff 	.word	0x000003ff

08001af4 <__eqdf2>:
 8001af4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001af6:	464e      	mov	r6, r9
 8001af8:	4645      	mov	r5, r8
 8001afa:	46de      	mov	lr, fp
 8001afc:	4657      	mov	r7, sl
 8001afe:	4690      	mov	r8, r2
 8001b00:	b5e0      	push	{r5, r6, r7, lr}
 8001b02:	0017      	movs	r7, r2
 8001b04:	031a      	lsls	r2, r3, #12
 8001b06:	0b12      	lsrs	r2, r2, #12
 8001b08:	0005      	movs	r5, r0
 8001b0a:	4684      	mov	ip, r0
 8001b0c:	4819      	ldr	r0, [pc, #100]	; (8001b74 <__eqdf2+0x80>)
 8001b0e:	030e      	lsls	r6, r1, #12
 8001b10:	004c      	lsls	r4, r1, #1
 8001b12:	4691      	mov	r9, r2
 8001b14:	005a      	lsls	r2, r3, #1
 8001b16:	0fdb      	lsrs	r3, r3, #31
 8001b18:	469b      	mov	fp, r3
 8001b1a:	0b36      	lsrs	r6, r6, #12
 8001b1c:	0d64      	lsrs	r4, r4, #21
 8001b1e:	0fc9      	lsrs	r1, r1, #31
 8001b20:	0d52      	lsrs	r2, r2, #21
 8001b22:	4284      	cmp	r4, r0
 8001b24:	d019      	beq.n	8001b5a <__eqdf2+0x66>
 8001b26:	4282      	cmp	r2, r0
 8001b28:	d010      	beq.n	8001b4c <__eqdf2+0x58>
 8001b2a:	2001      	movs	r0, #1
 8001b2c:	4294      	cmp	r4, r2
 8001b2e:	d10e      	bne.n	8001b4e <__eqdf2+0x5a>
 8001b30:	454e      	cmp	r6, r9
 8001b32:	d10c      	bne.n	8001b4e <__eqdf2+0x5a>
 8001b34:	2001      	movs	r0, #1
 8001b36:	45c4      	cmp	ip, r8
 8001b38:	d109      	bne.n	8001b4e <__eqdf2+0x5a>
 8001b3a:	4559      	cmp	r1, fp
 8001b3c:	d017      	beq.n	8001b6e <__eqdf2+0x7a>
 8001b3e:	2c00      	cmp	r4, #0
 8001b40:	d105      	bne.n	8001b4e <__eqdf2+0x5a>
 8001b42:	0030      	movs	r0, r6
 8001b44:	4328      	orrs	r0, r5
 8001b46:	1e43      	subs	r3, r0, #1
 8001b48:	4198      	sbcs	r0, r3
 8001b4a:	e000      	b.n	8001b4e <__eqdf2+0x5a>
 8001b4c:	2001      	movs	r0, #1
 8001b4e:	bcf0      	pop	{r4, r5, r6, r7}
 8001b50:	46bb      	mov	fp, r7
 8001b52:	46b2      	mov	sl, r6
 8001b54:	46a9      	mov	r9, r5
 8001b56:	46a0      	mov	r8, r4
 8001b58:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001b5a:	0033      	movs	r3, r6
 8001b5c:	2001      	movs	r0, #1
 8001b5e:	432b      	orrs	r3, r5
 8001b60:	d1f5      	bne.n	8001b4e <__eqdf2+0x5a>
 8001b62:	42a2      	cmp	r2, r4
 8001b64:	d1f3      	bne.n	8001b4e <__eqdf2+0x5a>
 8001b66:	464b      	mov	r3, r9
 8001b68:	433b      	orrs	r3, r7
 8001b6a:	d1f0      	bne.n	8001b4e <__eqdf2+0x5a>
 8001b6c:	e7e2      	b.n	8001b34 <__eqdf2+0x40>
 8001b6e:	2000      	movs	r0, #0
 8001b70:	e7ed      	b.n	8001b4e <__eqdf2+0x5a>
 8001b72:	46c0      	nop			; (mov r8, r8)
 8001b74:	000007ff 	.word	0x000007ff

08001b78 <__gedf2>:
 8001b78:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001b7a:	4647      	mov	r7, r8
 8001b7c:	46ce      	mov	lr, r9
 8001b7e:	0004      	movs	r4, r0
 8001b80:	0018      	movs	r0, r3
 8001b82:	0016      	movs	r6, r2
 8001b84:	031b      	lsls	r3, r3, #12
 8001b86:	0b1b      	lsrs	r3, r3, #12
 8001b88:	4d2d      	ldr	r5, [pc, #180]	; (8001c40 <__gedf2+0xc8>)
 8001b8a:	004a      	lsls	r2, r1, #1
 8001b8c:	4699      	mov	r9, r3
 8001b8e:	b580      	push	{r7, lr}
 8001b90:	0043      	lsls	r3, r0, #1
 8001b92:	030f      	lsls	r7, r1, #12
 8001b94:	46a4      	mov	ip, r4
 8001b96:	46b0      	mov	r8, r6
 8001b98:	0b3f      	lsrs	r7, r7, #12
 8001b9a:	0d52      	lsrs	r2, r2, #21
 8001b9c:	0fc9      	lsrs	r1, r1, #31
 8001b9e:	0d5b      	lsrs	r3, r3, #21
 8001ba0:	0fc0      	lsrs	r0, r0, #31
 8001ba2:	42aa      	cmp	r2, r5
 8001ba4:	d021      	beq.n	8001bea <__gedf2+0x72>
 8001ba6:	42ab      	cmp	r3, r5
 8001ba8:	d013      	beq.n	8001bd2 <__gedf2+0x5a>
 8001baa:	2a00      	cmp	r2, #0
 8001bac:	d122      	bne.n	8001bf4 <__gedf2+0x7c>
 8001bae:	433c      	orrs	r4, r7
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	d102      	bne.n	8001bba <__gedf2+0x42>
 8001bb4:	464d      	mov	r5, r9
 8001bb6:	432e      	orrs	r6, r5
 8001bb8:	d022      	beq.n	8001c00 <__gedf2+0x88>
 8001bba:	2c00      	cmp	r4, #0
 8001bbc:	d010      	beq.n	8001be0 <__gedf2+0x68>
 8001bbe:	4281      	cmp	r1, r0
 8001bc0:	d022      	beq.n	8001c08 <__gedf2+0x90>
 8001bc2:	2002      	movs	r0, #2
 8001bc4:	3901      	subs	r1, #1
 8001bc6:	4008      	ands	r0, r1
 8001bc8:	3801      	subs	r0, #1
 8001bca:	bcc0      	pop	{r6, r7}
 8001bcc:	46b9      	mov	r9, r7
 8001bce:	46b0      	mov	r8, r6
 8001bd0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001bd2:	464d      	mov	r5, r9
 8001bd4:	432e      	orrs	r6, r5
 8001bd6:	d129      	bne.n	8001c2c <__gedf2+0xb4>
 8001bd8:	2a00      	cmp	r2, #0
 8001bda:	d1f0      	bne.n	8001bbe <__gedf2+0x46>
 8001bdc:	433c      	orrs	r4, r7
 8001bde:	d1ee      	bne.n	8001bbe <__gedf2+0x46>
 8001be0:	2800      	cmp	r0, #0
 8001be2:	d1f2      	bne.n	8001bca <__gedf2+0x52>
 8001be4:	2001      	movs	r0, #1
 8001be6:	4240      	negs	r0, r0
 8001be8:	e7ef      	b.n	8001bca <__gedf2+0x52>
 8001bea:	003d      	movs	r5, r7
 8001bec:	4325      	orrs	r5, r4
 8001bee:	d11d      	bne.n	8001c2c <__gedf2+0xb4>
 8001bf0:	4293      	cmp	r3, r2
 8001bf2:	d0ee      	beq.n	8001bd2 <__gedf2+0x5a>
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d1e2      	bne.n	8001bbe <__gedf2+0x46>
 8001bf8:	464c      	mov	r4, r9
 8001bfa:	4326      	orrs	r6, r4
 8001bfc:	d1df      	bne.n	8001bbe <__gedf2+0x46>
 8001bfe:	e7e0      	b.n	8001bc2 <__gedf2+0x4a>
 8001c00:	2000      	movs	r0, #0
 8001c02:	2c00      	cmp	r4, #0
 8001c04:	d0e1      	beq.n	8001bca <__gedf2+0x52>
 8001c06:	e7dc      	b.n	8001bc2 <__gedf2+0x4a>
 8001c08:	429a      	cmp	r2, r3
 8001c0a:	dc0a      	bgt.n	8001c22 <__gedf2+0xaa>
 8001c0c:	dbe8      	blt.n	8001be0 <__gedf2+0x68>
 8001c0e:	454f      	cmp	r7, r9
 8001c10:	d8d7      	bhi.n	8001bc2 <__gedf2+0x4a>
 8001c12:	d00e      	beq.n	8001c32 <__gedf2+0xba>
 8001c14:	2000      	movs	r0, #0
 8001c16:	454f      	cmp	r7, r9
 8001c18:	d2d7      	bcs.n	8001bca <__gedf2+0x52>
 8001c1a:	2900      	cmp	r1, #0
 8001c1c:	d0e2      	beq.n	8001be4 <__gedf2+0x6c>
 8001c1e:	0008      	movs	r0, r1
 8001c20:	e7d3      	b.n	8001bca <__gedf2+0x52>
 8001c22:	4243      	negs	r3, r0
 8001c24:	4158      	adcs	r0, r3
 8001c26:	0040      	lsls	r0, r0, #1
 8001c28:	3801      	subs	r0, #1
 8001c2a:	e7ce      	b.n	8001bca <__gedf2+0x52>
 8001c2c:	2002      	movs	r0, #2
 8001c2e:	4240      	negs	r0, r0
 8001c30:	e7cb      	b.n	8001bca <__gedf2+0x52>
 8001c32:	45c4      	cmp	ip, r8
 8001c34:	d8c5      	bhi.n	8001bc2 <__gedf2+0x4a>
 8001c36:	2000      	movs	r0, #0
 8001c38:	45c4      	cmp	ip, r8
 8001c3a:	d2c6      	bcs.n	8001bca <__gedf2+0x52>
 8001c3c:	e7ed      	b.n	8001c1a <__gedf2+0xa2>
 8001c3e:	46c0      	nop			; (mov r8, r8)
 8001c40:	000007ff 	.word	0x000007ff

08001c44 <__ledf2>:
 8001c44:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001c46:	4647      	mov	r7, r8
 8001c48:	46ce      	mov	lr, r9
 8001c4a:	0004      	movs	r4, r0
 8001c4c:	0018      	movs	r0, r3
 8001c4e:	0016      	movs	r6, r2
 8001c50:	031b      	lsls	r3, r3, #12
 8001c52:	0b1b      	lsrs	r3, r3, #12
 8001c54:	4d2c      	ldr	r5, [pc, #176]	; (8001d08 <__ledf2+0xc4>)
 8001c56:	004a      	lsls	r2, r1, #1
 8001c58:	4699      	mov	r9, r3
 8001c5a:	b580      	push	{r7, lr}
 8001c5c:	0043      	lsls	r3, r0, #1
 8001c5e:	030f      	lsls	r7, r1, #12
 8001c60:	46a4      	mov	ip, r4
 8001c62:	46b0      	mov	r8, r6
 8001c64:	0b3f      	lsrs	r7, r7, #12
 8001c66:	0d52      	lsrs	r2, r2, #21
 8001c68:	0fc9      	lsrs	r1, r1, #31
 8001c6a:	0d5b      	lsrs	r3, r3, #21
 8001c6c:	0fc0      	lsrs	r0, r0, #31
 8001c6e:	42aa      	cmp	r2, r5
 8001c70:	d00d      	beq.n	8001c8e <__ledf2+0x4a>
 8001c72:	42ab      	cmp	r3, r5
 8001c74:	d010      	beq.n	8001c98 <__ledf2+0x54>
 8001c76:	2a00      	cmp	r2, #0
 8001c78:	d127      	bne.n	8001cca <__ledf2+0x86>
 8001c7a:	433c      	orrs	r4, r7
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d111      	bne.n	8001ca4 <__ledf2+0x60>
 8001c80:	464d      	mov	r5, r9
 8001c82:	432e      	orrs	r6, r5
 8001c84:	d10e      	bne.n	8001ca4 <__ledf2+0x60>
 8001c86:	2000      	movs	r0, #0
 8001c88:	2c00      	cmp	r4, #0
 8001c8a:	d015      	beq.n	8001cb8 <__ledf2+0x74>
 8001c8c:	e00e      	b.n	8001cac <__ledf2+0x68>
 8001c8e:	003d      	movs	r5, r7
 8001c90:	4325      	orrs	r5, r4
 8001c92:	d110      	bne.n	8001cb6 <__ledf2+0x72>
 8001c94:	4293      	cmp	r3, r2
 8001c96:	d118      	bne.n	8001cca <__ledf2+0x86>
 8001c98:	464d      	mov	r5, r9
 8001c9a:	432e      	orrs	r6, r5
 8001c9c:	d10b      	bne.n	8001cb6 <__ledf2+0x72>
 8001c9e:	2a00      	cmp	r2, #0
 8001ca0:	d102      	bne.n	8001ca8 <__ledf2+0x64>
 8001ca2:	433c      	orrs	r4, r7
 8001ca4:	2c00      	cmp	r4, #0
 8001ca6:	d00b      	beq.n	8001cc0 <__ledf2+0x7c>
 8001ca8:	4281      	cmp	r1, r0
 8001caa:	d014      	beq.n	8001cd6 <__ledf2+0x92>
 8001cac:	2002      	movs	r0, #2
 8001cae:	3901      	subs	r1, #1
 8001cb0:	4008      	ands	r0, r1
 8001cb2:	3801      	subs	r0, #1
 8001cb4:	e000      	b.n	8001cb8 <__ledf2+0x74>
 8001cb6:	2002      	movs	r0, #2
 8001cb8:	bcc0      	pop	{r6, r7}
 8001cba:	46b9      	mov	r9, r7
 8001cbc:	46b0      	mov	r8, r6
 8001cbe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001cc0:	2800      	cmp	r0, #0
 8001cc2:	d1f9      	bne.n	8001cb8 <__ledf2+0x74>
 8001cc4:	2001      	movs	r0, #1
 8001cc6:	4240      	negs	r0, r0
 8001cc8:	e7f6      	b.n	8001cb8 <__ledf2+0x74>
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d1ec      	bne.n	8001ca8 <__ledf2+0x64>
 8001cce:	464c      	mov	r4, r9
 8001cd0:	4326      	orrs	r6, r4
 8001cd2:	d1e9      	bne.n	8001ca8 <__ledf2+0x64>
 8001cd4:	e7ea      	b.n	8001cac <__ledf2+0x68>
 8001cd6:	429a      	cmp	r2, r3
 8001cd8:	dd04      	ble.n	8001ce4 <__ledf2+0xa0>
 8001cda:	4243      	negs	r3, r0
 8001cdc:	4158      	adcs	r0, r3
 8001cde:	0040      	lsls	r0, r0, #1
 8001ce0:	3801      	subs	r0, #1
 8001ce2:	e7e9      	b.n	8001cb8 <__ledf2+0x74>
 8001ce4:	429a      	cmp	r2, r3
 8001ce6:	dbeb      	blt.n	8001cc0 <__ledf2+0x7c>
 8001ce8:	454f      	cmp	r7, r9
 8001cea:	d8df      	bhi.n	8001cac <__ledf2+0x68>
 8001cec:	d006      	beq.n	8001cfc <__ledf2+0xb8>
 8001cee:	2000      	movs	r0, #0
 8001cf0:	454f      	cmp	r7, r9
 8001cf2:	d2e1      	bcs.n	8001cb8 <__ledf2+0x74>
 8001cf4:	2900      	cmp	r1, #0
 8001cf6:	d0e5      	beq.n	8001cc4 <__ledf2+0x80>
 8001cf8:	0008      	movs	r0, r1
 8001cfa:	e7dd      	b.n	8001cb8 <__ledf2+0x74>
 8001cfc:	45c4      	cmp	ip, r8
 8001cfe:	d8d5      	bhi.n	8001cac <__ledf2+0x68>
 8001d00:	2000      	movs	r0, #0
 8001d02:	45c4      	cmp	ip, r8
 8001d04:	d2d8      	bcs.n	8001cb8 <__ledf2+0x74>
 8001d06:	e7f5      	b.n	8001cf4 <__ledf2+0xb0>
 8001d08:	000007ff 	.word	0x000007ff

08001d0c <__aeabi_dmul>:
 8001d0c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001d0e:	4657      	mov	r7, sl
 8001d10:	464e      	mov	r6, r9
 8001d12:	4645      	mov	r5, r8
 8001d14:	46de      	mov	lr, fp
 8001d16:	b5e0      	push	{r5, r6, r7, lr}
 8001d18:	4698      	mov	r8, r3
 8001d1a:	030c      	lsls	r4, r1, #12
 8001d1c:	004b      	lsls	r3, r1, #1
 8001d1e:	0006      	movs	r6, r0
 8001d20:	4692      	mov	sl, r2
 8001d22:	b087      	sub	sp, #28
 8001d24:	0b24      	lsrs	r4, r4, #12
 8001d26:	0d5b      	lsrs	r3, r3, #21
 8001d28:	0fcf      	lsrs	r7, r1, #31
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d100      	bne.n	8001d30 <__aeabi_dmul+0x24>
 8001d2e:	e15c      	b.n	8001fea <__aeabi_dmul+0x2de>
 8001d30:	4ad9      	ldr	r2, [pc, #868]	; (8002098 <__aeabi_dmul+0x38c>)
 8001d32:	4293      	cmp	r3, r2
 8001d34:	d100      	bne.n	8001d38 <__aeabi_dmul+0x2c>
 8001d36:	e175      	b.n	8002024 <__aeabi_dmul+0x318>
 8001d38:	0f42      	lsrs	r2, r0, #29
 8001d3a:	00e4      	lsls	r4, r4, #3
 8001d3c:	4314      	orrs	r4, r2
 8001d3e:	2280      	movs	r2, #128	; 0x80
 8001d40:	0412      	lsls	r2, r2, #16
 8001d42:	4314      	orrs	r4, r2
 8001d44:	4ad5      	ldr	r2, [pc, #852]	; (800209c <__aeabi_dmul+0x390>)
 8001d46:	00c5      	lsls	r5, r0, #3
 8001d48:	4694      	mov	ip, r2
 8001d4a:	4463      	add	r3, ip
 8001d4c:	9300      	str	r3, [sp, #0]
 8001d4e:	2300      	movs	r3, #0
 8001d50:	4699      	mov	r9, r3
 8001d52:	469b      	mov	fp, r3
 8001d54:	4643      	mov	r3, r8
 8001d56:	4642      	mov	r2, r8
 8001d58:	031e      	lsls	r6, r3, #12
 8001d5a:	0fd2      	lsrs	r2, r2, #31
 8001d5c:	005b      	lsls	r3, r3, #1
 8001d5e:	4650      	mov	r0, sl
 8001d60:	4690      	mov	r8, r2
 8001d62:	0b36      	lsrs	r6, r6, #12
 8001d64:	0d5b      	lsrs	r3, r3, #21
 8001d66:	d100      	bne.n	8001d6a <__aeabi_dmul+0x5e>
 8001d68:	e120      	b.n	8001fac <__aeabi_dmul+0x2a0>
 8001d6a:	4acb      	ldr	r2, [pc, #812]	; (8002098 <__aeabi_dmul+0x38c>)
 8001d6c:	4293      	cmp	r3, r2
 8001d6e:	d100      	bne.n	8001d72 <__aeabi_dmul+0x66>
 8001d70:	e162      	b.n	8002038 <__aeabi_dmul+0x32c>
 8001d72:	49ca      	ldr	r1, [pc, #808]	; (800209c <__aeabi_dmul+0x390>)
 8001d74:	0f42      	lsrs	r2, r0, #29
 8001d76:	468c      	mov	ip, r1
 8001d78:	9900      	ldr	r1, [sp, #0]
 8001d7a:	4463      	add	r3, ip
 8001d7c:	00f6      	lsls	r6, r6, #3
 8001d7e:	468c      	mov	ip, r1
 8001d80:	4316      	orrs	r6, r2
 8001d82:	2280      	movs	r2, #128	; 0x80
 8001d84:	449c      	add	ip, r3
 8001d86:	0412      	lsls	r2, r2, #16
 8001d88:	4663      	mov	r3, ip
 8001d8a:	4316      	orrs	r6, r2
 8001d8c:	00c2      	lsls	r2, r0, #3
 8001d8e:	2000      	movs	r0, #0
 8001d90:	9300      	str	r3, [sp, #0]
 8001d92:	9900      	ldr	r1, [sp, #0]
 8001d94:	4643      	mov	r3, r8
 8001d96:	3101      	adds	r1, #1
 8001d98:	468c      	mov	ip, r1
 8001d9a:	4649      	mov	r1, r9
 8001d9c:	407b      	eors	r3, r7
 8001d9e:	9301      	str	r3, [sp, #4]
 8001da0:	290f      	cmp	r1, #15
 8001da2:	d826      	bhi.n	8001df2 <__aeabi_dmul+0xe6>
 8001da4:	4bbe      	ldr	r3, [pc, #760]	; (80020a0 <__aeabi_dmul+0x394>)
 8001da6:	0089      	lsls	r1, r1, #2
 8001da8:	5859      	ldr	r1, [r3, r1]
 8001daa:	468f      	mov	pc, r1
 8001dac:	4643      	mov	r3, r8
 8001dae:	9301      	str	r3, [sp, #4]
 8001db0:	0034      	movs	r4, r6
 8001db2:	0015      	movs	r5, r2
 8001db4:	4683      	mov	fp, r0
 8001db6:	465b      	mov	r3, fp
 8001db8:	2b02      	cmp	r3, #2
 8001dba:	d016      	beq.n	8001dea <__aeabi_dmul+0xde>
 8001dbc:	2b03      	cmp	r3, #3
 8001dbe:	d100      	bne.n	8001dc2 <__aeabi_dmul+0xb6>
 8001dc0:	e203      	b.n	80021ca <__aeabi_dmul+0x4be>
 8001dc2:	2b01      	cmp	r3, #1
 8001dc4:	d000      	beq.n	8001dc8 <__aeabi_dmul+0xbc>
 8001dc6:	e0cd      	b.n	8001f64 <__aeabi_dmul+0x258>
 8001dc8:	2200      	movs	r2, #0
 8001dca:	2400      	movs	r4, #0
 8001dcc:	2500      	movs	r5, #0
 8001dce:	9b01      	ldr	r3, [sp, #4]
 8001dd0:	0512      	lsls	r2, r2, #20
 8001dd2:	4322      	orrs	r2, r4
 8001dd4:	07db      	lsls	r3, r3, #31
 8001dd6:	431a      	orrs	r2, r3
 8001dd8:	0028      	movs	r0, r5
 8001dda:	0011      	movs	r1, r2
 8001ddc:	b007      	add	sp, #28
 8001dde:	bcf0      	pop	{r4, r5, r6, r7}
 8001de0:	46bb      	mov	fp, r7
 8001de2:	46b2      	mov	sl, r6
 8001de4:	46a9      	mov	r9, r5
 8001de6:	46a0      	mov	r8, r4
 8001de8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001dea:	2400      	movs	r4, #0
 8001dec:	2500      	movs	r5, #0
 8001dee:	4aaa      	ldr	r2, [pc, #680]	; (8002098 <__aeabi_dmul+0x38c>)
 8001df0:	e7ed      	b.n	8001dce <__aeabi_dmul+0xc2>
 8001df2:	0c28      	lsrs	r0, r5, #16
 8001df4:	042d      	lsls	r5, r5, #16
 8001df6:	0c2d      	lsrs	r5, r5, #16
 8001df8:	002b      	movs	r3, r5
 8001dfa:	0c11      	lsrs	r1, r2, #16
 8001dfc:	0412      	lsls	r2, r2, #16
 8001dfe:	0c12      	lsrs	r2, r2, #16
 8001e00:	4353      	muls	r3, r2
 8001e02:	4698      	mov	r8, r3
 8001e04:	0013      	movs	r3, r2
 8001e06:	002f      	movs	r7, r5
 8001e08:	4343      	muls	r3, r0
 8001e0a:	4699      	mov	r9, r3
 8001e0c:	434f      	muls	r7, r1
 8001e0e:	444f      	add	r7, r9
 8001e10:	46bb      	mov	fp, r7
 8001e12:	4647      	mov	r7, r8
 8001e14:	000b      	movs	r3, r1
 8001e16:	0c3f      	lsrs	r7, r7, #16
 8001e18:	46ba      	mov	sl, r7
 8001e1a:	4343      	muls	r3, r0
 8001e1c:	44da      	add	sl, fp
 8001e1e:	9302      	str	r3, [sp, #8]
 8001e20:	45d1      	cmp	r9, sl
 8001e22:	d904      	bls.n	8001e2e <__aeabi_dmul+0x122>
 8001e24:	2780      	movs	r7, #128	; 0x80
 8001e26:	027f      	lsls	r7, r7, #9
 8001e28:	46b9      	mov	r9, r7
 8001e2a:	444b      	add	r3, r9
 8001e2c:	9302      	str	r3, [sp, #8]
 8001e2e:	4653      	mov	r3, sl
 8001e30:	0c1b      	lsrs	r3, r3, #16
 8001e32:	469b      	mov	fp, r3
 8001e34:	4653      	mov	r3, sl
 8001e36:	041f      	lsls	r7, r3, #16
 8001e38:	4643      	mov	r3, r8
 8001e3a:	041b      	lsls	r3, r3, #16
 8001e3c:	0c1b      	lsrs	r3, r3, #16
 8001e3e:	4698      	mov	r8, r3
 8001e40:	003b      	movs	r3, r7
 8001e42:	4443      	add	r3, r8
 8001e44:	9304      	str	r3, [sp, #16]
 8001e46:	0c33      	lsrs	r3, r6, #16
 8001e48:	0436      	lsls	r6, r6, #16
 8001e4a:	0c36      	lsrs	r6, r6, #16
 8001e4c:	4698      	mov	r8, r3
 8001e4e:	0033      	movs	r3, r6
 8001e50:	4343      	muls	r3, r0
 8001e52:	4699      	mov	r9, r3
 8001e54:	4643      	mov	r3, r8
 8001e56:	4343      	muls	r3, r0
 8001e58:	002f      	movs	r7, r5
 8001e5a:	469a      	mov	sl, r3
 8001e5c:	4643      	mov	r3, r8
 8001e5e:	4377      	muls	r7, r6
 8001e60:	435d      	muls	r5, r3
 8001e62:	0c38      	lsrs	r0, r7, #16
 8001e64:	444d      	add	r5, r9
 8001e66:	1945      	adds	r5, r0, r5
 8001e68:	45a9      	cmp	r9, r5
 8001e6a:	d903      	bls.n	8001e74 <__aeabi_dmul+0x168>
 8001e6c:	2380      	movs	r3, #128	; 0x80
 8001e6e:	025b      	lsls	r3, r3, #9
 8001e70:	4699      	mov	r9, r3
 8001e72:	44ca      	add	sl, r9
 8001e74:	043f      	lsls	r7, r7, #16
 8001e76:	0c28      	lsrs	r0, r5, #16
 8001e78:	0c3f      	lsrs	r7, r7, #16
 8001e7a:	042d      	lsls	r5, r5, #16
 8001e7c:	19ed      	adds	r5, r5, r7
 8001e7e:	0c27      	lsrs	r7, r4, #16
 8001e80:	0424      	lsls	r4, r4, #16
 8001e82:	0c24      	lsrs	r4, r4, #16
 8001e84:	0003      	movs	r3, r0
 8001e86:	0020      	movs	r0, r4
 8001e88:	4350      	muls	r0, r2
 8001e8a:	437a      	muls	r2, r7
 8001e8c:	4691      	mov	r9, r2
 8001e8e:	003a      	movs	r2, r7
 8001e90:	4453      	add	r3, sl
 8001e92:	9305      	str	r3, [sp, #20]
 8001e94:	0c03      	lsrs	r3, r0, #16
 8001e96:	469a      	mov	sl, r3
 8001e98:	434a      	muls	r2, r1
 8001e9a:	4361      	muls	r1, r4
 8001e9c:	4449      	add	r1, r9
 8001e9e:	4451      	add	r1, sl
 8001ea0:	44ab      	add	fp, r5
 8001ea2:	4589      	cmp	r9, r1
 8001ea4:	d903      	bls.n	8001eae <__aeabi_dmul+0x1a2>
 8001ea6:	2380      	movs	r3, #128	; 0x80
 8001ea8:	025b      	lsls	r3, r3, #9
 8001eaa:	4699      	mov	r9, r3
 8001eac:	444a      	add	r2, r9
 8001eae:	0400      	lsls	r0, r0, #16
 8001eb0:	0c0b      	lsrs	r3, r1, #16
 8001eb2:	0c00      	lsrs	r0, r0, #16
 8001eb4:	0409      	lsls	r1, r1, #16
 8001eb6:	1809      	adds	r1, r1, r0
 8001eb8:	0020      	movs	r0, r4
 8001eba:	4699      	mov	r9, r3
 8001ebc:	4643      	mov	r3, r8
 8001ebe:	4370      	muls	r0, r6
 8001ec0:	435c      	muls	r4, r3
 8001ec2:	437e      	muls	r6, r7
 8001ec4:	435f      	muls	r7, r3
 8001ec6:	0c03      	lsrs	r3, r0, #16
 8001ec8:	4698      	mov	r8, r3
 8001eca:	19a4      	adds	r4, r4, r6
 8001ecc:	4444      	add	r4, r8
 8001ece:	444a      	add	r2, r9
 8001ed0:	9703      	str	r7, [sp, #12]
 8001ed2:	42a6      	cmp	r6, r4
 8001ed4:	d904      	bls.n	8001ee0 <__aeabi_dmul+0x1d4>
 8001ed6:	2380      	movs	r3, #128	; 0x80
 8001ed8:	025b      	lsls	r3, r3, #9
 8001eda:	4698      	mov	r8, r3
 8001edc:	4447      	add	r7, r8
 8001ede:	9703      	str	r7, [sp, #12]
 8001ee0:	0423      	lsls	r3, r4, #16
 8001ee2:	9e02      	ldr	r6, [sp, #8]
 8001ee4:	469a      	mov	sl, r3
 8001ee6:	9b05      	ldr	r3, [sp, #20]
 8001ee8:	445e      	add	r6, fp
 8001eea:	4698      	mov	r8, r3
 8001eec:	42ae      	cmp	r6, r5
 8001eee:	41ad      	sbcs	r5, r5
 8001ef0:	1876      	adds	r6, r6, r1
 8001ef2:	428e      	cmp	r6, r1
 8001ef4:	4189      	sbcs	r1, r1
 8001ef6:	0400      	lsls	r0, r0, #16
 8001ef8:	0c00      	lsrs	r0, r0, #16
 8001efa:	4450      	add	r0, sl
 8001efc:	4440      	add	r0, r8
 8001efe:	426d      	negs	r5, r5
 8001f00:	1947      	adds	r7, r0, r5
 8001f02:	46b8      	mov	r8, r7
 8001f04:	4693      	mov	fp, r2
 8001f06:	4249      	negs	r1, r1
 8001f08:	4689      	mov	r9, r1
 8001f0a:	44c3      	add	fp, r8
 8001f0c:	44d9      	add	r9, fp
 8001f0e:	4298      	cmp	r0, r3
 8001f10:	4180      	sbcs	r0, r0
 8001f12:	45a8      	cmp	r8, r5
 8001f14:	41ad      	sbcs	r5, r5
 8001f16:	4593      	cmp	fp, r2
 8001f18:	4192      	sbcs	r2, r2
 8001f1a:	4589      	cmp	r9, r1
 8001f1c:	4189      	sbcs	r1, r1
 8001f1e:	426d      	negs	r5, r5
 8001f20:	4240      	negs	r0, r0
 8001f22:	4328      	orrs	r0, r5
 8001f24:	0c24      	lsrs	r4, r4, #16
 8001f26:	4252      	negs	r2, r2
 8001f28:	4249      	negs	r1, r1
 8001f2a:	430a      	orrs	r2, r1
 8001f2c:	9b03      	ldr	r3, [sp, #12]
 8001f2e:	1900      	adds	r0, r0, r4
 8001f30:	1880      	adds	r0, r0, r2
 8001f32:	18c7      	adds	r7, r0, r3
 8001f34:	464b      	mov	r3, r9
 8001f36:	0ddc      	lsrs	r4, r3, #23
 8001f38:	9b04      	ldr	r3, [sp, #16]
 8001f3a:	0275      	lsls	r5, r6, #9
 8001f3c:	431d      	orrs	r5, r3
 8001f3e:	1e6a      	subs	r2, r5, #1
 8001f40:	4195      	sbcs	r5, r2
 8001f42:	464b      	mov	r3, r9
 8001f44:	0df6      	lsrs	r6, r6, #23
 8001f46:	027f      	lsls	r7, r7, #9
 8001f48:	4335      	orrs	r5, r6
 8001f4a:	025a      	lsls	r2, r3, #9
 8001f4c:	433c      	orrs	r4, r7
 8001f4e:	4315      	orrs	r5, r2
 8001f50:	01fb      	lsls	r3, r7, #7
 8001f52:	d400      	bmi.n	8001f56 <__aeabi_dmul+0x24a>
 8001f54:	e11c      	b.n	8002190 <__aeabi_dmul+0x484>
 8001f56:	2101      	movs	r1, #1
 8001f58:	086a      	lsrs	r2, r5, #1
 8001f5a:	400d      	ands	r5, r1
 8001f5c:	4315      	orrs	r5, r2
 8001f5e:	07e2      	lsls	r2, r4, #31
 8001f60:	4315      	orrs	r5, r2
 8001f62:	0864      	lsrs	r4, r4, #1
 8001f64:	494f      	ldr	r1, [pc, #316]	; (80020a4 <__aeabi_dmul+0x398>)
 8001f66:	4461      	add	r1, ip
 8001f68:	2900      	cmp	r1, #0
 8001f6a:	dc00      	bgt.n	8001f6e <__aeabi_dmul+0x262>
 8001f6c:	e0b0      	b.n	80020d0 <__aeabi_dmul+0x3c4>
 8001f6e:	076b      	lsls	r3, r5, #29
 8001f70:	d009      	beq.n	8001f86 <__aeabi_dmul+0x27a>
 8001f72:	220f      	movs	r2, #15
 8001f74:	402a      	ands	r2, r5
 8001f76:	2a04      	cmp	r2, #4
 8001f78:	d005      	beq.n	8001f86 <__aeabi_dmul+0x27a>
 8001f7a:	1d2a      	adds	r2, r5, #4
 8001f7c:	42aa      	cmp	r2, r5
 8001f7e:	41ad      	sbcs	r5, r5
 8001f80:	426d      	negs	r5, r5
 8001f82:	1964      	adds	r4, r4, r5
 8001f84:	0015      	movs	r5, r2
 8001f86:	01e3      	lsls	r3, r4, #7
 8001f88:	d504      	bpl.n	8001f94 <__aeabi_dmul+0x288>
 8001f8a:	2180      	movs	r1, #128	; 0x80
 8001f8c:	4a46      	ldr	r2, [pc, #280]	; (80020a8 <__aeabi_dmul+0x39c>)
 8001f8e:	00c9      	lsls	r1, r1, #3
 8001f90:	4014      	ands	r4, r2
 8001f92:	4461      	add	r1, ip
 8001f94:	4a45      	ldr	r2, [pc, #276]	; (80020ac <__aeabi_dmul+0x3a0>)
 8001f96:	4291      	cmp	r1, r2
 8001f98:	dd00      	ble.n	8001f9c <__aeabi_dmul+0x290>
 8001f9a:	e726      	b.n	8001dea <__aeabi_dmul+0xde>
 8001f9c:	0762      	lsls	r2, r4, #29
 8001f9e:	08ed      	lsrs	r5, r5, #3
 8001fa0:	0264      	lsls	r4, r4, #9
 8001fa2:	0549      	lsls	r1, r1, #21
 8001fa4:	4315      	orrs	r5, r2
 8001fa6:	0b24      	lsrs	r4, r4, #12
 8001fa8:	0d4a      	lsrs	r2, r1, #21
 8001faa:	e710      	b.n	8001dce <__aeabi_dmul+0xc2>
 8001fac:	4652      	mov	r2, sl
 8001fae:	4332      	orrs	r2, r6
 8001fb0:	d100      	bne.n	8001fb4 <__aeabi_dmul+0x2a8>
 8001fb2:	e07f      	b.n	80020b4 <__aeabi_dmul+0x3a8>
 8001fb4:	2e00      	cmp	r6, #0
 8001fb6:	d100      	bne.n	8001fba <__aeabi_dmul+0x2ae>
 8001fb8:	e0dc      	b.n	8002174 <__aeabi_dmul+0x468>
 8001fba:	0030      	movs	r0, r6
 8001fbc:	f000 fe1e 	bl	8002bfc <__clzsi2>
 8001fc0:	0002      	movs	r2, r0
 8001fc2:	3a0b      	subs	r2, #11
 8001fc4:	231d      	movs	r3, #29
 8001fc6:	0001      	movs	r1, r0
 8001fc8:	1a9b      	subs	r3, r3, r2
 8001fca:	4652      	mov	r2, sl
 8001fcc:	3908      	subs	r1, #8
 8001fce:	40da      	lsrs	r2, r3
 8001fd0:	408e      	lsls	r6, r1
 8001fd2:	4316      	orrs	r6, r2
 8001fd4:	4652      	mov	r2, sl
 8001fd6:	408a      	lsls	r2, r1
 8001fd8:	9b00      	ldr	r3, [sp, #0]
 8001fda:	4935      	ldr	r1, [pc, #212]	; (80020b0 <__aeabi_dmul+0x3a4>)
 8001fdc:	1a18      	subs	r0, r3, r0
 8001fde:	0003      	movs	r3, r0
 8001fe0:	468c      	mov	ip, r1
 8001fe2:	4463      	add	r3, ip
 8001fe4:	2000      	movs	r0, #0
 8001fe6:	9300      	str	r3, [sp, #0]
 8001fe8:	e6d3      	b.n	8001d92 <__aeabi_dmul+0x86>
 8001fea:	0025      	movs	r5, r4
 8001fec:	4305      	orrs	r5, r0
 8001fee:	d04a      	beq.n	8002086 <__aeabi_dmul+0x37a>
 8001ff0:	2c00      	cmp	r4, #0
 8001ff2:	d100      	bne.n	8001ff6 <__aeabi_dmul+0x2ea>
 8001ff4:	e0b0      	b.n	8002158 <__aeabi_dmul+0x44c>
 8001ff6:	0020      	movs	r0, r4
 8001ff8:	f000 fe00 	bl	8002bfc <__clzsi2>
 8001ffc:	0001      	movs	r1, r0
 8001ffe:	0002      	movs	r2, r0
 8002000:	390b      	subs	r1, #11
 8002002:	231d      	movs	r3, #29
 8002004:	0010      	movs	r0, r2
 8002006:	1a5b      	subs	r3, r3, r1
 8002008:	0031      	movs	r1, r6
 800200a:	0035      	movs	r5, r6
 800200c:	3808      	subs	r0, #8
 800200e:	4084      	lsls	r4, r0
 8002010:	40d9      	lsrs	r1, r3
 8002012:	4085      	lsls	r5, r0
 8002014:	430c      	orrs	r4, r1
 8002016:	4826      	ldr	r0, [pc, #152]	; (80020b0 <__aeabi_dmul+0x3a4>)
 8002018:	1a83      	subs	r3, r0, r2
 800201a:	9300      	str	r3, [sp, #0]
 800201c:	2300      	movs	r3, #0
 800201e:	4699      	mov	r9, r3
 8002020:	469b      	mov	fp, r3
 8002022:	e697      	b.n	8001d54 <__aeabi_dmul+0x48>
 8002024:	0005      	movs	r5, r0
 8002026:	4325      	orrs	r5, r4
 8002028:	d126      	bne.n	8002078 <__aeabi_dmul+0x36c>
 800202a:	2208      	movs	r2, #8
 800202c:	9300      	str	r3, [sp, #0]
 800202e:	2302      	movs	r3, #2
 8002030:	2400      	movs	r4, #0
 8002032:	4691      	mov	r9, r2
 8002034:	469b      	mov	fp, r3
 8002036:	e68d      	b.n	8001d54 <__aeabi_dmul+0x48>
 8002038:	4652      	mov	r2, sl
 800203a:	9b00      	ldr	r3, [sp, #0]
 800203c:	4332      	orrs	r2, r6
 800203e:	d110      	bne.n	8002062 <__aeabi_dmul+0x356>
 8002040:	4915      	ldr	r1, [pc, #84]	; (8002098 <__aeabi_dmul+0x38c>)
 8002042:	2600      	movs	r6, #0
 8002044:	468c      	mov	ip, r1
 8002046:	4463      	add	r3, ip
 8002048:	4649      	mov	r1, r9
 800204a:	9300      	str	r3, [sp, #0]
 800204c:	2302      	movs	r3, #2
 800204e:	4319      	orrs	r1, r3
 8002050:	4689      	mov	r9, r1
 8002052:	2002      	movs	r0, #2
 8002054:	e69d      	b.n	8001d92 <__aeabi_dmul+0x86>
 8002056:	465b      	mov	r3, fp
 8002058:	9701      	str	r7, [sp, #4]
 800205a:	2b02      	cmp	r3, #2
 800205c:	d000      	beq.n	8002060 <__aeabi_dmul+0x354>
 800205e:	e6ad      	b.n	8001dbc <__aeabi_dmul+0xb0>
 8002060:	e6c3      	b.n	8001dea <__aeabi_dmul+0xde>
 8002062:	4a0d      	ldr	r2, [pc, #52]	; (8002098 <__aeabi_dmul+0x38c>)
 8002064:	2003      	movs	r0, #3
 8002066:	4694      	mov	ip, r2
 8002068:	4463      	add	r3, ip
 800206a:	464a      	mov	r2, r9
 800206c:	9300      	str	r3, [sp, #0]
 800206e:	2303      	movs	r3, #3
 8002070:	431a      	orrs	r2, r3
 8002072:	4691      	mov	r9, r2
 8002074:	4652      	mov	r2, sl
 8002076:	e68c      	b.n	8001d92 <__aeabi_dmul+0x86>
 8002078:	220c      	movs	r2, #12
 800207a:	9300      	str	r3, [sp, #0]
 800207c:	2303      	movs	r3, #3
 800207e:	0005      	movs	r5, r0
 8002080:	4691      	mov	r9, r2
 8002082:	469b      	mov	fp, r3
 8002084:	e666      	b.n	8001d54 <__aeabi_dmul+0x48>
 8002086:	2304      	movs	r3, #4
 8002088:	4699      	mov	r9, r3
 800208a:	2300      	movs	r3, #0
 800208c:	9300      	str	r3, [sp, #0]
 800208e:	3301      	adds	r3, #1
 8002090:	2400      	movs	r4, #0
 8002092:	469b      	mov	fp, r3
 8002094:	e65e      	b.n	8001d54 <__aeabi_dmul+0x48>
 8002096:	46c0      	nop			; (mov r8, r8)
 8002098:	000007ff 	.word	0x000007ff
 800209c:	fffffc01 	.word	0xfffffc01
 80020a0:	0800cc70 	.word	0x0800cc70
 80020a4:	000003ff 	.word	0x000003ff
 80020a8:	feffffff 	.word	0xfeffffff
 80020ac:	000007fe 	.word	0x000007fe
 80020b0:	fffffc0d 	.word	0xfffffc0d
 80020b4:	4649      	mov	r1, r9
 80020b6:	2301      	movs	r3, #1
 80020b8:	4319      	orrs	r1, r3
 80020ba:	4689      	mov	r9, r1
 80020bc:	2600      	movs	r6, #0
 80020be:	2001      	movs	r0, #1
 80020c0:	e667      	b.n	8001d92 <__aeabi_dmul+0x86>
 80020c2:	2300      	movs	r3, #0
 80020c4:	2480      	movs	r4, #128	; 0x80
 80020c6:	2500      	movs	r5, #0
 80020c8:	4a43      	ldr	r2, [pc, #268]	; (80021d8 <__aeabi_dmul+0x4cc>)
 80020ca:	9301      	str	r3, [sp, #4]
 80020cc:	0324      	lsls	r4, r4, #12
 80020ce:	e67e      	b.n	8001dce <__aeabi_dmul+0xc2>
 80020d0:	2001      	movs	r0, #1
 80020d2:	1a40      	subs	r0, r0, r1
 80020d4:	2838      	cmp	r0, #56	; 0x38
 80020d6:	dd00      	ble.n	80020da <__aeabi_dmul+0x3ce>
 80020d8:	e676      	b.n	8001dc8 <__aeabi_dmul+0xbc>
 80020da:	281f      	cmp	r0, #31
 80020dc:	dd5b      	ble.n	8002196 <__aeabi_dmul+0x48a>
 80020de:	221f      	movs	r2, #31
 80020e0:	0023      	movs	r3, r4
 80020e2:	4252      	negs	r2, r2
 80020e4:	1a51      	subs	r1, r2, r1
 80020e6:	40cb      	lsrs	r3, r1
 80020e8:	0019      	movs	r1, r3
 80020ea:	2820      	cmp	r0, #32
 80020ec:	d003      	beq.n	80020f6 <__aeabi_dmul+0x3ea>
 80020ee:	4a3b      	ldr	r2, [pc, #236]	; (80021dc <__aeabi_dmul+0x4d0>)
 80020f0:	4462      	add	r2, ip
 80020f2:	4094      	lsls	r4, r2
 80020f4:	4325      	orrs	r5, r4
 80020f6:	1e6a      	subs	r2, r5, #1
 80020f8:	4195      	sbcs	r5, r2
 80020fa:	002a      	movs	r2, r5
 80020fc:	430a      	orrs	r2, r1
 80020fe:	2107      	movs	r1, #7
 8002100:	000d      	movs	r5, r1
 8002102:	2400      	movs	r4, #0
 8002104:	4015      	ands	r5, r2
 8002106:	4211      	tst	r1, r2
 8002108:	d05b      	beq.n	80021c2 <__aeabi_dmul+0x4b6>
 800210a:	210f      	movs	r1, #15
 800210c:	2400      	movs	r4, #0
 800210e:	4011      	ands	r1, r2
 8002110:	2904      	cmp	r1, #4
 8002112:	d053      	beq.n	80021bc <__aeabi_dmul+0x4b0>
 8002114:	1d11      	adds	r1, r2, #4
 8002116:	4291      	cmp	r1, r2
 8002118:	4192      	sbcs	r2, r2
 800211a:	4252      	negs	r2, r2
 800211c:	18a4      	adds	r4, r4, r2
 800211e:	000a      	movs	r2, r1
 8002120:	0223      	lsls	r3, r4, #8
 8002122:	d54b      	bpl.n	80021bc <__aeabi_dmul+0x4b0>
 8002124:	2201      	movs	r2, #1
 8002126:	2400      	movs	r4, #0
 8002128:	2500      	movs	r5, #0
 800212a:	e650      	b.n	8001dce <__aeabi_dmul+0xc2>
 800212c:	2380      	movs	r3, #128	; 0x80
 800212e:	031b      	lsls	r3, r3, #12
 8002130:	421c      	tst	r4, r3
 8002132:	d009      	beq.n	8002148 <__aeabi_dmul+0x43c>
 8002134:	421e      	tst	r6, r3
 8002136:	d107      	bne.n	8002148 <__aeabi_dmul+0x43c>
 8002138:	4333      	orrs	r3, r6
 800213a:	031c      	lsls	r4, r3, #12
 800213c:	4643      	mov	r3, r8
 800213e:	0015      	movs	r5, r2
 8002140:	0b24      	lsrs	r4, r4, #12
 8002142:	4a25      	ldr	r2, [pc, #148]	; (80021d8 <__aeabi_dmul+0x4cc>)
 8002144:	9301      	str	r3, [sp, #4]
 8002146:	e642      	b.n	8001dce <__aeabi_dmul+0xc2>
 8002148:	2280      	movs	r2, #128	; 0x80
 800214a:	0312      	lsls	r2, r2, #12
 800214c:	4314      	orrs	r4, r2
 800214e:	0324      	lsls	r4, r4, #12
 8002150:	4a21      	ldr	r2, [pc, #132]	; (80021d8 <__aeabi_dmul+0x4cc>)
 8002152:	0b24      	lsrs	r4, r4, #12
 8002154:	9701      	str	r7, [sp, #4]
 8002156:	e63a      	b.n	8001dce <__aeabi_dmul+0xc2>
 8002158:	f000 fd50 	bl	8002bfc <__clzsi2>
 800215c:	0001      	movs	r1, r0
 800215e:	0002      	movs	r2, r0
 8002160:	3115      	adds	r1, #21
 8002162:	3220      	adds	r2, #32
 8002164:	291c      	cmp	r1, #28
 8002166:	dc00      	bgt.n	800216a <__aeabi_dmul+0x45e>
 8002168:	e74b      	b.n	8002002 <__aeabi_dmul+0x2f6>
 800216a:	0034      	movs	r4, r6
 800216c:	3808      	subs	r0, #8
 800216e:	2500      	movs	r5, #0
 8002170:	4084      	lsls	r4, r0
 8002172:	e750      	b.n	8002016 <__aeabi_dmul+0x30a>
 8002174:	f000 fd42 	bl	8002bfc <__clzsi2>
 8002178:	0003      	movs	r3, r0
 800217a:	001a      	movs	r2, r3
 800217c:	3215      	adds	r2, #21
 800217e:	3020      	adds	r0, #32
 8002180:	2a1c      	cmp	r2, #28
 8002182:	dc00      	bgt.n	8002186 <__aeabi_dmul+0x47a>
 8002184:	e71e      	b.n	8001fc4 <__aeabi_dmul+0x2b8>
 8002186:	4656      	mov	r6, sl
 8002188:	3b08      	subs	r3, #8
 800218a:	2200      	movs	r2, #0
 800218c:	409e      	lsls	r6, r3
 800218e:	e723      	b.n	8001fd8 <__aeabi_dmul+0x2cc>
 8002190:	9b00      	ldr	r3, [sp, #0]
 8002192:	469c      	mov	ip, r3
 8002194:	e6e6      	b.n	8001f64 <__aeabi_dmul+0x258>
 8002196:	4912      	ldr	r1, [pc, #72]	; (80021e0 <__aeabi_dmul+0x4d4>)
 8002198:	0022      	movs	r2, r4
 800219a:	4461      	add	r1, ip
 800219c:	002e      	movs	r6, r5
 800219e:	408d      	lsls	r5, r1
 80021a0:	408a      	lsls	r2, r1
 80021a2:	40c6      	lsrs	r6, r0
 80021a4:	1e69      	subs	r1, r5, #1
 80021a6:	418d      	sbcs	r5, r1
 80021a8:	4332      	orrs	r2, r6
 80021aa:	432a      	orrs	r2, r5
 80021ac:	40c4      	lsrs	r4, r0
 80021ae:	0753      	lsls	r3, r2, #29
 80021b0:	d0b6      	beq.n	8002120 <__aeabi_dmul+0x414>
 80021b2:	210f      	movs	r1, #15
 80021b4:	4011      	ands	r1, r2
 80021b6:	2904      	cmp	r1, #4
 80021b8:	d1ac      	bne.n	8002114 <__aeabi_dmul+0x408>
 80021ba:	e7b1      	b.n	8002120 <__aeabi_dmul+0x414>
 80021bc:	0765      	lsls	r5, r4, #29
 80021be:	0264      	lsls	r4, r4, #9
 80021c0:	0b24      	lsrs	r4, r4, #12
 80021c2:	08d2      	lsrs	r2, r2, #3
 80021c4:	4315      	orrs	r5, r2
 80021c6:	2200      	movs	r2, #0
 80021c8:	e601      	b.n	8001dce <__aeabi_dmul+0xc2>
 80021ca:	2280      	movs	r2, #128	; 0x80
 80021cc:	0312      	lsls	r2, r2, #12
 80021ce:	4314      	orrs	r4, r2
 80021d0:	0324      	lsls	r4, r4, #12
 80021d2:	4a01      	ldr	r2, [pc, #4]	; (80021d8 <__aeabi_dmul+0x4cc>)
 80021d4:	0b24      	lsrs	r4, r4, #12
 80021d6:	e5fa      	b.n	8001dce <__aeabi_dmul+0xc2>
 80021d8:	000007ff 	.word	0x000007ff
 80021dc:	0000043e 	.word	0x0000043e
 80021e0:	0000041e 	.word	0x0000041e

080021e4 <__aeabi_dsub>:
 80021e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80021e6:	4657      	mov	r7, sl
 80021e8:	464e      	mov	r6, r9
 80021ea:	4645      	mov	r5, r8
 80021ec:	46de      	mov	lr, fp
 80021ee:	b5e0      	push	{r5, r6, r7, lr}
 80021f0:	001e      	movs	r6, r3
 80021f2:	0017      	movs	r7, r2
 80021f4:	004a      	lsls	r2, r1, #1
 80021f6:	030b      	lsls	r3, r1, #12
 80021f8:	0d52      	lsrs	r2, r2, #21
 80021fa:	0a5b      	lsrs	r3, r3, #9
 80021fc:	4690      	mov	r8, r2
 80021fe:	0f42      	lsrs	r2, r0, #29
 8002200:	431a      	orrs	r2, r3
 8002202:	0fcd      	lsrs	r5, r1, #31
 8002204:	4ccd      	ldr	r4, [pc, #820]	; (800253c <__aeabi_dsub+0x358>)
 8002206:	0331      	lsls	r1, r6, #12
 8002208:	00c3      	lsls	r3, r0, #3
 800220a:	4694      	mov	ip, r2
 800220c:	0070      	lsls	r0, r6, #1
 800220e:	0f7a      	lsrs	r2, r7, #29
 8002210:	0a49      	lsrs	r1, r1, #9
 8002212:	00ff      	lsls	r7, r7, #3
 8002214:	469a      	mov	sl, r3
 8002216:	46b9      	mov	r9, r7
 8002218:	0d40      	lsrs	r0, r0, #21
 800221a:	0ff6      	lsrs	r6, r6, #31
 800221c:	4311      	orrs	r1, r2
 800221e:	42a0      	cmp	r0, r4
 8002220:	d100      	bne.n	8002224 <__aeabi_dsub+0x40>
 8002222:	e0b1      	b.n	8002388 <__aeabi_dsub+0x1a4>
 8002224:	2201      	movs	r2, #1
 8002226:	4056      	eors	r6, r2
 8002228:	46b3      	mov	fp, r6
 800222a:	42b5      	cmp	r5, r6
 800222c:	d100      	bne.n	8002230 <__aeabi_dsub+0x4c>
 800222e:	e088      	b.n	8002342 <__aeabi_dsub+0x15e>
 8002230:	4642      	mov	r2, r8
 8002232:	1a12      	subs	r2, r2, r0
 8002234:	2a00      	cmp	r2, #0
 8002236:	dc00      	bgt.n	800223a <__aeabi_dsub+0x56>
 8002238:	e0ae      	b.n	8002398 <__aeabi_dsub+0x1b4>
 800223a:	2800      	cmp	r0, #0
 800223c:	d100      	bne.n	8002240 <__aeabi_dsub+0x5c>
 800223e:	e0c1      	b.n	80023c4 <__aeabi_dsub+0x1e0>
 8002240:	48be      	ldr	r0, [pc, #760]	; (800253c <__aeabi_dsub+0x358>)
 8002242:	4580      	cmp	r8, r0
 8002244:	d100      	bne.n	8002248 <__aeabi_dsub+0x64>
 8002246:	e151      	b.n	80024ec <__aeabi_dsub+0x308>
 8002248:	2080      	movs	r0, #128	; 0x80
 800224a:	0400      	lsls	r0, r0, #16
 800224c:	4301      	orrs	r1, r0
 800224e:	2a38      	cmp	r2, #56	; 0x38
 8002250:	dd00      	ble.n	8002254 <__aeabi_dsub+0x70>
 8002252:	e17b      	b.n	800254c <__aeabi_dsub+0x368>
 8002254:	2a1f      	cmp	r2, #31
 8002256:	dd00      	ble.n	800225a <__aeabi_dsub+0x76>
 8002258:	e1ee      	b.n	8002638 <__aeabi_dsub+0x454>
 800225a:	2020      	movs	r0, #32
 800225c:	003e      	movs	r6, r7
 800225e:	1a80      	subs	r0, r0, r2
 8002260:	000c      	movs	r4, r1
 8002262:	40d6      	lsrs	r6, r2
 8002264:	40d1      	lsrs	r1, r2
 8002266:	4087      	lsls	r7, r0
 8002268:	4662      	mov	r2, ip
 800226a:	4084      	lsls	r4, r0
 800226c:	1a52      	subs	r2, r2, r1
 800226e:	1e78      	subs	r0, r7, #1
 8002270:	4187      	sbcs	r7, r0
 8002272:	4694      	mov	ip, r2
 8002274:	4334      	orrs	r4, r6
 8002276:	4327      	orrs	r7, r4
 8002278:	1bdc      	subs	r4, r3, r7
 800227a:	42a3      	cmp	r3, r4
 800227c:	419b      	sbcs	r3, r3
 800227e:	4662      	mov	r2, ip
 8002280:	425b      	negs	r3, r3
 8002282:	1ad3      	subs	r3, r2, r3
 8002284:	4699      	mov	r9, r3
 8002286:	464b      	mov	r3, r9
 8002288:	021b      	lsls	r3, r3, #8
 800228a:	d400      	bmi.n	800228e <__aeabi_dsub+0xaa>
 800228c:	e118      	b.n	80024c0 <__aeabi_dsub+0x2dc>
 800228e:	464b      	mov	r3, r9
 8002290:	0258      	lsls	r0, r3, #9
 8002292:	0a43      	lsrs	r3, r0, #9
 8002294:	4699      	mov	r9, r3
 8002296:	464b      	mov	r3, r9
 8002298:	2b00      	cmp	r3, #0
 800229a:	d100      	bne.n	800229e <__aeabi_dsub+0xba>
 800229c:	e137      	b.n	800250e <__aeabi_dsub+0x32a>
 800229e:	4648      	mov	r0, r9
 80022a0:	f000 fcac 	bl	8002bfc <__clzsi2>
 80022a4:	0001      	movs	r1, r0
 80022a6:	3908      	subs	r1, #8
 80022a8:	2320      	movs	r3, #32
 80022aa:	0022      	movs	r2, r4
 80022ac:	4648      	mov	r0, r9
 80022ae:	1a5b      	subs	r3, r3, r1
 80022b0:	40da      	lsrs	r2, r3
 80022b2:	4088      	lsls	r0, r1
 80022b4:	408c      	lsls	r4, r1
 80022b6:	4643      	mov	r3, r8
 80022b8:	4310      	orrs	r0, r2
 80022ba:	4588      	cmp	r8, r1
 80022bc:	dd00      	ble.n	80022c0 <__aeabi_dsub+0xdc>
 80022be:	e136      	b.n	800252e <__aeabi_dsub+0x34a>
 80022c0:	1ac9      	subs	r1, r1, r3
 80022c2:	1c4b      	adds	r3, r1, #1
 80022c4:	2b1f      	cmp	r3, #31
 80022c6:	dd00      	ble.n	80022ca <__aeabi_dsub+0xe6>
 80022c8:	e0ea      	b.n	80024a0 <__aeabi_dsub+0x2bc>
 80022ca:	2220      	movs	r2, #32
 80022cc:	0026      	movs	r6, r4
 80022ce:	1ad2      	subs	r2, r2, r3
 80022d0:	0001      	movs	r1, r0
 80022d2:	4094      	lsls	r4, r2
 80022d4:	40de      	lsrs	r6, r3
 80022d6:	40d8      	lsrs	r0, r3
 80022d8:	2300      	movs	r3, #0
 80022da:	4091      	lsls	r1, r2
 80022dc:	1e62      	subs	r2, r4, #1
 80022de:	4194      	sbcs	r4, r2
 80022e0:	4681      	mov	r9, r0
 80022e2:	4698      	mov	r8, r3
 80022e4:	4331      	orrs	r1, r6
 80022e6:	430c      	orrs	r4, r1
 80022e8:	0763      	lsls	r3, r4, #29
 80022ea:	d009      	beq.n	8002300 <__aeabi_dsub+0x11c>
 80022ec:	230f      	movs	r3, #15
 80022ee:	4023      	ands	r3, r4
 80022f0:	2b04      	cmp	r3, #4
 80022f2:	d005      	beq.n	8002300 <__aeabi_dsub+0x11c>
 80022f4:	1d23      	adds	r3, r4, #4
 80022f6:	42a3      	cmp	r3, r4
 80022f8:	41a4      	sbcs	r4, r4
 80022fa:	4264      	negs	r4, r4
 80022fc:	44a1      	add	r9, r4
 80022fe:	001c      	movs	r4, r3
 8002300:	464b      	mov	r3, r9
 8002302:	021b      	lsls	r3, r3, #8
 8002304:	d400      	bmi.n	8002308 <__aeabi_dsub+0x124>
 8002306:	e0de      	b.n	80024c6 <__aeabi_dsub+0x2e2>
 8002308:	4641      	mov	r1, r8
 800230a:	4b8c      	ldr	r3, [pc, #560]	; (800253c <__aeabi_dsub+0x358>)
 800230c:	3101      	adds	r1, #1
 800230e:	4299      	cmp	r1, r3
 8002310:	d100      	bne.n	8002314 <__aeabi_dsub+0x130>
 8002312:	e0e7      	b.n	80024e4 <__aeabi_dsub+0x300>
 8002314:	464b      	mov	r3, r9
 8002316:	488a      	ldr	r0, [pc, #552]	; (8002540 <__aeabi_dsub+0x35c>)
 8002318:	08e4      	lsrs	r4, r4, #3
 800231a:	4003      	ands	r3, r0
 800231c:	0018      	movs	r0, r3
 800231e:	0549      	lsls	r1, r1, #21
 8002320:	075b      	lsls	r3, r3, #29
 8002322:	0240      	lsls	r0, r0, #9
 8002324:	4323      	orrs	r3, r4
 8002326:	0d4a      	lsrs	r2, r1, #21
 8002328:	0b04      	lsrs	r4, r0, #12
 800232a:	0512      	lsls	r2, r2, #20
 800232c:	07ed      	lsls	r5, r5, #31
 800232e:	4322      	orrs	r2, r4
 8002330:	432a      	orrs	r2, r5
 8002332:	0018      	movs	r0, r3
 8002334:	0011      	movs	r1, r2
 8002336:	bcf0      	pop	{r4, r5, r6, r7}
 8002338:	46bb      	mov	fp, r7
 800233a:	46b2      	mov	sl, r6
 800233c:	46a9      	mov	r9, r5
 800233e:	46a0      	mov	r8, r4
 8002340:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002342:	4642      	mov	r2, r8
 8002344:	1a12      	subs	r2, r2, r0
 8002346:	2a00      	cmp	r2, #0
 8002348:	dd52      	ble.n	80023f0 <__aeabi_dsub+0x20c>
 800234a:	2800      	cmp	r0, #0
 800234c:	d100      	bne.n	8002350 <__aeabi_dsub+0x16c>
 800234e:	e09c      	b.n	800248a <__aeabi_dsub+0x2a6>
 8002350:	45a0      	cmp	r8, r4
 8002352:	d100      	bne.n	8002356 <__aeabi_dsub+0x172>
 8002354:	e0ca      	b.n	80024ec <__aeabi_dsub+0x308>
 8002356:	2080      	movs	r0, #128	; 0x80
 8002358:	0400      	lsls	r0, r0, #16
 800235a:	4301      	orrs	r1, r0
 800235c:	2a38      	cmp	r2, #56	; 0x38
 800235e:	dd00      	ble.n	8002362 <__aeabi_dsub+0x17e>
 8002360:	e149      	b.n	80025f6 <__aeabi_dsub+0x412>
 8002362:	2a1f      	cmp	r2, #31
 8002364:	dc00      	bgt.n	8002368 <__aeabi_dsub+0x184>
 8002366:	e197      	b.n	8002698 <__aeabi_dsub+0x4b4>
 8002368:	0010      	movs	r0, r2
 800236a:	000e      	movs	r6, r1
 800236c:	3820      	subs	r0, #32
 800236e:	40c6      	lsrs	r6, r0
 8002370:	2a20      	cmp	r2, #32
 8002372:	d004      	beq.n	800237e <__aeabi_dsub+0x19a>
 8002374:	2040      	movs	r0, #64	; 0x40
 8002376:	1a82      	subs	r2, r0, r2
 8002378:	4091      	lsls	r1, r2
 800237a:	430f      	orrs	r7, r1
 800237c:	46b9      	mov	r9, r7
 800237e:	464c      	mov	r4, r9
 8002380:	1e62      	subs	r2, r4, #1
 8002382:	4194      	sbcs	r4, r2
 8002384:	4334      	orrs	r4, r6
 8002386:	e13a      	b.n	80025fe <__aeabi_dsub+0x41a>
 8002388:	000a      	movs	r2, r1
 800238a:	433a      	orrs	r2, r7
 800238c:	d028      	beq.n	80023e0 <__aeabi_dsub+0x1fc>
 800238e:	46b3      	mov	fp, r6
 8002390:	42b5      	cmp	r5, r6
 8002392:	d02b      	beq.n	80023ec <__aeabi_dsub+0x208>
 8002394:	4a6b      	ldr	r2, [pc, #428]	; (8002544 <__aeabi_dsub+0x360>)
 8002396:	4442      	add	r2, r8
 8002398:	2a00      	cmp	r2, #0
 800239a:	d05d      	beq.n	8002458 <__aeabi_dsub+0x274>
 800239c:	4642      	mov	r2, r8
 800239e:	4644      	mov	r4, r8
 80023a0:	1a82      	subs	r2, r0, r2
 80023a2:	2c00      	cmp	r4, #0
 80023a4:	d000      	beq.n	80023a8 <__aeabi_dsub+0x1c4>
 80023a6:	e0f5      	b.n	8002594 <__aeabi_dsub+0x3b0>
 80023a8:	4665      	mov	r5, ip
 80023aa:	431d      	orrs	r5, r3
 80023ac:	d100      	bne.n	80023b0 <__aeabi_dsub+0x1cc>
 80023ae:	e19c      	b.n	80026ea <__aeabi_dsub+0x506>
 80023b0:	1e55      	subs	r5, r2, #1
 80023b2:	2a01      	cmp	r2, #1
 80023b4:	d100      	bne.n	80023b8 <__aeabi_dsub+0x1d4>
 80023b6:	e1fb      	b.n	80027b0 <__aeabi_dsub+0x5cc>
 80023b8:	4c60      	ldr	r4, [pc, #384]	; (800253c <__aeabi_dsub+0x358>)
 80023ba:	42a2      	cmp	r2, r4
 80023bc:	d100      	bne.n	80023c0 <__aeabi_dsub+0x1dc>
 80023be:	e1bd      	b.n	800273c <__aeabi_dsub+0x558>
 80023c0:	002a      	movs	r2, r5
 80023c2:	e0f0      	b.n	80025a6 <__aeabi_dsub+0x3c2>
 80023c4:	0008      	movs	r0, r1
 80023c6:	4338      	orrs	r0, r7
 80023c8:	d100      	bne.n	80023cc <__aeabi_dsub+0x1e8>
 80023ca:	e0c3      	b.n	8002554 <__aeabi_dsub+0x370>
 80023cc:	1e50      	subs	r0, r2, #1
 80023ce:	2a01      	cmp	r2, #1
 80023d0:	d100      	bne.n	80023d4 <__aeabi_dsub+0x1f0>
 80023d2:	e1a8      	b.n	8002726 <__aeabi_dsub+0x542>
 80023d4:	4c59      	ldr	r4, [pc, #356]	; (800253c <__aeabi_dsub+0x358>)
 80023d6:	42a2      	cmp	r2, r4
 80023d8:	d100      	bne.n	80023dc <__aeabi_dsub+0x1f8>
 80023da:	e087      	b.n	80024ec <__aeabi_dsub+0x308>
 80023dc:	0002      	movs	r2, r0
 80023de:	e736      	b.n	800224e <__aeabi_dsub+0x6a>
 80023e0:	2201      	movs	r2, #1
 80023e2:	4056      	eors	r6, r2
 80023e4:	46b3      	mov	fp, r6
 80023e6:	42b5      	cmp	r5, r6
 80023e8:	d000      	beq.n	80023ec <__aeabi_dsub+0x208>
 80023ea:	e721      	b.n	8002230 <__aeabi_dsub+0x4c>
 80023ec:	4a55      	ldr	r2, [pc, #340]	; (8002544 <__aeabi_dsub+0x360>)
 80023ee:	4442      	add	r2, r8
 80023f0:	2a00      	cmp	r2, #0
 80023f2:	d100      	bne.n	80023f6 <__aeabi_dsub+0x212>
 80023f4:	e0b5      	b.n	8002562 <__aeabi_dsub+0x37e>
 80023f6:	4642      	mov	r2, r8
 80023f8:	4644      	mov	r4, r8
 80023fa:	1a82      	subs	r2, r0, r2
 80023fc:	2c00      	cmp	r4, #0
 80023fe:	d100      	bne.n	8002402 <__aeabi_dsub+0x21e>
 8002400:	e138      	b.n	8002674 <__aeabi_dsub+0x490>
 8002402:	4e4e      	ldr	r6, [pc, #312]	; (800253c <__aeabi_dsub+0x358>)
 8002404:	42b0      	cmp	r0, r6
 8002406:	d100      	bne.n	800240a <__aeabi_dsub+0x226>
 8002408:	e1de      	b.n	80027c8 <__aeabi_dsub+0x5e4>
 800240a:	2680      	movs	r6, #128	; 0x80
 800240c:	4664      	mov	r4, ip
 800240e:	0436      	lsls	r6, r6, #16
 8002410:	4334      	orrs	r4, r6
 8002412:	46a4      	mov	ip, r4
 8002414:	2a38      	cmp	r2, #56	; 0x38
 8002416:	dd00      	ble.n	800241a <__aeabi_dsub+0x236>
 8002418:	e196      	b.n	8002748 <__aeabi_dsub+0x564>
 800241a:	2a1f      	cmp	r2, #31
 800241c:	dd00      	ble.n	8002420 <__aeabi_dsub+0x23c>
 800241e:	e224      	b.n	800286a <__aeabi_dsub+0x686>
 8002420:	2620      	movs	r6, #32
 8002422:	1ab4      	subs	r4, r6, r2
 8002424:	46a2      	mov	sl, r4
 8002426:	4664      	mov	r4, ip
 8002428:	4656      	mov	r6, sl
 800242a:	40b4      	lsls	r4, r6
 800242c:	46a1      	mov	r9, r4
 800242e:	001c      	movs	r4, r3
 8002430:	464e      	mov	r6, r9
 8002432:	40d4      	lsrs	r4, r2
 8002434:	4326      	orrs	r6, r4
 8002436:	0034      	movs	r4, r6
 8002438:	4656      	mov	r6, sl
 800243a:	40b3      	lsls	r3, r6
 800243c:	1e5e      	subs	r6, r3, #1
 800243e:	41b3      	sbcs	r3, r6
 8002440:	431c      	orrs	r4, r3
 8002442:	4663      	mov	r3, ip
 8002444:	40d3      	lsrs	r3, r2
 8002446:	18c9      	adds	r1, r1, r3
 8002448:	19e4      	adds	r4, r4, r7
 800244a:	42bc      	cmp	r4, r7
 800244c:	41bf      	sbcs	r7, r7
 800244e:	427f      	negs	r7, r7
 8002450:	46b9      	mov	r9, r7
 8002452:	4680      	mov	r8, r0
 8002454:	4489      	add	r9, r1
 8002456:	e0d8      	b.n	800260a <__aeabi_dsub+0x426>
 8002458:	4640      	mov	r0, r8
 800245a:	4c3b      	ldr	r4, [pc, #236]	; (8002548 <__aeabi_dsub+0x364>)
 800245c:	3001      	adds	r0, #1
 800245e:	4220      	tst	r0, r4
 8002460:	d000      	beq.n	8002464 <__aeabi_dsub+0x280>
 8002462:	e0b4      	b.n	80025ce <__aeabi_dsub+0x3ea>
 8002464:	4640      	mov	r0, r8
 8002466:	2800      	cmp	r0, #0
 8002468:	d000      	beq.n	800246c <__aeabi_dsub+0x288>
 800246a:	e144      	b.n	80026f6 <__aeabi_dsub+0x512>
 800246c:	4660      	mov	r0, ip
 800246e:	4318      	orrs	r0, r3
 8002470:	d100      	bne.n	8002474 <__aeabi_dsub+0x290>
 8002472:	e190      	b.n	8002796 <__aeabi_dsub+0x5b2>
 8002474:	0008      	movs	r0, r1
 8002476:	4338      	orrs	r0, r7
 8002478:	d000      	beq.n	800247c <__aeabi_dsub+0x298>
 800247a:	e1aa      	b.n	80027d2 <__aeabi_dsub+0x5ee>
 800247c:	4661      	mov	r1, ip
 800247e:	08db      	lsrs	r3, r3, #3
 8002480:	0749      	lsls	r1, r1, #29
 8002482:	430b      	orrs	r3, r1
 8002484:	4661      	mov	r1, ip
 8002486:	08cc      	lsrs	r4, r1, #3
 8002488:	e027      	b.n	80024da <__aeabi_dsub+0x2f6>
 800248a:	0008      	movs	r0, r1
 800248c:	4338      	orrs	r0, r7
 800248e:	d061      	beq.n	8002554 <__aeabi_dsub+0x370>
 8002490:	1e50      	subs	r0, r2, #1
 8002492:	2a01      	cmp	r2, #1
 8002494:	d100      	bne.n	8002498 <__aeabi_dsub+0x2b4>
 8002496:	e139      	b.n	800270c <__aeabi_dsub+0x528>
 8002498:	42a2      	cmp	r2, r4
 800249a:	d027      	beq.n	80024ec <__aeabi_dsub+0x308>
 800249c:	0002      	movs	r2, r0
 800249e:	e75d      	b.n	800235c <__aeabi_dsub+0x178>
 80024a0:	0002      	movs	r2, r0
 80024a2:	391f      	subs	r1, #31
 80024a4:	40ca      	lsrs	r2, r1
 80024a6:	0011      	movs	r1, r2
 80024a8:	2b20      	cmp	r3, #32
 80024aa:	d003      	beq.n	80024b4 <__aeabi_dsub+0x2d0>
 80024ac:	2240      	movs	r2, #64	; 0x40
 80024ae:	1ad3      	subs	r3, r2, r3
 80024b0:	4098      	lsls	r0, r3
 80024b2:	4304      	orrs	r4, r0
 80024b4:	1e63      	subs	r3, r4, #1
 80024b6:	419c      	sbcs	r4, r3
 80024b8:	2300      	movs	r3, #0
 80024ba:	4699      	mov	r9, r3
 80024bc:	4698      	mov	r8, r3
 80024be:	430c      	orrs	r4, r1
 80024c0:	0763      	lsls	r3, r4, #29
 80024c2:	d000      	beq.n	80024c6 <__aeabi_dsub+0x2e2>
 80024c4:	e712      	b.n	80022ec <__aeabi_dsub+0x108>
 80024c6:	464b      	mov	r3, r9
 80024c8:	464a      	mov	r2, r9
 80024ca:	08e4      	lsrs	r4, r4, #3
 80024cc:	075b      	lsls	r3, r3, #29
 80024ce:	4323      	orrs	r3, r4
 80024d0:	08d4      	lsrs	r4, r2, #3
 80024d2:	4642      	mov	r2, r8
 80024d4:	4919      	ldr	r1, [pc, #100]	; (800253c <__aeabi_dsub+0x358>)
 80024d6:	428a      	cmp	r2, r1
 80024d8:	d00e      	beq.n	80024f8 <__aeabi_dsub+0x314>
 80024da:	0324      	lsls	r4, r4, #12
 80024dc:	0552      	lsls	r2, r2, #21
 80024de:	0b24      	lsrs	r4, r4, #12
 80024e0:	0d52      	lsrs	r2, r2, #21
 80024e2:	e722      	b.n	800232a <__aeabi_dsub+0x146>
 80024e4:	000a      	movs	r2, r1
 80024e6:	2400      	movs	r4, #0
 80024e8:	2300      	movs	r3, #0
 80024ea:	e71e      	b.n	800232a <__aeabi_dsub+0x146>
 80024ec:	08db      	lsrs	r3, r3, #3
 80024ee:	4662      	mov	r2, ip
 80024f0:	0752      	lsls	r2, r2, #29
 80024f2:	4313      	orrs	r3, r2
 80024f4:	4662      	mov	r2, ip
 80024f6:	08d4      	lsrs	r4, r2, #3
 80024f8:	001a      	movs	r2, r3
 80024fa:	4322      	orrs	r2, r4
 80024fc:	d100      	bne.n	8002500 <__aeabi_dsub+0x31c>
 80024fe:	e1fc      	b.n	80028fa <__aeabi_dsub+0x716>
 8002500:	2280      	movs	r2, #128	; 0x80
 8002502:	0312      	lsls	r2, r2, #12
 8002504:	4314      	orrs	r4, r2
 8002506:	0324      	lsls	r4, r4, #12
 8002508:	4a0c      	ldr	r2, [pc, #48]	; (800253c <__aeabi_dsub+0x358>)
 800250a:	0b24      	lsrs	r4, r4, #12
 800250c:	e70d      	b.n	800232a <__aeabi_dsub+0x146>
 800250e:	0020      	movs	r0, r4
 8002510:	f000 fb74 	bl	8002bfc <__clzsi2>
 8002514:	0001      	movs	r1, r0
 8002516:	3118      	adds	r1, #24
 8002518:	291f      	cmp	r1, #31
 800251a:	dc00      	bgt.n	800251e <__aeabi_dsub+0x33a>
 800251c:	e6c4      	b.n	80022a8 <__aeabi_dsub+0xc4>
 800251e:	3808      	subs	r0, #8
 8002520:	4084      	lsls	r4, r0
 8002522:	4643      	mov	r3, r8
 8002524:	0020      	movs	r0, r4
 8002526:	2400      	movs	r4, #0
 8002528:	4588      	cmp	r8, r1
 800252a:	dc00      	bgt.n	800252e <__aeabi_dsub+0x34a>
 800252c:	e6c8      	b.n	80022c0 <__aeabi_dsub+0xdc>
 800252e:	4a04      	ldr	r2, [pc, #16]	; (8002540 <__aeabi_dsub+0x35c>)
 8002530:	1a5b      	subs	r3, r3, r1
 8002532:	4010      	ands	r0, r2
 8002534:	4698      	mov	r8, r3
 8002536:	4681      	mov	r9, r0
 8002538:	e6d6      	b.n	80022e8 <__aeabi_dsub+0x104>
 800253a:	46c0      	nop			; (mov r8, r8)
 800253c:	000007ff 	.word	0x000007ff
 8002540:	ff7fffff 	.word	0xff7fffff
 8002544:	fffff801 	.word	0xfffff801
 8002548:	000007fe 	.word	0x000007fe
 800254c:	430f      	orrs	r7, r1
 800254e:	1e7a      	subs	r2, r7, #1
 8002550:	4197      	sbcs	r7, r2
 8002552:	e691      	b.n	8002278 <__aeabi_dsub+0x94>
 8002554:	4661      	mov	r1, ip
 8002556:	08db      	lsrs	r3, r3, #3
 8002558:	0749      	lsls	r1, r1, #29
 800255a:	430b      	orrs	r3, r1
 800255c:	4661      	mov	r1, ip
 800255e:	08cc      	lsrs	r4, r1, #3
 8002560:	e7b8      	b.n	80024d4 <__aeabi_dsub+0x2f0>
 8002562:	4640      	mov	r0, r8
 8002564:	4cd3      	ldr	r4, [pc, #844]	; (80028b4 <__aeabi_dsub+0x6d0>)
 8002566:	3001      	adds	r0, #1
 8002568:	4220      	tst	r0, r4
 800256a:	d000      	beq.n	800256e <__aeabi_dsub+0x38a>
 800256c:	e0a2      	b.n	80026b4 <__aeabi_dsub+0x4d0>
 800256e:	4640      	mov	r0, r8
 8002570:	2800      	cmp	r0, #0
 8002572:	d000      	beq.n	8002576 <__aeabi_dsub+0x392>
 8002574:	e101      	b.n	800277a <__aeabi_dsub+0x596>
 8002576:	4660      	mov	r0, ip
 8002578:	4318      	orrs	r0, r3
 800257a:	d100      	bne.n	800257e <__aeabi_dsub+0x39a>
 800257c:	e15e      	b.n	800283c <__aeabi_dsub+0x658>
 800257e:	0008      	movs	r0, r1
 8002580:	4338      	orrs	r0, r7
 8002582:	d000      	beq.n	8002586 <__aeabi_dsub+0x3a2>
 8002584:	e15f      	b.n	8002846 <__aeabi_dsub+0x662>
 8002586:	4661      	mov	r1, ip
 8002588:	08db      	lsrs	r3, r3, #3
 800258a:	0749      	lsls	r1, r1, #29
 800258c:	430b      	orrs	r3, r1
 800258e:	4661      	mov	r1, ip
 8002590:	08cc      	lsrs	r4, r1, #3
 8002592:	e7a2      	b.n	80024da <__aeabi_dsub+0x2f6>
 8002594:	4dc8      	ldr	r5, [pc, #800]	; (80028b8 <__aeabi_dsub+0x6d4>)
 8002596:	42a8      	cmp	r0, r5
 8002598:	d100      	bne.n	800259c <__aeabi_dsub+0x3b8>
 800259a:	e0cf      	b.n	800273c <__aeabi_dsub+0x558>
 800259c:	2580      	movs	r5, #128	; 0x80
 800259e:	4664      	mov	r4, ip
 80025a0:	042d      	lsls	r5, r5, #16
 80025a2:	432c      	orrs	r4, r5
 80025a4:	46a4      	mov	ip, r4
 80025a6:	2a38      	cmp	r2, #56	; 0x38
 80025a8:	dc56      	bgt.n	8002658 <__aeabi_dsub+0x474>
 80025aa:	2a1f      	cmp	r2, #31
 80025ac:	dd00      	ble.n	80025b0 <__aeabi_dsub+0x3cc>
 80025ae:	e0d1      	b.n	8002754 <__aeabi_dsub+0x570>
 80025b0:	2520      	movs	r5, #32
 80025b2:	001e      	movs	r6, r3
 80025b4:	1aad      	subs	r5, r5, r2
 80025b6:	4664      	mov	r4, ip
 80025b8:	40ab      	lsls	r3, r5
 80025ba:	40ac      	lsls	r4, r5
 80025bc:	40d6      	lsrs	r6, r2
 80025be:	1e5d      	subs	r5, r3, #1
 80025c0:	41ab      	sbcs	r3, r5
 80025c2:	4334      	orrs	r4, r6
 80025c4:	4323      	orrs	r3, r4
 80025c6:	4664      	mov	r4, ip
 80025c8:	40d4      	lsrs	r4, r2
 80025ca:	1b09      	subs	r1, r1, r4
 80025cc:	e049      	b.n	8002662 <__aeabi_dsub+0x47e>
 80025ce:	4660      	mov	r0, ip
 80025d0:	1bdc      	subs	r4, r3, r7
 80025d2:	1a46      	subs	r6, r0, r1
 80025d4:	42a3      	cmp	r3, r4
 80025d6:	4180      	sbcs	r0, r0
 80025d8:	4240      	negs	r0, r0
 80025da:	4681      	mov	r9, r0
 80025dc:	0030      	movs	r0, r6
 80025de:	464e      	mov	r6, r9
 80025e0:	1b80      	subs	r0, r0, r6
 80025e2:	4681      	mov	r9, r0
 80025e4:	0200      	lsls	r0, r0, #8
 80025e6:	d476      	bmi.n	80026d6 <__aeabi_dsub+0x4f2>
 80025e8:	464b      	mov	r3, r9
 80025ea:	4323      	orrs	r3, r4
 80025ec:	d000      	beq.n	80025f0 <__aeabi_dsub+0x40c>
 80025ee:	e652      	b.n	8002296 <__aeabi_dsub+0xb2>
 80025f0:	2400      	movs	r4, #0
 80025f2:	2500      	movs	r5, #0
 80025f4:	e771      	b.n	80024da <__aeabi_dsub+0x2f6>
 80025f6:	4339      	orrs	r1, r7
 80025f8:	000c      	movs	r4, r1
 80025fa:	1e62      	subs	r2, r4, #1
 80025fc:	4194      	sbcs	r4, r2
 80025fe:	18e4      	adds	r4, r4, r3
 8002600:	429c      	cmp	r4, r3
 8002602:	419b      	sbcs	r3, r3
 8002604:	425b      	negs	r3, r3
 8002606:	4463      	add	r3, ip
 8002608:	4699      	mov	r9, r3
 800260a:	464b      	mov	r3, r9
 800260c:	021b      	lsls	r3, r3, #8
 800260e:	d400      	bmi.n	8002612 <__aeabi_dsub+0x42e>
 8002610:	e756      	b.n	80024c0 <__aeabi_dsub+0x2dc>
 8002612:	2301      	movs	r3, #1
 8002614:	469c      	mov	ip, r3
 8002616:	4ba8      	ldr	r3, [pc, #672]	; (80028b8 <__aeabi_dsub+0x6d4>)
 8002618:	44e0      	add	r8, ip
 800261a:	4598      	cmp	r8, r3
 800261c:	d038      	beq.n	8002690 <__aeabi_dsub+0x4ac>
 800261e:	464b      	mov	r3, r9
 8002620:	48a6      	ldr	r0, [pc, #664]	; (80028bc <__aeabi_dsub+0x6d8>)
 8002622:	2201      	movs	r2, #1
 8002624:	4003      	ands	r3, r0
 8002626:	0018      	movs	r0, r3
 8002628:	0863      	lsrs	r3, r4, #1
 800262a:	4014      	ands	r4, r2
 800262c:	431c      	orrs	r4, r3
 800262e:	07c3      	lsls	r3, r0, #31
 8002630:	431c      	orrs	r4, r3
 8002632:	0843      	lsrs	r3, r0, #1
 8002634:	4699      	mov	r9, r3
 8002636:	e657      	b.n	80022e8 <__aeabi_dsub+0x104>
 8002638:	0010      	movs	r0, r2
 800263a:	000e      	movs	r6, r1
 800263c:	3820      	subs	r0, #32
 800263e:	40c6      	lsrs	r6, r0
 8002640:	2a20      	cmp	r2, #32
 8002642:	d004      	beq.n	800264e <__aeabi_dsub+0x46a>
 8002644:	2040      	movs	r0, #64	; 0x40
 8002646:	1a82      	subs	r2, r0, r2
 8002648:	4091      	lsls	r1, r2
 800264a:	430f      	orrs	r7, r1
 800264c:	46b9      	mov	r9, r7
 800264e:	464f      	mov	r7, r9
 8002650:	1e7a      	subs	r2, r7, #1
 8002652:	4197      	sbcs	r7, r2
 8002654:	4337      	orrs	r7, r6
 8002656:	e60f      	b.n	8002278 <__aeabi_dsub+0x94>
 8002658:	4662      	mov	r2, ip
 800265a:	431a      	orrs	r2, r3
 800265c:	0013      	movs	r3, r2
 800265e:	1e5a      	subs	r2, r3, #1
 8002660:	4193      	sbcs	r3, r2
 8002662:	1afc      	subs	r4, r7, r3
 8002664:	42a7      	cmp	r7, r4
 8002666:	41bf      	sbcs	r7, r7
 8002668:	427f      	negs	r7, r7
 800266a:	1bcb      	subs	r3, r1, r7
 800266c:	4699      	mov	r9, r3
 800266e:	465d      	mov	r5, fp
 8002670:	4680      	mov	r8, r0
 8002672:	e608      	b.n	8002286 <__aeabi_dsub+0xa2>
 8002674:	4666      	mov	r6, ip
 8002676:	431e      	orrs	r6, r3
 8002678:	d100      	bne.n	800267c <__aeabi_dsub+0x498>
 800267a:	e0be      	b.n	80027fa <__aeabi_dsub+0x616>
 800267c:	1e56      	subs	r6, r2, #1
 800267e:	2a01      	cmp	r2, #1
 8002680:	d100      	bne.n	8002684 <__aeabi_dsub+0x4a0>
 8002682:	e109      	b.n	8002898 <__aeabi_dsub+0x6b4>
 8002684:	4c8c      	ldr	r4, [pc, #560]	; (80028b8 <__aeabi_dsub+0x6d4>)
 8002686:	42a2      	cmp	r2, r4
 8002688:	d100      	bne.n	800268c <__aeabi_dsub+0x4a8>
 800268a:	e119      	b.n	80028c0 <__aeabi_dsub+0x6dc>
 800268c:	0032      	movs	r2, r6
 800268e:	e6c1      	b.n	8002414 <__aeabi_dsub+0x230>
 8002690:	4642      	mov	r2, r8
 8002692:	2400      	movs	r4, #0
 8002694:	2300      	movs	r3, #0
 8002696:	e648      	b.n	800232a <__aeabi_dsub+0x146>
 8002698:	2020      	movs	r0, #32
 800269a:	000c      	movs	r4, r1
 800269c:	1a80      	subs	r0, r0, r2
 800269e:	003e      	movs	r6, r7
 80026a0:	4087      	lsls	r7, r0
 80026a2:	4084      	lsls	r4, r0
 80026a4:	40d6      	lsrs	r6, r2
 80026a6:	1e78      	subs	r0, r7, #1
 80026a8:	4187      	sbcs	r7, r0
 80026aa:	40d1      	lsrs	r1, r2
 80026ac:	4334      	orrs	r4, r6
 80026ae:	433c      	orrs	r4, r7
 80026b0:	448c      	add	ip, r1
 80026b2:	e7a4      	b.n	80025fe <__aeabi_dsub+0x41a>
 80026b4:	4a80      	ldr	r2, [pc, #512]	; (80028b8 <__aeabi_dsub+0x6d4>)
 80026b6:	4290      	cmp	r0, r2
 80026b8:	d100      	bne.n	80026bc <__aeabi_dsub+0x4d8>
 80026ba:	e0e9      	b.n	8002890 <__aeabi_dsub+0x6ac>
 80026bc:	19df      	adds	r7, r3, r7
 80026be:	429f      	cmp	r7, r3
 80026c0:	419b      	sbcs	r3, r3
 80026c2:	4461      	add	r1, ip
 80026c4:	425b      	negs	r3, r3
 80026c6:	18c9      	adds	r1, r1, r3
 80026c8:	07cc      	lsls	r4, r1, #31
 80026ca:	087f      	lsrs	r7, r7, #1
 80026cc:	084b      	lsrs	r3, r1, #1
 80026ce:	4699      	mov	r9, r3
 80026d0:	4680      	mov	r8, r0
 80026d2:	433c      	orrs	r4, r7
 80026d4:	e6f4      	b.n	80024c0 <__aeabi_dsub+0x2dc>
 80026d6:	1afc      	subs	r4, r7, r3
 80026d8:	42a7      	cmp	r7, r4
 80026da:	41bf      	sbcs	r7, r7
 80026dc:	4663      	mov	r3, ip
 80026de:	427f      	negs	r7, r7
 80026e0:	1ac9      	subs	r1, r1, r3
 80026e2:	1bcb      	subs	r3, r1, r7
 80026e4:	4699      	mov	r9, r3
 80026e6:	465d      	mov	r5, fp
 80026e8:	e5d5      	b.n	8002296 <__aeabi_dsub+0xb2>
 80026ea:	08ff      	lsrs	r7, r7, #3
 80026ec:	074b      	lsls	r3, r1, #29
 80026ee:	465d      	mov	r5, fp
 80026f0:	433b      	orrs	r3, r7
 80026f2:	08cc      	lsrs	r4, r1, #3
 80026f4:	e6ee      	b.n	80024d4 <__aeabi_dsub+0x2f0>
 80026f6:	4662      	mov	r2, ip
 80026f8:	431a      	orrs	r2, r3
 80026fa:	d000      	beq.n	80026fe <__aeabi_dsub+0x51a>
 80026fc:	e082      	b.n	8002804 <__aeabi_dsub+0x620>
 80026fe:	000b      	movs	r3, r1
 8002700:	433b      	orrs	r3, r7
 8002702:	d11b      	bne.n	800273c <__aeabi_dsub+0x558>
 8002704:	2480      	movs	r4, #128	; 0x80
 8002706:	2500      	movs	r5, #0
 8002708:	0324      	lsls	r4, r4, #12
 800270a:	e6f9      	b.n	8002500 <__aeabi_dsub+0x31c>
 800270c:	19dc      	adds	r4, r3, r7
 800270e:	429c      	cmp	r4, r3
 8002710:	419b      	sbcs	r3, r3
 8002712:	4461      	add	r1, ip
 8002714:	4689      	mov	r9, r1
 8002716:	425b      	negs	r3, r3
 8002718:	4499      	add	r9, r3
 800271a:	464b      	mov	r3, r9
 800271c:	021b      	lsls	r3, r3, #8
 800271e:	d444      	bmi.n	80027aa <__aeabi_dsub+0x5c6>
 8002720:	2301      	movs	r3, #1
 8002722:	4698      	mov	r8, r3
 8002724:	e6cc      	b.n	80024c0 <__aeabi_dsub+0x2dc>
 8002726:	1bdc      	subs	r4, r3, r7
 8002728:	4662      	mov	r2, ip
 800272a:	42a3      	cmp	r3, r4
 800272c:	419b      	sbcs	r3, r3
 800272e:	1a51      	subs	r1, r2, r1
 8002730:	425b      	negs	r3, r3
 8002732:	1acb      	subs	r3, r1, r3
 8002734:	4699      	mov	r9, r3
 8002736:	2301      	movs	r3, #1
 8002738:	4698      	mov	r8, r3
 800273a:	e5a4      	b.n	8002286 <__aeabi_dsub+0xa2>
 800273c:	08ff      	lsrs	r7, r7, #3
 800273e:	074b      	lsls	r3, r1, #29
 8002740:	465d      	mov	r5, fp
 8002742:	433b      	orrs	r3, r7
 8002744:	08cc      	lsrs	r4, r1, #3
 8002746:	e6d7      	b.n	80024f8 <__aeabi_dsub+0x314>
 8002748:	4662      	mov	r2, ip
 800274a:	431a      	orrs	r2, r3
 800274c:	0014      	movs	r4, r2
 800274e:	1e63      	subs	r3, r4, #1
 8002750:	419c      	sbcs	r4, r3
 8002752:	e679      	b.n	8002448 <__aeabi_dsub+0x264>
 8002754:	0015      	movs	r5, r2
 8002756:	4664      	mov	r4, ip
 8002758:	3d20      	subs	r5, #32
 800275a:	40ec      	lsrs	r4, r5
 800275c:	46a0      	mov	r8, r4
 800275e:	2a20      	cmp	r2, #32
 8002760:	d005      	beq.n	800276e <__aeabi_dsub+0x58a>
 8002762:	2540      	movs	r5, #64	; 0x40
 8002764:	4664      	mov	r4, ip
 8002766:	1aaa      	subs	r2, r5, r2
 8002768:	4094      	lsls	r4, r2
 800276a:	4323      	orrs	r3, r4
 800276c:	469a      	mov	sl, r3
 800276e:	4654      	mov	r4, sl
 8002770:	1e63      	subs	r3, r4, #1
 8002772:	419c      	sbcs	r4, r3
 8002774:	4643      	mov	r3, r8
 8002776:	4323      	orrs	r3, r4
 8002778:	e773      	b.n	8002662 <__aeabi_dsub+0x47e>
 800277a:	4662      	mov	r2, ip
 800277c:	431a      	orrs	r2, r3
 800277e:	d023      	beq.n	80027c8 <__aeabi_dsub+0x5e4>
 8002780:	000a      	movs	r2, r1
 8002782:	433a      	orrs	r2, r7
 8002784:	d000      	beq.n	8002788 <__aeabi_dsub+0x5a4>
 8002786:	e0a0      	b.n	80028ca <__aeabi_dsub+0x6e6>
 8002788:	4662      	mov	r2, ip
 800278a:	08db      	lsrs	r3, r3, #3
 800278c:	0752      	lsls	r2, r2, #29
 800278e:	4313      	orrs	r3, r2
 8002790:	4662      	mov	r2, ip
 8002792:	08d4      	lsrs	r4, r2, #3
 8002794:	e6b0      	b.n	80024f8 <__aeabi_dsub+0x314>
 8002796:	000b      	movs	r3, r1
 8002798:	433b      	orrs	r3, r7
 800279a:	d100      	bne.n	800279e <__aeabi_dsub+0x5ba>
 800279c:	e728      	b.n	80025f0 <__aeabi_dsub+0x40c>
 800279e:	08ff      	lsrs	r7, r7, #3
 80027a0:	074b      	lsls	r3, r1, #29
 80027a2:	465d      	mov	r5, fp
 80027a4:	433b      	orrs	r3, r7
 80027a6:	08cc      	lsrs	r4, r1, #3
 80027a8:	e697      	b.n	80024da <__aeabi_dsub+0x2f6>
 80027aa:	2302      	movs	r3, #2
 80027ac:	4698      	mov	r8, r3
 80027ae:	e736      	b.n	800261e <__aeabi_dsub+0x43a>
 80027b0:	1afc      	subs	r4, r7, r3
 80027b2:	42a7      	cmp	r7, r4
 80027b4:	41bf      	sbcs	r7, r7
 80027b6:	4663      	mov	r3, ip
 80027b8:	427f      	negs	r7, r7
 80027ba:	1ac9      	subs	r1, r1, r3
 80027bc:	1bcb      	subs	r3, r1, r7
 80027be:	4699      	mov	r9, r3
 80027c0:	2301      	movs	r3, #1
 80027c2:	465d      	mov	r5, fp
 80027c4:	4698      	mov	r8, r3
 80027c6:	e55e      	b.n	8002286 <__aeabi_dsub+0xa2>
 80027c8:	074b      	lsls	r3, r1, #29
 80027ca:	08ff      	lsrs	r7, r7, #3
 80027cc:	433b      	orrs	r3, r7
 80027ce:	08cc      	lsrs	r4, r1, #3
 80027d0:	e692      	b.n	80024f8 <__aeabi_dsub+0x314>
 80027d2:	1bdc      	subs	r4, r3, r7
 80027d4:	4660      	mov	r0, ip
 80027d6:	42a3      	cmp	r3, r4
 80027d8:	41b6      	sbcs	r6, r6
 80027da:	1a40      	subs	r0, r0, r1
 80027dc:	4276      	negs	r6, r6
 80027de:	1b80      	subs	r0, r0, r6
 80027e0:	4681      	mov	r9, r0
 80027e2:	0200      	lsls	r0, r0, #8
 80027e4:	d560      	bpl.n	80028a8 <__aeabi_dsub+0x6c4>
 80027e6:	1afc      	subs	r4, r7, r3
 80027e8:	42a7      	cmp	r7, r4
 80027ea:	41bf      	sbcs	r7, r7
 80027ec:	4663      	mov	r3, ip
 80027ee:	427f      	negs	r7, r7
 80027f0:	1ac9      	subs	r1, r1, r3
 80027f2:	1bcb      	subs	r3, r1, r7
 80027f4:	4699      	mov	r9, r3
 80027f6:	465d      	mov	r5, fp
 80027f8:	e576      	b.n	80022e8 <__aeabi_dsub+0x104>
 80027fa:	08ff      	lsrs	r7, r7, #3
 80027fc:	074b      	lsls	r3, r1, #29
 80027fe:	433b      	orrs	r3, r7
 8002800:	08cc      	lsrs	r4, r1, #3
 8002802:	e667      	b.n	80024d4 <__aeabi_dsub+0x2f0>
 8002804:	000a      	movs	r2, r1
 8002806:	08db      	lsrs	r3, r3, #3
 8002808:	433a      	orrs	r2, r7
 800280a:	d100      	bne.n	800280e <__aeabi_dsub+0x62a>
 800280c:	e66f      	b.n	80024ee <__aeabi_dsub+0x30a>
 800280e:	4662      	mov	r2, ip
 8002810:	0752      	lsls	r2, r2, #29
 8002812:	4313      	orrs	r3, r2
 8002814:	4662      	mov	r2, ip
 8002816:	08d4      	lsrs	r4, r2, #3
 8002818:	2280      	movs	r2, #128	; 0x80
 800281a:	0312      	lsls	r2, r2, #12
 800281c:	4214      	tst	r4, r2
 800281e:	d007      	beq.n	8002830 <__aeabi_dsub+0x64c>
 8002820:	08c8      	lsrs	r0, r1, #3
 8002822:	4210      	tst	r0, r2
 8002824:	d104      	bne.n	8002830 <__aeabi_dsub+0x64c>
 8002826:	465d      	mov	r5, fp
 8002828:	0004      	movs	r4, r0
 800282a:	08fb      	lsrs	r3, r7, #3
 800282c:	0749      	lsls	r1, r1, #29
 800282e:	430b      	orrs	r3, r1
 8002830:	0f5a      	lsrs	r2, r3, #29
 8002832:	00db      	lsls	r3, r3, #3
 8002834:	08db      	lsrs	r3, r3, #3
 8002836:	0752      	lsls	r2, r2, #29
 8002838:	4313      	orrs	r3, r2
 800283a:	e65d      	b.n	80024f8 <__aeabi_dsub+0x314>
 800283c:	074b      	lsls	r3, r1, #29
 800283e:	08ff      	lsrs	r7, r7, #3
 8002840:	433b      	orrs	r3, r7
 8002842:	08cc      	lsrs	r4, r1, #3
 8002844:	e649      	b.n	80024da <__aeabi_dsub+0x2f6>
 8002846:	19dc      	adds	r4, r3, r7
 8002848:	429c      	cmp	r4, r3
 800284a:	419b      	sbcs	r3, r3
 800284c:	4461      	add	r1, ip
 800284e:	4689      	mov	r9, r1
 8002850:	425b      	negs	r3, r3
 8002852:	4499      	add	r9, r3
 8002854:	464b      	mov	r3, r9
 8002856:	021b      	lsls	r3, r3, #8
 8002858:	d400      	bmi.n	800285c <__aeabi_dsub+0x678>
 800285a:	e631      	b.n	80024c0 <__aeabi_dsub+0x2dc>
 800285c:	464a      	mov	r2, r9
 800285e:	4b17      	ldr	r3, [pc, #92]	; (80028bc <__aeabi_dsub+0x6d8>)
 8002860:	401a      	ands	r2, r3
 8002862:	2301      	movs	r3, #1
 8002864:	4691      	mov	r9, r2
 8002866:	4698      	mov	r8, r3
 8002868:	e62a      	b.n	80024c0 <__aeabi_dsub+0x2dc>
 800286a:	0016      	movs	r6, r2
 800286c:	4664      	mov	r4, ip
 800286e:	3e20      	subs	r6, #32
 8002870:	40f4      	lsrs	r4, r6
 8002872:	46a0      	mov	r8, r4
 8002874:	2a20      	cmp	r2, #32
 8002876:	d005      	beq.n	8002884 <__aeabi_dsub+0x6a0>
 8002878:	2640      	movs	r6, #64	; 0x40
 800287a:	4664      	mov	r4, ip
 800287c:	1ab2      	subs	r2, r6, r2
 800287e:	4094      	lsls	r4, r2
 8002880:	4323      	orrs	r3, r4
 8002882:	469a      	mov	sl, r3
 8002884:	4654      	mov	r4, sl
 8002886:	1e63      	subs	r3, r4, #1
 8002888:	419c      	sbcs	r4, r3
 800288a:	4643      	mov	r3, r8
 800288c:	431c      	orrs	r4, r3
 800288e:	e5db      	b.n	8002448 <__aeabi_dsub+0x264>
 8002890:	0002      	movs	r2, r0
 8002892:	2400      	movs	r4, #0
 8002894:	2300      	movs	r3, #0
 8002896:	e548      	b.n	800232a <__aeabi_dsub+0x146>
 8002898:	19dc      	adds	r4, r3, r7
 800289a:	42bc      	cmp	r4, r7
 800289c:	41bf      	sbcs	r7, r7
 800289e:	4461      	add	r1, ip
 80028a0:	4689      	mov	r9, r1
 80028a2:	427f      	negs	r7, r7
 80028a4:	44b9      	add	r9, r7
 80028a6:	e738      	b.n	800271a <__aeabi_dsub+0x536>
 80028a8:	464b      	mov	r3, r9
 80028aa:	4323      	orrs	r3, r4
 80028ac:	d100      	bne.n	80028b0 <__aeabi_dsub+0x6cc>
 80028ae:	e69f      	b.n	80025f0 <__aeabi_dsub+0x40c>
 80028b0:	e606      	b.n	80024c0 <__aeabi_dsub+0x2dc>
 80028b2:	46c0      	nop			; (mov r8, r8)
 80028b4:	000007fe 	.word	0x000007fe
 80028b8:	000007ff 	.word	0x000007ff
 80028bc:	ff7fffff 	.word	0xff7fffff
 80028c0:	08ff      	lsrs	r7, r7, #3
 80028c2:	074b      	lsls	r3, r1, #29
 80028c4:	433b      	orrs	r3, r7
 80028c6:	08cc      	lsrs	r4, r1, #3
 80028c8:	e616      	b.n	80024f8 <__aeabi_dsub+0x314>
 80028ca:	4662      	mov	r2, ip
 80028cc:	08db      	lsrs	r3, r3, #3
 80028ce:	0752      	lsls	r2, r2, #29
 80028d0:	4313      	orrs	r3, r2
 80028d2:	4662      	mov	r2, ip
 80028d4:	08d4      	lsrs	r4, r2, #3
 80028d6:	2280      	movs	r2, #128	; 0x80
 80028d8:	0312      	lsls	r2, r2, #12
 80028da:	4214      	tst	r4, r2
 80028dc:	d007      	beq.n	80028ee <__aeabi_dsub+0x70a>
 80028de:	08c8      	lsrs	r0, r1, #3
 80028e0:	4210      	tst	r0, r2
 80028e2:	d104      	bne.n	80028ee <__aeabi_dsub+0x70a>
 80028e4:	465d      	mov	r5, fp
 80028e6:	0004      	movs	r4, r0
 80028e8:	08fb      	lsrs	r3, r7, #3
 80028ea:	0749      	lsls	r1, r1, #29
 80028ec:	430b      	orrs	r3, r1
 80028ee:	0f5a      	lsrs	r2, r3, #29
 80028f0:	00db      	lsls	r3, r3, #3
 80028f2:	0752      	lsls	r2, r2, #29
 80028f4:	08db      	lsrs	r3, r3, #3
 80028f6:	4313      	orrs	r3, r2
 80028f8:	e5fe      	b.n	80024f8 <__aeabi_dsub+0x314>
 80028fa:	2300      	movs	r3, #0
 80028fc:	4a01      	ldr	r2, [pc, #4]	; (8002904 <__aeabi_dsub+0x720>)
 80028fe:	001c      	movs	r4, r3
 8002900:	e513      	b.n	800232a <__aeabi_dsub+0x146>
 8002902:	46c0      	nop			; (mov r8, r8)
 8002904:	000007ff 	.word	0x000007ff

08002908 <__aeabi_dcmpun>:
 8002908:	b570      	push	{r4, r5, r6, lr}
 800290a:	0005      	movs	r5, r0
 800290c:	480c      	ldr	r0, [pc, #48]	; (8002940 <__aeabi_dcmpun+0x38>)
 800290e:	031c      	lsls	r4, r3, #12
 8002910:	0016      	movs	r6, r2
 8002912:	005b      	lsls	r3, r3, #1
 8002914:	030a      	lsls	r2, r1, #12
 8002916:	0049      	lsls	r1, r1, #1
 8002918:	0b12      	lsrs	r2, r2, #12
 800291a:	0d49      	lsrs	r1, r1, #21
 800291c:	0b24      	lsrs	r4, r4, #12
 800291e:	0d5b      	lsrs	r3, r3, #21
 8002920:	4281      	cmp	r1, r0
 8002922:	d008      	beq.n	8002936 <__aeabi_dcmpun+0x2e>
 8002924:	4a06      	ldr	r2, [pc, #24]	; (8002940 <__aeabi_dcmpun+0x38>)
 8002926:	2000      	movs	r0, #0
 8002928:	4293      	cmp	r3, r2
 800292a:	d103      	bne.n	8002934 <__aeabi_dcmpun+0x2c>
 800292c:	0020      	movs	r0, r4
 800292e:	4330      	orrs	r0, r6
 8002930:	1e43      	subs	r3, r0, #1
 8002932:	4198      	sbcs	r0, r3
 8002934:	bd70      	pop	{r4, r5, r6, pc}
 8002936:	2001      	movs	r0, #1
 8002938:	432a      	orrs	r2, r5
 800293a:	d1fb      	bne.n	8002934 <__aeabi_dcmpun+0x2c>
 800293c:	e7f2      	b.n	8002924 <__aeabi_dcmpun+0x1c>
 800293e:	46c0      	nop			; (mov r8, r8)
 8002940:	000007ff 	.word	0x000007ff

08002944 <__aeabi_d2iz>:
 8002944:	000a      	movs	r2, r1
 8002946:	b530      	push	{r4, r5, lr}
 8002948:	4c13      	ldr	r4, [pc, #76]	; (8002998 <__aeabi_d2iz+0x54>)
 800294a:	0053      	lsls	r3, r2, #1
 800294c:	0309      	lsls	r1, r1, #12
 800294e:	0005      	movs	r5, r0
 8002950:	0b09      	lsrs	r1, r1, #12
 8002952:	2000      	movs	r0, #0
 8002954:	0d5b      	lsrs	r3, r3, #21
 8002956:	0fd2      	lsrs	r2, r2, #31
 8002958:	42a3      	cmp	r3, r4
 800295a:	dd04      	ble.n	8002966 <__aeabi_d2iz+0x22>
 800295c:	480f      	ldr	r0, [pc, #60]	; (800299c <__aeabi_d2iz+0x58>)
 800295e:	4283      	cmp	r3, r0
 8002960:	dd02      	ble.n	8002968 <__aeabi_d2iz+0x24>
 8002962:	4b0f      	ldr	r3, [pc, #60]	; (80029a0 <__aeabi_d2iz+0x5c>)
 8002964:	18d0      	adds	r0, r2, r3
 8002966:	bd30      	pop	{r4, r5, pc}
 8002968:	2080      	movs	r0, #128	; 0x80
 800296a:	0340      	lsls	r0, r0, #13
 800296c:	4301      	orrs	r1, r0
 800296e:	480d      	ldr	r0, [pc, #52]	; (80029a4 <__aeabi_d2iz+0x60>)
 8002970:	1ac0      	subs	r0, r0, r3
 8002972:	281f      	cmp	r0, #31
 8002974:	dd08      	ble.n	8002988 <__aeabi_d2iz+0x44>
 8002976:	480c      	ldr	r0, [pc, #48]	; (80029a8 <__aeabi_d2iz+0x64>)
 8002978:	1ac3      	subs	r3, r0, r3
 800297a:	40d9      	lsrs	r1, r3
 800297c:	000b      	movs	r3, r1
 800297e:	4258      	negs	r0, r3
 8002980:	2a00      	cmp	r2, #0
 8002982:	d1f0      	bne.n	8002966 <__aeabi_d2iz+0x22>
 8002984:	0018      	movs	r0, r3
 8002986:	e7ee      	b.n	8002966 <__aeabi_d2iz+0x22>
 8002988:	4c08      	ldr	r4, [pc, #32]	; (80029ac <__aeabi_d2iz+0x68>)
 800298a:	40c5      	lsrs	r5, r0
 800298c:	46a4      	mov	ip, r4
 800298e:	4463      	add	r3, ip
 8002990:	4099      	lsls	r1, r3
 8002992:	000b      	movs	r3, r1
 8002994:	432b      	orrs	r3, r5
 8002996:	e7f2      	b.n	800297e <__aeabi_d2iz+0x3a>
 8002998:	000003fe 	.word	0x000003fe
 800299c:	0000041d 	.word	0x0000041d
 80029a0:	7fffffff 	.word	0x7fffffff
 80029a4:	00000433 	.word	0x00000433
 80029a8:	00000413 	.word	0x00000413
 80029ac:	fffffbed 	.word	0xfffffbed

080029b0 <__aeabi_i2d>:
 80029b0:	b570      	push	{r4, r5, r6, lr}
 80029b2:	2800      	cmp	r0, #0
 80029b4:	d016      	beq.n	80029e4 <__aeabi_i2d+0x34>
 80029b6:	17c3      	asrs	r3, r0, #31
 80029b8:	18c5      	adds	r5, r0, r3
 80029ba:	405d      	eors	r5, r3
 80029bc:	0fc4      	lsrs	r4, r0, #31
 80029be:	0028      	movs	r0, r5
 80029c0:	f000 f91c 	bl	8002bfc <__clzsi2>
 80029c4:	4a11      	ldr	r2, [pc, #68]	; (8002a0c <__aeabi_i2d+0x5c>)
 80029c6:	1a12      	subs	r2, r2, r0
 80029c8:	280a      	cmp	r0, #10
 80029ca:	dc16      	bgt.n	80029fa <__aeabi_i2d+0x4a>
 80029cc:	0003      	movs	r3, r0
 80029ce:	002e      	movs	r6, r5
 80029d0:	3315      	adds	r3, #21
 80029d2:	409e      	lsls	r6, r3
 80029d4:	230b      	movs	r3, #11
 80029d6:	1a18      	subs	r0, r3, r0
 80029d8:	40c5      	lsrs	r5, r0
 80029da:	0552      	lsls	r2, r2, #21
 80029dc:	032d      	lsls	r5, r5, #12
 80029de:	0b2d      	lsrs	r5, r5, #12
 80029e0:	0d53      	lsrs	r3, r2, #21
 80029e2:	e003      	b.n	80029ec <__aeabi_i2d+0x3c>
 80029e4:	2400      	movs	r4, #0
 80029e6:	2300      	movs	r3, #0
 80029e8:	2500      	movs	r5, #0
 80029ea:	2600      	movs	r6, #0
 80029ec:	051b      	lsls	r3, r3, #20
 80029ee:	432b      	orrs	r3, r5
 80029f0:	07e4      	lsls	r4, r4, #31
 80029f2:	4323      	orrs	r3, r4
 80029f4:	0030      	movs	r0, r6
 80029f6:	0019      	movs	r1, r3
 80029f8:	bd70      	pop	{r4, r5, r6, pc}
 80029fa:	380b      	subs	r0, #11
 80029fc:	4085      	lsls	r5, r0
 80029fe:	0552      	lsls	r2, r2, #21
 8002a00:	032d      	lsls	r5, r5, #12
 8002a02:	2600      	movs	r6, #0
 8002a04:	0b2d      	lsrs	r5, r5, #12
 8002a06:	0d53      	lsrs	r3, r2, #21
 8002a08:	e7f0      	b.n	80029ec <__aeabi_i2d+0x3c>
 8002a0a:	46c0      	nop			; (mov r8, r8)
 8002a0c:	0000041e 	.word	0x0000041e

08002a10 <__aeabi_ui2d>:
 8002a10:	b510      	push	{r4, lr}
 8002a12:	1e04      	subs	r4, r0, #0
 8002a14:	d010      	beq.n	8002a38 <__aeabi_ui2d+0x28>
 8002a16:	f000 f8f1 	bl	8002bfc <__clzsi2>
 8002a1a:	4b0f      	ldr	r3, [pc, #60]	; (8002a58 <__aeabi_ui2d+0x48>)
 8002a1c:	1a1b      	subs	r3, r3, r0
 8002a1e:	280a      	cmp	r0, #10
 8002a20:	dc11      	bgt.n	8002a46 <__aeabi_ui2d+0x36>
 8002a22:	220b      	movs	r2, #11
 8002a24:	0021      	movs	r1, r4
 8002a26:	1a12      	subs	r2, r2, r0
 8002a28:	40d1      	lsrs	r1, r2
 8002a2a:	3015      	adds	r0, #21
 8002a2c:	030a      	lsls	r2, r1, #12
 8002a2e:	055b      	lsls	r3, r3, #21
 8002a30:	4084      	lsls	r4, r0
 8002a32:	0b12      	lsrs	r2, r2, #12
 8002a34:	0d5b      	lsrs	r3, r3, #21
 8002a36:	e001      	b.n	8002a3c <__aeabi_ui2d+0x2c>
 8002a38:	2300      	movs	r3, #0
 8002a3a:	2200      	movs	r2, #0
 8002a3c:	051b      	lsls	r3, r3, #20
 8002a3e:	4313      	orrs	r3, r2
 8002a40:	0020      	movs	r0, r4
 8002a42:	0019      	movs	r1, r3
 8002a44:	bd10      	pop	{r4, pc}
 8002a46:	0022      	movs	r2, r4
 8002a48:	380b      	subs	r0, #11
 8002a4a:	4082      	lsls	r2, r0
 8002a4c:	055b      	lsls	r3, r3, #21
 8002a4e:	0312      	lsls	r2, r2, #12
 8002a50:	2400      	movs	r4, #0
 8002a52:	0b12      	lsrs	r2, r2, #12
 8002a54:	0d5b      	lsrs	r3, r3, #21
 8002a56:	e7f1      	b.n	8002a3c <__aeabi_ui2d+0x2c>
 8002a58:	0000041e 	.word	0x0000041e

08002a5c <__aeabi_f2d>:
 8002a5c:	b570      	push	{r4, r5, r6, lr}
 8002a5e:	0043      	lsls	r3, r0, #1
 8002a60:	0246      	lsls	r6, r0, #9
 8002a62:	0fc4      	lsrs	r4, r0, #31
 8002a64:	20fe      	movs	r0, #254	; 0xfe
 8002a66:	0e1b      	lsrs	r3, r3, #24
 8002a68:	1c59      	adds	r1, r3, #1
 8002a6a:	0a75      	lsrs	r5, r6, #9
 8002a6c:	4208      	tst	r0, r1
 8002a6e:	d00c      	beq.n	8002a8a <__aeabi_f2d+0x2e>
 8002a70:	22e0      	movs	r2, #224	; 0xe0
 8002a72:	0092      	lsls	r2, r2, #2
 8002a74:	4694      	mov	ip, r2
 8002a76:	076d      	lsls	r5, r5, #29
 8002a78:	0b36      	lsrs	r6, r6, #12
 8002a7a:	4463      	add	r3, ip
 8002a7c:	051b      	lsls	r3, r3, #20
 8002a7e:	4333      	orrs	r3, r6
 8002a80:	07e4      	lsls	r4, r4, #31
 8002a82:	4323      	orrs	r3, r4
 8002a84:	0028      	movs	r0, r5
 8002a86:	0019      	movs	r1, r3
 8002a88:	bd70      	pop	{r4, r5, r6, pc}
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d114      	bne.n	8002ab8 <__aeabi_f2d+0x5c>
 8002a8e:	2d00      	cmp	r5, #0
 8002a90:	d01b      	beq.n	8002aca <__aeabi_f2d+0x6e>
 8002a92:	0028      	movs	r0, r5
 8002a94:	f000 f8b2 	bl	8002bfc <__clzsi2>
 8002a98:	280a      	cmp	r0, #10
 8002a9a:	dc1c      	bgt.n	8002ad6 <__aeabi_f2d+0x7a>
 8002a9c:	230b      	movs	r3, #11
 8002a9e:	002e      	movs	r6, r5
 8002aa0:	1a1b      	subs	r3, r3, r0
 8002aa2:	40de      	lsrs	r6, r3
 8002aa4:	0003      	movs	r3, r0
 8002aa6:	3315      	adds	r3, #21
 8002aa8:	409d      	lsls	r5, r3
 8002aaa:	4a0e      	ldr	r2, [pc, #56]	; (8002ae4 <__aeabi_f2d+0x88>)
 8002aac:	0336      	lsls	r6, r6, #12
 8002aae:	1a12      	subs	r2, r2, r0
 8002ab0:	0552      	lsls	r2, r2, #21
 8002ab2:	0b36      	lsrs	r6, r6, #12
 8002ab4:	0d53      	lsrs	r3, r2, #21
 8002ab6:	e7e1      	b.n	8002a7c <__aeabi_f2d+0x20>
 8002ab8:	2d00      	cmp	r5, #0
 8002aba:	d009      	beq.n	8002ad0 <__aeabi_f2d+0x74>
 8002abc:	2280      	movs	r2, #128	; 0x80
 8002abe:	0b36      	lsrs	r6, r6, #12
 8002ac0:	0312      	lsls	r2, r2, #12
 8002ac2:	4b09      	ldr	r3, [pc, #36]	; (8002ae8 <__aeabi_f2d+0x8c>)
 8002ac4:	076d      	lsls	r5, r5, #29
 8002ac6:	4316      	orrs	r6, r2
 8002ac8:	e7d8      	b.n	8002a7c <__aeabi_f2d+0x20>
 8002aca:	2300      	movs	r3, #0
 8002acc:	2600      	movs	r6, #0
 8002ace:	e7d5      	b.n	8002a7c <__aeabi_f2d+0x20>
 8002ad0:	2600      	movs	r6, #0
 8002ad2:	4b05      	ldr	r3, [pc, #20]	; (8002ae8 <__aeabi_f2d+0x8c>)
 8002ad4:	e7d2      	b.n	8002a7c <__aeabi_f2d+0x20>
 8002ad6:	0003      	movs	r3, r0
 8002ad8:	3b0b      	subs	r3, #11
 8002ada:	409d      	lsls	r5, r3
 8002adc:	002e      	movs	r6, r5
 8002ade:	2500      	movs	r5, #0
 8002ae0:	e7e3      	b.n	8002aaa <__aeabi_f2d+0x4e>
 8002ae2:	46c0      	nop			; (mov r8, r8)
 8002ae4:	00000389 	.word	0x00000389
 8002ae8:	000007ff 	.word	0x000007ff

08002aec <__aeabi_d2f>:
 8002aec:	0002      	movs	r2, r0
 8002aee:	004b      	lsls	r3, r1, #1
 8002af0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002af2:	0d5b      	lsrs	r3, r3, #21
 8002af4:	030c      	lsls	r4, r1, #12
 8002af6:	4e3d      	ldr	r6, [pc, #244]	; (8002bec <__aeabi_d2f+0x100>)
 8002af8:	0a64      	lsrs	r4, r4, #9
 8002afa:	0f40      	lsrs	r0, r0, #29
 8002afc:	1c5f      	adds	r7, r3, #1
 8002afe:	0fc9      	lsrs	r1, r1, #31
 8002b00:	4304      	orrs	r4, r0
 8002b02:	00d5      	lsls	r5, r2, #3
 8002b04:	4237      	tst	r7, r6
 8002b06:	d00a      	beq.n	8002b1e <__aeabi_d2f+0x32>
 8002b08:	4839      	ldr	r0, [pc, #228]	; (8002bf0 <__aeabi_d2f+0x104>)
 8002b0a:	181e      	adds	r6, r3, r0
 8002b0c:	2efe      	cmp	r6, #254	; 0xfe
 8002b0e:	dd16      	ble.n	8002b3e <__aeabi_d2f+0x52>
 8002b10:	20ff      	movs	r0, #255	; 0xff
 8002b12:	2400      	movs	r4, #0
 8002b14:	05c0      	lsls	r0, r0, #23
 8002b16:	4320      	orrs	r0, r4
 8002b18:	07c9      	lsls	r1, r1, #31
 8002b1a:	4308      	orrs	r0, r1
 8002b1c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d106      	bne.n	8002b30 <__aeabi_d2f+0x44>
 8002b22:	432c      	orrs	r4, r5
 8002b24:	d026      	beq.n	8002b74 <__aeabi_d2f+0x88>
 8002b26:	2205      	movs	r2, #5
 8002b28:	0192      	lsls	r2, r2, #6
 8002b2a:	0a54      	lsrs	r4, r2, #9
 8002b2c:	b2d8      	uxtb	r0, r3
 8002b2e:	e7f1      	b.n	8002b14 <__aeabi_d2f+0x28>
 8002b30:	4325      	orrs	r5, r4
 8002b32:	d0ed      	beq.n	8002b10 <__aeabi_d2f+0x24>
 8002b34:	2080      	movs	r0, #128	; 0x80
 8002b36:	03c0      	lsls	r0, r0, #15
 8002b38:	4304      	orrs	r4, r0
 8002b3a:	20ff      	movs	r0, #255	; 0xff
 8002b3c:	e7ea      	b.n	8002b14 <__aeabi_d2f+0x28>
 8002b3e:	2e00      	cmp	r6, #0
 8002b40:	dd1b      	ble.n	8002b7a <__aeabi_d2f+0x8e>
 8002b42:	0192      	lsls	r2, r2, #6
 8002b44:	1e53      	subs	r3, r2, #1
 8002b46:	419a      	sbcs	r2, r3
 8002b48:	00e4      	lsls	r4, r4, #3
 8002b4a:	0f6d      	lsrs	r5, r5, #29
 8002b4c:	4322      	orrs	r2, r4
 8002b4e:	432a      	orrs	r2, r5
 8002b50:	0753      	lsls	r3, r2, #29
 8002b52:	d048      	beq.n	8002be6 <__aeabi_d2f+0xfa>
 8002b54:	230f      	movs	r3, #15
 8002b56:	4013      	ands	r3, r2
 8002b58:	2b04      	cmp	r3, #4
 8002b5a:	d000      	beq.n	8002b5e <__aeabi_d2f+0x72>
 8002b5c:	3204      	adds	r2, #4
 8002b5e:	2380      	movs	r3, #128	; 0x80
 8002b60:	04db      	lsls	r3, r3, #19
 8002b62:	4013      	ands	r3, r2
 8002b64:	d03f      	beq.n	8002be6 <__aeabi_d2f+0xfa>
 8002b66:	1c70      	adds	r0, r6, #1
 8002b68:	2efe      	cmp	r6, #254	; 0xfe
 8002b6a:	d0d1      	beq.n	8002b10 <__aeabi_d2f+0x24>
 8002b6c:	0192      	lsls	r2, r2, #6
 8002b6e:	0a54      	lsrs	r4, r2, #9
 8002b70:	b2c0      	uxtb	r0, r0
 8002b72:	e7cf      	b.n	8002b14 <__aeabi_d2f+0x28>
 8002b74:	2000      	movs	r0, #0
 8002b76:	2400      	movs	r4, #0
 8002b78:	e7cc      	b.n	8002b14 <__aeabi_d2f+0x28>
 8002b7a:	0032      	movs	r2, r6
 8002b7c:	3217      	adds	r2, #23
 8002b7e:	db22      	blt.n	8002bc6 <__aeabi_d2f+0xda>
 8002b80:	2080      	movs	r0, #128	; 0x80
 8002b82:	0400      	lsls	r0, r0, #16
 8002b84:	4320      	orrs	r0, r4
 8002b86:	241e      	movs	r4, #30
 8002b88:	1ba4      	subs	r4, r4, r6
 8002b8a:	2c1f      	cmp	r4, #31
 8002b8c:	dd1d      	ble.n	8002bca <__aeabi_d2f+0xde>
 8002b8e:	2202      	movs	r2, #2
 8002b90:	4252      	negs	r2, r2
 8002b92:	1b96      	subs	r6, r2, r6
 8002b94:	0002      	movs	r2, r0
 8002b96:	40f2      	lsrs	r2, r6
 8002b98:	0016      	movs	r6, r2
 8002b9a:	2c20      	cmp	r4, #32
 8002b9c:	d004      	beq.n	8002ba8 <__aeabi_d2f+0xbc>
 8002b9e:	4a15      	ldr	r2, [pc, #84]	; (8002bf4 <__aeabi_d2f+0x108>)
 8002ba0:	4694      	mov	ip, r2
 8002ba2:	4463      	add	r3, ip
 8002ba4:	4098      	lsls	r0, r3
 8002ba6:	4305      	orrs	r5, r0
 8002ba8:	002a      	movs	r2, r5
 8002baa:	1e53      	subs	r3, r2, #1
 8002bac:	419a      	sbcs	r2, r3
 8002bae:	4332      	orrs	r2, r6
 8002bb0:	2600      	movs	r6, #0
 8002bb2:	0753      	lsls	r3, r2, #29
 8002bb4:	d1ce      	bne.n	8002b54 <__aeabi_d2f+0x68>
 8002bb6:	2480      	movs	r4, #128	; 0x80
 8002bb8:	0013      	movs	r3, r2
 8002bba:	04e4      	lsls	r4, r4, #19
 8002bbc:	2001      	movs	r0, #1
 8002bbe:	4023      	ands	r3, r4
 8002bc0:	4222      	tst	r2, r4
 8002bc2:	d1d3      	bne.n	8002b6c <__aeabi_d2f+0x80>
 8002bc4:	e7b0      	b.n	8002b28 <__aeabi_d2f+0x3c>
 8002bc6:	2300      	movs	r3, #0
 8002bc8:	e7ad      	b.n	8002b26 <__aeabi_d2f+0x3a>
 8002bca:	4a0b      	ldr	r2, [pc, #44]	; (8002bf8 <__aeabi_d2f+0x10c>)
 8002bcc:	4694      	mov	ip, r2
 8002bce:	002a      	movs	r2, r5
 8002bd0:	40e2      	lsrs	r2, r4
 8002bd2:	0014      	movs	r4, r2
 8002bd4:	002a      	movs	r2, r5
 8002bd6:	4463      	add	r3, ip
 8002bd8:	409a      	lsls	r2, r3
 8002bda:	4098      	lsls	r0, r3
 8002bdc:	1e55      	subs	r5, r2, #1
 8002bde:	41aa      	sbcs	r2, r5
 8002be0:	4302      	orrs	r2, r0
 8002be2:	4322      	orrs	r2, r4
 8002be4:	e7e4      	b.n	8002bb0 <__aeabi_d2f+0xc4>
 8002be6:	0033      	movs	r3, r6
 8002be8:	e79e      	b.n	8002b28 <__aeabi_d2f+0x3c>
 8002bea:	46c0      	nop			; (mov r8, r8)
 8002bec:	000007fe 	.word	0x000007fe
 8002bf0:	fffffc80 	.word	0xfffffc80
 8002bf4:	fffffca2 	.word	0xfffffca2
 8002bf8:	fffffc82 	.word	0xfffffc82

08002bfc <__clzsi2>:
 8002bfc:	211c      	movs	r1, #28
 8002bfe:	2301      	movs	r3, #1
 8002c00:	041b      	lsls	r3, r3, #16
 8002c02:	4298      	cmp	r0, r3
 8002c04:	d301      	bcc.n	8002c0a <__clzsi2+0xe>
 8002c06:	0c00      	lsrs	r0, r0, #16
 8002c08:	3910      	subs	r1, #16
 8002c0a:	0a1b      	lsrs	r3, r3, #8
 8002c0c:	4298      	cmp	r0, r3
 8002c0e:	d301      	bcc.n	8002c14 <__clzsi2+0x18>
 8002c10:	0a00      	lsrs	r0, r0, #8
 8002c12:	3908      	subs	r1, #8
 8002c14:	091b      	lsrs	r3, r3, #4
 8002c16:	4298      	cmp	r0, r3
 8002c18:	d301      	bcc.n	8002c1e <__clzsi2+0x22>
 8002c1a:	0900      	lsrs	r0, r0, #4
 8002c1c:	3904      	subs	r1, #4
 8002c1e:	a202      	add	r2, pc, #8	; (adr r2, 8002c28 <__clzsi2+0x2c>)
 8002c20:	5c10      	ldrb	r0, [r2, r0]
 8002c22:	1840      	adds	r0, r0, r1
 8002c24:	4770      	bx	lr
 8002c26:	46c0      	nop			; (mov r8, r8)
 8002c28:	02020304 	.word	0x02020304
 8002c2c:	01010101 	.word	0x01010101
	...

08002c38 <__clzdi2>:
 8002c38:	b510      	push	{r4, lr}
 8002c3a:	2900      	cmp	r1, #0
 8002c3c:	d103      	bne.n	8002c46 <__clzdi2+0xe>
 8002c3e:	f7ff ffdd 	bl	8002bfc <__clzsi2>
 8002c42:	3020      	adds	r0, #32
 8002c44:	e002      	b.n	8002c4c <__clzdi2+0x14>
 8002c46:	0008      	movs	r0, r1
 8002c48:	f7ff ffd8 	bl	8002bfc <__clzsi2>
 8002c4c:	bd10      	pop	{r4, pc}
 8002c4e:	46c0      	nop			; (mov r8, r8)

08002c50 <Read_Button_ID>:
uint32_t ADC_time2 = 0;
uint32_t interrupt_counter = 0;
#endif

uint8_t Read_Button_ID(void)
{
 8002c50:	b580      	push	{r7, lr}
 8002c52:	b082      	sub	sp, #8
 8002c54:	af00      	add	r7, sp, #0
	uint8_t Addr = 0;
 8002c56:	1dfb      	adds	r3, r7, #7
 8002c58:	2200      	movs	r2, #0
 8002c5a:	701a      	strb	r2, [r3, #0]
	Addr |= (HAL_GPIO_ReadPin(GPIOB, Dev_ID0_Pin) << 0);
 8002c5c:	2380      	movs	r3, #128	; 0x80
 8002c5e:	005b      	lsls	r3, r3, #1
 8002c60:	4a42      	ldr	r2, [pc, #264]	; (8002d6c <Read_Button_ID+0x11c>)
 8002c62:	0019      	movs	r1, r3
 8002c64:	0010      	movs	r0, r2
 8002c66:	f001 fe5b 	bl	8004920 <HAL_GPIO_ReadPin>
 8002c6a:	0003      	movs	r3, r0
 8002c6c:	b25a      	sxtb	r2, r3
 8002c6e:	1dfb      	adds	r3, r7, #7
 8002c70:	781b      	ldrb	r3, [r3, #0]
 8002c72:	b25b      	sxtb	r3, r3
 8002c74:	4313      	orrs	r3, r2
 8002c76:	b25a      	sxtb	r2, r3
 8002c78:	1dfb      	adds	r3, r7, #7
 8002c7a:	701a      	strb	r2, [r3, #0]
	Addr |= (HAL_GPIO_ReadPin(GPIOB, Dev_ID1_Pin) << 1);
 8002c7c:	2380      	movs	r3, #128	; 0x80
 8002c7e:	009b      	lsls	r3, r3, #2
 8002c80:	4a3a      	ldr	r2, [pc, #232]	; (8002d6c <Read_Button_ID+0x11c>)
 8002c82:	0019      	movs	r1, r3
 8002c84:	0010      	movs	r0, r2
 8002c86:	f001 fe4b 	bl	8004920 <HAL_GPIO_ReadPin>
 8002c8a:	0003      	movs	r3, r0
 8002c8c:	005b      	lsls	r3, r3, #1
 8002c8e:	b25a      	sxtb	r2, r3
 8002c90:	1dfb      	adds	r3, r7, #7
 8002c92:	781b      	ldrb	r3, [r3, #0]
 8002c94:	b25b      	sxtb	r3, r3
 8002c96:	4313      	orrs	r3, r2
 8002c98:	b25a      	sxtb	r2, r3
 8002c9a:	1dfb      	adds	r3, r7, #7
 8002c9c:	701a      	strb	r2, [r3, #0]
	Addr |= (HAL_GPIO_ReadPin(GPIOC, Dev_ID2_Pin) << 2);
 8002c9e:	2380      	movs	r3, #128	; 0x80
 8002ca0:	019b      	lsls	r3, r3, #6
 8002ca2:	4a33      	ldr	r2, [pc, #204]	; (8002d70 <Read_Button_ID+0x120>)
 8002ca4:	0019      	movs	r1, r3
 8002ca6:	0010      	movs	r0, r2
 8002ca8:	f001 fe3a 	bl	8004920 <HAL_GPIO_ReadPin>
 8002cac:	0003      	movs	r3, r0
 8002cae:	009b      	lsls	r3, r3, #2
 8002cb0:	b25a      	sxtb	r2, r3
 8002cb2:	1dfb      	adds	r3, r7, #7
 8002cb4:	781b      	ldrb	r3, [r3, #0]
 8002cb6:	b25b      	sxtb	r3, r3
 8002cb8:	4313      	orrs	r3, r2
 8002cba:	b25a      	sxtb	r2, r3
 8002cbc:	1dfb      	adds	r3, r7, #7
 8002cbe:	701a      	strb	r2, [r3, #0]
	Addr |= (HAL_GPIO_ReadPin(GPIOC, Dev_ID3_Pin) << 3);
 8002cc0:	2380      	movs	r3, #128	; 0x80
 8002cc2:	01db      	lsls	r3, r3, #7
 8002cc4:	4a2a      	ldr	r2, [pc, #168]	; (8002d70 <Read_Button_ID+0x120>)
 8002cc6:	0019      	movs	r1, r3
 8002cc8:	0010      	movs	r0, r2
 8002cca:	f001 fe29 	bl	8004920 <HAL_GPIO_ReadPin>
 8002cce:	0003      	movs	r3, r0
 8002cd0:	00db      	lsls	r3, r3, #3
 8002cd2:	b25a      	sxtb	r2, r3
 8002cd4:	1dfb      	adds	r3, r7, #7
 8002cd6:	781b      	ldrb	r3, [r3, #0]
 8002cd8:	b25b      	sxtb	r3, r3
 8002cda:	4313      	orrs	r3, r2
 8002cdc:	b25a      	sxtb	r2, r3
 8002cde:	1dfb      	adds	r3, r7, #7
 8002ce0:	701a      	strb	r2, [r3, #0]
	Addr |= (HAL_GPIO_ReadPin(GPIOC, Dev_ID4_Pin) << 4);
 8002ce2:	2380      	movs	r3, #128	; 0x80
 8002ce4:	021b      	lsls	r3, r3, #8
 8002ce6:	4a22      	ldr	r2, [pc, #136]	; (8002d70 <Read_Button_ID+0x120>)
 8002ce8:	0019      	movs	r1, r3
 8002cea:	0010      	movs	r0, r2
 8002cec:	f001 fe18 	bl	8004920 <HAL_GPIO_ReadPin>
 8002cf0:	0003      	movs	r3, r0
 8002cf2:	011b      	lsls	r3, r3, #4
 8002cf4:	b25a      	sxtb	r2, r3
 8002cf6:	1dfb      	adds	r3, r7, #7
 8002cf8:	781b      	ldrb	r3, [r3, #0]
 8002cfa:	b25b      	sxtb	r3, r3
 8002cfc:	4313      	orrs	r3, r2
 8002cfe:	b25a      	sxtb	r2, r3
 8002d00:	1dfb      	adds	r3, r7, #7
 8002d02:	701a      	strb	r2, [r3, #0]
	Addr |= (HAL_GPIO_ReadPin(GPIOH, Dev_ID5_Pin) << 5);
 8002d04:	4b1b      	ldr	r3, [pc, #108]	; (8002d74 <Read_Button_ID+0x124>)
 8002d06:	2101      	movs	r1, #1
 8002d08:	0018      	movs	r0, r3
 8002d0a:	f001 fe09 	bl	8004920 <HAL_GPIO_ReadPin>
 8002d0e:	0003      	movs	r3, r0
 8002d10:	015b      	lsls	r3, r3, #5
 8002d12:	b25a      	sxtb	r2, r3
 8002d14:	1dfb      	adds	r3, r7, #7
 8002d16:	781b      	ldrb	r3, [r3, #0]
 8002d18:	b25b      	sxtb	r3, r3
 8002d1a:	4313      	orrs	r3, r2
 8002d1c:	b25a      	sxtb	r2, r3
 8002d1e:	1dfb      	adds	r3, r7, #7
 8002d20:	701a      	strb	r2, [r3, #0]
	Addr |= (HAL_GPIO_ReadPin(GPIOH, Dev_ID6_Pin) << 6);
 8002d22:	4b14      	ldr	r3, [pc, #80]	; (8002d74 <Read_Button_ID+0x124>)
 8002d24:	2102      	movs	r1, #2
 8002d26:	0018      	movs	r0, r3
 8002d28:	f001 fdfa 	bl	8004920 <HAL_GPIO_ReadPin>
 8002d2c:	0003      	movs	r3, r0
 8002d2e:	019b      	lsls	r3, r3, #6
 8002d30:	b25a      	sxtb	r2, r3
 8002d32:	1dfb      	adds	r3, r7, #7
 8002d34:	781b      	ldrb	r3, [r3, #0]
 8002d36:	b25b      	sxtb	r3, r3
 8002d38:	4313      	orrs	r3, r2
 8002d3a:	b25a      	sxtb	r2, r3
 8002d3c:	1dfb      	adds	r3, r7, #7
 8002d3e:	701a      	strb	r2, [r3, #0]
	Addr |= (HAL_GPIO_ReadPin(Dev_ID7_GPIO_Port, Dev_ID7_Pin) << 7);
 8002d40:	23a0      	movs	r3, #160	; 0xa0
 8002d42:	05db      	lsls	r3, r3, #23
 8002d44:	2101      	movs	r1, #1
 8002d46:	0018      	movs	r0, r3
 8002d48:	f001 fdea 	bl	8004920 <HAL_GPIO_ReadPin>
 8002d4c:	0003      	movs	r3, r0
 8002d4e:	01db      	lsls	r3, r3, #7
 8002d50:	b25a      	sxtb	r2, r3
 8002d52:	1dfb      	adds	r3, r7, #7
 8002d54:	781b      	ldrb	r3, [r3, #0]
 8002d56:	b25b      	sxtb	r3, r3
 8002d58:	4313      	orrs	r3, r2
 8002d5a:	b25a      	sxtb	r2, r3
 8002d5c:	1dfb      	adds	r3, r7, #7
 8002d5e:	701a      	strb	r2, [r3, #0]

	return Addr;
 8002d60:	1dfb      	adds	r3, r7, #7
 8002d62:	781b      	ldrb	r3, [r3, #0]
}
 8002d64:	0018      	movs	r0, r3
 8002d66:	46bd      	mov	sp, r7
 8002d68:	b002      	add	sp, #8
 8002d6a:	bd80      	pop	{r7, pc}
 8002d6c:	50000400 	.word	0x50000400
 8002d70:	50000800 	.word	0x50000800
 8002d74:	50001c00 	.word	0x50001c00

08002d78 <RF_Channel_Lookup>:
// Dev_ID = 13 to 18  ---> Channel 102
// Dev_ID = 19 to 24  ---> Channel 103
// Dev_ID = 25 to 30  ---> Channel 104
// Dev_ID = 31 to 36  ---> Channel 105
uint8_t RF_Channel_Lookup(uint8_t ID)
{
 8002d78:	b580      	push	{r7, lr}
 8002d7a:	b084      	sub	sp, #16
 8002d7c:	af00      	add	r7, sp, #0
 8002d7e:	0002      	movs	r2, r0
 8002d80:	1dfb      	adds	r3, r7, #7
 8002d82:	701a      	strb	r2, [r3, #0]
	uint8_t RF_CH = 100 + ((ID-1) / 6);
 8002d84:	1dfb      	adds	r3, r7, #7
 8002d86:	781b      	ldrb	r3, [r3, #0]
 8002d88:	3b01      	subs	r3, #1
 8002d8a:	2106      	movs	r1, #6
 8002d8c:	0018      	movs	r0, r3
 8002d8e:	f7fd fa61 	bl	8000254 <__divsi3>
 8002d92:	0003      	movs	r3, r0
 8002d94:	b2da      	uxtb	r2, r3
 8002d96:	210f      	movs	r1, #15
 8002d98:	187b      	adds	r3, r7, r1
 8002d9a:	3264      	adds	r2, #100	; 0x64
 8002d9c:	701a      	strb	r2, [r3, #0]
	return RF_CH;
 8002d9e:	187b      	adds	r3, r7, r1
 8002da0:	781b      	ldrb	r3, [r3, #0]
}
 8002da2:	0018      	movs	r0, r3
 8002da4:	46bd      	mov	sp, r7
 8002da6:	b004      	add	sp, #16
 8002da8:	bd80      	pop	{r7, pc}
	...

08002dac <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002dac:	b580      	push	{r7, lr}
 8002dae:	b084      	sub	sp, #16
 8002db0:	af00      	add	r7, sp, #0
 8002db2:	0002      	movs	r2, r0
 8002db4:	1dbb      	adds	r3, r7, #6
 8002db6:	801a      	strh	r2, [r3, #0]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */

  HAL_NVIC_DisableIRQ(EXTI0_1_IRQn);
 8002db8:	2005      	movs	r0, #5
 8002dba:	f001 fc0e 	bl	80045da <HAL_NVIC_DisableIRQ>
  HAL_NVIC_DisableIRQ(EXTI2_3_IRQn);
 8002dbe:	2006      	movs	r0, #6
 8002dc0:	f001 fc0b 	bl	80045da <HAL_NVIC_DisableIRQ>
  HAL_NVIC_DisableIRQ(EXTI4_15_IRQn);
 8002dc4:	2007      	movs	r0, #7
 8002dc6:	f001 fc08 	bl	80045da <HAL_NVIC_DisableIRQ>

  /*** Wake up from stop mode in External Interrupt ***/
  SystemClock_Config();
 8002dca:	f000 fa1f 	bl	800320c <SystemClock_Config>
  HAL_ResumeTick();
 8002dce:	f000 ff69 	bl	8003ca4 <HAL_ResumeTick>
  HAL_UART_Transmit(&hlpuart1, (uint8_t *)"WAKEUP from EXTI\n\n",18, HAL_MAX_DELAY);
#endif
#ifdef Timing_Test
  interrupt_time1 = HAL_GetTick();
#endif
  for (volatile uint32_t i = 0; i < 100000; i++);
 8002dd2:	2300      	movs	r3, #0
 8002dd4:	60fb      	str	r3, [r7, #12]
 8002dd6:	e002      	b.n	8002dde <HAL_GPIO_EXTI_Callback+0x32>
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	3301      	adds	r3, #1
 8002ddc:	60fb      	str	r3, [r7, #12]
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	4a23      	ldr	r2, [pc, #140]	; (8002e70 <HAL_GPIO_EXTI_Callback+0xc4>)
 8002de2:	4293      	cmp	r3, r2
 8002de4:	d9f8      	bls.n	8002dd8 <HAL_GPIO_EXTI_Callback+0x2c>

  Press_Counter++;
 8002de6:	4b23      	ldr	r3, [pc, #140]	; (8002e74 <HAL_GPIO_EXTI_Callback+0xc8>)
 8002de8:	881b      	ldrh	r3, [r3, #0]
 8002dea:	3301      	adds	r3, #1
 8002dec:	b29a      	uxth	r2, r3
 8002dee:	4b21      	ldr	r3, [pc, #132]	; (8002e74 <HAL_GPIO_EXTI_Callback+0xc8>)
 8002df0:	801a      	strh	r2, [r3, #0]
  if(Press_Counter>65534) Press_Counter=0;
 8002df2:	4b20      	ldr	r3, [pc, #128]	; (8002e74 <HAL_GPIO_EXTI_Callback+0xc8>)
 8002df4:	881b      	ldrh	r3, [r3, #0]
 8002df6:	4a20      	ldr	r2, [pc, #128]	; (8002e78 <HAL_GPIO_EXTI_Callback+0xcc>)
 8002df8:	4293      	cmp	r3, r2
 8002dfa:	d102      	bne.n	8002e02 <HAL_GPIO_EXTI_Callback+0x56>
 8002dfc:	4b1d      	ldr	r3, [pc, #116]	; (8002e74 <HAL_GPIO_EXTI_Callback+0xc8>)
 8002dfe:	2200      	movs	r2, #0
 8002e00:	801a      	strh	r2, [r3, #0]

  if (GPIO_Pin == Key_IN1_Pin)
 8002e02:	1dbb      	adds	r3, r7, #6
 8002e04:	881a      	ldrh	r2, [r3, #0]
 8002e06:	2380      	movs	r3, #128	; 0x80
 8002e08:	015b      	lsls	r3, r3, #5
 8002e0a:	429a      	cmp	r2, r3
 8002e0c:	d102      	bne.n	8002e14 <HAL_GPIO_EXTI_Callback+0x68>
  {
#ifndef Debug
	  HAL_UART_Transmit(&hlpuart1, (uint8_t *)"Key1 Was pressed\n\n",18, HAL_MAX_DELAY);
#endif
	  Pressed_Key = 1;
 8002e0e:	4b1b      	ldr	r3, [pc, #108]	; (8002e7c <HAL_GPIO_EXTI_Callback+0xd0>)
 8002e10:	2201      	movs	r2, #1
 8002e12:	701a      	strb	r2, [r3, #0]
  }
  if (GPIO_Pin == Key_IN2_Pin)
 8002e14:	1dbb      	adds	r3, r7, #6
 8002e16:	881b      	ldrh	r3, [r3, #0]
 8002e18:	2b04      	cmp	r3, #4
 8002e1a:	d102      	bne.n	8002e22 <HAL_GPIO_EXTI_Callback+0x76>
  {
#ifndef Debug
	  HAL_UART_Transmit(&hlpuart1, (uint8_t *)"Key2 Was pressed\n\n",18, HAL_MAX_DELAY);
#endif
	  Pressed_Key = 2;
 8002e1c:	4b17      	ldr	r3, [pc, #92]	; (8002e7c <HAL_GPIO_EXTI_Callback+0xd0>)
 8002e1e:	2202      	movs	r2, #2
 8002e20:	701a      	strb	r2, [r3, #0]
  }
  if (GPIO_Pin == Key_IN3_Pin)
 8002e22:	1dbb      	adds	r3, r7, #6
 8002e24:	881a      	ldrh	r2, [r3, #0]
 8002e26:	2380      	movs	r3, #128	; 0x80
 8002e28:	019b      	lsls	r3, r3, #6
 8002e2a:	429a      	cmp	r2, r3
 8002e2c:	d102      	bne.n	8002e34 <HAL_GPIO_EXTI_Callback+0x88>
  {
#ifndef Debug
	  HAL_UART_Transmit(&hlpuart1, (uint8_t *)"Key3 Was pressed\n\n",18, HAL_MAX_DELAY);
#endif
	  Pressed_Key = 3;
 8002e2e:	4b13      	ldr	r3, [pc, #76]	; (8002e7c <HAL_GPIO_EXTI_Callback+0xd0>)
 8002e30:	2203      	movs	r2, #3
 8002e32:	701a      	strb	r2, [r3, #0]
  }
  if (GPIO_Pin == Key_IN4_Pin)
 8002e34:	1dbb      	adds	r3, r7, #6
 8002e36:	881b      	ldrh	r3, [r3, #0]
 8002e38:	2b02      	cmp	r3, #2
 8002e3a:	d102      	bne.n	8002e42 <HAL_GPIO_EXTI_Callback+0x96>
  {
#ifndef Debug
	  HAL_UART_Transmit(&hlpuart1, (uint8_t *)"Key4 Was pressed\n\n",18, HAL_MAX_DELAY);
#endif
	  Pressed_Key = 4;
 8002e3c:	4b0f      	ldr	r3, [pc, #60]	; (8002e7c <HAL_GPIO_EXTI_Callback+0xd0>)
 8002e3e:	2204      	movs	r2, #4
 8002e40:	701a      	strb	r2, [r3, #0]
  }
  //__HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
  HAL_NVIC_ClearPendingIRQ(EXTI0_1_IRQn);
 8002e42:	2005      	movs	r0, #5
 8002e44:	f001 fbe6 	bl	8004614 <HAL_NVIC_ClearPendingIRQ>
  HAL_NVIC_ClearPendingIRQ(EXTI2_3_IRQn);
 8002e48:	2006      	movs	r0, #6
 8002e4a:	f001 fbe3 	bl	8004614 <HAL_NVIC_ClearPendingIRQ>
  HAL_NVIC_ClearPendingIRQ(EXTI4_15_IRQn);
 8002e4e:	2007      	movs	r0, #7
 8002e50:	f001 fbe0 	bl	8004614 <HAL_NVIC_ClearPendingIRQ>

  HAL_NVIC_EnableIRQ(EXTI0_1_IRQn);
 8002e54:	2005      	movs	r0, #5
 8002e56:	f001 fbb0 	bl	80045ba <HAL_NVIC_EnableIRQ>
  HAL_NVIC_EnableIRQ(EXTI2_3_IRQn);
 8002e5a:	2006      	movs	r0, #6
 8002e5c:	f001 fbad 	bl	80045ba <HAL_NVIC_EnableIRQ>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 8002e60:	2007      	movs	r0, #7
 8002e62:	f001 fbaa 	bl	80045ba <HAL_NVIC_EnableIRQ>

#ifdef Timing_Test
  interrupt_time2 = HAL_GetTick();
#endif
}
 8002e66:	46c0      	nop			; (mov r8, r8)
 8002e68:	46bd      	mov	sp, r7
 8002e6a:	b004      	add	sp, #16
 8002e6c:	bd80      	pop	{r7, pc}
 8002e6e:	46c0      	nop			; (mov r8, r8)
 8002e70:	0001869f 	.word	0x0001869f
 8002e74:	20000388 	.word	0x20000388
 8002e78:	0000ffff 	.word	0x0000ffff
 8002e7c:	2000039f 	.word	0x2000039f

08002e80 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002e80:	b590      	push	{r4, r7, lr}
 8002e82:	b085      	sub	sp, #20
 8002e84:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002e86:	f000 fe6b 	bl	8003b60 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002e8a:	f000 f9bf 	bl	800320c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002e8e:	f000 fb37 	bl	8003500 <MX_GPIO_Init>
  MX_ADC_Init();
 8002e92:	f000 fa2d 	bl	80032f0 <MX_ADC_Init>
  MX_LPUART1_UART_Init();
 8002e96:	f000 fa91 	bl	80033bc <MX_LPUART1_UART_Init>
  MX_SPI1_Init();
 8002e9a:	f000 fabd 	bl	8003418 <MX_SPI1_Init>
  MX_TIM6_Init();
 8002e9e:	f000 faf3 	bl	8003488 <MX_TIM6_Init>
  /* USER CODE BEGIN 2 */

  HAL_Delay(10000);
 8002ea2:	4bc6      	ldr	r3, [pc, #792]	; (80031bc <main+0x33c>)
 8002ea4:	0018      	movs	r0, r3
 8002ea6:	f000 fecb 	bl	8003c40 <HAL_Delay>

  Button_ID = Read_Button_ID();                                       //Reading the Button ID through DIP Switch
 8002eaa:	f7ff fed1 	bl	8002c50 <Read_Button_ID>
 8002eae:	0003      	movs	r3, r0
 8002eb0:	001a      	movs	r2, r3
 8002eb2:	4bc3      	ldr	r3, [pc, #780]	; (80031c0 <main+0x340>)
 8002eb4:	701a      	strb	r2, [r3, #0]
  TxData[0] = Button_ID;
 8002eb6:	4bc2      	ldr	r3, [pc, #776]	; (80031c0 <main+0x340>)
 8002eb8:	781a      	ldrb	r2, [r3, #0]
 8002eba:	4bc2      	ldr	r3, [pc, #776]	; (80031c4 <main+0x344>)
 8002ebc:	701a      	strb	r2, [r3, #0]
  RF_Channel_FRQ = RF_Channel_Lookup(Button_ID);                      //Define the Frequency Channel based on the Button_ID
 8002ebe:	4bc0      	ldr	r3, [pc, #768]	; (80031c0 <main+0x340>)
 8002ec0:	781b      	ldrb	r3, [r3, #0]
 8002ec2:	0018      	movs	r0, r3
 8002ec4:	f7ff ff58 	bl	8002d78 <RF_Channel_Lookup>
 8002ec8:	0003      	movs	r3, r0
 8002eca:	001a      	movs	r2, r3
 8002ecc:	4bbe      	ldr	r3, [pc, #760]	; (80031c8 <main+0x348>)
 8002ece:	701a      	strb	r2, [r3, #0]
  TxAddr[0] = Button_ID;                                              //Set the RF Module TxAddr based on Button_ID
 8002ed0:	4bbb      	ldr	r3, [pc, #748]	; (80031c0 <main+0x340>)
 8002ed2:	781a      	ldrb	r2, [r3, #0]
 8002ed4:	4bbd      	ldr	r3, [pc, #756]	; (80031cc <main+0x34c>)
 8002ed6:	701a      	strb	r2, [r3, #0]
  RxAddr[0] = Button_ID;                                              //Set the RF Module RxAddr based on Button_ID
 8002ed8:	4bb9      	ldr	r3, [pc, #740]	; (80031c0 <main+0x340>)
 8002eda:	781a      	ldrb	r2, [r3, #0]
 8002edc:	4bbc      	ldr	r3, [pc, #752]	; (80031d0 <main+0x350>)
 8002ede:	701a      	strb	r2, [r3, #0]

  nRF24_Reset(nRF_CSN_Pin, nRF24_REG_STATUS);
 8002ee0:	2107      	movs	r1, #7
 8002ee2:	2008      	movs	r0, #8
 8002ee4:	f004 fa7c 	bl	80073e0 <nRF24_Reset>

  nRF24_Module_Setup(nRF_CSN_Pin, Transmitter_Mode_noAA_noCRC,
 8002ee8:	4bb7      	ldr	r3, [pc, #732]	; (80031c8 <main+0x348>)
 8002eea:	781a      	ldrb	r2, [r3, #0]
 8002eec:	4bb9      	ldr	r3, [pc, #740]	; (80031d4 <main+0x354>)
 8002eee:	781b      	ldrb	r3, [r3, #0]
 8002ef0:	49b6      	ldr	r1, [pc, #728]	; (80031cc <main+0x34c>)
 8002ef2:	9302      	str	r3, [sp, #8]
 8002ef4:	2303      	movs	r3, #3
 8002ef6:	9301      	str	r3, [sp, #4]
 8002ef8:	4bb5      	ldr	r3, [pc, #724]	; (80031d0 <main+0x350>)
 8002efa:	9300      	str	r3, [sp, #0]
 8002efc:	000b      	movs	r3, r1
 8002efe:	2105      	movs	r1, #5
 8002f00:	2008      	movs	r0, #8
 8002f02:	f004 fa95 	bl	8007430 <nRF24_Module_Setup>
		             RF_Channel_FRQ, TxAddr, RxAddr, MBPS1_0dBm,
					 Packet_Size);

  nRF24_Register_Display(nRF_CSN_Pin);
 8002f06:	2008      	movs	r0, #8
 8002f08:	f004 fd6a 	bl	80079e0 <nRF24_Register_Display>

	  // Start ADC conversion
#ifdef Timing_Test
	  ADC_time1 = HAL_GetTick();
#endif
	  HAL_ADC_Start(&hadc);
 8002f0c:	4bb2      	ldr	r3, [pc, #712]	; (80031d8 <main+0x358>)
 8002f0e:	0018      	movs	r0, r3
 8002f10:	f001 f84a 	bl	8003fa8 <HAL_ADC_Start>

	  if (HAL_ADC_PollForConversion(&hadc, 50) == HAL_OK)
 8002f14:	4bb0      	ldr	r3, [pc, #704]	; (80031d8 <main+0x358>)
 8002f16:	2132      	movs	r1, #50	; 0x32
 8002f18:	0018      	movs	r0, r3
 8002f1a:	f001 f899 	bl	8004050 <HAL_ADC_PollForConversion>
 8002f1e:	1e03      	subs	r3, r0, #0
 8002f20:	d146      	bne.n	8002fb0 <main+0x130>
	  {
		  adcValue = HAL_ADC_GetValue(&hadc);
 8002f22:	4bad      	ldr	r3, [pc, #692]	; (80031d8 <main+0x358>)
 8002f24:	0018      	movs	r0, r3
 8002f26:	f001 f92f 	bl	8004188 <HAL_ADC_GetValue>
 8002f2a:	0002      	movs	r2, r0
 8002f2c:	4bab      	ldr	r3, [pc, #684]	; (80031dc <main+0x35c>)
 8002f2e:	601a      	str	r2, [r3, #0]
		  vrefintCalibrationValue = *VREFINT_CAL_ADDR;
 8002f30:	4bab      	ldr	r3, [pc, #684]	; (80031e0 <main+0x360>)
 8002f32:	881a      	ldrh	r2, [r3, #0]
 8002f34:	4bab      	ldr	r3, [pc, #684]	; (80031e4 <main+0x364>)
 8002f36:	801a      	strh	r2, [r3, #0]
		  // Calculate VDD voltage
		  vddVoltage = ((float)vrefintCalibrationValue * VREFINT_VOLTAGE) / (float)adcValue;
 8002f38:	4baa      	ldr	r3, [pc, #680]	; (80031e4 <main+0x364>)
 8002f3a:	881b      	ldrh	r3, [r3, #0]
 8002f3c:	0018      	movs	r0, r3
 8002f3e:	f7fd ff65 	bl	8000e0c <__aeabi_ui2f>
 8002f42:	1c03      	adds	r3, r0, #0
 8002f44:	49a8      	ldr	r1, [pc, #672]	; (80031e8 <main+0x368>)
 8002f46:	1c18      	adds	r0, r3, #0
 8002f48:	f7fd fe3a 	bl	8000bc0 <__aeabi_fmul>
 8002f4c:	1c03      	adds	r3, r0, #0
 8002f4e:	1c1c      	adds	r4, r3, #0
 8002f50:	4ba2      	ldr	r3, [pc, #648]	; (80031dc <main+0x35c>)
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	0018      	movs	r0, r3
 8002f56:	f7fd ff59 	bl	8000e0c <__aeabi_ui2f>
 8002f5a:	1c03      	adds	r3, r0, #0
 8002f5c:	1c19      	adds	r1, r3, #0
 8002f5e:	1c20      	adds	r0, r4, #0
 8002f60:	f7fd fc66 	bl	8000830 <__aeabi_fdiv>
 8002f64:	1c03      	adds	r3, r0, #0
 8002f66:	1c1a      	adds	r2, r3, #0
 8002f68:	4ba0      	ldr	r3, [pc, #640]	; (80031ec <main+0x36c>)
 8002f6a:	601a      	str	r2, [r3, #0]
		  vddVoltage = vddVoltage * 1.04;             //Based on the calculations and measurements, the MCU voltage usually be read %4 less than actual value
 8002f6c:	4b9f      	ldr	r3, [pc, #636]	; (80031ec <main+0x36c>)
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	1c18      	adds	r0, r3, #0
 8002f72:	f7ff fd73 	bl	8002a5c <__aeabi_f2d>
 8002f76:	4a9e      	ldr	r2, [pc, #632]	; (80031f0 <main+0x370>)
 8002f78:	4b9e      	ldr	r3, [pc, #632]	; (80031f4 <main+0x374>)
 8002f7a:	f7fe fec7 	bl	8001d0c <__aeabi_dmul>
 8002f7e:	0002      	movs	r2, r0
 8002f80:	000b      	movs	r3, r1
 8002f82:	0010      	movs	r0, r2
 8002f84:	0019      	movs	r1, r3
 8002f86:	f7ff fdb1 	bl	8002aec <__aeabi_d2f>
 8002f8a:	1c02      	adds	r2, r0, #0
 8002f8c:	4b97      	ldr	r3, [pc, #604]	; (80031ec <main+0x36c>)
 8002f8e:	601a      	str	r2, [r3, #0]
		  HAL_UART_Transmit(&hlpuart1, (uint8_t*)"vddVoltage: ", 12, 1000);
		  HAL_UART_Transmit(&hlpuart1, (uint8_t*)VDD_buffer, strlen(VDD_buffer), 1000);
		  HAL_UART_Transmit(&hlpuart1, (uint8_t*)"\n", 1, 1000);
#endif

		  if(vddVoltage < 3)
 8002f90:	4b96      	ldr	r3, [pc, #600]	; (80031ec <main+0x36c>)
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	4994      	ldr	r1, [pc, #592]	; (80031e8 <main+0x368>)
 8002f96:	1c18      	adds	r0, r3, #0
 8002f98:	f7fd fa98 	bl	80004cc <__aeabi_fcmplt>
 8002f9c:	1e03      	subs	r3, r0, #0
 8002f9e:	d003      	beq.n	8002fa8 <main+0x128>
		  {
			  Need_To_Be_Charged = 1;
 8002fa0:	4b95      	ldr	r3, [pc, #596]	; (80031f8 <main+0x378>)
 8002fa2:	2201      	movs	r2, #1
 8002fa4:	701a      	strb	r2, [r3, #0]
 8002fa6:	e009      	b.n	8002fbc <main+0x13c>
		  }
		  else
		  {
			  Need_To_Be_Charged = 0;
 8002fa8:	4b93      	ldr	r3, [pc, #588]	; (80031f8 <main+0x378>)
 8002faa:	2200      	movs	r2, #0
 8002fac:	701a      	strb	r2, [r3, #0]
 8002fae:	e005      	b.n	8002fbc <main+0x13c>
		  }
	  }
	  else
	  {
		  HAL_UART_Transmit(&hlpuart1, (uint8_t *)"ADC ERROR\n", 10, 10);
 8002fb0:	4992      	ldr	r1, [pc, #584]	; (80031fc <main+0x37c>)
 8002fb2:	4893      	ldr	r0, [pc, #588]	; (8003200 <main+0x380>)
 8002fb4:	230a      	movs	r3, #10
 8002fb6:	220a      	movs	r2, #10
 8002fb8:	f003 fb96 	bl	80066e8 <HAL_UART_Transmit>
	  }
#ifdef Timing_Test
	  ADC_time2 = HAL_GetTick();
#endif

	  HAL_Delay(1);
 8002fbc:	2001      	movs	r0, #1
 8002fbe:	f000 fe3f 	bl	8003c40 <HAL_Delay>
	  //key1
	  if (Pressed_Key == 1)
 8002fc2:	4b90      	ldr	r3, [pc, #576]	; (8003204 <main+0x384>)
 8002fc4:	781b      	ldrb	r3, [r3, #0]
 8002fc6:	2b01      	cmp	r3, #1
 8002fc8:	d138      	bne.n	800303c <main+0x1bc>
	  {
#ifdef Timing_Test
		  key1_time1 = HAL_GetTick();
#endif
		  Pressed_Key = 0;
 8002fca:	4b8e      	ldr	r3, [pc, #568]	; (8003204 <main+0x384>)
 8002fcc:	2200      	movs	r2, #0
 8002fce:	701a      	strb	r2, [r3, #0]

		  TxData[1] = 1;
 8002fd0:	4b7c      	ldr	r3, [pc, #496]	; (80031c4 <main+0x344>)
 8002fd2:	2201      	movs	r2, #1
 8002fd4:	705a      	strb	r2, [r3, #1]
		  nRF24_Transmit(nRF_CSN_Pin, TxData, Packet_Size);
 8002fd6:	4b7f      	ldr	r3, [pc, #508]	; (80031d4 <main+0x354>)
 8002fd8:	781a      	ldrb	r2, [r3, #0]
 8002fda:	4b7a      	ldr	r3, [pc, #488]	; (80031c4 <main+0x344>)
 8002fdc:	0019      	movs	r1, r3
 8002fde:	2008      	movs	r0, #8
 8002fe0:	f004 fbc2 	bl	8007768 <nRF24_Transmit>

		  //Check for the Battery Voltage to select the LED Color 2n4 a   1n3 b
		  while(HAL_GPIO_ReadPin(GPIOB, Key_IN1_Pin) == GPIO_PIN_SET)
 8002fe4:	e012      	b.n	800300c <main+0x18c>
		  {
			  if(Need_To_Be_Charged == 1)
 8002fe6:	4b84      	ldr	r3, [pc, #528]	; (80031f8 <main+0x378>)
 8002fe8:	781b      	ldrb	r3, [r3, #0]
 8002fea:	2b01      	cmp	r3, #1
 8002fec:	d106      	bne.n	8002ffc <main+0x17c>
			  {
				  HAL_GPIO_WritePin(GPIOB, LED_RED_Pin, GPIO_PIN_RESET);
 8002fee:	4b86      	ldr	r3, [pc, #536]	; (8003208 <main+0x388>)
 8002ff0:	2200      	movs	r2, #0
 8002ff2:	2108      	movs	r1, #8
 8002ff4:	0018      	movs	r0, r3
 8002ff6:	f001 fcb0 	bl	800495a <HAL_GPIO_WritePin>
 8002ffa:	e007      	b.n	800300c <main+0x18c>
			  }
			  else
			  {
			  	  HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_RESET);
 8002ffc:	2380      	movs	r3, #128	; 0x80
 8002ffe:	0219      	lsls	r1, r3, #8
 8003000:	23a0      	movs	r3, #160	; 0xa0
 8003002:	05db      	lsls	r3, r3, #23
 8003004:	2200      	movs	r2, #0
 8003006:	0018      	movs	r0, r3
 8003008:	f001 fca7 	bl	800495a <HAL_GPIO_WritePin>
		  while(HAL_GPIO_ReadPin(GPIOB, Key_IN1_Pin) == GPIO_PIN_SET)
 800300c:	2380      	movs	r3, #128	; 0x80
 800300e:	015b      	lsls	r3, r3, #5
 8003010:	4a7d      	ldr	r2, [pc, #500]	; (8003208 <main+0x388>)
 8003012:	0019      	movs	r1, r3
 8003014:	0010      	movs	r0, r2
 8003016:	f001 fc83 	bl	8004920 <HAL_GPIO_ReadPin>
 800301a:	0003      	movs	r3, r0
 800301c:	2b01      	cmp	r3, #1
 800301e:	d0e2      	beq.n	8002fe6 <main+0x166>
	    	  }
		  }
		  HAL_GPIO_WritePin(GPIOB, LED_RED_Pin, GPIO_PIN_SET);
 8003020:	4b79      	ldr	r3, [pc, #484]	; (8003208 <main+0x388>)
 8003022:	2201      	movs	r2, #1
 8003024:	2108      	movs	r1, #8
 8003026:	0018      	movs	r0, r3
 8003028:	f001 fc97 	bl	800495a <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_SET);
 800302c:	2380      	movs	r3, #128	; 0x80
 800302e:	0219      	lsls	r1, r3, #8
 8003030:	23a0      	movs	r3, #160	; 0xa0
 8003032:	05db      	lsls	r3, r3, #23
 8003034:	2201      	movs	r2, #1
 8003036:	0018      	movs	r0, r3
 8003038:	f001 fc8f 	bl	800495a <HAL_GPIO_WritePin>
#ifdef Timing_Test
		  key1_time2 = HAL_GetTick();
#endif
	  }
	  //key2
	  if (Pressed_Key == 2)
 800303c:	4b71      	ldr	r3, [pc, #452]	; (8003204 <main+0x384>)
 800303e:	781b      	ldrb	r3, [r3, #0]
 8003040:	2b02      	cmp	r3, #2
 8003042:	d137      	bne.n	80030b4 <main+0x234>
	  {
#ifdef Timing_Test
		  key2_time1 = HAL_GetTick();
#endif
		  Pressed_Key = 0;
 8003044:	4b6f      	ldr	r3, [pc, #444]	; (8003204 <main+0x384>)
 8003046:	2200      	movs	r2, #0
 8003048:	701a      	strb	r2, [r3, #0]

		  TxData[1] = 2;
 800304a:	4b5e      	ldr	r3, [pc, #376]	; (80031c4 <main+0x344>)
 800304c:	2202      	movs	r2, #2
 800304e:	705a      	strb	r2, [r3, #1]
		  nRF24_Transmit(nRF_CSN_Pin, TxData, Packet_Size);
 8003050:	4b60      	ldr	r3, [pc, #384]	; (80031d4 <main+0x354>)
 8003052:	781a      	ldrb	r2, [r3, #0]
 8003054:	4b5b      	ldr	r3, [pc, #364]	; (80031c4 <main+0x344>)
 8003056:	0019      	movs	r1, r3
 8003058:	2008      	movs	r0, #8
 800305a:	f004 fb85 	bl	8007768 <nRF24_Transmit>

		  //Check the Battery Voltage to select the LED Color 2n4 a   1n3 b
		  while(HAL_GPIO_ReadPin(GPIOA, Key_IN2_Pin) == GPIO_PIN_SET)
 800305e:	e012      	b.n	8003086 <main+0x206>
		  {
			  if(Need_To_Be_Charged == 1)
 8003060:	4b65      	ldr	r3, [pc, #404]	; (80031f8 <main+0x378>)
 8003062:	781b      	ldrb	r3, [r3, #0]
 8003064:	2b01      	cmp	r3, #1
 8003066:	d106      	bne.n	8003076 <main+0x1f6>
			  {
				  HAL_GPIO_WritePin(GPIOB, LED_RED_Pin, GPIO_PIN_RESET);
 8003068:	4b67      	ldr	r3, [pc, #412]	; (8003208 <main+0x388>)
 800306a:	2200      	movs	r2, #0
 800306c:	2108      	movs	r1, #8
 800306e:	0018      	movs	r0, r3
 8003070:	f001 fc73 	bl	800495a <HAL_GPIO_WritePin>
 8003074:	e007      	b.n	8003086 <main+0x206>
			  }
			  else
			  {
			  	  HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_RESET);
 8003076:	2380      	movs	r3, #128	; 0x80
 8003078:	0219      	lsls	r1, r3, #8
 800307a:	23a0      	movs	r3, #160	; 0xa0
 800307c:	05db      	lsls	r3, r3, #23
 800307e:	2200      	movs	r2, #0
 8003080:	0018      	movs	r0, r3
 8003082:	f001 fc6a 	bl	800495a <HAL_GPIO_WritePin>
		  while(HAL_GPIO_ReadPin(GPIOA, Key_IN2_Pin) == GPIO_PIN_SET)
 8003086:	23a0      	movs	r3, #160	; 0xa0
 8003088:	05db      	lsls	r3, r3, #23
 800308a:	2104      	movs	r1, #4
 800308c:	0018      	movs	r0, r3
 800308e:	f001 fc47 	bl	8004920 <HAL_GPIO_ReadPin>
 8003092:	0003      	movs	r3, r0
 8003094:	2b01      	cmp	r3, #1
 8003096:	d0e3      	beq.n	8003060 <main+0x1e0>
	    	  }
		  }
		  HAL_GPIO_WritePin(GPIOB, LED_RED_Pin, GPIO_PIN_SET);
 8003098:	4b5b      	ldr	r3, [pc, #364]	; (8003208 <main+0x388>)
 800309a:	2201      	movs	r2, #1
 800309c:	2108      	movs	r1, #8
 800309e:	0018      	movs	r0, r3
 80030a0:	f001 fc5b 	bl	800495a <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_SET);
 80030a4:	2380      	movs	r3, #128	; 0x80
 80030a6:	0219      	lsls	r1, r3, #8
 80030a8:	23a0      	movs	r3, #160	; 0xa0
 80030aa:	05db      	lsls	r3, r3, #23
 80030ac:	2201      	movs	r2, #1
 80030ae:	0018      	movs	r0, r3
 80030b0:	f001 fc53 	bl	800495a <HAL_GPIO_WritePin>
#ifdef Timing_Test
		  key2_time2 = HAL_GetTick();
#endif
	  }
	  //key3
	  if (Pressed_Key == 3)
 80030b4:	4b53      	ldr	r3, [pc, #332]	; (8003204 <main+0x384>)
 80030b6:	781b      	ldrb	r3, [r3, #0]
 80030b8:	2b03      	cmp	r3, #3
 80030ba:	d138      	bne.n	800312e <main+0x2ae>
	  {
#ifdef Timing_Test
		  key3_time1 = HAL_GetTick();
#endif
		  Pressed_Key = 0;
 80030bc:	4b51      	ldr	r3, [pc, #324]	; (8003204 <main+0x384>)
 80030be:	2200      	movs	r2, #0
 80030c0:	701a      	strb	r2, [r3, #0]

		  TxData[1] = 3;
 80030c2:	4b40      	ldr	r3, [pc, #256]	; (80031c4 <main+0x344>)
 80030c4:	2203      	movs	r2, #3
 80030c6:	705a      	strb	r2, [r3, #1]
		  nRF24_Transmit(nRF_CSN_Pin, TxData, Packet_Size);
 80030c8:	4b42      	ldr	r3, [pc, #264]	; (80031d4 <main+0x354>)
 80030ca:	781a      	ldrb	r2, [r3, #0]
 80030cc:	4b3d      	ldr	r3, [pc, #244]	; (80031c4 <main+0x344>)
 80030ce:	0019      	movs	r1, r3
 80030d0:	2008      	movs	r0, #8
 80030d2:	f004 fb49 	bl	8007768 <nRF24_Transmit>

		  //Check for the Battery Voltage to select the LED Color 2n4 a   1n3 b
		  while(HAL_GPIO_ReadPin(GPIOB, Key_IN3_Pin) == GPIO_PIN_SET)
 80030d6:	e012      	b.n	80030fe <main+0x27e>
		  {
			  if(Need_To_Be_Charged == 1)
 80030d8:	4b47      	ldr	r3, [pc, #284]	; (80031f8 <main+0x378>)
 80030da:	781b      	ldrb	r3, [r3, #0]
 80030dc:	2b01      	cmp	r3, #1
 80030de:	d106      	bne.n	80030ee <main+0x26e>
			  {
				  HAL_GPIO_WritePin(GPIOB, LED_RED_Pin, GPIO_PIN_RESET);
 80030e0:	4b49      	ldr	r3, [pc, #292]	; (8003208 <main+0x388>)
 80030e2:	2200      	movs	r2, #0
 80030e4:	2108      	movs	r1, #8
 80030e6:	0018      	movs	r0, r3
 80030e8:	f001 fc37 	bl	800495a <HAL_GPIO_WritePin>
 80030ec:	e007      	b.n	80030fe <main+0x27e>
			  }
			  else
			  {
			  	  HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_RESET);
 80030ee:	2380      	movs	r3, #128	; 0x80
 80030f0:	0219      	lsls	r1, r3, #8
 80030f2:	23a0      	movs	r3, #160	; 0xa0
 80030f4:	05db      	lsls	r3, r3, #23
 80030f6:	2200      	movs	r2, #0
 80030f8:	0018      	movs	r0, r3
 80030fa:	f001 fc2e 	bl	800495a <HAL_GPIO_WritePin>
		  while(HAL_GPIO_ReadPin(GPIOB, Key_IN3_Pin) == GPIO_PIN_SET)
 80030fe:	2380      	movs	r3, #128	; 0x80
 8003100:	019b      	lsls	r3, r3, #6
 8003102:	4a41      	ldr	r2, [pc, #260]	; (8003208 <main+0x388>)
 8003104:	0019      	movs	r1, r3
 8003106:	0010      	movs	r0, r2
 8003108:	f001 fc0a 	bl	8004920 <HAL_GPIO_ReadPin>
 800310c:	0003      	movs	r3, r0
 800310e:	2b01      	cmp	r3, #1
 8003110:	d0e2      	beq.n	80030d8 <main+0x258>
	    	  }
		  }
		  HAL_GPIO_WritePin(GPIOB, LED_RED_Pin, GPIO_PIN_SET);
 8003112:	4b3d      	ldr	r3, [pc, #244]	; (8003208 <main+0x388>)
 8003114:	2201      	movs	r2, #1
 8003116:	2108      	movs	r1, #8
 8003118:	0018      	movs	r0, r3
 800311a:	f001 fc1e 	bl	800495a <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_SET);
 800311e:	2380      	movs	r3, #128	; 0x80
 8003120:	0219      	lsls	r1, r3, #8
 8003122:	23a0      	movs	r3, #160	; 0xa0
 8003124:	05db      	lsls	r3, r3, #23
 8003126:	2201      	movs	r2, #1
 8003128:	0018      	movs	r0, r3
 800312a:	f001 fc16 	bl	800495a <HAL_GPIO_WritePin>
		  key3_time2 = HAL_GetTick();
#endif
	  }

	  //key4
	  if (Pressed_Key == 4)
 800312e:	4b35      	ldr	r3, [pc, #212]	; (8003204 <main+0x384>)
 8003130:	781b      	ldrb	r3, [r3, #0]
 8003132:	2b04      	cmp	r3, #4
 8003134:	d137      	bne.n	80031a6 <main+0x326>
	  {
#ifdef Timing_Test
		  key4_time1 = HAL_GetTick();
#endif
		  Pressed_Key = 0;
 8003136:	4b33      	ldr	r3, [pc, #204]	; (8003204 <main+0x384>)
 8003138:	2200      	movs	r2, #0
 800313a:	701a      	strb	r2, [r3, #0]

		  TxData[1] = 4;
 800313c:	4b21      	ldr	r3, [pc, #132]	; (80031c4 <main+0x344>)
 800313e:	2204      	movs	r2, #4
 8003140:	705a      	strb	r2, [r3, #1]
		  nRF24_Transmit(nRF_CSN_Pin, TxData, Packet_Size);
 8003142:	4b24      	ldr	r3, [pc, #144]	; (80031d4 <main+0x354>)
 8003144:	781a      	ldrb	r2, [r3, #0]
 8003146:	4b1f      	ldr	r3, [pc, #124]	; (80031c4 <main+0x344>)
 8003148:	0019      	movs	r1, r3
 800314a:	2008      	movs	r0, #8
 800314c:	f004 fb0c 	bl	8007768 <nRF24_Transmit>

		  //Check for the Battery Voltage to select the LED Color 2n4 a   1n3 b
		  while(HAL_GPIO_ReadPin(GPIOA, Key_IN4_Pin) == GPIO_PIN_SET)
 8003150:	e012      	b.n	8003178 <main+0x2f8>
		  {
			  if(Need_To_Be_Charged == 1)
 8003152:	4b29      	ldr	r3, [pc, #164]	; (80031f8 <main+0x378>)
 8003154:	781b      	ldrb	r3, [r3, #0]
 8003156:	2b01      	cmp	r3, #1
 8003158:	d106      	bne.n	8003168 <main+0x2e8>
			  {
				  HAL_GPIO_WritePin(GPIOB, LED_RED_Pin, GPIO_PIN_RESET);
 800315a:	4b2b      	ldr	r3, [pc, #172]	; (8003208 <main+0x388>)
 800315c:	2200      	movs	r2, #0
 800315e:	2108      	movs	r1, #8
 8003160:	0018      	movs	r0, r3
 8003162:	f001 fbfa 	bl	800495a <HAL_GPIO_WritePin>
 8003166:	e007      	b.n	8003178 <main+0x2f8>
			  }
			  else
			  {
			  	  HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_RESET);
 8003168:	2380      	movs	r3, #128	; 0x80
 800316a:	0219      	lsls	r1, r3, #8
 800316c:	23a0      	movs	r3, #160	; 0xa0
 800316e:	05db      	lsls	r3, r3, #23
 8003170:	2200      	movs	r2, #0
 8003172:	0018      	movs	r0, r3
 8003174:	f001 fbf1 	bl	800495a <HAL_GPIO_WritePin>
		  while(HAL_GPIO_ReadPin(GPIOA, Key_IN4_Pin) == GPIO_PIN_SET)
 8003178:	23a0      	movs	r3, #160	; 0xa0
 800317a:	05db      	lsls	r3, r3, #23
 800317c:	2102      	movs	r1, #2
 800317e:	0018      	movs	r0, r3
 8003180:	f001 fbce 	bl	8004920 <HAL_GPIO_ReadPin>
 8003184:	0003      	movs	r3, r0
 8003186:	2b01      	cmp	r3, #1
 8003188:	d0e3      	beq.n	8003152 <main+0x2d2>
	    	  }
		  }
		  HAL_GPIO_WritePin(GPIOB, LED_RED_Pin, GPIO_PIN_SET);
 800318a:	4b1f      	ldr	r3, [pc, #124]	; (8003208 <main+0x388>)
 800318c:	2201      	movs	r2, #1
 800318e:	2108      	movs	r1, #8
 8003190:	0018      	movs	r0, r3
 8003192:	f001 fbe2 	bl	800495a <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_SET);
 8003196:	2380      	movs	r3, #128	; 0x80
 8003198:	0219      	lsls	r1, r3, #8
 800319a:	23a0      	movs	r3, #160	; 0xa0
 800319c:	05db      	lsls	r3, r3, #23
 800319e:	2201      	movs	r2, #1
 80031a0:	0018      	movs	r0, r3
 80031a2:	f001 fbda 	bl	800495a <HAL_GPIO_WritePin>
#ifdef Timing_Test
		  key4_time2 = HAL_GetTick();
#endif
	  }

	  HAL_Delay(1);
 80031a6:	2001      	movs	r0, #1
 80031a8:	f000 fd4a 	bl	8003c40 <HAL_Delay>
	  key3_time = 0;
	  key4_time = 0;
	  time_total = 0;
#endif

	  HAL_SuspendTick();                                                          //Suspend the sys tick before going into stop mode
 80031ac:	f000 fd6c 	bl	8003c88 <HAL_SuspendTick>
	  HAL_PWR_EnterSTOPMode(PWR_LOWPOWERREGULATOR_ON, PWR_STOPENTRY_WFI);         //Enter the stop mode
 80031b0:	2101      	movs	r1, #1
 80031b2:	2001      	movs	r0, #1
 80031b4:	f001 fc0a 	bl	80049cc <HAL_PWR_EnterSTOPMode>
	  HAL_ADC_Start(&hadc);
 80031b8:	e6a8      	b.n	8002f0c <main+0x8c>
 80031ba:	46c0      	nop			; (mov r8, r8)
 80031bc:	00002710 	.word	0x00002710
 80031c0:	2000039c 	.word	0x2000039c
 80031c4:	2000038c 	.word	0x2000038c
 80031c8:	2000039d 	.word	0x2000039d
 80031cc:	20000000 	.word	0x20000000
 80031d0:	20000008 	.word	0x20000008
 80031d4:	2000000d 	.word	0x2000000d
 80031d8:	2000020c 	.word	0x2000020c
 80031dc:	200003a0 	.word	0x200003a0
 80031e0:	1ff80078 	.word	0x1ff80078
 80031e4:	200003a8 	.word	0x200003a8
 80031e8:	40400000 	.word	0x40400000
 80031ec:	200003a4 	.word	0x200003a4
 80031f0:	0a3d70a4 	.word	0x0a3d70a4
 80031f4:	3ff0a3d7 	.word	0x3ff0a3d7
 80031f8:	2000039e 	.word	0x2000039e
 80031fc:	0800c858 	.word	0x0800c858
 8003200:	20000268 	.word	0x20000268
 8003204:	2000039f 	.word	0x2000039f
 8003208:	50000400 	.word	0x50000400

0800320c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800320c:	b590      	push	{r4, r7, lr}
 800320e:	b09b      	sub	sp, #108	; 0x6c
 8003210:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003212:	2434      	movs	r4, #52	; 0x34
 8003214:	193b      	adds	r3, r7, r4
 8003216:	0018      	movs	r0, r3
 8003218:	2334      	movs	r3, #52	; 0x34
 800321a:	001a      	movs	r2, r3
 800321c:	2100      	movs	r1, #0
 800321e:	f004 fde1 	bl	8007de4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003222:	2320      	movs	r3, #32
 8003224:	18fb      	adds	r3, r7, r3
 8003226:	0018      	movs	r0, r3
 8003228:	2314      	movs	r3, #20
 800322a:	001a      	movs	r2, r3
 800322c:	2100      	movs	r1, #0
 800322e:	f004 fdd9 	bl	8007de4 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003232:	1d3b      	adds	r3, r7, #4
 8003234:	0018      	movs	r0, r3
 8003236:	231c      	movs	r3, #28
 8003238:	001a      	movs	r2, r3
 800323a:	2100      	movs	r1, #0
 800323c:	f004 fdd2 	bl	8007de4 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8003240:	4b29      	ldr	r3, [pc, #164]	; (80032e8 <SystemClock_Config+0xdc>)
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	4a29      	ldr	r2, [pc, #164]	; (80032ec <SystemClock_Config+0xe0>)
 8003246:	401a      	ands	r2, r3
 8003248:	4b27      	ldr	r3, [pc, #156]	; (80032e8 <SystemClock_Config+0xdc>)
 800324a:	2180      	movs	r1, #128	; 0x80
 800324c:	0109      	lsls	r1, r1, #4
 800324e:	430a      	orrs	r2, r1
 8003250:	601a      	str	r2, [r3, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8003252:	0021      	movs	r1, r4
 8003254:	187b      	adds	r3, r7, r1
 8003256:	2202      	movs	r2, #2
 8003258:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800325a:	187b      	adds	r3, r7, r1
 800325c:	2201      	movs	r2, #1
 800325e:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8003260:	187b      	adds	r3, r7, r1
 8003262:	2210      	movs	r2, #16
 8003264:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003266:	187b      	adds	r3, r7, r1
 8003268:	2202      	movs	r2, #2
 800326a:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800326c:	187b      	adds	r3, r7, r1
 800326e:	2200      	movs	r2, #0
 8003270:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLLMUL_3;
 8003272:	187b      	adds	r3, r7, r1
 8003274:	2200      	movs	r2, #0
 8003276:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLLDIV_2;
 8003278:	187b      	adds	r3, r7, r1
 800327a:	2280      	movs	r2, #128	; 0x80
 800327c:	03d2      	lsls	r2, r2, #15
 800327e:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003280:	187b      	adds	r3, r7, r1
 8003282:	0018      	movs	r0, r3
 8003284:	f001 fbfe 	bl	8004a84 <HAL_RCC_OscConfig>
 8003288:	1e03      	subs	r3, r0, #0
 800328a:	d001      	beq.n	8003290 <SystemClock_Config+0x84>
  {
    Error_Handler();
 800328c:	f000 fa6e 	bl	800376c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003290:	2120      	movs	r1, #32
 8003292:	187b      	adds	r3, r7, r1
 8003294:	220f      	movs	r2, #15
 8003296:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003298:	187b      	adds	r3, r7, r1
 800329a:	2203      	movs	r2, #3
 800329c:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800329e:	187b      	adds	r3, r7, r1
 80032a0:	2200      	movs	r2, #0
 80032a2:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80032a4:	187b      	adds	r3, r7, r1
 80032a6:	2200      	movs	r2, #0
 80032a8:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80032aa:	187b      	adds	r3, r7, r1
 80032ac:	2200      	movs	r2, #0
 80032ae:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80032b0:	187b      	adds	r3, r7, r1
 80032b2:	2101      	movs	r1, #1
 80032b4:	0018      	movs	r0, r3
 80032b6:	f001 ff4f 	bl	8005158 <HAL_RCC_ClockConfig>
 80032ba:	1e03      	subs	r3, r0, #0
 80032bc:	d001      	beq.n	80032c2 <SystemClock_Config+0xb6>
  {
    Error_Handler();
 80032be:	f000 fa55 	bl	800376c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 80032c2:	1d3b      	adds	r3, r7, #4
 80032c4:	2204      	movs	r2, #4
 80032c6:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 80032c8:	1d3b      	adds	r3, r7, #4
 80032ca:	2200      	movs	r2, #0
 80032cc:	611a      	str	r2, [r3, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80032ce:	1d3b      	adds	r3, r7, #4
 80032d0:	0018      	movs	r0, r3
 80032d2:	f002 f965 	bl	80055a0 <HAL_RCCEx_PeriphCLKConfig>
 80032d6:	1e03      	subs	r3, r0, #0
 80032d8:	d001      	beq.n	80032de <SystemClock_Config+0xd2>
  {
    Error_Handler();
 80032da:	f000 fa47 	bl	800376c <Error_Handler>
  }
}
 80032de:	46c0      	nop			; (mov r8, r8)
 80032e0:	46bd      	mov	sp, r7
 80032e2:	b01b      	add	sp, #108	; 0x6c
 80032e4:	bd90      	pop	{r4, r7, pc}
 80032e6:	46c0      	nop			; (mov r8, r8)
 80032e8:	40007000 	.word	0x40007000
 80032ec:	ffffe7ff 	.word	0xffffe7ff

080032f0 <MX_ADC_Init>:
  * @brief ADC Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC_Init(void)
{
 80032f0:	b580      	push	{r7, lr}
 80032f2:	b082      	sub	sp, #8
 80032f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80032f6:	003b      	movs	r3, r7
 80032f8:	0018      	movs	r0, r3
 80032fa:	2308      	movs	r3, #8
 80032fc:	001a      	movs	r2, r3
 80032fe:	2100      	movs	r1, #0
 8003300:	f004 fd70 	bl	8007de4 <memset>

  /* USER CODE END ADC_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 8003304:	4b2a      	ldr	r3, [pc, #168]	; (80033b0 <MX_ADC_Init+0xc0>)
 8003306:	4a2b      	ldr	r2, [pc, #172]	; (80033b4 <MX_ADC_Init+0xc4>)
 8003308:	601a      	str	r2, [r3, #0]
  hadc.Init.OversamplingMode = DISABLE;
 800330a:	4b29      	ldr	r3, [pc, #164]	; (80033b0 <MX_ADC_Init+0xc0>)
 800330c:	2200      	movs	r2, #0
 800330e:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8003310:	4b27      	ldr	r3, [pc, #156]	; (80033b0 <MX_ADC_Init+0xc0>)
 8003312:	2280      	movs	r2, #128	; 0x80
 8003314:	05d2      	lsls	r2, r2, #23
 8003316:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 8003318:	4b25      	ldr	r3, [pc, #148]	; (80033b0 <MX_ADC_Init+0xc0>)
 800331a:	2200      	movs	r2, #0
 800331c:	609a      	str	r2, [r3, #8]
  hadc.Init.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 800331e:	4b24      	ldr	r3, [pc, #144]	; (80033b0 <MX_ADC_Init+0xc0>)
 8003320:	2200      	movs	r2, #0
 8003322:	639a      	str	r2, [r3, #56]	; 0x38
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 8003324:	4b22      	ldr	r3, [pc, #136]	; (80033b0 <MX_ADC_Init+0xc0>)
 8003326:	2201      	movs	r2, #1
 8003328:	611a      	str	r2, [r3, #16]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800332a:	4b21      	ldr	r3, [pc, #132]	; (80033b0 <MX_ADC_Init+0xc0>)
 800332c:	2200      	movs	r2, #0
 800332e:	60da      	str	r2, [r3, #12]
  hadc.Init.ContinuousConvMode = DISABLE;
 8003330:	4b1f      	ldr	r3, [pc, #124]	; (80033b0 <MX_ADC_Init+0xc0>)
 8003332:	2220      	movs	r2, #32
 8003334:	2100      	movs	r1, #0
 8003336:	5499      	strb	r1, [r3, r2]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 8003338:	4b1d      	ldr	r3, [pc, #116]	; (80033b0 <MX_ADC_Init+0xc0>)
 800333a:	2221      	movs	r2, #33	; 0x21
 800333c:	2100      	movs	r1, #0
 800333e:	5499      	strb	r1, [r3, r2]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8003340:	4b1b      	ldr	r3, [pc, #108]	; (80033b0 <MX_ADC_Init+0xc0>)
 8003342:	2200      	movs	r2, #0
 8003344:	629a      	str	r2, [r3, #40]	; 0x28
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8003346:	4b1a      	ldr	r3, [pc, #104]	; (80033b0 <MX_ADC_Init+0xc0>)
 8003348:	22c2      	movs	r2, #194	; 0xc2
 800334a:	32ff      	adds	r2, #255	; 0xff
 800334c:	625a      	str	r2, [r3, #36]	; 0x24
  hadc.Init.DMAContinuousRequests = DISABLE;
 800334e:	4b18      	ldr	r3, [pc, #96]	; (80033b0 <MX_ADC_Init+0xc0>)
 8003350:	222c      	movs	r2, #44	; 0x2c
 8003352:	2100      	movs	r1, #0
 8003354:	5499      	strb	r1, [r3, r2]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8003356:	4b16      	ldr	r3, [pc, #88]	; (80033b0 <MX_ADC_Init+0xc0>)
 8003358:	2204      	movs	r2, #4
 800335a:	615a      	str	r2, [r3, #20]
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800335c:	4b14      	ldr	r3, [pc, #80]	; (80033b0 <MX_ADC_Init+0xc0>)
 800335e:	2200      	movs	r2, #0
 8003360:	631a      	str	r2, [r3, #48]	; 0x30
  hadc.Init.LowPowerAutoWait = DISABLE;
 8003362:	4b13      	ldr	r3, [pc, #76]	; (80033b0 <MX_ADC_Init+0xc0>)
 8003364:	2200      	movs	r2, #0
 8003366:	619a      	str	r2, [r3, #24]
  hadc.Init.LowPowerFrequencyMode = DISABLE;
 8003368:	4b11      	ldr	r3, [pc, #68]	; (80033b0 <MX_ADC_Init+0xc0>)
 800336a:	2200      	movs	r2, #0
 800336c:	635a      	str	r2, [r3, #52]	; 0x34
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 800336e:	4b10      	ldr	r3, [pc, #64]	; (80033b0 <MX_ADC_Init+0xc0>)
 8003370:	2200      	movs	r2, #0
 8003372:	61da      	str	r2, [r3, #28]
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 8003374:	4b0e      	ldr	r3, [pc, #56]	; (80033b0 <MX_ADC_Init+0xc0>)
 8003376:	0018      	movs	r0, r3
 8003378:	f000 fca2 	bl	8003cc0 <HAL_ADC_Init>
 800337c:	1e03      	subs	r3, r0, #0
 800337e:	d001      	beq.n	8003384 <MX_ADC_Init+0x94>
  {
    Error_Handler();
 8003380:	f000 f9f4 	bl	800376c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_VREFINT;
 8003384:	003b      	movs	r3, r7
 8003386:	4a0c      	ldr	r2, [pc, #48]	; (80033b8 <MX_ADC_Init+0xc8>)
 8003388:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 800338a:	003b      	movs	r3, r7
 800338c:	2280      	movs	r2, #128	; 0x80
 800338e:	0152      	lsls	r2, r2, #5
 8003390:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8003392:	003a      	movs	r2, r7
 8003394:	4b06      	ldr	r3, [pc, #24]	; (80033b0 <MX_ADC_Init+0xc0>)
 8003396:	0011      	movs	r1, r2
 8003398:	0018      	movs	r0, r3
 800339a:	f000 ff01 	bl	80041a0 <HAL_ADC_ConfigChannel>
 800339e:	1e03      	subs	r3, r0, #0
 80033a0:	d001      	beq.n	80033a6 <MX_ADC_Init+0xb6>
  {
    Error_Handler();
 80033a2:	f000 f9e3 	bl	800376c <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 80033a6:	46c0      	nop			; (mov r8, r8)
 80033a8:	46bd      	mov	sp, r7
 80033aa:	b002      	add	sp, #8
 80033ac:	bd80      	pop	{r7, pc}
 80033ae:	46c0      	nop			; (mov r8, r8)
 80033b0:	2000020c 	.word	0x2000020c
 80033b4:	40012400 	.word	0x40012400
 80033b8:	44020000 	.word	0x44020000

080033bc <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 80033bc:	b580      	push	{r7, lr}
 80033be:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 80033c0:	4b13      	ldr	r3, [pc, #76]	; (8003410 <MX_LPUART1_UART_Init+0x54>)
 80033c2:	4a14      	ldr	r2, [pc, #80]	; (8003414 <MX_LPUART1_UART_Init+0x58>)
 80033c4:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 80033c6:	4b12      	ldr	r3, [pc, #72]	; (8003410 <MX_LPUART1_UART_Init+0x54>)
 80033c8:	22e1      	movs	r2, #225	; 0xe1
 80033ca:	0252      	lsls	r2, r2, #9
 80033cc:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 80033ce:	4b10      	ldr	r3, [pc, #64]	; (8003410 <MX_LPUART1_UART_Init+0x54>)
 80033d0:	2200      	movs	r2, #0
 80033d2:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 80033d4:	4b0e      	ldr	r3, [pc, #56]	; (8003410 <MX_LPUART1_UART_Init+0x54>)
 80033d6:	2200      	movs	r2, #0
 80033d8:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 80033da:	4b0d      	ldr	r3, [pc, #52]	; (8003410 <MX_LPUART1_UART_Init+0x54>)
 80033dc:	2200      	movs	r2, #0
 80033de:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 80033e0:	4b0b      	ldr	r3, [pc, #44]	; (8003410 <MX_LPUART1_UART_Init+0x54>)
 80033e2:	220c      	movs	r2, #12
 80033e4:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80033e6:	4b0a      	ldr	r3, [pc, #40]	; (8003410 <MX_LPUART1_UART_Init+0x54>)
 80033e8:	2200      	movs	r2, #0
 80033ea:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80033ec:	4b08      	ldr	r3, [pc, #32]	; (8003410 <MX_LPUART1_UART_Init+0x54>)
 80033ee:	2200      	movs	r2, #0
 80033f0:	621a      	str	r2, [r3, #32]
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80033f2:	4b07      	ldr	r3, [pc, #28]	; (8003410 <MX_LPUART1_UART_Init+0x54>)
 80033f4:	2200      	movs	r2, #0
 80033f6:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 80033f8:	4b05      	ldr	r3, [pc, #20]	; (8003410 <MX_LPUART1_UART_Init+0x54>)
 80033fa:	0018      	movs	r0, r3
 80033fc:	f003 f920 	bl	8006640 <HAL_UART_Init>
 8003400:	1e03      	subs	r3, r0, #0
 8003402:	d001      	beq.n	8003408 <MX_LPUART1_UART_Init+0x4c>
  {
    Error_Handler();
 8003404:	f000 f9b2 	bl	800376c <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8003408:	46c0      	nop			; (mov r8, r8)
 800340a:	46bd      	mov	sp, r7
 800340c:	bd80      	pop	{r7, pc}
 800340e:	46c0      	nop			; (mov r8, r8)
 8003410:	20000268 	.word	0x20000268
 8003414:	40004800 	.word	0x40004800

08003418 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8003418:	b580      	push	{r7, lr}
 800341a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800341c:	4b18      	ldr	r3, [pc, #96]	; (8003480 <MX_SPI1_Init+0x68>)
 800341e:	4a19      	ldr	r2, [pc, #100]	; (8003484 <MX_SPI1_Init+0x6c>)
 8003420:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8003422:	4b17      	ldr	r3, [pc, #92]	; (8003480 <MX_SPI1_Init+0x68>)
 8003424:	2282      	movs	r2, #130	; 0x82
 8003426:	0052      	lsls	r2, r2, #1
 8003428:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800342a:	4b15      	ldr	r3, [pc, #84]	; (8003480 <MX_SPI1_Init+0x68>)
 800342c:	2200      	movs	r2, #0
 800342e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8003430:	4b13      	ldr	r3, [pc, #76]	; (8003480 <MX_SPI1_Init+0x68>)
 8003432:	2200      	movs	r2, #0
 8003434:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8003436:	4b12      	ldr	r3, [pc, #72]	; (8003480 <MX_SPI1_Init+0x68>)
 8003438:	2200      	movs	r2, #0
 800343a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800343c:	4b10      	ldr	r3, [pc, #64]	; (8003480 <MX_SPI1_Init+0x68>)
 800343e:	2200      	movs	r2, #0
 8003440:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8003442:	4b0f      	ldr	r3, [pc, #60]	; (8003480 <MX_SPI1_Init+0x68>)
 8003444:	2280      	movs	r2, #128	; 0x80
 8003446:	0092      	lsls	r2, r2, #2
 8003448:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800344a:	4b0d      	ldr	r3, [pc, #52]	; (8003480 <MX_SPI1_Init+0x68>)
 800344c:	2200      	movs	r2, #0
 800344e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003450:	4b0b      	ldr	r3, [pc, #44]	; (8003480 <MX_SPI1_Init+0x68>)
 8003452:	2200      	movs	r2, #0
 8003454:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8003456:	4b0a      	ldr	r3, [pc, #40]	; (8003480 <MX_SPI1_Init+0x68>)
 8003458:	2200      	movs	r2, #0
 800345a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800345c:	4b08      	ldr	r3, [pc, #32]	; (8003480 <MX_SPI1_Init+0x68>)
 800345e:	2200      	movs	r2, #0
 8003460:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8003462:	4b07      	ldr	r3, [pc, #28]	; (8003480 <MX_SPI1_Init+0x68>)
 8003464:	2207      	movs	r2, #7
 8003466:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8003468:	4b05      	ldr	r3, [pc, #20]	; (8003480 <MX_SPI1_Init+0x68>)
 800346a:	0018      	movs	r0, r3
 800346c:	f002 f9d2 	bl	8005814 <HAL_SPI_Init>
 8003470:	1e03      	subs	r3, r0, #0
 8003472:	d001      	beq.n	8003478 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8003474:	f000 f97a 	bl	800376c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8003478:	46c0      	nop			; (mov r8, r8)
 800347a:	46bd      	mov	sp, r7
 800347c:	bd80      	pop	{r7, pc}
 800347e:	46c0      	nop			; (mov r8, r8)
 8003480:	200002f0 	.word	0x200002f0
 8003484:	40013000 	.word	0x40013000

08003488 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8003488:	b580      	push	{r7, lr}
 800348a:	b082      	sub	sp, #8
 800348c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800348e:	003b      	movs	r3, r7
 8003490:	0018      	movs	r0, r3
 8003492:	2308      	movs	r3, #8
 8003494:	001a      	movs	r2, r3
 8003496:	2100      	movs	r1, #0
 8003498:	f004 fca4 	bl	8007de4 <memset>

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 800349c:	4b15      	ldr	r3, [pc, #84]	; (80034f4 <MX_TIM6_Init+0x6c>)
 800349e:	4a16      	ldr	r2, [pc, #88]	; (80034f8 <MX_TIM6_Init+0x70>)
 80034a0:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 0;
 80034a2:	4b14      	ldr	r3, [pc, #80]	; (80034f4 <MX_TIM6_Init+0x6c>)
 80034a4:	2200      	movs	r2, #0
 80034a6:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80034a8:	4b12      	ldr	r3, [pc, #72]	; (80034f4 <MX_TIM6_Init+0x6c>)
 80034aa:	2200      	movs	r2, #0
 80034ac:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 65535;
 80034ae:	4b11      	ldr	r3, [pc, #68]	; (80034f4 <MX_TIM6_Init+0x6c>)
 80034b0:	4a12      	ldr	r2, [pc, #72]	; (80034fc <MX_TIM6_Init+0x74>)
 80034b2:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80034b4:	4b0f      	ldr	r3, [pc, #60]	; (80034f4 <MX_TIM6_Init+0x6c>)
 80034b6:	2200      	movs	r2, #0
 80034b8:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80034ba:	4b0e      	ldr	r3, [pc, #56]	; (80034f4 <MX_TIM6_Init+0x6c>)
 80034bc:	0018      	movs	r0, r3
 80034be:	f002 ffd3 	bl	8006468 <HAL_TIM_Base_Init>
 80034c2:	1e03      	subs	r3, r0, #0
 80034c4:	d001      	beq.n	80034ca <MX_TIM6_Init+0x42>
  {
    Error_Handler();
 80034c6:	f000 f951 	bl	800376c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80034ca:	003b      	movs	r3, r7
 80034cc:	2200      	movs	r2, #0
 80034ce:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80034d0:	003b      	movs	r3, r7
 80034d2:	2200      	movs	r2, #0
 80034d4:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80034d6:	003a      	movs	r2, r7
 80034d8:	4b06      	ldr	r3, [pc, #24]	; (80034f4 <MX_TIM6_Init+0x6c>)
 80034da:	0011      	movs	r1, r2
 80034dc:	0018      	movs	r0, r3
 80034de:	f003 f857 	bl	8006590 <HAL_TIMEx_MasterConfigSynchronization>
 80034e2:	1e03      	subs	r3, r0, #0
 80034e4:	d001      	beq.n	80034ea <MX_TIM6_Init+0x62>
  {
    Error_Handler();
 80034e6:	f000 f941 	bl	800376c <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 80034ea:	46c0      	nop			; (mov r8, r8)
 80034ec:	46bd      	mov	sp, r7
 80034ee:	b002      	add	sp, #8
 80034f0:	bd80      	pop	{r7, pc}
 80034f2:	46c0      	nop			; (mov r8, r8)
 80034f4:	20000348 	.word	0x20000348
 80034f8:	40001000 	.word	0x40001000
 80034fc:	0000ffff 	.word	0x0000ffff

08003500 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003500:	b590      	push	{r4, r7, lr}
 8003502:	b08b      	sub	sp, #44	; 0x2c
 8003504:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003506:	2414      	movs	r4, #20
 8003508:	193b      	adds	r3, r7, r4
 800350a:	0018      	movs	r0, r3
 800350c:	2314      	movs	r3, #20
 800350e:	001a      	movs	r2, r3
 8003510:	2100      	movs	r1, #0
 8003512:	f004 fc67 	bl	8007de4 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003516:	4b90      	ldr	r3, [pc, #576]	; (8003758 <MX_GPIO_Init+0x258>)
 8003518:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800351a:	4b8f      	ldr	r3, [pc, #572]	; (8003758 <MX_GPIO_Init+0x258>)
 800351c:	2104      	movs	r1, #4
 800351e:	430a      	orrs	r2, r1
 8003520:	62da      	str	r2, [r3, #44]	; 0x2c
 8003522:	4b8d      	ldr	r3, [pc, #564]	; (8003758 <MX_GPIO_Init+0x258>)
 8003524:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003526:	2204      	movs	r2, #4
 8003528:	4013      	ands	r3, r2
 800352a:	613b      	str	r3, [r7, #16]
 800352c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800352e:	4b8a      	ldr	r3, [pc, #552]	; (8003758 <MX_GPIO_Init+0x258>)
 8003530:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003532:	4b89      	ldr	r3, [pc, #548]	; (8003758 <MX_GPIO_Init+0x258>)
 8003534:	2180      	movs	r1, #128	; 0x80
 8003536:	430a      	orrs	r2, r1
 8003538:	62da      	str	r2, [r3, #44]	; 0x2c
 800353a:	4b87      	ldr	r3, [pc, #540]	; (8003758 <MX_GPIO_Init+0x258>)
 800353c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800353e:	2280      	movs	r2, #128	; 0x80
 8003540:	4013      	ands	r3, r2
 8003542:	60fb      	str	r3, [r7, #12]
 8003544:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003546:	4b84      	ldr	r3, [pc, #528]	; (8003758 <MX_GPIO_Init+0x258>)
 8003548:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800354a:	4b83      	ldr	r3, [pc, #524]	; (8003758 <MX_GPIO_Init+0x258>)
 800354c:	2101      	movs	r1, #1
 800354e:	430a      	orrs	r2, r1
 8003550:	62da      	str	r2, [r3, #44]	; 0x2c
 8003552:	4b81      	ldr	r3, [pc, #516]	; (8003758 <MX_GPIO_Init+0x258>)
 8003554:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003556:	2201      	movs	r2, #1
 8003558:	4013      	ands	r3, r2
 800355a:	60bb      	str	r3, [r7, #8]
 800355c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800355e:	4b7e      	ldr	r3, [pc, #504]	; (8003758 <MX_GPIO_Init+0x258>)
 8003560:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003562:	4b7d      	ldr	r3, [pc, #500]	; (8003758 <MX_GPIO_Init+0x258>)
 8003564:	2102      	movs	r1, #2
 8003566:	430a      	orrs	r2, r1
 8003568:	62da      	str	r2, [r3, #44]	; 0x2c
 800356a:	4b7b      	ldr	r3, [pc, #492]	; (8003758 <MX_GPIO_Init+0x258>)
 800356c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800356e:	2202      	movs	r2, #2
 8003570:	4013      	ands	r3, r2
 8003572:	607b      	str	r3, [r7, #4]
 8003574:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, nRF_CSN_Pin|LED_GREEN_Pin, GPIO_PIN_SET);
 8003576:	4979      	ldr	r1, [pc, #484]	; (800375c <MX_GPIO_Init+0x25c>)
 8003578:	23a0      	movs	r3, #160	; 0xa0
 800357a:	05db      	lsls	r3, r3, #23
 800357c:	2201      	movs	r2, #1
 800357e:	0018      	movs	r0, r3
 8003580:	f001 f9eb 	bl	800495a <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(nRF_CE_GPIO_Port, nRF_CE_Pin, GPIO_PIN_RESET);
 8003584:	4b76      	ldr	r3, [pc, #472]	; (8003760 <MX_GPIO_Init+0x260>)
 8003586:	2200      	movs	r2, #0
 8003588:	2104      	movs	r1, #4
 800358a:	0018      	movs	r0, r3
 800358c:	f001 f9e5 	bl	800495a <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_RED_Pin|LED_BLUE_Pin, GPIO_PIN_SET);
 8003590:	4b73      	ldr	r3, [pc, #460]	; (8003760 <MX_GPIO_Init+0x260>)
 8003592:	2201      	movs	r2, #1
 8003594:	2118      	movs	r1, #24
 8003596:	0018      	movs	r0, r3
 8003598:	f001 f9df 	bl	800495a <HAL_GPIO_WritePin>

  /*Configure GPIO pins : Dev_ID2_Pin Dev_ID3_Pin Dev_ID4_Pin */
  GPIO_InitStruct.Pin = Dev_ID2_Pin|Dev_ID3_Pin|Dev_ID4_Pin;
 800359c:	193b      	adds	r3, r7, r4
 800359e:	22e0      	movs	r2, #224	; 0xe0
 80035a0:	0212      	lsls	r2, r2, #8
 80035a2:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80035a4:	193b      	adds	r3, r7, r4
 80035a6:	2200      	movs	r2, #0
 80035a8:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80035aa:	193b      	adds	r3, r7, r4
 80035ac:	2202      	movs	r2, #2
 80035ae:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80035b0:	193b      	adds	r3, r7, r4
 80035b2:	4a6c      	ldr	r2, [pc, #432]	; (8003764 <MX_GPIO_Init+0x264>)
 80035b4:	0019      	movs	r1, r3
 80035b6:	0010      	movs	r0, r2
 80035b8:	f001 f83c 	bl	8004634 <HAL_GPIO_Init>

  /*Configure GPIO pins : Dev_ID5_Pin Dev_ID6_Pin */
  GPIO_InitStruct.Pin = Dev_ID5_Pin|Dev_ID6_Pin;
 80035bc:	193b      	adds	r3, r7, r4
 80035be:	2203      	movs	r2, #3
 80035c0:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80035c2:	193b      	adds	r3, r7, r4
 80035c4:	2200      	movs	r2, #0
 80035c6:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80035c8:	193b      	adds	r3, r7, r4
 80035ca:	2202      	movs	r2, #2
 80035cc:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80035ce:	193b      	adds	r3, r7, r4
 80035d0:	4a65      	ldr	r2, [pc, #404]	; (8003768 <MX_GPIO_Init+0x268>)
 80035d2:	0019      	movs	r1, r3
 80035d4:	0010      	movs	r0, r2
 80035d6:	f001 f82d 	bl	8004634 <HAL_GPIO_Init>

  /*Configure GPIO pin : Dev_ID7_Pin */
  GPIO_InitStruct.Pin = Dev_ID7_Pin;
 80035da:	193b      	adds	r3, r7, r4
 80035dc:	2201      	movs	r2, #1
 80035de:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80035e0:	193b      	adds	r3, r7, r4
 80035e2:	2200      	movs	r2, #0
 80035e4:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80035e6:	193b      	adds	r3, r7, r4
 80035e8:	2202      	movs	r2, #2
 80035ea:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(Dev_ID7_GPIO_Port, &GPIO_InitStruct);
 80035ec:	193a      	adds	r2, r7, r4
 80035ee:	23a0      	movs	r3, #160	; 0xa0
 80035f0:	05db      	lsls	r3, r3, #23
 80035f2:	0011      	movs	r1, r2
 80035f4:	0018      	movs	r0, r3
 80035f6:	f001 f81d 	bl	8004634 <HAL_GPIO_Init>

  /*Configure GPIO pins : Key_IN4_Pin Key_IN2_Pin */
  GPIO_InitStruct.Pin = Key_IN4_Pin|Key_IN2_Pin;
 80035fa:	193b      	adds	r3, r7, r4
 80035fc:	2206      	movs	r2, #6
 80035fe:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8003600:	193b      	adds	r3, r7, r4
 8003602:	2288      	movs	r2, #136	; 0x88
 8003604:	0352      	lsls	r2, r2, #13
 8003606:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8003608:	193b      	adds	r3, r7, r4
 800360a:	2202      	movs	r2, #2
 800360c:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800360e:	193a      	adds	r2, r7, r4
 8003610:	23a0      	movs	r3, #160	; 0xa0
 8003612:	05db      	lsls	r3, r3, #23
 8003614:	0011      	movs	r1, r2
 8003616:	0018      	movs	r0, r3
 8003618:	f001 f80c 	bl	8004634 <HAL_GPIO_Init>

  /*Configure GPIO pin : nRF_CSN_Pin */
  GPIO_InitStruct.Pin = nRF_CSN_Pin;
 800361c:	193b      	adds	r3, r7, r4
 800361e:	2208      	movs	r2, #8
 8003620:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003622:	193b      	adds	r3, r7, r4
 8003624:	2201      	movs	r2, #1
 8003626:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003628:	193b      	adds	r3, r7, r4
 800362a:	2200      	movs	r2, #0
 800362c:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800362e:	193b      	adds	r3, r7, r4
 8003630:	2202      	movs	r2, #2
 8003632:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(nRF_CSN_GPIO_Port, &GPIO_InitStruct);
 8003634:	193a      	adds	r2, r7, r4
 8003636:	23a0      	movs	r3, #160	; 0xa0
 8003638:	05db      	lsls	r3, r3, #23
 800363a:	0011      	movs	r1, r2
 800363c:	0018      	movs	r0, r3
 800363e:	f000 fff9 	bl	8004634 <HAL_GPIO_Init>

  /*Configure GPIO pin : nRF_IRQ_Pin */
  GPIO_InitStruct.Pin = nRF_IRQ_Pin;
 8003642:	193b      	adds	r3, r7, r4
 8003644:	2210      	movs	r2, #16
 8003646:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8003648:	193b      	adds	r3, r7, r4
 800364a:	2284      	movs	r2, #132	; 0x84
 800364c:	0392      	lsls	r2, r2, #14
 800364e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003650:	193b      	adds	r3, r7, r4
 8003652:	2200      	movs	r2, #0
 8003654:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(nRF_IRQ_GPIO_Port, &GPIO_InitStruct);
 8003656:	193a      	adds	r2, r7, r4
 8003658:	23a0      	movs	r3, #160	; 0xa0
 800365a:	05db      	lsls	r3, r3, #23
 800365c:	0011      	movs	r1, r2
 800365e:	0018      	movs	r0, r3
 8003660:	f000 ffe8 	bl	8004634 <HAL_GPIO_Init>

  /*Configure GPIO pin : nRF_CE_Pin */
  GPIO_InitStruct.Pin = nRF_CE_Pin;
 8003664:	193b      	adds	r3, r7, r4
 8003666:	2204      	movs	r2, #4
 8003668:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800366a:	193b      	adds	r3, r7, r4
 800366c:	2201      	movs	r2, #1
 800366e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003670:	193b      	adds	r3, r7, r4
 8003672:	2200      	movs	r2, #0
 8003674:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003676:	193b      	adds	r3, r7, r4
 8003678:	2202      	movs	r2, #2
 800367a:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(nRF_CE_GPIO_Port, &GPIO_InitStruct);
 800367c:	193b      	adds	r3, r7, r4
 800367e:	4a38      	ldr	r2, [pc, #224]	; (8003760 <MX_GPIO_Init+0x260>)
 8003680:	0019      	movs	r1, r3
 8003682:	0010      	movs	r0, r2
 8003684:	f000 ffd6 	bl	8004634 <HAL_GPIO_Init>

  /*Configure GPIO pins : Key_IN1_Pin Key_IN3_Pin */
  GPIO_InitStruct.Pin = Key_IN1_Pin|Key_IN3_Pin;
 8003688:	0021      	movs	r1, r4
 800368a:	187b      	adds	r3, r7, r1
 800368c:	22c0      	movs	r2, #192	; 0xc0
 800368e:	0192      	lsls	r2, r2, #6
 8003690:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8003692:	187b      	adds	r3, r7, r1
 8003694:	2288      	movs	r2, #136	; 0x88
 8003696:	0352      	lsls	r2, r2, #13
 8003698:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800369a:	187b      	adds	r3, r7, r1
 800369c:	2202      	movs	r2, #2
 800369e:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80036a0:	000c      	movs	r4, r1
 80036a2:	187b      	adds	r3, r7, r1
 80036a4:	4a2e      	ldr	r2, [pc, #184]	; (8003760 <MX_GPIO_Init+0x260>)
 80036a6:	0019      	movs	r1, r3
 80036a8:	0010      	movs	r0, r2
 80036aa:	f000 ffc3 	bl	8004634 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_GREEN_Pin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin;
 80036ae:	0021      	movs	r1, r4
 80036b0:	187b      	adds	r3, r7, r1
 80036b2:	2280      	movs	r2, #128	; 0x80
 80036b4:	0212      	lsls	r2, r2, #8
 80036b6:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80036b8:	000c      	movs	r4, r1
 80036ba:	193b      	adds	r3, r7, r4
 80036bc:	2201      	movs	r2, #1
 80036be:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036c0:	193b      	adds	r3, r7, r4
 80036c2:	2200      	movs	r2, #0
 80036c4:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80036c6:	193b      	adds	r3, r7, r4
 80036c8:	2200      	movs	r2, #0
 80036ca:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LED_GREEN_GPIO_Port, &GPIO_InitStruct);
 80036cc:	193a      	adds	r2, r7, r4
 80036ce:	23a0      	movs	r3, #160	; 0xa0
 80036d0:	05db      	lsls	r3, r3, #23
 80036d2:	0011      	movs	r1, r2
 80036d4:	0018      	movs	r0, r3
 80036d6:	f000 ffad 	bl	8004634 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_RED_Pin LED_BLUE_Pin */
  GPIO_InitStruct.Pin = LED_RED_Pin|LED_BLUE_Pin;
 80036da:	193b      	adds	r3, r7, r4
 80036dc:	2218      	movs	r2, #24
 80036de:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80036e0:	193b      	adds	r3, r7, r4
 80036e2:	2201      	movs	r2, #1
 80036e4:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036e6:	193b      	adds	r3, r7, r4
 80036e8:	2200      	movs	r2, #0
 80036ea:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80036ec:	193b      	adds	r3, r7, r4
 80036ee:	2200      	movs	r2, #0
 80036f0:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80036f2:	193b      	adds	r3, r7, r4
 80036f4:	4a1a      	ldr	r2, [pc, #104]	; (8003760 <MX_GPIO_Init+0x260>)
 80036f6:	0019      	movs	r1, r3
 80036f8:	0010      	movs	r0, r2
 80036fa:	f000 ff9b 	bl	8004634 <HAL_GPIO_Init>

  /*Configure GPIO pins : Dev_ID0_Pin Dev_ID1_Pin */
  GPIO_InitStruct.Pin = Dev_ID0_Pin|Dev_ID1_Pin;
 80036fe:	0021      	movs	r1, r4
 8003700:	187b      	adds	r3, r7, r1
 8003702:	22c0      	movs	r2, #192	; 0xc0
 8003704:	0092      	lsls	r2, r2, #2
 8003706:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003708:	187b      	adds	r3, r7, r1
 800370a:	2200      	movs	r2, #0
 800370c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800370e:	187b      	adds	r3, r7, r1
 8003710:	2202      	movs	r2, #2
 8003712:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003714:	187b      	adds	r3, r7, r1
 8003716:	4a12      	ldr	r2, [pc, #72]	; (8003760 <MX_GPIO_Init+0x260>)
 8003718:	0019      	movs	r1, r3
 800371a:	0010      	movs	r0, r2
 800371c:	f000 ff8a 	bl	8004634 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_1_IRQn, 0, 0);
 8003720:	2200      	movs	r2, #0
 8003722:	2100      	movs	r1, #0
 8003724:	2005      	movs	r0, #5
 8003726:	f000 ff33 	bl	8004590 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_1_IRQn);
 800372a:	2005      	movs	r0, #5
 800372c:	f000 ff45 	bl	80045ba <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI2_3_IRQn, 0, 0);
 8003730:	2200      	movs	r2, #0
 8003732:	2100      	movs	r1, #0
 8003734:	2006      	movs	r0, #6
 8003736:	f000 ff2b 	bl	8004590 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_3_IRQn);
 800373a:	2006      	movs	r0, #6
 800373c:	f000 ff3d 	bl	80045ba <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 0, 0);
 8003740:	2200      	movs	r2, #0
 8003742:	2100      	movs	r1, #0
 8003744:	2007      	movs	r0, #7
 8003746:	f000 ff23 	bl	8004590 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 800374a:	2007      	movs	r0, #7
 800374c:	f000 ff35 	bl	80045ba <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8003750:	46c0      	nop			; (mov r8, r8)
 8003752:	46bd      	mov	sp, r7
 8003754:	b00b      	add	sp, #44	; 0x2c
 8003756:	bd90      	pop	{r4, r7, pc}
 8003758:	40021000 	.word	0x40021000
 800375c:	00008008 	.word	0x00008008
 8003760:	50000400 	.word	0x50000400
 8003764:	50000800 	.word	0x50000800
 8003768:	50001c00 	.word	0x50001c00

0800376c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800376c:	b580      	push	{r7, lr}
 800376e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003770:	b672      	cpsid	i
}
 8003772:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003774:	e7fe      	b.n	8003774 <Error_Handler+0x8>
	...

08003778 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003778:	b580      	push	{r7, lr}
 800377a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800377c:	4b07      	ldr	r3, [pc, #28]	; (800379c <HAL_MspInit+0x24>)
 800377e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003780:	4b06      	ldr	r3, [pc, #24]	; (800379c <HAL_MspInit+0x24>)
 8003782:	2101      	movs	r1, #1
 8003784:	430a      	orrs	r2, r1
 8003786:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 8003788:	4b04      	ldr	r3, [pc, #16]	; (800379c <HAL_MspInit+0x24>)
 800378a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800378c:	4b03      	ldr	r3, [pc, #12]	; (800379c <HAL_MspInit+0x24>)
 800378e:	2180      	movs	r1, #128	; 0x80
 8003790:	0549      	lsls	r1, r1, #21
 8003792:	430a      	orrs	r2, r1
 8003794:	639a      	str	r2, [r3, #56]	; 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003796:	46c0      	nop			; (mov r8, r8)
 8003798:	46bd      	mov	sp, r7
 800379a:	bd80      	pop	{r7, pc}
 800379c:	40021000 	.word	0x40021000

080037a0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80037a0:	b580      	push	{r7, lr}
 80037a2:	b082      	sub	sp, #8
 80037a4:	af00      	add	r7, sp, #0
 80037a6:	6078      	str	r0, [r7, #4]
  if(hadc->Instance==ADC1)
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	4a06      	ldr	r2, [pc, #24]	; (80037c8 <HAL_ADC_MspInit+0x28>)
 80037ae:	4293      	cmp	r3, r2
 80037b0:	d106      	bne.n	80037c0 <HAL_ADC_MspInit+0x20>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80037b2:	4b06      	ldr	r3, [pc, #24]	; (80037cc <HAL_ADC_MspInit+0x2c>)
 80037b4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80037b6:	4b05      	ldr	r3, [pc, #20]	; (80037cc <HAL_ADC_MspInit+0x2c>)
 80037b8:	2180      	movs	r1, #128	; 0x80
 80037ba:	0089      	lsls	r1, r1, #2
 80037bc:	430a      	orrs	r2, r1
 80037be:	635a      	str	r2, [r3, #52]	; 0x34
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80037c0:	46c0      	nop			; (mov r8, r8)
 80037c2:	46bd      	mov	sp, r7
 80037c4:	b002      	add	sp, #8
 80037c6:	bd80      	pop	{r7, pc}
 80037c8:	40012400 	.word	0x40012400
 80037cc:	40021000 	.word	0x40021000

080037d0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80037d0:	b590      	push	{r4, r7, lr}
 80037d2:	b089      	sub	sp, #36	; 0x24
 80037d4:	af00      	add	r7, sp, #0
 80037d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80037d8:	240c      	movs	r4, #12
 80037da:	193b      	adds	r3, r7, r4
 80037dc:	0018      	movs	r0, r3
 80037de:	2314      	movs	r3, #20
 80037e0:	001a      	movs	r2, r3
 80037e2:	2100      	movs	r1, #0
 80037e4:	f004 fafe 	bl	8007de4 <memset>
  if(huart->Instance==LPUART1)
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	4a18      	ldr	r2, [pc, #96]	; (8003850 <HAL_UART_MspInit+0x80>)
 80037ee:	4293      	cmp	r3, r2
 80037f0:	d129      	bne.n	8003846 <HAL_UART_MspInit+0x76>
  {
  /* USER CODE BEGIN LPUART1_MspInit 0 */

  /* USER CODE END LPUART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 80037f2:	4b18      	ldr	r3, [pc, #96]	; (8003854 <HAL_UART_MspInit+0x84>)
 80037f4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80037f6:	4b17      	ldr	r3, [pc, #92]	; (8003854 <HAL_UART_MspInit+0x84>)
 80037f8:	2180      	movs	r1, #128	; 0x80
 80037fa:	02c9      	lsls	r1, r1, #11
 80037fc:	430a      	orrs	r2, r1
 80037fe:	639a      	str	r2, [r3, #56]	; 0x38

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003800:	4b14      	ldr	r3, [pc, #80]	; (8003854 <HAL_UART_MspInit+0x84>)
 8003802:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003804:	4b13      	ldr	r3, [pc, #76]	; (8003854 <HAL_UART_MspInit+0x84>)
 8003806:	2102      	movs	r1, #2
 8003808:	430a      	orrs	r2, r1
 800380a:	62da      	str	r2, [r3, #44]	; 0x2c
 800380c:	4b11      	ldr	r3, [pc, #68]	; (8003854 <HAL_UART_MspInit+0x84>)
 800380e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003810:	2202      	movs	r2, #2
 8003812:	4013      	ands	r3, r2
 8003814:	60bb      	str	r3, [r7, #8]
 8003816:	68bb      	ldr	r3, [r7, #8]
    /**LPUART1 GPIO Configuration
    PB10     ------> LPUART1_TX
    PB11     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8003818:	193b      	adds	r3, r7, r4
 800381a:	22c0      	movs	r2, #192	; 0xc0
 800381c:	0112      	lsls	r2, r2, #4
 800381e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003820:	0021      	movs	r1, r4
 8003822:	187b      	adds	r3, r7, r1
 8003824:	2202      	movs	r2, #2
 8003826:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003828:	187b      	adds	r3, r7, r1
 800382a:	2200      	movs	r2, #0
 800382c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800382e:	187b      	adds	r3, r7, r1
 8003830:	2203      	movs	r2, #3
 8003832:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_LPUART1;
 8003834:	187b      	adds	r3, r7, r1
 8003836:	2204      	movs	r2, #4
 8003838:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800383a:	187b      	adds	r3, r7, r1
 800383c:	4a06      	ldr	r2, [pc, #24]	; (8003858 <HAL_UART_MspInit+0x88>)
 800383e:	0019      	movs	r1, r3
 8003840:	0010      	movs	r0, r2
 8003842:	f000 fef7 	bl	8004634 <HAL_GPIO_Init>
  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }

}
 8003846:	46c0      	nop			; (mov r8, r8)
 8003848:	46bd      	mov	sp, r7
 800384a:	b009      	add	sp, #36	; 0x24
 800384c:	bd90      	pop	{r4, r7, pc}
 800384e:	46c0      	nop			; (mov r8, r8)
 8003850:	40004800 	.word	0x40004800
 8003854:	40021000 	.word	0x40021000
 8003858:	50000400 	.word	0x50000400

0800385c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800385c:	b590      	push	{r4, r7, lr}
 800385e:	b089      	sub	sp, #36	; 0x24
 8003860:	af00      	add	r7, sp, #0
 8003862:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003864:	240c      	movs	r4, #12
 8003866:	193b      	adds	r3, r7, r4
 8003868:	0018      	movs	r0, r3
 800386a:	2314      	movs	r3, #20
 800386c:	001a      	movs	r2, r3
 800386e:	2100      	movs	r1, #0
 8003870:	f004 fab8 	bl	8007de4 <memset>
  if(hspi->Instance==SPI1)
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	4a18      	ldr	r2, [pc, #96]	; (80038dc <HAL_SPI_MspInit+0x80>)
 800387a:	4293      	cmp	r3, r2
 800387c:	d129      	bne.n	80038d2 <HAL_SPI_MspInit+0x76>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800387e:	4b18      	ldr	r3, [pc, #96]	; (80038e0 <HAL_SPI_MspInit+0x84>)
 8003880:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003882:	4b17      	ldr	r3, [pc, #92]	; (80038e0 <HAL_SPI_MspInit+0x84>)
 8003884:	2180      	movs	r1, #128	; 0x80
 8003886:	0149      	lsls	r1, r1, #5
 8003888:	430a      	orrs	r2, r1
 800388a:	635a      	str	r2, [r3, #52]	; 0x34

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800388c:	4b14      	ldr	r3, [pc, #80]	; (80038e0 <HAL_SPI_MspInit+0x84>)
 800388e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003890:	4b13      	ldr	r3, [pc, #76]	; (80038e0 <HAL_SPI_MspInit+0x84>)
 8003892:	2101      	movs	r1, #1
 8003894:	430a      	orrs	r2, r1
 8003896:	62da      	str	r2, [r3, #44]	; 0x2c
 8003898:	4b11      	ldr	r3, [pc, #68]	; (80038e0 <HAL_SPI_MspInit+0x84>)
 800389a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800389c:	2201      	movs	r2, #1
 800389e:	4013      	ands	r3, r2
 80038a0:	60bb      	str	r3, [r7, #8]
 80038a2:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = nRF_SCK_Pin|nRF_MISO_Pin|nRF_MOSI_Pin;
 80038a4:	0021      	movs	r1, r4
 80038a6:	187b      	adds	r3, r7, r1
 80038a8:	22e0      	movs	r2, #224	; 0xe0
 80038aa:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80038ac:	187b      	adds	r3, r7, r1
 80038ae:	2202      	movs	r2, #2
 80038b0:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80038b2:	187b      	adds	r3, r7, r1
 80038b4:	2200      	movs	r2, #0
 80038b6:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80038b8:	187b      	adds	r3, r7, r1
 80038ba:	2203      	movs	r2, #3
 80038bc:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 80038be:	187b      	adds	r3, r7, r1
 80038c0:	2200      	movs	r2, #0
 80038c2:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80038c4:	187a      	adds	r2, r7, r1
 80038c6:	23a0      	movs	r3, #160	; 0xa0
 80038c8:	05db      	lsls	r3, r3, #23
 80038ca:	0011      	movs	r1, r2
 80038cc:	0018      	movs	r0, r3
 80038ce:	f000 feb1 	bl	8004634 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80038d2:	46c0      	nop			; (mov r8, r8)
 80038d4:	46bd      	mov	sp, r7
 80038d6:	b009      	add	sp, #36	; 0x24
 80038d8:	bd90      	pop	{r4, r7, pc}
 80038da:	46c0      	nop			; (mov r8, r8)
 80038dc:	40013000 	.word	0x40013000
 80038e0:	40021000 	.word	0x40021000

080038e4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80038e4:	b580      	push	{r7, lr}
 80038e6:	b082      	sub	sp, #8
 80038e8:	af00      	add	r7, sp, #0
 80038ea:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	4a06      	ldr	r2, [pc, #24]	; (800390c <HAL_TIM_Base_MspInit+0x28>)
 80038f2:	4293      	cmp	r3, r2
 80038f4:	d105      	bne.n	8003902 <HAL_TIM_Base_MspInit+0x1e>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 80038f6:	4b06      	ldr	r3, [pc, #24]	; (8003910 <HAL_TIM_Base_MspInit+0x2c>)
 80038f8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80038fa:	4b05      	ldr	r3, [pc, #20]	; (8003910 <HAL_TIM_Base_MspInit+0x2c>)
 80038fc:	2110      	movs	r1, #16
 80038fe:	430a      	orrs	r2, r1
 8003900:	639a      	str	r2, [r3, #56]	; 0x38
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 8003902:	46c0      	nop			; (mov r8, r8)
 8003904:	46bd      	mov	sp, r7
 8003906:	b002      	add	sp, #8
 8003908:	bd80      	pop	{r7, pc}
 800390a:	46c0      	nop			; (mov r8, r8)
 800390c:	40001000 	.word	0x40001000
 8003910:	40021000 	.word	0x40021000

08003914 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003914:	b580      	push	{r7, lr}
 8003916:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003918:	e7fe      	b.n	8003918 <NMI_Handler+0x4>

0800391a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800391a:	b580      	push	{r7, lr}
 800391c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800391e:	e7fe      	b.n	800391e <HardFault_Handler+0x4>

08003920 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003920:	b580      	push	{r7, lr}
 8003922:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8003924:	46c0      	nop			; (mov r8, r8)
 8003926:	46bd      	mov	sp, r7
 8003928:	bd80      	pop	{r7, pc}

0800392a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800392a:	b580      	push	{r7, lr}
 800392c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800392e:	46c0      	nop			; (mov r8, r8)
 8003930:	46bd      	mov	sp, r7
 8003932:	bd80      	pop	{r7, pc}

08003934 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003934:	b580      	push	{r7, lr}
 8003936:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003938:	f000 f966 	bl	8003c08 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800393c:	46c0      	nop			; (mov r8, r8)
 800393e:	46bd      	mov	sp, r7
 8003940:	bd80      	pop	{r7, pc}

08003942 <EXTI0_1_IRQHandler>:

/**
  * @brief This function handles EXTI line 0 and line 1 interrupts.
  */
void EXTI0_1_IRQHandler(void)
{
 8003942:	b580      	push	{r7, lr}
 8003944:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_1_IRQn 0 */

  /* USER CODE END EXTI0_1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Key_IN4_Pin);
 8003946:	2002      	movs	r0, #2
 8003948:	f001 f824 	bl	8004994 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_1_IRQn 1 */

  /* USER CODE END EXTI0_1_IRQn 1 */
}
 800394c:	46c0      	nop			; (mov r8, r8)
 800394e:	46bd      	mov	sp, r7
 8003950:	bd80      	pop	{r7, pc}

08003952 <EXTI2_3_IRQHandler>:

/**
  * @brief This function handles EXTI line 2 and line 3 interrupts.
  */
void EXTI2_3_IRQHandler(void)
{
 8003952:	b580      	push	{r7, lr}
 8003954:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_3_IRQn 0 */

  /* USER CODE END EXTI2_3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Key_IN2_Pin);
 8003956:	2004      	movs	r0, #4
 8003958:	f001 f81c 	bl	8004994 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_3_IRQn 1 */

  /* USER CODE END EXTI2_3_IRQn 1 */
}
 800395c:	46c0      	nop			; (mov r8, r8)
 800395e:	46bd      	mov	sp, r7
 8003960:	bd80      	pop	{r7, pc}

08003962 <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 8003962:	b580      	push	{r7, lr}
 8003964:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(nRF_IRQ_Pin);
 8003966:	2010      	movs	r0, #16
 8003968:	f001 f814 	bl	8004994 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(Key_IN1_Pin);
 800396c:	2380      	movs	r3, #128	; 0x80
 800396e:	015b      	lsls	r3, r3, #5
 8003970:	0018      	movs	r0, r3
 8003972:	f001 f80f 	bl	8004994 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(Key_IN3_Pin);
 8003976:	2380      	movs	r3, #128	; 0x80
 8003978:	019b      	lsls	r3, r3, #6
 800397a:	0018      	movs	r0, r3
 800397c:	f001 f80a 	bl	8004994 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 8003980:	46c0      	nop			; (mov r8, r8)
 8003982:	46bd      	mov	sp, r7
 8003984:	bd80      	pop	{r7, pc}

08003986 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003986:	b580      	push	{r7, lr}
 8003988:	af00      	add	r7, sp, #0
  return 1;
 800398a:	2301      	movs	r3, #1
}
 800398c:	0018      	movs	r0, r3
 800398e:	46bd      	mov	sp, r7
 8003990:	bd80      	pop	{r7, pc}

08003992 <_kill>:

int _kill(int pid, int sig)
{
 8003992:	b580      	push	{r7, lr}
 8003994:	b082      	sub	sp, #8
 8003996:	af00      	add	r7, sp, #0
 8003998:	6078      	str	r0, [r7, #4]
 800399a:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800399c:	f004 f9f8 	bl	8007d90 <__errno>
 80039a0:	0003      	movs	r3, r0
 80039a2:	2216      	movs	r2, #22
 80039a4:	601a      	str	r2, [r3, #0]
  return -1;
 80039a6:	2301      	movs	r3, #1
 80039a8:	425b      	negs	r3, r3
}
 80039aa:	0018      	movs	r0, r3
 80039ac:	46bd      	mov	sp, r7
 80039ae:	b002      	add	sp, #8
 80039b0:	bd80      	pop	{r7, pc}

080039b2 <_exit>:

void _exit (int status)
{
 80039b2:	b580      	push	{r7, lr}
 80039b4:	b082      	sub	sp, #8
 80039b6:	af00      	add	r7, sp, #0
 80039b8:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80039ba:	2301      	movs	r3, #1
 80039bc:	425a      	negs	r2, r3
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	0011      	movs	r1, r2
 80039c2:	0018      	movs	r0, r3
 80039c4:	f7ff ffe5 	bl	8003992 <_kill>
  while (1) {}    /* Make sure we hang here */
 80039c8:	e7fe      	b.n	80039c8 <_exit+0x16>

080039ca <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80039ca:	b580      	push	{r7, lr}
 80039cc:	b086      	sub	sp, #24
 80039ce:	af00      	add	r7, sp, #0
 80039d0:	60f8      	str	r0, [r7, #12]
 80039d2:	60b9      	str	r1, [r7, #8]
 80039d4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80039d6:	2300      	movs	r3, #0
 80039d8:	617b      	str	r3, [r7, #20]
 80039da:	e00a      	b.n	80039f2 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80039dc:	e000      	b.n	80039e0 <_read+0x16>
 80039de:	bf00      	nop
 80039e0:	0001      	movs	r1, r0
 80039e2:	68bb      	ldr	r3, [r7, #8]
 80039e4:	1c5a      	adds	r2, r3, #1
 80039e6:	60ba      	str	r2, [r7, #8]
 80039e8:	b2ca      	uxtb	r2, r1
 80039ea:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80039ec:	697b      	ldr	r3, [r7, #20]
 80039ee:	3301      	adds	r3, #1
 80039f0:	617b      	str	r3, [r7, #20]
 80039f2:	697a      	ldr	r2, [r7, #20]
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	429a      	cmp	r2, r3
 80039f8:	dbf0      	blt.n	80039dc <_read+0x12>
  }

  return len;
 80039fa:	687b      	ldr	r3, [r7, #4]
}
 80039fc:	0018      	movs	r0, r3
 80039fe:	46bd      	mov	sp, r7
 8003a00:	b006      	add	sp, #24
 8003a02:	bd80      	pop	{r7, pc}

08003a04 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003a04:	b580      	push	{r7, lr}
 8003a06:	b086      	sub	sp, #24
 8003a08:	af00      	add	r7, sp, #0
 8003a0a:	60f8      	str	r0, [r7, #12]
 8003a0c:	60b9      	str	r1, [r7, #8]
 8003a0e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003a10:	2300      	movs	r3, #0
 8003a12:	617b      	str	r3, [r7, #20]
 8003a14:	e009      	b.n	8003a2a <_write+0x26>
  {
    __io_putchar(*ptr++);
 8003a16:	68bb      	ldr	r3, [r7, #8]
 8003a18:	1c5a      	adds	r2, r3, #1
 8003a1a:	60ba      	str	r2, [r7, #8]
 8003a1c:	781b      	ldrb	r3, [r3, #0]
 8003a1e:	0018      	movs	r0, r3
 8003a20:	e000      	b.n	8003a24 <_write+0x20>
 8003a22:	bf00      	nop
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003a24:	697b      	ldr	r3, [r7, #20]
 8003a26:	3301      	adds	r3, #1
 8003a28:	617b      	str	r3, [r7, #20]
 8003a2a:	697a      	ldr	r2, [r7, #20]
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	429a      	cmp	r2, r3
 8003a30:	dbf1      	blt.n	8003a16 <_write+0x12>
  }
  return len;
 8003a32:	687b      	ldr	r3, [r7, #4]
}
 8003a34:	0018      	movs	r0, r3
 8003a36:	46bd      	mov	sp, r7
 8003a38:	b006      	add	sp, #24
 8003a3a:	bd80      	pop	{r7, pc}

08003a3c <_close>:

int _close(int file)
{
 8003a3c:	b580      	push	{r7, lr}
 8003a3e:	b082      	sub	sp, #8
 8003a40:	af00      	add	r7, sp, #0
 8003a42:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8003a44:	2301      	movs	r3, #1
 8003a46:	425b      	negs	r3, r3
}
 8003a48:	0018      	movs	r0, r3
 8003a4a:	46bd      	mov	sp, r7
 8003a4c:	b002      	add	sp, #8
 8003a4e:	bd80      	pop	{r7, pc}

08003a50 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003a50:	b580      	push	{r7, lr}
 8003a52:	b082      	sub	sp, #8
 8003a54:	af00      	add	r7, sp, #0
 8003a56:	6078      	str	r0, [r7, #4]
 8003a58:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8003a5a:	683b      	ldr	r3, [r7, #0]
 8003a5c:	2280      	movs	r2, #128	; 0x80
 8003a5e:	0192      	lsls	r2, r2, #6
 8003a60:	605a      	str	r2, [r3, #4]
  return 0;
 8003a62:	2300      	movs	r3, #0
}
 8003a64:	0018      	movs	r0, r3
 8003a66:	46bd      	mov	sp, r7
 8003a68:	b002      	add	sp, #8
 8003a6a:	bd80      	pop	{r7, pc}

08003a6c <_isatty>:

int _isatty(int file)
{
 8003a6c:	b580      	push	{r7, lr}
 8003a6e:	b082      	sub	sp, #8
 8003a70:	af00      	add	r7, sp, #0
 8003a72:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8003a74:	2301      	movs	r3, #1
}
 8003a76:	0018      	movs	r0, r3
 8003a78:	46bd      	mov	sp, r7
 8003a7a:	b002      	add	sp, #8
 8003a7c:	bd80      	pop	{r7, pc}

08003a7e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003a7e:	b580      	push	{r7, lr}
 8003a80:	b084      	sub	sp, #16
 8003a82:	af00      	add	r7, sp, #0
 8003a84:	60f8      	str	r0, [r7, #12]
 8003a86:	60b9      	str	r1, [r7, #8]
 8003a88:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8003a8a:	2300      	movs	r3, #0
}
 8003a8c:	0018      	movs	r0, r3
 8003a8e:	46bd      	mov	sp, r7
 8003a90:	b004      	add	sp, #16
 8003a92:	bd80      	pop	{r7, pc}

08003a94 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003a94:	b580      	push	{r7, lr}
 8003a96:	b086      	sub	sp, #24
 8003a98:	af00      	add	r7, sp, #0
 8003a9a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003a9c:	4a14      	ldr	r2, [pc, #80]	; (8003af0 <_sbrk+0x5c>)
 8003a9e:	4b15      	ldr	r3, [pc, #84]	; (8003af4 <_sbrk+0x60>)
 8003aa0:	1ad3      	subs	r3, r2, r3
 8003aa2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003aa4:	697b      	ldr	r3, [r7, #20]
 8003aa6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003aa8:	4b13      	ldr	r3, [pc, #76]	; (8003af8 <_sbrk+0x64>)
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d102      	bne.n	8003ab6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003ab0:	4b11      	ldr	r3, [pc, #68]	; (8003af8 <_sbrk+0x64>)
 8003ab2:	4a12      	ldr	r2, [pc, #72]	; (8003afc <_sbrk+0x68>)
 8003ab4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003ab6:	4b10      	ldr	r3, [pc, #64]	; (8003af8 <_sbrk+0x64>)
 8003ab8:	681a      	ldr	r2, [r3, #0]
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	18d3      	adds	r3, r2, r3
 8003abe:	693a      	ldr	r2, [r7, #16]
 8003ac0:	429a      	cmp	r2, r3
 8003ac2:	d207      	bcs.n	8003ad4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003ac4:	f004 f964 	bl	8007d90 <__errno>
 8003ac8:	0003      	movs	r3, r0
 8003aca:	220c      	movs	r2, #12
 8003acc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003ace:	2301      	movs	r3, #1
 8003ad0:	425b      	negs	r3, r3
 8003ad2:	e009      	b.n	8003ae8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003ad4:	4b08      	ldr	r3, [pc, #32]	; (8003af8 <_sbrk+0x64>)
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003ada:	4b07      	ldr	r3, [pc, #28]	; (8003af8 <_sbrk+0x64>)
 8003adc:	681a      	ldr	r2, [r3, #0]
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	18d2      	adds	r2, r2, r3
 8003ae2:	4b05      	ldr	r3, [pc, #20]	; (8003af8 <_sbrk+0x64>)
 8003ae4:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8003ae6:	68fb      	ldr	r3, [r7, #12]
}
 8003ae8:	0018      	movs	r0, r3
 8003aea:	46bd      	mov	sp, r7
 8003aec:	b006      	add	sp, #24
 8003aee:	bd80      	pop	{r7, pc}
 8003af0:	20002000 	.word	0x20002000
 8003af4:	00000400 	.word	0x00000400
 8003af8:	200003ac 	.word	0x200003ac
 8003afc:	200003c8 	.word	0x200003c8

08003b00 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8003b00:	b580      	push	{r7, lr}
 8003b02:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003b04:	46c0      	nop			; (mov r8, r8)
 8003b06:	46bd      	mov	sp, r7
 8003b08:	bd80      	pop	{r7, pc}
	...

08003b0c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 8003b0c:	480d      	ldr	r0, [pc, #52]	; (8003b44 <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 8003b0e:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8003b10:	f7ff fff6 	bl	8003b00 <SystemInit>
  
/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003b14:	480c      	ldr	r0, [pc, #48]	; (8003b48 <LoopForever+0x6>)
  ldr r1, =_edata
 8003b16:	490d      	ldr	r1, [pc, #52]	; (8003b4c <LoopForever+0xa>)
  ldr r2, =_sidata
 8003b18:	4a0d      	ldr	r2, [pc, #52]	; (8003b50 <LoopForever+0xe>)
  movs r3, #0
 8003b1a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003b1c:	e002      	b.n	8003b24 <LoopCopyDataInit>

08003b1e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003b1e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003b20:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003b22:	3304      	adds	r3, #4

08003b24 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003b24:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003b26:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003b28:	d3f9      	bcc.n	8003b1e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003b2a:	4a0a      	ldr	r2, [pc, #40]	; (8003b54 <LoopForever+0x12>)
  ldr r4, =_ebss
 8003b2c:	4c0a      	ldr	r4, [pc, #40]	; (8003b58 <LoopForever+0x16>)
  movs r3, #0
 8003b2e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003b30:	e001      	b.n	8003b36 <LoopFillZerobss>

08003b32 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003b32:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003b34:	3204      	adds	r2, #4

08003b36 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003b36:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003b38:	d3fb      	bcc.n	8003b32 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8003b3a:	f004 f92f 	bl	8007d9c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003b3e:	f7ff f99f 	bl	8002e80 <main>

08003b42 <LoopForever>:

LoopForever:
    b LoopForever
 8003b42:	e7fe      	b.n	8003b42 <LoopForever>
   ldr   r0, =_estack
 8003b44:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8003b48:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003b4c:	200001f0 	.word	0x200001f0
  ldr r2, =_sidata
 8003b50:	0800d20c 	.word	0x0800d20c
  ldr r2, =_sbss
 8003b54:	200001f0 	.word	0x200001f0
  ldr r4, =_ebss
 8003b58:	200003c4 	.word	0x200003c4

08003b5c <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003b5c:	e7fe      	b.n	8003b5c <ADC1_COMP_IRQHandler>
	...

08003b60 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003b60:	b580      	push	{r7, lr}
 8003b62:	b082      	sub	sp, #8
 8003b64:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8003b66:	1dfb      	adds	r3, r7, #7
 8003b68:	2200      	movs	r2, #0
 8003b6a:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8003b6c:	4b0b      	ldr	r3, [pc, #44]	; (8003b9c <HAL_Init+0x3c>)
 8003b6e:	681a      	ldr	r2, [r3, #0]
 8003b70:	4b0a      	ldr	r3, [pc, #40]	; (8003b9c <HAL_Init+0x3c>)
 8003b72:	2140      	movs	r1, #64	; 0x40
 8003b74:	430a      	orrs	r2, r1
 8003b76:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003b78:	2003      	movs	r0, #3
 8003b7a:	f000 f811 	bl	8003ba0 <HAL_InitTick>
 8003b7e:	1e03      	subs	r3, r0, #0
 8003b80:	d003      	beq.n	8003b8a <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 8003b82:	1dfb      	adds	r3, r7, #7
 8003b84:	2201      	movs	r2, #1
 8003b86:	701a      	strb	r2, [r3, #0]
 8003b88:	e001      	b.n	8003b8e <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8003b8a:	f7ff fdf5 	bl	8003778 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8003b8e:	1dfb      	adds	r3, r7, #7
 8003b90:	781b      	ldrb	r3, [r3, #0]
}
 8003b92:	0018      	movs	r0, r3
 8003b94:	46bd      	mov	sp, r7
 8003b96:	b002      	add	sp, #8
 8003b98:	bd80      	pop	{r7, pc}
 8003b9a:	46c0      	nop			; (mov r8, r8)
 8003b9c:	40022000 	.word	0x40022000

08003ba0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003ba0:	b590      	push	{r4, r7, lr}
 8003ba2:	b083      	sub	sp, #12
 8003ba4:	af00      	add	r7, sp, #0
 8003ba6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003ba8:	4b14      	ldr	r3, [pc, #80]	; (8003bfc <HAL_InitTick+0x5c>)
 8003baa:	681c      	ldr	r4, [r3, #0]
 8003bac:	4b14      	ldr	r3, [pc, #80]	; (8003c00 <HAL_InitTick+0x60>)
 8003bae:	781b      	ldrb	r3, [r3, #0]
 8003bb0:	0019      	movs	r1, r3
 8003bb2:	23fa      	movs	r3, #250	; 0xfa
 8003bb4:	0098      	lsls	r0, r3, #2
 8003bb6:	f7fc fac3 	bl	8000140 <__udivsi3>
 8003bba:	0003      	movs	r3, r0
 8003bbc:	0019      	movs	r1, r3
 8003bbe:	0020      	movs	r0, r4
 8003bc0:	f7fc fabe 	bl	8000140 <__udivsi3>
 8003bc4:	0003      	movs	r3, r0
 8003bc6:	0018      	movs	r0, r3
 8003bc8:	f000 fd17 	bl	80045fa <HAL_SYSTICK_Config>
 8003bcc:	1e03      	subs	r3, r0, #0
 8003bce:	d001      	beq.n	8003bd4 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8003bd0:	2301      	movs	r3, #1
 8003bd2:	e00f      	b.n	8003bf4 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	2b03      	cmp	r3, #3
 8003bd8:	d80b      	bhi.n	8003bf2 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003bda:	6879      	ldr	r1, [r7, #4]
 8003bdc:	2301      	movs	r3, #1
 8003bde:	425b      	negs	r3, r3
 8003be0:	2200      	movs	r2, #0
 8003be2:	0018      	movs	r0, r3
 8003be4:	f000 fcd4 	bl	8004590 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003be8:	4b06      	ldr	r3, [pc, #24]	; (8003c04 <HAL_InitTick+0x64>)
 8003bea:	687a      	ldr	r2, [r7, #4]
 8003bec:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003bee:	2300      	movs	r3, #0
 8003bf0:	e000      	b.n	8003bf4 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8003bf2:	2301      	movs	r3, #1
}
 8003bf4:	0018      	movs	r0, r3
 8003bf6:	46bd      	mov	sp, r7
 8003bf8:	b003      	add	sp, #12
 8003bfa:	bd90      	pop	{r4, r7, pc}
 8003bfc:	20000010 	.word	0x20000010
 8003c00:	20000018 	.word	0x20000018
 8003c04:	20000014 	.word	0x20000014

08003c08 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003c08:	b580      	push	{r7, lr}
 8003c0a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003c0c:	4b05      	ldr	r3, [pc, #20]	; (8003c24 <HAL_IncTick+0x1c>)
 8003c0e:	781b      	ldrb	r3, [r3, #0]
 8003c10:	001a      	movs	r2, r3
 8003c12:	4b05      	ldr	r3, [pc, #20]	; (8003c28 <HAL_IncTick+0x20>)
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	18d2      	adds	r2, r2, r3
 8003c18:	4b03      	ldr	r3, [pc, #12]	; (8003c28 <HAL_IncTick+0x20>)
 8003c1a:	601a      	str	r2, [r3, #0]
}
 8003c1c:	46c0      	nop			; (mov r8, r8)
 8003c1e:	46bd      	mov	sp, r7
 8003c20:	bd80      	pop	{r7, pc}
 8003c22:	46c0      	nop			; (mov r8, r8)
 8003c24:	20000018 	.word	0x20000018
 8003c28:	200003b0 	.word	0x200003b0

08003c2c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003c2c:	b580      	push	{r7, lr}
 8003c2e:	af00      	add	r7, sp, #0
  return uwTick;
 8003c30:	4b02      	ldr	r3, [pc, #8]	; (8003c3c <HAL_GetTick+0x10>)
 8003c32:	681b      	ldr	r3, [r3, #0]
}
 8003c34:	0018      	movs	r0, r3
 8003c36:	46bd      	mov	sp, r7
 8003c38:	bd80      	pop	{r7, pc}
 8003c3a:	46c0      	nop			; (mov r8, r8)
 8003c3c:	200003b0 	.word	0x200003b0

08003c40 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003c40:	b580      	push	{r7, lr}
 8003c42:	b084      	sub	sp, #16
 8003c44:	af00      	add	r7, sp, #0
 8003c46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003c48:	f7ff fff0 	bl	8003c2c <HAL_GetTick>
 8003c4c:	0003      	movs	r3, r0
 8003c4e:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	3301      	adds	r3, #1
 8003c58:	d005      	beq.n	8003c66 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003c5a:	4b0a      	ldr	r3, [pc, #40]	; (8003c84 <HAL_Delay+0x44>)
 8003c5c:	781b      	ldrb	r3, [r3, #0]
 8003c5e:	001a      	movs	r2, r3
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	189b      	adds	r3, r3, r2
 8003c64:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8003c66:	46c0      	nop			; (mov r8, r8)
 8003c68:	f7ff ffe0 	bl	8003c2c <HAL_GetTick>
 8003c6c:	0002      	movs	r2, r0
 8003c6e:	68bb      	ldr	r3, [r7, #8]
 8003c70:	1ad3      	subs	r3, r2, r3
 8003c72:	68fa      	ldr	r2, [r7, #12]
 8003c74:	429a      	cmp	r2, r3
 8003c76:	d8f7      	bhi.n	8003c68 <HAL_Delay+0x28>
  {
  }
}
 8003c78:	46c0      	nop			; (mov r8, r8)
 8003c7a:	46c0      	nop			; (mov r8, r8)
 8003c7c:	46bd      	mov	sp, r7
 8003c7e:	b004      	add	sp, #16
 8003c80:	bd80      	pop	{r7, pc}
 8003c82:	46c0      	nop			; (mov r8, r8)
 8003c84:	20000018 	.word	0x20000018

08003c88 <HAL_SuspendTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_SuspendTick(void)
{
 8003c88:	b580      	push	{r7, lr}
 8003c8a:	af00      	add	r7, sp, #0
  /* Disable SysTick Interrupt */
  SysTick->CTRL &= ~SysTick_CTRL_TICKINT_Msk;
 8003c8c:	4b04      	ldr	r3, [pc, #16]	; (8003ca0 <HAL_SuspendTick+0x18>)
 8003c8e:	681a      	ldr	r2, [r3, #0]
 8003c90:	4b03      	ldr	r3, [pc, #12]	; (8003ca0 <HAL_SuspendTick+0x18>)
 8003c92:	2102      	movs	r1, #2
 8003c94:	438a      	bics	r2, r1
 8003c96:	601a      	str	r2, [r3, #0]
}
 8003c98:	46c0      	nop			; (mov r8, r8)
 8003c9a:	46bd      	mov	sp, r7
 8003c9c:	bd80      	pop	{r7, pc}
 8003c9e:	46c0      	nop			; (mov r8, r8)
 8003ca0:	e000e010 	.word	0xe000e010

08003ca4 <HAL_ResumeTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_ResumeTick(void)
{
 8003ca4:	b580      	push	{r7, lr}
 8003ca6:	af00      	add	r7, sp, #0
  /* Enable SysTick Interrupt */
  SysTick->CTRL  |= SysTick_CTRL_TICKINT_Msk;
 8003ca8:	4b04      	ldr	r3, [pc, #16]	; (8003cbc <HAL_ResumeTick+0x18>)
 8003caa:	681a      	ldr	r2, [r3, #0]
 8003cac:	4b03      	ldr	r3, [pc, #12]	; (8003cbc <HAL_ResumeTick+0x18>)
 8003cae:	2102      	movs	r1, #2
 8003cb0:	430a      	orrs	r2, r1
 8003cb2:	601a      	str	r2, [r3, #0]
}
 8003cb4:	46c0      	nop			; (mov r8, r8)
 8003cb6:	46bd      	mov	sp, r7
 8003cb8:	bd80      	pop	{r7, pc}
 8003cba:	46c0      	nop			; (mov r8, r8)
 8003cbc:	e000e010 	.word	0xe000e010

08003cc0 <HAL_ADC_Init>:
  *         function "HAL_ADCEx_EnableVREFINTTempSensor()" must be called similarilly.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003cc0:	b580      	push	{r7, lr}
 8003cc2:	b082      	sub	sp, #8
 8003cc4:	af00      	add	r7, sp, #0
 8003cc6:	6078      	str	r0, [r7, #4]

  /* Check ADC handle */
  if (hadc == NULL)
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d101      	bne.n	8003cd2 <HAL_ADC_Init+0x12>
  {
    return HAL_ERROR;
 8003cce:	2301      	movs	r3, #1
 8003cd0:	e159      	b.n	8003f86 <HAL_ADC_Init+0x2c6>
  /* Refer to header of this file for more details on clock enabling procedure*/

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d10a      	bne.n	8003cf0 <HAL_ADC_Init+0x30>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	2200      	movs	r2, #0
 8003cde:	659a      	str	r2, [r3, #88]	; 0x58

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	2250      	movs	r2, #80	; 0x50
 8003ce4:	2100      	movs	r1, #0
 8003ce6:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	0018      	movs	r0, r3
 8003cec:	f7ff fd58 	bl	80037a0 <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003cf4:	2210      	movs	r2, #16
 8003cf6:	4013      	ands	r3, r2
 8003cf8:	2b10      	cmp	r3, #16
 8003cfa:	d005      	beq.n	8003d08 <HAL_ADC_Init+0x48>
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET))
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	689b      	ldr	r3, [r3, #8]
 8003d02:	2204      	movs	r2, #4
 8003d04:	4013      	ands	r3, r2
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 8003d06:	d00b      	beq.n	8003d20 <HAL_ADC_Init+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d0c:	2210      	movs	r2, #16
 8003d0e:	431a      	orrs	r2, r3
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	2250      	movs	r2, #80	; 0x50
 8003d18:	2100      	movs	r1, #0
 8003d1a:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 8003d1c:	2301      	movs	r3, #1
 8003d1e:	e132      	b.n	8003f86 <HAL_ADC_Init+0x2c6>
  }

  /* Set ADC state */
  ADC_STATE_CLR_SET(hadc->State,
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d24:	4a9a      	ldr	r2, [pc, #616]	; (8003f90 <HAL_ADC_Init+0x2d0>)
 8003d26:	4013      	ands	r3, r2
 8003d28:	2202      	movs	r2, #2
 8003d2a:	431a      	orrs	r2, r3
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	655a      	str	r2, [r3, #84]	; 0x54
  /* Parameters update conditioned to ADC state:                            */
  /* Parameters that can be updated only when ADC is disabled:              */
  /*  - ADC clock mode                                                      */
  /*  - ADC clock prescaler                                                 */
  /*  - ADC Resolution                                                      */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	689b      	ldr	r3, [r3, #8]
 8003d36:	2203      	movs	r2, #3
 8003d38:	4013      	ands	r3, r2
 8003d3a:	2b01      	cmp	r3, #1
 8003d3c:	d108      	bne.n	8003d50 <HAL_ADC_Init+0x90>
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	2201      	movs	r2, #1
 8003d46:	4013      	ands	r3, r2
 8003d48:	2b01      	cmp	r3, #1
 8003d4a:	d101      	bne.n	8003d50 <HAL_ADC_Init+0x90>
 8003d4c:	2301      	movs	r3, #1
 8003d4e:	e000      	b.n	8003d52 <HAL_ADC_Init+0x92>
 8003d50:	2300      	movs	r3, #0
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d149      	bne.n	8003dea <HAL_ADC_Init+0x12a>
    /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
    /*     (set into HAL_ADC_ConfigChannel() )                              */

    /* Configuration of ADC clock: clock source PCLK or asynchronous with
    selectable prescaler */
    __HAL_ADC_CLOCK_PRESCALER(hadc);
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	685a      	ldr	r2, [r3, #4]
 8003d5a:	23c0      	movs	r3, #192	; 0xc0
 8003d5c:	061b      	lsls	r3, r3, #24
 8003d5e:	429a      	cmp	r2, r3
 8003d60:	d00b      	beq.n	8003d7a <HAL_ADC_Init+0xba>
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	685a      	ldr	r2, [r3, #4]
 8003d66:	2380      	movs	r3, #128	; 0x80
 8003d68:	05db      	lsls	r3, r3, #23
 8003d6a:	429a      	cmp	r2, r3
 8003d6c:	d005      	beq.n	8003d7a <HAL_ADC_Init+0xba>
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	685a      	ldr	r2, [r3, #4]
 8003d72:	2380      	movs	r3, #128	; 0x80
 8003d74:	061b      	lsls	r3, r3, #24
 8003d76:	429a      	cmp	r2, r3
 8003d78:	d111      	bne.n	8003d9e <HAL_ADC_Init+0xde>
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	691a      	ldr	r2, [r3, #16]
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	0092      	lsls	r2, r2, #2
 8003d86:	0892      	lsrs	r2, r2, #2
 8003d88:	611a      	str	r2, [r3, #16]
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	6919      	ldr	r1, [r3, #16]
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	685a      	ldr	r2, [r3, #4]
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	430a      	orrs	r2, r1
 8003d9a:	611a      	str	r2, [r3, #16]
 8003d9c:	e014      	b.n	8003dc8 <HAL_ADC_Init+0x108>
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	691a      	ldr	r2, [r3, #16]
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	0092      	lsls	r2, r2, #2
 8003daa:	0892      	lsrs	r2, r2, #2
 8003dac:	611a      	str	r2, [r3, #16]
 8003dae:	4b79      	ldr	r3, [pc, #484]	; (8003f94 <HAL_ADC_Init+0x2d4>)
 8003db0:	681a      	ldr	r2, [r3, #0]
 8003db2:	4b78      	ldr	r3, [pc, #480]	; (8003f94 <HAL_ADC_Init+0x2d4>)
 8003db4:	4978      	ldr	r1, [pc, #480]	; (8003f98 <HAL_ADC_Init+0x2d8>)
 8003db6:	400a      	ands	r2, r1
 8003db8:	601a      	str	r2, [r3, #0]
 8003dba:	4b76      	ldr	r3, [pc, #472]	; (8003f94 <HAL_ADC_Init+0x2d4>)
 8003dbc:	6819      	ldr	r1, [r3, #0]
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	685a      	ldr	r2, [r3, #4]
 8003dc2:	4b74      	ldr	r3, [pc, #464]	; (8003f94 <HAL_ADC_Init+0x2d4>)
 8003dc4:	430a      	orrs	r2, r1
 8003dc6:	601a      	str	r2, [r3, #0]

    /* Configuration of ADC:                                                */
    /*  - Resolution                                                        */
    hadc->Instance->CFGR1 &= ~(ADC_CFGR1_RES);
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	68da      	ldr	r2, [r3, #12]
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	2118      	movs	r1, #24
 8003dd4:	438a      	bics	r2, r1
 8003dd6:	60da      	str	r2, [r3, #12]
    hadc->Instance->CFGR1 |= hadc->Init.Resolution;
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	68d9      	ldr	r1, [r3, #12]
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	689a      	ldr	r2, [r3, #8]
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	430a      	orrs	r2, r1
 8003de8:	60da      	str	r2, [r3, #12]
  }

  /* Set the Low Frequency mode */
  ADC->CCR &= (uint32_t)~ADC_CCR_LFMEN;
 8003dea:	4b6a      	ldr	r3, [pc, #424]	; (8003f94 <HAL_ADC_Init+0x2d4>)
 8003dec:	681a      	ldr	r2, [r3, #0]
 8003dee:	4b69      	ldr	r3, [pc, #420]	; (8003f94 <HAL_ADC_Init+0x2d4>)
 8003df0:	496a      	ldr	r1, [pc, #424]	; (8003f9c <HAL_ADC_Init+0x2dc>)
 8003df2:	400a      	ands	r2, r1
 8003df4:	601a      	str	r2, [r3, #0]
  ADC->CCR |= __HAL_ADC_CCR_LOWFREQUENCY(hadc->Init.LowPowerFrequencyMode);
 8003df6:	4b67      	ldr	r3, [pc, #412]	; (8003f94 <HAL_ADC_Init+0x2d4>)
 8003df8:	6819      	ldr	r1, [r3, #0]
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003dfe:	065a      	lsls	r2, r3, #25
 8003e00:	4b64      	ldr	r3, [pc, #400]	; (8003f94 <HAL_ADC_Init+0x2d4>)
 8003e02:	430a      	orrs	r2, r1
 8003e04:	601a      	str	r2, [r3, #0]

  /* Enable voltage regulator (if disabled at this step) */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN))
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	689a      	ldr	r2, [r3, #8]
 8003e0c:	2380      	movs	r3, #128	; 0x80
 8003e0e:	055b      	lsls	r3, r3, #21
 8003e10:	4013      	ands	r3, r2
 8003e12:	d108      	bne.n	8003e26 <HAL_ADC_Init+0x166>
  {
    /* Set ADVREGEN bit */
    hadc->Instance->CR |= ADC_CR_ADVREGEN;
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	689a      	ldr	r2, [r3, #8]
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	2180      	movs	r1, #128	; 0x80
 8003e20:	0549      	lsls	r1, r1, #21
 8003e22:	430a      	orrs	r2, r1
 8003e24:	609a      	str	r2, [r3, #8]
  /*  - Continuous conversion mode                                            */
  /*  - DMA continuous request                                                */
  /*  - Overrun                                                               */
  /*  - AutoDelay feature                                                     */
  /*  - Discontinuous mode                                                    */
  hadc->Instance->CFGR1 &= ~(ADC_CFGR1_ALIGN   |
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	68da      	ldr	r2, [r3, #12]
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	495b      	ldr	r1, [pc, #364]	; (8003fa0 <HAL_ADC_Init+0x2e0>)
 8003e32:	400a      	ands	r2, r1
 8003e34:	60da      	str	r2, [r3, #12]
                             ADC_CFGR1_OVRMOD  |
                             ADC_CFGR1_AUTDLY  |
                             ADC_CFGR1_AUTOFF  |
                             ADC_CFGR1_DISCEN);

  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	68d9      	ldr	r1, [r3, #12]
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	68da      	ldr	r2, [r3, #12]
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	691b      	ldr	r3, [r3, #16]
 8003e44:	2b02      	cmp	r3, #2
 8003e46:	d101      	bne.n	8003e4c <HAL_ADC_Init+0x18c>
 8003e48:	2304      	movs	r3, #4
 8003e4a:	e000      	b.n	8003e4e <HAL_ADC_Init+0x18e>
 8003e4c:	2300      	movs	r3, #0
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8003e4e:	431a      	orrs	r2, r3
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	2020      	movs	r0, #32
 8003e54:	5c1b      	ldrb	r3, [r3, r0]
 8003e56:	035b      	lsls	r3, r3, #13
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 8003e58:	431a      	orrs	r2, r3
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	202c      	movs	r0, #44	; 0x2c
 8003e5e:	5c1b      	ldrb	r3, [r3, r0]
 8003e60:	005b      	lsls	r3, r3, #1
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8003e62:	431a      	orrs	r2, r3
                            hadc->Init.Overrun                               |
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 8003e68:	431a      	orrs	r2, r3
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	699b      	ldr	r3, [r3, #24]
 8003e6e:	039b      	lsls	r3, r3, #14
                            hadc->Init.Overrun                               |
 8003e70:	431a      	orrs	r2, r3
                            __HAL_ADC_CFGR1_AUTOFF(hadc->Init.LowPowerAutoPowerOff));
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	69db      	ldr	r3, [r3, #28]
 8003e76:	03db      	lsls	r3, r3, #15
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 8003e78:	431a      	orrs	r2, r3
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	430a      	orrs	r2, r1
 8003e80:	60da      	str	r2, [r3, #12]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003e86:	23c2      	movs	r3, #194	; 0xc2
 8003e88:	33ff      	adds	r3, #255	; 0xff
 8003e8a:	429a      	cmp	r2, r3
 8003e8c:	d00b      	beq.n	8003ea6 <HAL_ADC_Init+0x1e6>
  {
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	68d9      	ldr	r1, [r3, #12]
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	6a5a      	ldr	r2, [r3, #36]	; 0x24
                             hadc->Init.ExternalTrigConvEdge;
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 8003e9c:	431a      	orrs	r2, r3
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	430a      	orrs	r2, r1
 8003ea4:	60da      	str	r2, [r3, #12]
  }

  /* Enable discontinuous mode only if continuous mode is disabled */
  if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	2221      	movs	r2, #33	; 0x21
 8003eaa:	5c9b      	ldrb	r3, [r3, r2]
 8003eac:	2b01      	cmp	r3, #1
 8003eae:	d11a      	bne.n	8003ee6 <HAL_ADC_Init+0x226>
  {
    if (hadc->Init.ContinuousConvMode == DISABLE)
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	2220      	movs	r2, #32
 8003eb4:	5c9b      	ldrb	r3, [r3, r2]
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d109      	bne.n	8003ece <HAL_ADC_Init+0x20e>
    {
      /* Enable the selected ADC group regular discontinuous mode */
      hadc->Instance->CFGR1 |= (ADC_CFGR1_DISCEN);
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	68da      	ldr	r2, [r3, #12]
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	2180      	movs	r1, #128	; 0x80
 8003ec6:	0249      	lsls	r1, r1, #9
 8003ec8:	430a      	orrs	r2, r1
 8003eca:	60da      	str	r2, [r3, #12]
 8003ecc:	e00b      	b.n	8003ee6 <HAL_ADC_Init+0x226>
      /* ADC regular group discontinuous was intended to be enabled,        */
      /* but ADC regular group modes continuous and sequencer discontinuous */
      /* cannot be enabled simultaneously.                                  */

      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ed2:	2220      	movs	r2, #32
 8003ed4:	431a      	orrs	r2, r3
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ede:	2201      	movs	r2, #1
 8003ee0:	431a      	orrs	r2, r3
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	659a      	str	r2, [r3, #88]	; 0x58
    }
  }

  if (hadc->Init.OversamplingMode == ENABLE)
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003eea:	2b01      	cmp	r3, #1
 8003eec:	d11f      	bne.n	8003f2e <HAL_ADC_Init+0x26e>
    /* Configuration of Oversampler:                                          */
    /*  - Oversampling Ratio                                                  */
    /*  - Right bit shift                                                     */
    /*  - Triggered mode                                                      */

    hadc->Instance->CFGR2 &= ~(ADC_CFGR2_OVSR |
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	691a      	ldr	r2, [r3, #16]
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	492a      	ldr	r1, [pc, #168]	; (8003fa4 <HAL_ADC_Init+0x2e4>)
 8003efa:	400a      	ands	r2, r1
 8003efc:	611a      	str	r2, [r3, #16]
                               ADC_CFGR2_OVSS |
                               ADC_CFGR2_TOVS);

    hadc->Instance->CFGR2 |= (hadc->Init.Oversample.Ratio         |
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	6919      	ldr	r1, [r3, #16]
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	6c1a      	ldr	r2, [r3, #64]	; 0x40
                              hadc->Init.Oversample.RightBitShift             |
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    hadc->Instance->CFGR2 |= (hadc->Init.Oversample.Ratio         |
 8003f0c:	431a      	orrs	r2, r3
                              hadc->Init.Oversample.TriggeredMode);
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                              hadc->Init.Oversample.RightBitShift             |
 8003f12:	431a      	orrs	r2, r3
    hadc->Instance->CFGR2 |= (hadc->Init.Oversample.Ratio         |
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	430a      	orrs	r2, r1
 8003f1a:	611a      	str	r2, [r3, #16]

    /* Enable OverSampling mode */
    hadc->Instance->CFGR2 |= ADC_CFGR2_OVSE;
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	691a      	ldr	r2, [r3, #16]
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	2101      	movs	r1, #1
 8003f28:	430a      	orrs	r2, r1
 8003f2a:	611a      	str	r2, [r3, #16]
 8003f2c:	e00e      	b.n	8003f4c <HAL_ADC_Init+0x28c>
  }
  else
  {
    if (HAL_IS_BIT_SET(hadc->Instance->CFGR2, ADC_CFGR2_OVSE))
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	691b      	ldr	r3, [r3, #16]
 8003f34:	2201      	movs	r2, #1
 8003f36:	4013      	ands	r3, r2
 8003f38:	2b01      	cmp	r3, #1
 8003f3a:	d107      	bne.n	8003f4c <HAL_ADC_Init+0x28c>
    {
      /* Disable OverSampling mode if needed */
      hadc->Instance->CFGR2 &= ~ADC_CFGR2_OVSE;
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	691a      	ldr	r2, [r3, #16]
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	2101      	movs	r1, #1
 8003f48:	438a      	bics	r2, r1
 8003f4a:	611a      	str	r2, [r3, #16]
    }
  }

  /* Clear the old sampling time */
  hadc->Instance->SMPR &= (uint32_t)(~ADC_SMPR_SMPR);
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	695a      	ldr	r2, [r3, #20]
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	2107      	movs	r1, #7
 8003f58:	438a      	bics	r2, r1
 8003f5a:	615a      	str	r2, [r3, #20]

  /* Set the new sample time */
  hadc->Instance->SMPR |= hadc->Init.SamplingTime;
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	6959      	ldr	r1, [r3, #20]
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	430a      	orrs	r2, r1
 8003f6c:	615a      	str	r2, [r3, #20]

  /* Clear ADC error code */
  ADC_CLEAR_ERRORCODE(hadc);
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	2200      	movs	r2, #0
 8003f72:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set the ADC state */
  ADC_STATE_CLR_SET(hadc->State,
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f78:	2203      	movs	r2, #3
 8003f7a:	4393      	bics	r3, r2
 8003f7c:	2201      	movs	r2, #1
 8003f7e:	431a      	orrs	r2, r3
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	655a      	str	r2, [r3, #84]	; 0x54
                    HAL_ADC_STATE_BUSY_INTERNAL,
                    HAL_ADC_STATE_READY);


  /* Return function status */
  return HAL_OK;
 8003f84:	2300      	movs	r3, #0
}
 8003f86:	0018      	movs	r0, r3
 8003f88:	46bd      	mov	sp, r7
 8003f8a:	b002      	add	sp, #8
 8003f8c:	bd80      	pop	{r7, pc}
 8003f8e:	46c0      	nop			; (mov r8, r8)
 8003f90:	fffffefd 	.word	0xfffffefd
 8003f94:	40012708 	.word	0x40012708
 8003f98:	ffc3ffff 	.word	0xffc3ffff
 8003f9c:	fdffffff 	.word	0xfdffffff
 8003fa0:	fffe0219 	.word	0xfffe0219
 8003fa4:	fffffc03 	.word	0xfffffc03

08003fa8 <HAL_ADC_Start>:
  * @note   Interruptions enabled in this function: None.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8003fa8:	b590      	push	{r4, r7, lr}
 8003faa:	b085      	sub	sp, #20
 8003fac:	af00      	add	r7, sp, #0
 8003fae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003fb0:	230f      	movs	r3, #15
 8003fb2:	18fb      	adds	r3, r7, r3
 8003fb4:	2200      	movs	r2, #0
 8003fb6:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	689b      	ldr	r3, [r3, #8]
 8003fbe:	2204      	movs	r2, #4
 8003fc0:	4013      	ands	r3, r2
 8003fc2:	d138      	bne.n	8004036 <HAL_ADC_Start+0x8e>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	2250      	movs	r2, #80	; 0x50
 8003fc8:	5c9b      	ldrb	r3, [r3, r2]
 8003fca:	2b01      	cmp	r3, #1
 8003fcc:	d101      	bne.n	8003fd2 <HAL_ADC_Start+0x2a>
 8003fce:	2302      	movs	r3, #2
 8003fd0:	e038      	b.n	8004044 <HAL_ADC_Start+0x9c>
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	2250      	movs	r2, #80	; 0x50
 8003fd6:	2101      	movs	r1, #1
 8003fd8:	5499      	strb	r1, [r3, r2]

    /* Enable the ADC peripheral */
    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware.                                   */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	69db      	ldr	r3, [r3, #28]
 8003fde:	2b01      	cmp	r3, #1
 8003fe0:	d007      	beq.n	8003ff2 <HAL_ADC_Start+0x4a>
    {
      tmp_hal_status = ADC_Enable(hadc);
 8003fe2:	230f      	movs	r3, #15
 8003fe4:	18fc      	adds	r4, r7, r3
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	0018      	movs	r0, r3
 8003fea:	f000 f95f 	bl	80042ac <ADC_Enable>
 8003fee:	0003      	movs	r3, r0
 8003ff0:	7023      	strb	r3, [r4, #0]
    }

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8003ff2:	230f      	movs	r3, #15
 8003ff4:	18fb      	adds	r3, r7, r3
 8003ff6:	781b      	ldrb	r3, [r3, #0]
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	d120      	bne.n	800403e <HAL_ADC_Start+0x96>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004000:	4a12      	ldr	r2, [pc, #72]	; (800404c <HAL_ADC_Start+0xa4>)
 8004002:	4013      	ands	r3, r2
 8004004:	2280      	movs	r2, #128	; 0x80
 8004006:	0052      	lsls	r2, r2, #1
 8004008:	431a      	orrs	r2, r3
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	655a      	str	r2, [r3, #84]	; 0x54
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);

      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	2200      	movs	r2, #0
 8004012:	659a      	str	r2, [r3, #88]	; 0x58

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	2250      	movs	r2, #80	; 0x50
 8004018:	2100      	movs	r1, #0
 800401a:	5499      	strb	r1, [r3, r2]

      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	221c      	movs	r2, #28
 8004022:	601a      	str	r2, [r3, #0]

      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      hadc->Instance->CR |= ADC_CR_ADSTART;
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	689a      	ldr	r2, [r3, #8]
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	2104      	movs	r1, #4
 8004030:	430a      	orrs	r2, r1
 8004032:	609a      	str	r2, [r3, #8]
 8004034:	e003      	b.n	800403e <HAL_ADC_Start+0x96>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8004036:	230f      	movs	r3, #15
 8004038:	18fb      	adds	r3, r7, r3
 800403a:	2202      	movs	r2, #2
 800403c:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return tmp_hal_status;
 800403e:	230f      	movs	r3, #15
 8004040:	18fb      	adds	r3, r7, r3
 8004042:	781b      	ldrb	r3, [r3, #0]
}
 8004044:	0018      	movs	r0, r3
 8004046:	46bd      	mov	sp, r7
 8004048:	b005      	add	sp, #20
 800404a:	bd90      	pop	{r4, r7, pc}
 800404c:	fffff0fe 	.word	0xfffff0fe

08004050 <HAL_ADC_PollForConversion>:
  * @param  hadc ADC handle
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8004050:	b580      	push	{r7, lr}
 8004052:	b084      	sub	sp, #16
 8004054:	af00      	add	r7, sp, #0
 8004056:	6078      	str	r0, [r7, #4]
 8004058:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800405a:	2300      	movs	r3, #0
 800405c:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_Flag_EOC   = 0x00;
 800405e:	2300      	movs	r3, #0
 8004060:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	695b      	ldr	r3, [r3, #20]
 8004066:	2b08      	cmp	r3, #8
 8004068:	d102      	bne.n	8004070 <HAL_ADC_PollForConversion+0x20>
  {
    tmp_Flag_EOC = ADC_FLAG_EOS;
 800406a:	2308      	movs	r3, #8
 800406c:	60fb      	str	r3, [r7, #12]
 800406e:	e014      	b.n	800409a <HAL_ADC_PollForConversion+0x4a>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if (HAL_IS_BIT_SET(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN))
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	68db      	ldr	r3, [r3, #12]
 8004076:	2201      	movs	r2, #1
 8004078:	4013      	ands	r3, r2
 800407a:	2b01      	cmp	r3, #1
 800407c:	d10b      	bne.n	8004096 <HAL_ADC_PollForConversion+0x46>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004082:	2220      	movs	r2, #32
 8004084:	431a      	orrs	r2, r3
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	655a      	str	r2, [r3, #84]	; 0x54

      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	2250      	movs	r2, #80	; 0x50
 800408e:	2100      	movs	r1, #0
 8004090:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 8004092:	2301      	movs	r3, #1
 8004094:	e072      	b.n	800417c <HAL_ADC_PollForConversion+0x12c>
    }
    else
    {
      tmp_Flag_EOC = (ADC_FLAG_EOC | ADC_FLAG_EOS);
 8004096:	230c      	movs	r3, #12
 8004098:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 800409a:	f7ff fdc7 	bl	8003c2c <HAL_GetTick>
 800409e:	0003      	movs	r3, r0
 80040a0:	60bb      	str	r3, [r7, #8]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while (HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 80040a2:	e01f      	b.n	80040e4 <HAL_ADC_PollForConversion+0x94>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 80040a4:	683b      	ldr	r3, [r7, #0]
 80040a6:	3301      	adds	r3, #1
 80040a8:	d01c      	beq.n	80040e4 <HAL_ADC_PollForConversion+0x94>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 80040aa:	683b      	ldr	r3, [r7, #0]
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d007      	beq.n	80040c0 <HAL_ADC_PollForConversion+0x70>
 80040b0:	f7ff fdbc 	bl	8003c2c <HAL_GetTick>
 80040b4:	0002      	movs	r2, r0
 80040b6:	68bb      	ldr	r3, [r7, #8]
 80040b8:	1ad3      	subs	r3, r2, r3
 80040ba:	683a      	ldr	r2, [r7, #0]
 80040bc:	429a      	cmp	r2, r3
 80040be:	d211      	bcs.n	80040e4 <HAL_ADC_PollForConversion+0x94>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	68fa      	ldr	r2, [r7, #12]
 80040c8:	4013      	ands	r3, r2
 80040ca:	d10b      	bne.n	80040e4 <HAL_ADC_PollForConversion+0x94>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80040d0:	2204      	movs	r2, #4
 80040d2:	431a      	orrs	r2, r3
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	655a      	str	r2, [r3, #84]	; 0x54

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	2250      	movs	r2, #80	; 0x50
 80040dc:	2100      	movs	r1, #0
 80040de:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 80040e0:	2303      	movs	r3, #3
 80040e2:	e04b      	b.n	800417c <HAL_ADC_PollForConversion+0x12c>
  while (HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	68fa      	ldr	r2, [r7, #12]
 80040ec:	4013      	ands	r3, r2
 80040ee:	d0d9      	beq.n	80040a4 <HAL_ADC_PollForConversion+0x54>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80040f4:	2280      	movs	r2, #128	; 0x80
 80040f6:	0092      	lsls	r2, r2, #2
 80040f8:	431a      	orrs	r2, r3
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	655a      	str	r2, [r3, #84]	; 0x54

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	68da      	ldr	r2, [r3, #12]
 8004104:	23c0      	movs	r3, #192	; 0xc0
 8004106:	011b      	lsls	r3, r3, #4
 8004108:	4013      	ands	r3, r2
 800410a:	d12e      	bne.n	800416a <HAL_ADC_PollForConversion+0x11a>
      (hadc->Init.ContinuousConvMode == DISABLE))
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	2220      	movs	r2, #32
 8004110:	5c9b      	ldrb	r3, [r3, r2]
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8004112:	2b00      	cmp	r3, #0
 8004114:	d129      	bne.n	800416a <HAL_ADC_PollForConversion+0x11a>
  {
    /* If End of Sequence is reached, disable interrupts */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	2208      	movs	r2, #8
 800411e:	4013      	ands	r3, r2
 8004120:	2b08      	cmp	r3, #8
 8004122:	d122      	bne.n	800416a <HAL_ADC_PollForConversion+0x11a>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	689b      	ldr	r3, [r3, #8]
 800412a:	2204      	movs	r2, #4
 800412c:	4013      	ands	r3, r2
 800412e:	d110      	bne.n	8004152 <HAL_ADC_PollForConversion+0x102>
      {
        /* Disable ADC end of single conversion interrupt on group regular */
        /* Note: Overrun interrupt was enabled with EOC interrupt in          */
        /* HAL_Start_IT(), but is not disabled here because can be used       */
        /* by overrun IRQ process below.                                      */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	685a      	ldr	r2, [r3, #4]
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	210c      	movs	r1, #12
 800413c:	438a      	bics	r2, r1
 800413e:	605a      	str	r2, [r3, #4]

        /* Set ADC state */
        ADC_STATE_CLR_SET(hadc->State,
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004144:	4a0f      	ldr	r2, [pc, #60]	; (8004184 <HAL_ADC_PollForConversion+0x134>)
 8004146:	4013      	ands	r3, r2
 8004148:	2201      	movs	r2, #1
 800414a:	431a      	orrs	r2, r3
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	655a      	str	r2, [r3, #84]	; 0x54
 8004150:	e00b      	b.n	800416a <HAL_ADC_PollForConversion+0x11a>
                          HAL_ADC_STATE_READY);
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004156:	2220      	movs	r2, #32
 8004158:	431a      	orrs	r2, r3
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	655a      	str	r2, [r3, #84]	; 0x54

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004162:	2201      	movs	r2, #1
 8004164:	431a      	orrs	r2, r3
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	659a      	str	r2, [r3, #88]	; 0x58
  }

  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	699b      	ldr	r3, [r3, #24]
 800416e:	2b00      	cmp	r3, #0
 8004170:	d103      	bne.n	800417a <HAL_ADC_PollForConversion+0x12a>
  {
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	220c      	movs	r2, #12
 8004178:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800417a:	2300      	movs	r3, #0
}
 800417c:	0018      	movs	r0, r3
 800417e:	46bd      	mov	sp, r7
 8004180:	b004      	add	sp, #16
 8004182:	bd80      	pop	{r7, pc}
 8004184:	fffffefe 	.word	0xfffffefe

08004188 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8004188:	b580      	push	{r7, lr}
 800418a:	b082      	sub	sp, #8
 800418c:	af00      	add	r7, sp, #0
 800418e:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8004196:	0018      	movs	r0, r3
 8004198:	46bd      	mov	sp, r7
 800419a:	b002      	add	sp, #8
 800419c:	bd80      	pop	{r7, pc}
	...

080041a0 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80041a0:	b580      	push	{r7, lr}
 80041a2:	b082      	sub	sp, #8
 80041a4:	af00      	add	r7, sp, #0
 80041a6:	6078      	str	r0, [r7, #4]
 80041a8:	6039      	str	r1, [r7, #0]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));

  /* Process locked */
  __HAL_LOCK(hadc);
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	2250      	movs	r2, #80	; 0x50
 80041ae:	5c9b      	ldrb	r3, [r3, r2]
 80041b0:	2b01      	cmp	r3, #1
 80041b2:	d101      	bne.n	80041b8 <HAL_ADC_ConfigChannel+0x18>
 80041b4:	2302      	movs	r3, #2
 80041b6:	e06c      	b.n	8004292 <HAL_ADC_ConfigChannel+0xf2>
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	2250      	movs	r2, #80	; 0x50
 80041bc:	2101      	movs	r1, #1
 80041be:	5499      	strb	r1, [r3, r2]
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Management of internal measurement channels: Vbat/VrefInt/TempSensor  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET)
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	689b      	ldr	r3, [r3, #8]
 80041c6:	2204      	movs	r2, #4
 80041c8:	4013      	ands	r3, r2
 80041ca:	d00b      	beq.n	80041e4 <HAL_ADC_ConfigChannel+0x44>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80041d0:	2220      	movs	r2, #32
 80041d2:	431a      	orrs	r2, r3
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	655a      	str	r2, [r3, #84]	; 0x54
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	2250      	movs	r2, #80	; 0x50
 80041dc:	2100      	movs	r1, #0
 80041de:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 80041e0:	2301      	movs	r3, #1
 80041e2:	e056      	b.n	8004292 <HAL_ADC_ConfigChannel+0xf2>
  }

  if (sConfig->Rank != ADC_RANK_NONE)
 80041e4:	683b      	ldr	r3, [r7, #0]
 80041e6:	685b      	ldr	r3, [r3, #4]
 80041e8:	4a2c      	ldr	r2, [pc, #176]	; (800429c <HAL_ADC_ConfigChannel+0xfc>)
 80041ea:	4293      	cmp	r3, r2
 80041ec:	d028      	beq.n	8004240 <HAL_ADC_ConfigChannel+0xa0>
  {
    /* Enable selected channels */
    hadc->Instance->CHSELR |= (uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK);
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	6a99      	ldr	r1, [r3, #40]	; 0x28
 80041f4:	683b      	ldr	r3, [r7, #0]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	035b      	lsls	r3, r3, #13
 80041fa:	0b5a      	lsrs	r2, r3, #13
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	430a      	orrs	r2, r1
 8004202:	629a      	str	r2, [r3, #40]	; 0x28
    /* dedicated internal buffers and path.                                     */

#if defined(ADC_CCR_TSEN)
    /* If Temperature sensor channel is selected, then enable the internal      */
    /* buffers and path  */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 8004204:	683b      	ldr	r3, [r7, #0]
 8004206:	681a      	ldr	r2, [r3, #0]
 8004208:	2380      	movs	r3, #128	; 0x80
 800420a:	02db      	lsls	r3, r3, #11
 800420c:	4013      	ands	r3, r2
 800420e:	d009      	beq.n	8004224 <HAL_ADC_ConfigChannel+0x84>
    {
      ADC->CCR |= ADC_CCR_TSEN;
 8004210:	4b23      	ldr	r3, [pc, #140]	; (80042a0 <HAL_ADC_ConfigChannel+0x100>)
 8004212:	681a      	ldr	r2, [r3, #0]
 8004214:	4b22      	ldr	r3, [pc, #136]	; (80042a0 <HAL_ADC_ConfigChannel+0x100>)
 8004216:	2180      	movs	r1, #128	; 0x80
 8004218:	0409      	lsls	r1, r1, #16
 800421a:	430a      	orrs	r2, r1
 800421c:	601a      	str	r2, [r3, #0]

      /* Delay for temperature sensor stabilization time */
      ADC_DelayMicroSecond(ADC_TEMPSENSOR_DELAY_US);
 800421e:	200a      	movs	r0, #10
 8004220:	f000 f8ac 	bl	800437c <ADC_DelayMicroSecond>
    }
#endif

    /* If VRefInt channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 8004224:	683b      	ldr	r3, [r7, #0]
 8004226:	681a      	ldr	r2, [r3, #0]
 8004228:	2380      	movs	r3, #128	; 0x80
 800422a:	029b      	lsls	r3, r3, #10
 800422c:	4013      	ands	r3, r2
 800422e:	d02b      	beq.n	8004288 <HAL_ADC_ConfigChannel+0xe8>
    {
      ADC->CCR |= ADC_CCR_VREFEN;
 8004230:	4b1b      	ldr	r3, [pc, #108]	; (80042a0 <HAL_ADC_ConfigChannel+0x100>)
 8004232:	681a      	ldr	r2, [r3, #0]
 8004234:	4b1a      	ldr	r3, [pc, #104]	; (80042a0 <HAL_ADC_ConfigChannel+0x100>)
 8004236:	2180      	movs	r1, #128	; 0x80
 8004238:	03c9      	lsls	r1, r1, #15
 800423a:	430a      	orrs	r2, r1
 800423c:	601a      	str	r2, [r3, #0]
 800423e:	e023      	b.n	8004288 <HAL_ADC_ConfigChannel+0xe8>
  }
  else
  {
    /* Regular sequence configuration */
    /* Reset the channel selection register from the selected channel */
    hadc->Instance->CHSELR &= ~((uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK));
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004246:	683b      	ldr	r3, [r7, #0]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	035b      	lsls	r3, r3, #13
 800424c:	0b5b      	lsrs	r3, r3, #13
 800424e:	43d9      	mvns	r1, r3
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	400a      	ands	r2, r1
 8004256:	629a      	str	r2, [r3, #40]	; 0x28

    /* Management of internal measurement channels: VrefInt/TempSensor/Vbat */
    /* internal measurement paths disable: If internal channel selected,    */
    /* disable dedicated internal buffers and path.                         */
#if defined(ADC_CCR_TSEN)
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 8004258:	683b      	ldr	r3, [r7, #0]
 800425a:	681a      	ldr	r2, [r3, #0]
 800425c:	2380      	movs	r3, #128	; 0x80
 800425e:	02db      	lsls	r3, r3, #11
 8004260:	4013      	ands	r3, r2
 8004262:	d005      	beq.n	8004270 <HAL_ADC_ConfigChannel+0xd0>
    {
      ADC->CCR &= ~ADC_CCR_TSEN;
 8004264:	4b0e      	ldr	r3, [pc, #56]	; (80042a0 <HAL_ADC_ConfigChannel+0x100>)
 8004266:	681a      	ldr	r2, [r3, #0]
 8004268:	4b0d      	ldr	r3, [pc, #52]	; (80042a0 <HAL_ADC_ConfigChannel+0x100>)
 800426a:	490e      	ldr	r1, [pc, #56]	; (80042a4 <HAL_ADC_ConfigChannel+0x104>)
 800426c:	400a      	ands	r2, r1
 800426e:	601a      	str	r2, [r3, #0]
    }
#endif

    /* If VRefInt channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 8004270:	683b      	ldr	r3, [r7, #0]
 8004272:	681a      	ldr	r2, [r3, #0]
 8004274:	2380      	movs	r3, #128	; 0x80
 8004276:	029b      	lsls	r3, r3, #10
 8004278:	4013      	ands	r3, r2
 800427a:	d005      	beq.n	8004288 <HAL_ADC_ConfigChannel+0xe8>
    {
      ADC->CCR &= ~ADC_CCR_VREFEN;
 800427c:	4b08      	ldr	r3, [pc, #32]	; (80042a0 <HAL_ADC_ConfigChannel+0x100>)
 800427e:	681a      	ldr	r2, [r3, #0]
 8004280:	4b07      	ldr	r3, [pc, #28]	; (80042a0 <HAL_ADC_ConfigChannel+0x100>)
 8004282:	4909      	ldr	r1, [pc, #36]	; (80042a8 <HAL_ADC_ConfigChannel+0x108>)
 8004284:	400a      	ands	r2, r1
 8004286:	601a      	str	r2, [r3, #0]
    }
#endif
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	2250      	movs	r2, #80	; 0x50
 800428c:	2100      	movs	r1, #0
 800428e:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 8004290:	2300      	movs	r3, #0
}
 8004292:	0018      	movs	r0, r3
 8004294:	46bd      	mov	sp, r7
 8004296:	b002      	add	sp, #8
 8004298:	bd80      	pop	{r7, pc}
 800429a:	46c0      	nop			; (mov r8, r8)
 800429c:	00001001 	.word	0x00001001
 80042a0:	40012708 	.word	0x40012708
 80042a4:	ff7fffff 	.word	0xff7fffff
 80042a8:	ffbfffff 	.word	0xffbfffff

080042ac <ADC_Enable>:
  *         "if (hadc->Init.LowPowerAutoPowerOff != ENABLE)".
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80042ac:	b580      	push	{r7, lr}
 80042ae:	b084      	sub	sp, #16
 80042b0:	af00      	add	r7, sp, #0
 80042b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80042b4:	2300      	movs	r3, #0
 80042b6:	60fb      	str	r3, [r7, #12]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	689b      	ldr	r3, [r3, #8]
 80042be:	2203      	movs	r2, #3
 80042c0:	4013      	ands	r3, r2
 80042c2:	2b01      	cmp	r3, #1
 80042c4:	d108      	bne.n	80042d8 <ADC_Enable+0x2c>
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	2201      	movs	r2, #1
 80042ce:	4013      	ands	r3, r2
 80042d0:	2b01      	cmp	r3, #1
 80042d2:	d101      	bne.n	80042d8 <ADC_Enable+0x2c>
 80042d4:	2301      	movs	r3, #1
 80042d6:	e000      	b.n	80042da <ADC_Enable+0x2e>
 80042d8:	2300      	movs	r3, #0
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d146      	bne.n	800436c <ADC_Enable+0xc0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	689b      	ldr	r3, [r3, #8]
 80042e4:	4a24      	ldr	r2, [pc, #144]	; (8004378 <ADC_Enable+0xcc>)
 80042e6:	4013      	ands	r3, r2
 80042e8:	d00d      	beq.n	8004306 <ADC_Enable+0x5a>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80042ee:	2210      	movs	r2, #16
 80042f0:	431a      	orrs	r2, r3
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80042fa:	2201      	movs	r2, #1
 80042fc:	431a      	orrs	r2, r3
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 8004302:	2301      	movs	r3, #1
 8004304:	e033      	b.n	800436e <ADC_Enable+0xc2>
    }

    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	689a      	ldr	r2, [r3, #8]
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	2101      	movs	r1, #1
 8004312:	430a      	orrs	r2, r1
 8004314:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time. */
    ADC_DelayMicroSecond(ADC_STAB_DELAY_US);
 8004316:	2001      	movs	r0, #1
 8004318:	f000 f830 	bl	800437c <ADC_DelayMicroSecond>

    /* Get tick count */
    tickstart = HAL_GetTick();
 800431c:	f7ff fc86 	bl	8003c2c <HAL_GetTick>
 8004320:	0003      	movs	r3, r0
 8004322:	60fb      	str	r3, [r7, #12]

    /* Wait for ADC effectively enabled */
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8004324:	e01b      	b.n	800435e <ADC_Enable+0xb2>
    {
      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8004326:	f7ff fc81 	bl	8003c2c <HAL_GetTick>
 800432a:	0002      	movs	r2, r0
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	1ad3      	subs	r3, r2, r3
 8004330:	2b0a      	cmp	r3, #10
 8004332:	d914      	bls.n	800435e <ADC_Enable+0xb2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	2201      	movs	r2, #1
 800433c:	4013      	ands	r3, r2
 800433e:	2b01      	cmp	r3, #1
 8004340:	d00d      	beq.n	800435e <ADC_Enable+0xb2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004346:	2210      	movs	r2, #16
 8004348:	431a      	orrs	r2, r3
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004352:	2201      	movs	r2, #1
 8004354:	431a      	orrs	r2, r3
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 800435a:	2301      	movs	r3, #1
 800435c:	e007      	b.n	800436e <ADC_Enable+0xc2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	2201      	movs	r2, #1
 8004366:	4013      	ands	r3, r2
 8004368:	2b01      	cmp	r3, #1
 800436a:	d1dc      	bne.n	8004326 <ADC_Enable+0x7a>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800436c:	2300      	movs	r3, #0
}
 800436e:	0018      	movs	r0, r3
 8004370:	46bd      	mov	sp, r7
 8004372:	b004      	add	sp, #16
 8004374:	bd80      	pop	{r7, pc}
 8004376:	46c0      	nop			; (mov r8, r8)
 8004378:	80000017 	.word	0x80000017

0800437c <ADC_DelayMicroSecond>:
  * @brief  Delay micro seconds
  * @param  microSecond  delay
  * @retval None
  */
static void ADC_DelayMicroSecond(uint32_t microSecond)
{
 800437c:	b580      	push	{r7, lr}
 800437e:	b084      	sub	sp, #16
 8004380:	af00      	add	r7, sp, #0
 8004382:	6078      	str	r0, [r7, #4]
  /* Compute number of CPU cycles to wait for */
  __IO uint32_t waitLoopIndex = (microSecond * (SystemCoreClock / 1000000U));
 8004384:	4b0b      	ldr	r3, [pc, #44]	; (80043b4 <ADC_DelayMicroSecond+0x38>)
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	490b      	ldr	r1, [pc, #44]	; (80043b8 <ADC_DelayMicroSecond+0x3c>)
 800438a:	0018      	movs	r0, r3
 800438c:	f7fb fed8 	bl	8000140 <__udivsi3>
 8004390:	0003      	movs	r3, r0
 8004392:	001a      	movs	r2, r3
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	4353      	muls	r3, r2
 8004398:	60fb      	str	r3, [r7, #12]

  while (waitLoopIndex != 0U)
 800439a:	e002      	b.n	80043a2 <ADC_DelayMicroSecond+0x26>
  {
    waitLoopIndex--;
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	3b01      	subs	r3, #1
 80043a0:	60fb      	str	r3, [r7, #12]
  while (waitLoopIndex != 0U)
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	d1f9      	bne.n	800439c <ADC_DelayMicroSecond+0x20>
  }
}
 80043a8:	46c0      	nop			; (mov r8, r8)
 80043aa:	46c0      	nop			; (mov r8, r8)
 80043ac:	46bd      	mov	sp, r7
 80043ae:	b004      	add	sp, #16
 80043b0:	bd80      	pop	{r7, pc}
 80043b2:	46c0      	nop			; (mov r8, r8)
 80043b4:	20000010 	.word	0x20000010
 80043b8:	000f4240 	.word	0x000f4240

080043bc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80043bc:	b580      	push	{r7, lr}
 80043be:	b082      	sub	sp, #8
 80043c0:	af00      	add	r7, sp, #0
 80043c2:	0002      	movs	r2, r0
 80043c4:	1dfb      	adds	r3, r7, #7
 80043c6:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80043c8:	1dfb      	adds	r3, r7, #7
 80043ca:	781b      	ldrb	r3, [r3, #0]
 80043cc:	2b7f      	cmp	r3, #127	; 0x7f
 80043ce:	d809      	bhi.n	80043e4 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80043d0:	1dfb      	adds	r3, r7, #7
 80043d2:	781b      	ldrb	r3, [r3, #0]
 80043d4:	001a      	movs	r2, r3
 80043d6:	231f      	movs	r3, #31
 80043d8:	401a      	ands	r2, r3
 80043da:	4b04      	ldr	r3, [pc, #16]	; (80043ec <__NVIC_EnableIRQ+0x30>)
 80043dc:	2101      	movs	r1, #1
 80043de:	4091      	lsls	r1, r2
 80043e0:	000a      	movs	r2, r1
 80043e2:	601a      	str	r2, [r3, #0]
  }
}
 80043e4:	46c0      	nop			; (mov r8, r8)
 80043e6:	46bd      	mov	sp, r7
 80043e8:	b002      	add	sp, #8
 80043ea:	bd80      	pop	{r7, pc}
 80043ec:	e000e100 	.word	0xe000e100

080043f0 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80043f0:	b580      	push	{r7, lr}
 80043f2:	b082      	sub	sp, #8
 80043f4:	af00      	add	r7, sp, #0
 80043f6:	0002      	movs	r2, r0
 80043f8:	1dfb      	adds	r3, r7, #7
 80043fa:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80043fc:	1dfb      	adds	r3, r7, #7
 80043fe:	781b      	ldrb	r3, [r3, #0]
 8004400:	2b7f      	cmp	r3, #127	; 0x7f
 8004402:	d810      	bhi.n	8004426 <__NVIC_DisableIRQ+0x36>
  {
    NVIC->ICER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004404:	1dfb      	adds	r3, r7, #7
 8004406:	781b      	ldrb	r3, [r3, #0]
 8004408:	001a      	movs	r2, r3
 800440a:	231f      	movs	r3, #31
 800440c:	4013      	ands	r3, r2
 800440e:	4908      	ldr	r1, [pc, #32]	; (8004430 <__NVIC_DisableIRQ+0x40>)
 8004410:	2201      	movs	r2, #1
 8004412:	409a      	lsls	r2, r3
 8004414:	0013      	movs	r3, r2
 8004416:	2280      	movs	r2, #128	; 0x80
 8004418:	508b      	str	r3, [r1, r2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800441a:	f3bf 8f4f 	dsb	sy
}
 800441e:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("isb 0xF":::"memory");
 8004420:	f3bf 8f6f 	isb	sy
}
 8004424:	46c0      	nop			; (mov r8, r8)
    __DSB();
    __ISB();
  }
}
 8004426:	46c0      	nop			; (mov r8, r8)
 8004428:	46bd      	mov	sp, r7
 800442a:	b002      	add	sp, #8
 800442c:	bd80      	pop	{r7, pc}
 800442e:	46c0      	nop			; (mov r8, r8)
 8004430:	e000e100 	.word	0xe000e100

08004434 <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 8004434:	b580      	push	{r7, lr}
 8004436:	b082      	sub	sp, #8
 8004438:	af00      	add	r7, sp, #0
 800443a:	0002      	movs	r2, r0
 800443c:	1dfb      	adds	r3, r7, #7
 800443e:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8004440:	1dfb      	adds	r3, r7, #7
 8004442:	781b      	ldrb	r3, [r3, #0]
 8004444:	2b7f      	cmp	r3, #127	; 0x7f
 8004446:	d80a      	bhi.n	800445e <__NVIC_ClearPendingIRQ+0x2a>
  {
    NVIC->ICPR[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004448:	1dfb      	adds	r3, r7, #7
 800444a:	781b      	ldrb	r3, [r3, #0]
 800444c:	001a      	movs	r2, r3
 800444e:	231f      	movs	r3, #31
 8004450:	4013      	ands	r3, r2
 8004452:	4905      	ldr	r1, [pc, #20]	; (8004468 <__NVIC_ClearPendingIRQ+0x34>)
 8004454:	2201      	movs	r2, #1
 8004456:	409a      	lsls	r2, r3
 8004458:	23c0      	movs	r3, #192	; 0xc0
 800445a:	005b      	lsls	r3, r3, #1
 800445c:	50ca      	str	r2, [r1, r3]
  }
}
 800445e:	46c0      	nop			; (mov r8, r8)
 8004460:	46bd      	mov	sp, r7
 8004462:	b002      	add	sp, #8
 8004464:	bd80      	pop	{r7, pc}
 8004466:	46c0      	nop			; (mov r8, r8)
 8004468:	e000e100 	.word	0xe000e100

0800446c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800446c:	b590      	push	{r4, r7, lr}
 800446e:	b083      	sub	sp, #12
 8004470:	af00      	add	r7, sp, #0
 8004472:	0002      	movs	r2, r0
 8004474:	6039      	str	r1, [r7, #0]
 8004476:	1dfb      	adds	r3, r7, #7
 8004478:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800447a:	1dfb      	adds	r3, r7, #7
 800447c:	781b      	ldrb	r3, [r3, #0]
 800447e:	2b7f      	cmp	r3, #127	; 0x7f
 8004480:	d828      	bhi.n	80044d4 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8004482:	4a2f      	ldr	r2, [pc, #188]	; (8004540 <__NVIC_SetPriority+0xd4>)
 8004484:	1dfb      	adds	r3, r7, #7
 8004486:	781b      	ldrb	r3, [r3, #0]
 8004488:	b25b      	sxtb	r3, r3
 800448a:	089b      	lsrs	r3, r3, #2
 800448c:	33c0      	adds	r3, #192	; 0xc0
 800448e:	009b      	lsls	r3, r3, #2
 8004490:	589b      	ldr	r3, [r3, r2]
 8004492:	1dfa      	adds	r2, r7, #7
 8004494:	7812      	ldrb	r2, [r2, #0]
 8004496:	0011      	movs	r1, r2
 8004498:	2203      	movs	r2, #3
 800449a:	400a      	ands	r2, r1
 800449c:	00d2      	lsls	r2, r2, #3
 800449e:	21ff      	movs	r1, #255	; 0xff
 80044a0:	4091      	lsls	r1, r2
 80044a2:	000a      	movs	r2, r1
 80044a4:	43d2      	mvns	r2, r2
 80044a6:	401a      	ands	r2, r3
 80044a8:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80044aa:	683b      	ldr	r3, [r7, #0]
 80044ac:	019b      	lsls	r3, r3, #6
 80044ae:	22ff      	movs	r2, #255	; 0xff
 80044b0:	401a      	ands	r2, r3
 80044b2:	1dfb      	adds	r3, r7, #7
 80044b4:	781b      	ldrb	r3, [r3, #0]
 80044b6:	0018      	movs	r0, r3
 80044b8:	2303      	movs	r3, #3
 80044ba:	4003      	ands	r3, r0
 80044bc:	00db      	lsls	r3, r3, #3
 80044be:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80044c0:	481f      	ldr	r0, [pc, #124]	; (8004540 <__NVIC_SetPriority+0xd4>)
 80044c2:	1dfb      	adds	r3, r7, #7
 80044c4:	781b      	ldrb	r3, [r3, #0]
 80044c6:	b25b      	sxtb	r3, r3
 80044c8:	089b      	lsrs	r3, r3, #2
 80044ca:	430a      	orrs	r2, r1
 80044cc:	33c0      	adds	r3, #192	; 0xc0
 80044ce:	009b      	lsls	r3, r3, #2
 80044d0:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80044d2:	e031      	b.n	8004538 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80044d4:	4a1b      	ldr	r2, [pc, #108]	; (8004544 <__NVIC_SetPriority+0xd8>)
 80044d6:	1dfb      	adds	r3, r7, #7
 80044d8:	781b      	ldrb	r3, [r3, #0]
 80044da:	0019      	movs	r1, r3
 80044dc:	230f      	movs	r3, #15
 80044de:	400b      	ands	r3, r1
 80044e0:	3b08      	subs	r3, #8
 80044e2:	089b      	lsrs	r3, r3, #2
 80044e4:	3306      	adds	r3, #6
 80044e6:	009b      	lsls	r3, r3, #2
 80044e8:	18d3      	adds	r3, r2, r3
 80044ea:	3304      	adds	r3, #4
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	1dfa      	adds	r2, r7, #7
 80044f0:	7812      	ldrb	r2, [r2, #0]
 80044f2:	0011      	movs	r1, r2
 80044f4:	2203      	movs	r2, #3
 80044f6:	400a      	ands	r2, r1
 80044f8:	00d2      	lsls	r2, r2, #3
 80044fa:	21ff      	movs	r1, #255	; 0xff
 80044fc:	4091      	lsls	r1, r2
 80044fe:	000a      	movs	r2, r1
 8004500:	43d2      	mvns	r2, r2
 8004502:	401a      	ands	r2, r3
 8004504:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8004506:	683b      	ldr	r3, [r7, #0]
 8004508:	019b      	lsls	r3, r3, #6
 800450a:	22ff      	movs	r2, #255	; 0xff
 800450c:	401a      	ands	r2, r3
 800450e:	1dfb      	adds	r3, r7, #7
 8004510:	781b      	ldrb	r3, [r3, #0]
 8004512:	0018      	movs	r0, r3
 8004514:	2303      	movs	r3, #3
 8004516:	4003      	ands	r3, r0
 8004518:	00db      	lsls	r3, r3, #3
 800451a:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800451c:	4809      	ldr	r0, [pc, #36]	; (8004544 <__NVIC_SetPriority+0xd8>)
 800451e:	1dfb      	adds	r3, r7, #7
 8004520:	781b      	ldrb	r3, [r3, #0]
 8004522:	001c      	movs	r4, r3
 8004524:	230f      	movs	r3, #15
 8004526:	4023      	ands	r3, r4
 8004528:	3b08      	subs	r3, #8
 800452a:	089b      	lsrs	r3, r3, #2
 800452c:	430a      	orrs	r2, r1
 800452e:	3306      	adds	r3, #6
 8004530:	009b      	lsls	r3, r3, #2
 8004532:	18c3      	adds	r3, r0, r3
 8004534:	3304      	adds	r3, #4
 8004536:	601a      	str	r2, [r3, #0]
}
 8004538:	46c0      	nop			; (mov r8, r8)
 800453a:	46bd      	mov	sp, r7
 800453c:	b003      	add	sp, #12
 800453e:	bd90      	pop	{r4, r7, pc}
 8004540:	e000e100 	.word	0xe000e100
 8004544:	e000ed00 	.word	0xe000ed00

08004548 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004548:	b580      	push	{r7, lr}
 800454a:	b082      	sub	sp, #8
 800454c:	af00      	add	r7, sp, #0
 800454e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	1e5a      	subs	r2, r3, #1
 8004554:	2380      	movs	r3, #128	; 0x80
 8004556:	045b      	lsls	r3, r3, #17
 8004558:	429a      	cmp	r2, r3
 800455a:	d301      	bcc.n	8004560 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 800455c:	2301      	movs	r3, #1
 800455e:	e010      	b.n	8004582 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004560:	4b0a      	ldr	r3, [pc, #40]	; (800458c <SysTick_Config+0x44>)
 8004562:	687a      	ldr	r2, [r7, #4]
 8004564:	3a01      	subs	r2, #1
 8004566:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004568:	2301      	movs	r3, #1
 800456a:	425b      	negs	r3, r3
 800456c:	2103      	movs	r1, #3
 800456e:	0018      	movs	r0, r3
 8004570:	f7ff ff7c 	bl	800446c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004574:	4b05      	ldr	r3, [pc, #20]	; (800458c <SysTick_Config+0x44>)
 8004576:	2200      	movs	r2, #0
 8004578:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800457a:	4b04      	ldr	r3, [pc, #16]	; (800458c <SysTick_Config+0x44>)
 800457c:	2207      	movs	r2, #7
 800457e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004580:	2300      	movs	r3, #0
}
 8004582:	0018      	movs	r0, r3
 8004584:	46bd      	mov	sp, r7
 8004586:	b002      	add	sp, #8
 8004588:	bd80      	pop	{r7, pc}
 800458a:	46c0      	nop			; (mov r8, r8)
 800458c:	e000e010 	.word	0xe000e010

08004590 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004590:	b580      	push	{r7, lr}
 8004592:	b084      	sub	sp, #16
 8004594:	af00      	add	r7, sp, #0
 8004596:	60b9      	str	r1, [r7, #8]
 8004598:	607a      	str	r2, [r7, #4]
 800459a:	210f      	movs	r1, #15
 800459c:	187b      	adds	r3, r7, r1
 800459e:	1c02      	adds	r2, r0, #0
 80045a0:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 80045a2:	68ba      	ldr	r2, [r7, #8]
 80045a4:	187b      	adds	r3, r7, r1
 80045a6:	781b      	ldrb	r3, [r3, #0]
 80045a8:	b25b      	sxtb	r3, r3
 80045aa:	0011      	movs	r1, r2
 80045ac:	0018      	movs	r0, r3
 80045ae:	f7ff ff5d 	bl	800446c <__NVIC_SetPriority>
}
 80045b2:	46c0      	nop			; (mov r8, r8)
 80045b4:	46bd      	mov	sp, r7
 80045b6:	b004      	add	sp, #16
 80045b8:	bd80      	pop	{r7, pc}

080045ba <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of  IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80045ba:	b580      	push	{r7, lr}
 80045bc:	b082      	sub	sp, #8
 80045be:	af00      	add	r7, sp, #0
 80045c0:	0002      	movs	r2, r0
 80045c2:	1dfb      	adds	r3, r7, #7
 80045c4:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80045c6:	1dfb      	adds	r3, r7, #7
 80045c8:	781b      	ldrb	r3, [r3, #0]
 80045ca:	b25b      	sxtb	r3, r3
 80045cc:	0018      	movs	r0, r3
 80045ce:	f7ff fef5 	bl	80043bc <__NVIC_EnableIRQ>
}
 80045d2:	46c0      	nop			; (mov r8, r8)
 80045d4:	46bd      	mov	sp, r7
 80045d6:	b002      	add	sp, #8
 80045d8:	bd80      	pop	{r7, pc}

080045da <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80045da:	b580      	push	{r7, lr}
 80045dc:	b082      	sub	sp, #8
 80045de:	af00      	add	r7, sp, #0
 80045e0:	0002      	movs	r2, r0
 80045e2:	1dfb      	adds	r3, r7, #7
 80045e4:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 80045e6:	1dfb      	adds	r3, r7, #7
 80045e8:	781b      	ldrb	r3, [r3, #0]
 80045ea:	b25b      	sxtb	r3, r3
 80045ec:	0018      	movs	r0, r3
 80045ee:	f7ff feff 	bl	80043f0 <__NVIC_DisableIRQ>
}
 80045f2:	46c0      	nop			; (mov r8, r8)
 80045f4:	46bd      	mov	sp, r7
 80045f6:	b002      	add	sp, #8
 80045f8:	bd80      	pop	{r7, pc}

080045fa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80045fa:	b580      	push	{r7, lr}
 80045fc:	b082      	sub	sp, #8
 80045fe:	af00      	add	r7, sp, #0
 8004600:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	0018      	movs	r0, r3
 8004606:	f7ff ff9f 	bl	8004548 <SysTick_Config>
 800460a:	0003      	movs	r3, r0
}
 800460c:	0018      	movs	r0, r3
 800460e:	46bd      	mov	sp, r7
 8004610:	b002      	add	sp, #8
 8004612:	bd80      	pop	{r7, pc}

08004614 <HAL_NVIC_ClearPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{ 
 8004614:	b580      	push	{r7, lr}
 8004616:	b082      	sub	sp, #8
 8004618:	af00      	add	r7, sp, #0
 800461a:	0002      	movs	r2, r0
 800461c:	1dfb      	adds	r3, r7, #7
 800461e:	701a      	strb	r2, [r3, #0]
  /* Clear pending interrupt */
  NVIC_ClearPendingIRQ(IRQn);
 8004620:	1dfb      	adds	r3, r7, #7
 8004622:	781b      	ldrb	r3, [r3, #0]
 8004624:	b25b      	sxtb	r3, r3
 8004626:	0018      	movs	r0, r3
 8004628:	f7ff ff04 	bl	8004434 <__NVIC_ClearPendingIRQ>
}
 800462c:	46c0      	nop			; (mov r8, r8)
 800462e:	46bd      	mov	sp, r7
 8004630:	b002      	add	sp, #8
 8004632:	bd80      	pop	{r7, pc}

08004634 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004634:	b580      	push	{r7, lr}
 8004636:	b086      	sub	sp, #24
 8004638:	af00      	add	r7, sp, #0
 800463a:	6078      	str	r0, [r7, #4]
 800463c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800463e:	2300      	movs	r3, #0
 8004640:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8004642:	2300      	movs	r3, #0
 8004644:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 8004646:	2300      	movs	r3, #0
 8004648:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 800464a:	e14f      	b.n	80048ec <HAL_GPIO_Init+0x2b8>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 800464c:	683b      	ldr	r3, [r7, #0]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	2101      	movs	r1, #1
 8004652:	697a      	ldr	r2, [r7, #20]
 8004654:	4091      	lsls	r1, r2
 8004656:	000a      	movs	r2, r1
 8004658:	4013      	ands	r3, r2
 800465a:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	2b00      	cmp	r3, #0
 8004660:	d100      	bne.n	8004664 <HAL_GPIO_Init+0x30>
 8004662:	e140      	b.n	80048e6 <HAL_GPIO_Init+0x2b2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8004664:	683b      	ldr	r3, [r7, #0]
 8004666:	685b      	ldr	r3, [r3, #4]
 8004668:	2203      	movs	r2, #3
 800466a:	4013      	ands	r3, r2
 800466c:	2b01      	cmp	r3, #1
 800466e:	d005      	beq.n	800467c <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004670:	683b      	ldr	r3, [r7, #0]
 8004672:	685b      	ldr	r3, [r3, #4]
 8004674:	2203      	movs	r2, #3
 8004676:	4013      	ands	r3, r2
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8004678:	2b02      	cmp	r3, #2
 800467a:	d130      	bne.n	80046de <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	689b      	ldr	r3, [r3, #8]
 8004680:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 8004682:	697b      	ldr	r3, [r7, #20]
 8004684:	005b      	lsls	r3, r3, #1
 8004686:	2203      	movs	r2, #3
 8004688:	409a      	lsls	r2, r3
 800468a:	0013      	movs	r3, r2
 800468c:	43da      	mvns	r2, r3
 800468e:	693b      	ldr	r3, [r7, #16]
 8004690:	4013      	ands	r3, r2
 8004692:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004694:	683b      	ldr	r3, [r7, #0]
 8004696:	68da      	ldr	r2, [r3, #12]
 8004698:	697b      	ldr	r3, [r7, #20]
 800469a:	005b      	lsls	r3, r3, #1
 800469c:	409a      	lsls	r2, r3
 800469e:	0013      	movs	r3, r2
 80046a0:	693a      	ldr	r2, [r7, #16]
 80046a2:	4313      	orrs	r3, r2
 80046a4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	693a      	ldr	r2, [r7, #16]
 80046aa:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	685b      	ldr	r3, [r3, #4]
 80046b0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80046b2:	2201      	movs	r2, #1
 80046b4:	697b      	ldr	r3, [r7, #20]
 80046b6:	409a      	lsls	r2, r3
 80046b8:	0013      	movs	r3, r2
 80046ba:	43da      	mvns	r2, r3
 80046bc:	693b      	ldr	r3, [r7, #16]
 80046be:	4013      	ands	r3, r2
 80046c0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80046c2:	683b      	ldr	r3, [r7, #0]
 80046c4:	685b      	ldr	r3, [r3, #4]
 80046c6:	091b      	lsrs	r3, r3, #4
 80046c8:	2201      	movs	r2, #1
 80046ca:	401a      	ands	r2, r3
 80046cc:	697b      	ldr	r3, [r7, #20]
 80046ce:	409a      	lsls	r2, r3
 80046d0:	0013      	movs	r3, r2
 80046d2:	693a      	ldr	r2, [r7, #16]
 80046d4:	4313      	orrs	r3, r2
 80046d6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	693a      	ldr	r2, [r7, #16]
 80046dc:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80046de:	683b      	ldr	r3, [r7, #0]
 80046e0:	685b      	ldr	r3, [r3, #4]
 80046e2:	2203      	movs	r2, #3
 80046e4:	4013      	ands	r3, r2
 80046e6:	2b03      	cmp	r3, #3
 80046e8:	d017      	beq.n	800471a <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	68db      	ldr	r3, [r3, #12]
 80046ee:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80046f0:	697b      	ldr	r3, [r7, #20]
 80046f2:	005b      	lsls	r3, r3, #1
 80046f4:	2203      	movs	r2, #3
 80046f6:	409a      	lsls	r2, r3
 80046f8:	0013      	movs	r3, r2
 80046fa:	43da      	mvns	r2, r3
 80046fc:	693b      	ldr	r3, [r7, #16]
 80046fe:	4013      	ands	r3, r2
 8004700:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004702:	683b      	ldr	r3, [r7, #0]
 8004704:	689a      	ldr	r2, [r3, #8]
 8004706:	697b      	ldr	r3, [r7, #20]
 8004708:	005b      	lsls	r3, r3, #1
 800470a:	409a      	lsls	r2, r3
 800470c:	0013      	movs	r3, r2
 800470e:	693a      	ldr	r2, [r7, #16]
 8004710:	4313      	orrs	r3, r2
 8004712:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	693a      	ldr	r2, [r7, #16]
 8004718:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800471a:	683b      	ldr	r3, [r7, #0]
 800471c:	685b      	ldr	r3, [r3, #4]
 800471e:	2203      	movs	r2, #3
 8004720:	4013      	ands	r3, r2
 8004722:	2b02      	cmp	r3, #2
 8004724:	d123      	bne.n	800476e <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004726:	697b      	ldr	r3, [r7, #20]
 8004728:	08da      	lsrs	r2, r3, #3
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	3208      	adds	r2, #8
 800472e:	0092      	lsls	r2, r2, #2
 8004730:	58d3      	ldr	r3, [r2, r3]
 8004732:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 8004734:	697b      	ldr	r3, [r7, #20]
 8004736:	2207      	movs	r2, #7
 8004738:	4013      	ands	r3, r2
 800473a:	009b      	lsls	r3, r3, #2
 800473c:	220f      	movs	r2, #15
 800473e:	409a      	lsls	r2, r3
 8004740:	0013      	movs	r3, r2
 8004742:	43da      	mvns	r2, r3
 8004744:	693b      	ldr	r3, [r7, #16]
 8004746:	4013      	ands	r3, r2
 8004748:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 800474a:	683b      	ldr	r3, [r7, #0]
 800474c:	691a      	ldr	r2, [r3, #16]
 800474e:	697b      	ldr	r3, [r7, #20]
 8004750:	2107      	movs	r1, #7
 8004752:	400b      	ands	r3, r1
 8004754:	009b      	lsls	r3, r3, #2
 8004756:	409a      	lsls	r2, r3
 8004758:	0013      	movs	r3, r2
 800475a:	693a      	ldr	r2, [r7, #16]
 800475c:	4313      	orrs	r3, r2
 800475e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8004760:	697b      	ldr	r3, [r7, #20]
 8004762:	08da      	lsrs	r2, r3, #3
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	3208      	adds	r2, #8
 8004768:	0092      	lsls	r2, r2, #2
 800476a:	6939      	ldr	r1, [r7, #16]
 800476c:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8004774:	697b      	ldr	r3, [r7, #20]
 8004776:	005b      	lsls	r3, r3, #1
 8004778:	2203      	movs	r2, #3
 800477a:	409a      	lsls	r2, r3
 800477c:	0013      	movs	r3, r2
 800477e:	43da      	mvns	r2, r3
 8004780:	693b      	ldr	r3, [r7, #16]
 8004782:	4013      	ands	r3, r2
 8004784:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004786:	683b      	ldr	r3, [r7, #0]
 8004788:	685b      	ldr	r3, [r3, #4]
 800478a:	2203      	movs	r2, #3
 800478c:	401a      	ands	r2, r3
 800478e:	697b      	ldr	r3, [r7, #20]
 8004790:	005b      	lsls	r3, r3, #1
 8004792:	409a      	lsls	r2, r3
 8004794:	0013      	movs	r3, r2
 8004796:	693a      	ldr	r2, [r7, #16]
 8004798:	4313      	orrs	r3, r2
 800479a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	693a      	ldr	r2, [r7, #16]
 80047a0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80047a2:	683b      	ldr	r3, [r7, #0]
 80047a4:	685a      	ldr	r2, [r3, #4]
 80047a6:	23c0      	movs	r3, #192	; 0xc0
 80047a8:	029b      	lsls	r3, r3, #10
 80047aa:	4013      	ands	r3, r2
 80047ac:	d100      	bne.n	80047b0 <HAL_GPIO_Init+0x17c>
 80047ae:	e09a      	b.n	80048e6 <HAL_GPIO_Init+0x2b2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80047b0:	4b54      	ldr	r3, [pc, #336]	; (8004904 <HAL_GPIO_Init+0x2d0>)
 80047b2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80047b4:	4b53      	ldr	r3, [pc, #332]	; (8004904 <HAL_GPIO_Init+0x2d0>)
 80047b6:	2101      	movs	r1, #1
 80047b8:	430a      	orrs	r2, r1
 80047ba:	635a      	str	r2, [r3, #52]	; 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 80047bc:	4a52      	ldr	r2, [pc, #328]	; (8004908 <HAL_GPIO_Init+0x2d4>)
 80047be:	697b      	ldr	r3, [r7, #20]
 80047c0:	089b      	lsrs	r3, r3, #2
 80047c2:	3302      	adds	r3, #2
 80047c4:	009b      	lsls	r3, r3, #2
 80047c6:	589b      	ldr	r3, [r3, r2]
 80047c8:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 80047ca:	697b      	ldr	r3, [r7, #20]
 80047cc:	2203      	movs	r2, #3
 80047ce:	4013      	ands	r3, r2
 80047d0:	009b      	lsls	r3, r3, #2
 80047d2:	220f      	movs	r2, #15
 80047d4:	409a      	lsls	r2, r3
 80047d6:	0013      	movs	r3, r2
 80047d8:	43da      	mvns	r2, r3
 80047da:	693b      	ldr	r3, [r7, #16]
 80047dc:	4013      	ands	r3, r2
 80047de:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 80047e0:	687a      	ldr	r2, [r7, #4]
 80047e2:	23a0      	movs	r3, #160	; 0xa0
 80047e4:	05db      	lsls	r3, r3, #23
 80047e6:	429a      	cmp	r2, r3
 80047e8:	d019      	beq.n	800481e <HAL_GPIO_Init+0x1ea>
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	4a47      	ldr	r2, [pc, #284]	; (800490c <HAL_GPIO_Init+0x2d8>)
 80047ee:	4293      	cmp	r3, r2
 80047f0:	d013      	beq.n	800481a <HAL_GPIO_Init+0x1e6>
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	4a46      	ldr	r2, [pc, #280]	; (8004910 <HAL_GPIO_Init+0x2dc>)
 80047f6:	4293      	cmp	r3, r2
 80047f8:	d00d      	beq.n	8004816 <HAL_GPIO_Init+0x1e2>
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	4a45      	ldr	r2, [pc, #276]	; (8004914 <HAL_GPIO_Init+0x2e0>)
 80047fe:	4293      	cmp	r3, r2
 8004800:	d007      	beq.n	8004812 <HAL_GPIO_Init+0x1de>
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	4a44      	ldr	r2, [pc, #272]	; (8004918 <HAL_GPIO_Init+0x2e4>)
 8004806:	4293      	cmp	r3, r2
 8004808:	d101      	bne.n	800480e <HAL_GPIO_Init+0x1da>
 800480a:	2305      	movs	r3, #5
 800480c:	e008      	b.n	8004820 <HAL_GPIO_Init+0x1ec>
 800480e:	2306      	movs	r3, #6
 8004810:	e006      	b.n	8004820 <HAL_GPIO_Init+0x1ec>
 8004812:	2303      	movs	r3, #3
 8004814:	e004      	b.n	8004820 <HAL_GPIO_Init+0x1ec>
 8004816:	2302      	movs	r3, #2
 8004818:	e002      	b.n	8004820 <HAL_GPIO_Init+0x1ec>
 800481a:	2301      	movs	r3, #1
 800481c:	e000      	b.n	8004820 <HAL_GPIO_Init+0x1ec>
 800481e:	2300      	movs	r3, #0
 8004820:	697a      	ldr	r2, [r7, #20]
 8004822:	2103      	movs	r1, #3
 8004824:	400a      	ands	r2, r1
 8004826:	0092      	lsls	r2, r2, #2
 8004828:	4093      	lsls	r3, r2
 800482a:	693a      	ldr	r2, [r7, #16]
 800482c:	4313      	orrs	r3, r2
 800482e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004830:	4935      	ldr	r1, [pc, #212]	; (8004908 <HAL_GPIO_Init+0x2d4>)
 8004832:	697b      	ldr	r3, [r7, #20]
 8004834:	089b      	lsrs	r3, r3, #2
 8004836:	3302      	adds	r3, #2
 8004838:	009b      	lsls	r3, r3, #2
 800483a:	693a      	ldr	r2, [r7, #16]
 800483c:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800483e:	4b37      	ldr	r3, [pc, #220]	; (800491c <HAL_GPIO_Init+0x2e8>)
 8004840:	689b      	ldr	r3, [r3, #8]
 8004842:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	43da      	mvns	r2, r3
 8004848:	693b      	ldr	r3, [r7, #16]
 800484a:	4013      	ands	r3, r2
 800484c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800484e:	683b      	ldr	r3, [r7, #0]
 8004850:	685a      	ldr	r2, [r3, #4]
 8004852:	2380      	movs	r3, #128	; 0x80
 8004854:	035b      	lsls	r3, r3, #13
 8004856:	4013      	ands	r3, r2
 8004858:	d003      	beq.n	8004862 <HAL_GPIO_Init+0x22e>
        {
          temp |= iocurrent;
 800485a:	693a      	ldr	r2, [r7, #16]
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	4313      	orrs	r3, r2
 8004860:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8004862:	4b2e      	ldr	r3, [pc, #184]	; (800491c <HAL_GPIO_Init+0x2e8>)
 8004864:	693a      	ldr	r2, [r7, #16]
 8004866:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8004868:	4b2c      	ldr	r3, [pc, #176]	; (800491c <HAL_GPIO_Init+0x2e8>)
 800486a:	68db      	ldr	r3, [r3, #12]
 800486c:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	43da      	mvns	r2, r3
 8004872:	693b      	ldr	r3, [r7, #16]
 8004874:	4013      	ands	r3, r2
 8004876:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004878:	683b      	ldr	r3, [r7, #0]
 800487a:	685a      	ldr	r2, [r3, #4]
 800487c:	2380      	movs	r3, #128	; 0x80
 800487e:	039b      	lsls	r3, r3, #14
 8004880:	4013      	ands	r3, r2
 8004882:	d003      	beq.n	800488c <HAL_GPIO_Init+0x258>
        {
          temp |= iocurrent;
 8004884:	693a      	ldr	r2, [r7, #16]
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	4313      	orrs	r3, r2
 800488a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800488c:	4b23      	ldr	r3, [pc, #140]	; (800491c <HAL_GPIO_Init+0x2e8>)
 800488e:	693a      	ldr	r2, [r7, #16]
 8004890:	60da      	str	r2, [r3, #12]

        temp = EXTI->EMR;
 8004892:	4b22      	ldr	r3, [pc, #136]	; (800491c <HAL_GPIO_Init+0x2e8>)
 8004894:	685b      	ldr	r3, [r3, #4]
 8004896:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	43da      	mvns	r2, r3
 800489c:	693b      	ldr	r3, [r7, #16]
 800489e:	4013      	ands	r3, r2
 80048a0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80048a2:	683b      	ldr	r3, [r7, #0]
 80048a4:	685a      	ldr	r2, [r3, #4]
 80048a6:	2380      	movs	r3, #128	; 0x80
 80048a8:	029b      	lsls	r3, r3, #10
 80048aa:	4013      	ands	r3, r2
 80048ac:	d003      	beq.n	80048b6 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80048ae:	693a      	ldr	r2, [r7, #16]
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	4313      	orrs	r3, r2
 80048b4:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80048b6:	4b19      	ldr	r3, [pc, #100]	; (800491c <HAL_GPIO_Init+0x2e8>)
 80048b8:	693a      	ldr	r2, [r7, #16]
 80048ba:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80048bc:	4b17      	ldr	r3, [pc, #92]	; (800491c <HAL_GPIO_Init+0x2e8>)
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	43da      	mvns	r2, r3
 80048c6:	693b      	ldr	r3, [r7, #16]
 80048c8:	4013      	ands	r3, r2
 80048ca:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80048cc:	683b      	ldr	r3, [r7, #0]
 80048ce:	685a      	ldr	r2, [r3, #4]
 80048d0:	2380      	movs	r3, #128	; 0x80
 80048d2:	025b      	lsls	r3, r3, #9
 80048d4:	4013      	ands	r3, r2
 80048d6:	d003      	beq.n	80048e0 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80048d8:	693a      	ldr	r2, [r7, #16]
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	4313      	orrs	r3, r2
 80048de:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80048e0:	4b0e      	ldr	r3, [pc, #56]	; (800491c <HAL_GPIO_Init+0x2e8>)
 80048e2:	693a      	ldr	r2, [r7, #16]
 80048e4:	601a      	str	r2, [r3, #0]
      }
    }
    position++;
 80048e6:	697b      	ldr	r3, [r7, #20]
 80048e8:	3301      	adds	r3, #1
 80048ea:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 80048ec:	683b      	ldr	r3, [r7, #0]
 80048ee:	681a      	ldr	r2, [r3, #0]
 80048f0:	697b      	ldr	r3, [r7, #20]
 80048f2:	40da      	lsrs	r2, r3
 80048f4:	1e13      	subs	r3, r2, #0
 80048f6:	d000      	beq.n	80048fa <HAL_GPIO_Init+0x2c6>
 80048f8:	e6a8      	b.n	800464c <HAL_GPIO_Init+0x18>
  }
}
 80048fa:	46c0      	nop			; (mov r8, r8)
 80048fc:	46c0      	nop			; (mov r8, r8)
 80048fe:	46bd      	mov	sp, r7
 8004900:	b006      	add	sp, #24
 8004902:	bd80      	pop	{r7, pc}
 8004904:	40021000 	.word	0x40021000
 8004908:	40010000 	.word	0x40010000
 800490c:	50000400 	.word	0x50000400
 8004910:	50000800 	.word	0x50000800
 8004914:	50000c00 	.word	0x50000c00
 8004918:	50001c00 	.word	0x50001c00
 800491c:	40010400 	.word	0x40010400

08004920 <HAL_GPIO_ReadPin>:
  *                   This parameter can be GPIO_PIN_x where x can be (0..15).
  *                   All port bits are not necessarily available on all GPIOs.
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8004920:	b580      	push	{r7, lr}
 8004922:	b084      	sub	sp, #16
 8004924:	af00      	add	r7, sp, #0
 8004926:	6078      	str	r0, [r7, #4]
 8004928:	000a      	movs	r2, r1
 800492a:	1cbb      	adds	r3, r7, #2
 800492c:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	691b      	ldr	r3, [r3, #16]
 8004932:	1cba      	adds	r2, r7, #2
 8004934:	8812      	ldrh	r2, [r2, #0]
 8004936:	4013      	ands	r3, r2
 8004938:	d004      	beq.n	8004944 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 800493a:	230f      	movs	r3, #15
 800493c:	18fb      	adds	r3, r7, r3
 800493e:	2201      	movs	r2, #1
 8004940:	701a      	strb	r2, [r3, #0]
 8004942:	e003      	b.n	800494c <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004944:	230f      	movs	r3, #15
 8004946:	18fb      	adds	r3, r7, r3
 8004948:	2200      	movs	r2, #0
 800494a:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 800494c:	230f      	movs	r3, #15
 800494e:	18fb      	adds	r3, r7, r3
 8004950:	781b      	ldrb	r3, [r3, #0]
}
 8004952:	0018      	movs	r0, r3
 8004954:	46bd      	mov	sp, r7
 8004956:	b004      	add	sp, #16
 8004958:	bd80      	pop	{r7, pc}

0800495a <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800495a:	b580      	push	{r7, lr}
 800495c:	b082      	sub	sp, #8
 800495e:	af00      	add	r7, sp, #0
 8004960:	6078      	str	r0, [r7, #4]
 8004962:	0008      	movs	r0, r1
 8004964:	0011      	movs	r1, r2
 8004966:	1cbb      	adds	r3, r7, #2
 8004968:	1c02      	adds	r2, r0, #0
 800496a:	801a      	strh	r2, [r3, #0]
 800496c:	1c7b      	adds	r3, r7, #1
 800496e:	1c0a      	adds	r2, r1, #0
 8004970:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004972:	1c7b      	adds	r3, r7, #1
 8004974:	781b      	ldrb	r3, [r3, #0]
 8004976:	2b00      	cmp	r3, #0
 8004978:	d004      	beq.n	8004984 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 800497a:	1cbb      	adds	r3, r7, #2
 800497c:	881a      	ldrh	r2, [r3, #0]
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 8004982:	e003      	b.n	800498c <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 8004984:	1cbb      	adds	r3, r7, #2
 8004986:	881a      	ldrh	r2, [r3, #0]
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800498c:	46c0      	nop			; (mov r8, r8)
 800498e:	46bd      	mov	sp, r7
 8004990:	b002      	add	sp, #8
 8004992:	bd80      	pop	{r7, pc}

08004994 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected to the EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004994:	b580      	push	{r7, lr}
 8004996:	b082      	sub	sp, #8
 8004998:	af00      	add	r7, sp, #0
 800499a:	0002      	movs	r2, r0
 800499c:	1dbb      	adds	r3, r7, #6
 800499e:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80049a0:	4b09      	ldr	r3, [pc, #36]	; (80049c8 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 80049a2:	695b      	ldr	r3, [r3, #20]
 80049a4:	1dba      	adds	r2, r7, #6
 80049a6:	8812      	ldrh	r2, [r2, #0]
 80049a8:	4013      	ands	r3, r2
 80049aa:	d008      	beq.n	80049be <HAL_GPIO_EXTI_IRQHandler+0x2a>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80049ac:	4b06      	ldr	r3, [pc, #24]	; (80049c8 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 80049ae:	1dba      	adds	r2, r7, #6
 80049b0:	8812      	ldrh	r2, [r2, #0]
 80049b2:	615a      	str	r2, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80049b4:	1dbb      	adds	r3, r7, #6
 80049b6:	881b      	ldrh	r3, [r3, #0]
 80049b8:	0018      	movs	r0, r3
 80049ba:	f7fe f9f7 	bl	8002dac <HAL_GPIO_EXTI_Callback>
  }
}
 80049be:	46c0      	nop			; (mov r8, r8)
 80049c0:	46bd      	mov	sp, r7
 80049c2:	b002      	add	sp, #8
 80049c4:	bd80      	pop	{r7, pc}
 80049c6:	46c0      	nop			; (mov r8, r8)
 80049c8:	40010400 	.word	0x40010400

080049cc <HAL_PWR_EnterSTOPMode>:
  *            @arg PWR_STOPENTRY_WFI: Enter Stop mode with WFI instruction
  *            @arg PWR_STOPENTRY_WFE: Enter Stop mode with WFE instruction   
  * @retval None
  */
void HAL_PWR_EnterSTOPMode(uint32_t Regulator, uint8_t STOPEntry)
{
 80049cc:	b580      	push	{r7, lr}
 80049ce:	b086      	sub	sp, #24
 80049d0:	af00      	add	r7, sp, #0
 80049d2:	6078      	str	r0, [r7, #4]
 80049d4:	000a      	movs	r2, r1
 80049d6:	1cfb      	adds	r3, r7, #3
 80049d8:	701a      	strb	r2, [r3, #0]
  uint32_t tmpreg = 0U;
 80049da:	2300      	movs	r3, #0
 80049dc:	617b      	str	r3, [r7, #20]
  assert_param(IS_PWR_REGULATOR(Regulator));
  assert_param(IS_PWR_STOP_ENTRY(STOPEntry));

  /* It is forbidden to configure both EN_VREFINT=1 and ULP=1 if the device is
     in Stop mode or in Sleep/Low-power sleep mode */
  ulpbit = READ_BIT(PWR->CR, PWR_CR_ULP);
 80049de:	4b25      	ldr	r3, [pc, #148]	; (8004a74 <HAL_PWR_EnterSTOPMode+0xa8>)
 80049e0:	681a      	ldr	r2, [r3, #0]
 80049e2:	2380      	movs	r3, #128	; 0x80
 80049e4:	009b      	lsls	r3, r3, #2
 80049e6:	4013      	ands	r3, r2
 80049e8:	613b      	str	r3, [r7, #16]
  vrefinbit = READ_BIT(SYSCFG->CFGR3, SYSCFG_CFGR3_EN_VREFINT);
 80049ea:	4b23      	ldr	r3, [pc, #140]	; (8004a78 <HAL_PWR_EnterSTOPMode+0xac>)
 80049ec:	6a1b      	ldr	r3, [r3, #32]
 80049ee:	2201      	movs	r2, #1
 80049f0:	4013      	ands	r3, r2
 80049f2:	60fb      	str	r3, [r7, #12]
  if((ulpbit != 0) && (vrefinbit != 0))
 80049f4:	693b      	ldr	r3, [r7, #16]
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d008      	beq.n	8004a0c <HAL_PWR_EnterSTOPMode+0x40>
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	d005      	beq.n	8004a0c <HAL_PWR_EnterSTOPMode+0x40>
  {
    CLEAR_BIT(PWR->CR, PWR_CR_ULP);
 8004a00:	4b1c      	ldr	r3, [pc, #112]	; (8004a74 <HAL_PWR_EnterSTOPMode+0xa8>)
 8004a02:	681a      	ldr	r2, [r3, #0]
 8004a04:	4b1b      	ldr	r3, [pc, #108]	; (8004a74 <HAL_PWR_EnterSTOPMode+0xa8>)
 8004a06:	491d      	ldr	r1, [pc, #116]	; (8004a7c <HAL_PWR_EnterSTOPMode+0xb0>)
 8004a08:	400a      	ands	r2, r1
 8004a0a:	601a      	str	r2, [r3, #0]
  }

  /* Select the regulator state in Stop mode ---------------------------------*/
  tmpreg = PWR->CR;
 8004a0c:	4b19      	ldr	r3, [pc, #100]	; (8004a74 <HAL_PWR_EnterSTOPMode+0xa8>)
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	617b      	str	r3, [r7, #20]
  
  /* Clear PDDS and LPDS bits */
  CLEAR_BIT(tmpreg, (PWR_CR_PDDS | PWR_CR_LPSDSR));
 8004a12:	697b      	ldr	r3, [r7, #20]
 8004a14:	2203      	movs	r2, #3
 8004a16:	4393      	bics	r3, r2
 8004a18:	617b      	str	r3, [r7, #20]

 /* Set LPSDSR bit according to PWR_Regulator value */
  SET_BIT(tmpreg, Regulator);
 8004a1a:	697a      	ldr	r2, [r7, #20]
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	4313      	orrs	r3, r2
 8004a20:	617b      	str	r3, [r7, #20]

  /* Store the new value */
  PWR->CR = tmpreg;
 8004a22:	4b14      	ldr	r3, [pc, #80]	; (8004a74 <HAL_PWR_EnterSTOPMode+0xa8>)
 8004a24:	697a      	ldr	r2, [r7, #20]
 8004a26:	601a      	str	r2, [r3, #0]

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8004a28:	4b15      	ldr	r3, [pc, #84]	; (8004a80 <HAL_PWR_EnterSTOPMode+0xb4>)
 8004a2a:	691a      	ldr	r2, [r3, #16]
 8004a2c:	4b14      	ldr	r3, [pc, #80]	; (8004a80 <HAL_PWR_EnterSTOPMode+0xb4>)
 8004a2e:	2104      	movs	r1, #4
 8004a30:	430a      	orrs	r2, r1
 8004a32:	611a      	str	r2, [r3, #16]

  /* Select Stop mode entry --------------------------------------------------*/
  if(STOPEntry == PWR_STOPENTRY_WFI)
 8004a34:	1cfb      	adds	r3, r7, #3
 8004a36:	781b      	ldrb	r3, [r3, #0]
 8004a38:	2b01      	cmp	r3, #1
 8004a3a:	d101      	bne.n	8004a40 <HAL_PWR_EnterSTOPMode+0x74>
  {
    /* Request Wait For Interrupt */
    __WFI();
 8004a3c:	bf30      	wfi
 8004a3e:	e002      	b.n	8004a46 <HAL_PWR_EnterSTOPMode+0x7a>
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 8004a40:	bf40      	sev
    __WFE();
 8004a42:	bf20      	wfe
    __WFE();
 8004a44:	bf20      	wfe
  }
 
  /* Reset SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8004a46:	4b0e      	ldr	r3, [pc, #56]	; (8004a80 <HAL_PWR_EnterSTOPMode+0xb4>)
 8004a48:	691a      	ldr	r2, [r3, #16]
 8004a4a:	4b0d      	ldr	r3, [pc, #52]	; (8004a80 <HAL_PWR_EnterSTOPMode+0xb4>)
 8004a4c:	2104      	movs	r1, #4
 8004a4e:	438a      	bics	r2, r1
 8004a50:	611a      	str	r2, [r3, #16]

  if((ulpbit != 0) && (vrefinbit != 0))
 8004a52:	693b      	ldr	r3, [r7, #16]
 8004a54:	2b00      	cmp	r3, #0
 8004a56:	d009      	beq.n	8004a6c <HAL_PWR_EnterSTOPMode+0xa0>
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d006      	beq.n	8004a6c <HAL_PWR_EnterSTOPMode+0xa0>
  {
    SET_BIT(PWR->CR, PWR_CR_ULP);
 8004a5e:	4b05      	ldr	r3, [pc, #20]	; (8004a74 <HAL_PWR_EnterSTOPMode+0xa8>)
 8004a60:	681a      	ldr	r2, [r3, #0]
 8004a62:	4b04      	ldr	r3, [pc, #16]	; (8004a74 <HAL_PWR_EnterSTOPMode+0xa8>)
 8004a64:	2180      	movs	r1, #128	; 0x80
 8004a66:	0089      	lsls	r1, r1, #2
 8004a68:	430a      	orrs	r2, r1
 8004a6a:	601a      	str	r2, [r3, #0]
  }
}
 8004a6c:	46c0      	nop			; (mov r8, r8)
 8004a6e:	46bd      	mov	sp, r7
 8004a70:	b006      	add	sp, #24
 8004a72:	bd80      	pop	{r7, pc}
 8004a74:	40007000 	.word	0x40007000
 8004a78:	40010000 	.word	0x40010000
 8004a7c:	fffffdff 	.word	0xfffffdff
 8004a80:	e000ed00 	.word	0xe000ed00

08004a84 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004a84:	b5b0      	push	{r4, r5, r7, lr}
 8004a86:	b08a      	sub	sp, #40	; 0x28
 8004a88:	af00      	add	r7, sp, #0
 8004a8a:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	d102      	bne.n	8004a98 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8004a92:	2301      	movs	r3, #1
 8004a94:	f000 fb5a 	bl	800514c <HAL_RCC_OscConfig+0x6c8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004a98:	4bce      	ldr	r3, [pc, #824]	; (8004dd4 <HAL_RCC_OscConfig+0x350>)
 8004a9a:	68db      	ldr	r3, [r3, #12]
 8004a9c:	220c      	movs	r2, #12
 8004a9e:	4013      	ands	r3, r2
 8004aa0:	623b      	str	r3, [r7, #32]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004aa2:	4bcc      	ldr	r3, [pc, #816]	; (8004dd4 <HAL_RCC_OscConfig+0x350>)
 8004aa4:	68da      	ldr	r2, [r3, #12]
 8004aa6:	2380      	movs	r3, #128	; 0x80
 8004aa8:	025b      	lsls	r3, r3, #9
 8004aaa:	4013      	ands	r3, r2
 8004aac:	61fb      	str	r3, [r7, #28]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	2201      	movs	r2, #1
 8004ab4:	4013      	ands	r3, r2
 8004ab6:	d100      	bne.n	8004aba <HAL_RCC_OscConfig+0x36>
 8004ab8:	e07c      	b.n	8004bb4 <HAL_RCC_OscConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004aba:	6a3b      	ldr	r3, [r7, #32]
 8004abc:	2b08      	cmp	r3, #8
 8004abe:	d007      	beq.n	8004ad0 <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8004ac0:	6a3b      	ldr	r3, [r7, #32]
 8004ac2:	2b0c      	cmp	r3, #12
 8004ac4:	d111      	bne.n	8004aea <HAL_RCC_OscConfig+0x66>
 8004ac6:	69fa      	ldr	r2, [r7, #28]
 8004ac8:	2380      	movs	r3, #128	; 0x80
 8004aca:	025b      	lsls	r3, r3, #9
 8004acc:	429a      	cmp	r2, r3
 8004ace:	d10c      	bne.n	8004aea <HAL_RCC_OscConfig+0x66>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004ad0:	4bc0      	ldr	r3, [pc, #768]	; (8004dd4 <HAL_RCC_OscConfig+0x350>)
 8004ad2:	681a      	ldr	r2, [r3, #0]
 8004ad4:	2380      	movs	r3, #128	; 0x80
 8004ad6:	029b      	lsls	r3, r3, #10
 8004ad8:	4013      	ands	r3, r2
 8004ada:	d100      	bne.n	8004ade <HAL_RCC_OscConfig+0x5a>
 8004adc:	e069      	b.n	8004bb2 <HAL_RCC_OscConfig+0x12e>
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	685b      	ldr	r3, [r3, #4]
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d165      	bne.n	8004bb2 <HAL_RCC_OscConfig+0x12e>
      {
        return HAL_ERROR;
 8004ae6:	2301      	movs	r3, #1
 8004ae8:	e330      	b.n	800514c <HAL_RCC_OscConfig+0x6c8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	685a      	ldr	r2, [r3, #4]
 8004aee:	2380      	movs	r3, #128	; 0x80
 8004af0:	025b      	lsls	r3, r3, #9
 8004af2:	429a      	cmp	r2, r3
 8004af4:	d107      	bne.n	8004b06 <HAL_RCC_OscConfig+0x82>
 8004af6:	4bb7      	ldr	r3, [pc, #732]	; (8004dd4 <HAL_RCC_OscConfig+0x350>)
 8004af8:	681a      	ldr	r2, [r3, #0]
 8004afa:	4bb6      	ldr	r3, [pc, #728]	; (8004dd4 <HAL_RCC_OscConfig+0x350>)
 8004afc:	2180      	movs	r1, #128	; 0x80
 8004afe:	0249      	lsls	r1, r1, #9
 8004b00:	430a      	orrs	r2, r1
 8004b02:	601a      	str	r2, [r3, #0]
 8004b04:	e027      	b.n	8004b56 <HAL_RCC_OscConfig+0xd2>
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	685a      	ldr	r2, [r3, #4]
 8004b0a:	23a0      	movs	r3, #160	; 0xa0
 8004b0c:	02db      	lsls	r3, r3, #11
 8004b0e:	429a      	cmp	r2, r3
 8004b10:	d10e      	bne.n	8004b30 <HAL_RCC_OscConfig+0xac>
 8004b12:	4bb0      	ldr	r3, [pc, #704]	; (8004dd4 <HAL_RCC_OscConfig+0x350>)
 8004b14:	681a      	ldr	r2, [r3, #0]
 8004b16:	4baf      	ldr	r3, [pc, #700]	; (8004dd4 <HAL_RCC_OscConfig+0x350>)
 8004b18:	2180      	movs	r1, #128	; 0x80
 8004b1a:	02c9      	lsls	r1, r1, #11
 8004b1c:	430a      	orrs	r2, r1
 8004b1e:	601a      	str	r2, [r3, #0]
 8004b20:	4bac      	ldr	r3, [pc, #688]	; (8004dd4 <HAL_RCC_OscConfig+0x350>)
 8004b22:	681a      	ldr	r2, [r3, #0]
 8004b24:	4bab      	ldr	r3, [pc, #684]	; (8004dd4 <HAL_RCC_OscConfig+0x350>)
 8004b26:	2180      	movs	r1, #128	; 0x80
 8004b28:	0249      	lsls	r1, r1, #9
 8004b2a:	430a      	orrs	r2, r1
 8004b2c:	601a      	str	r2, [r3, #0]
 8004b2e:	e012      	b.n	8004b56 <HAL_RCC_OscConfig+0xd2>
 8004b30:	4ba8      	ldr	r3, [pc, #672]	; (8004dd4 <HAL_RCC_OscConfig+0x350>)
 8004b32:	681a      	ldr	r2, [r3, #0]
 8004b34:	4ba7      	ldr	r3, [pc, #668]	; (8004dd4 <HAL_RCC_OscConfig+0x350>)
 8004b36:	49a8      	ldr	r1, [pc, #672]	; (8004dd8 <HAL_RCC_OscConfig+0x354>)
 8004b38:	400a      	ands	r2, r1
 8004b3a:	601a      	str	r2, [r3, #0]
 8004b3c:	4ba5      	ldr	r3, [pc, #660]	; (8004dd4 <HAL_RCC_OscConfig+0x350>)
 8004b3e:	681a      	ldr	r2, [r3, #0]
 8004b40:	2380      	movs	r3, #128	; 0x80
 8004b42:	025b      	lsls	r3, r3, #9
 8004b44:	4013      	ands	r3, r2
 8004b46:	60fb      	str	r3, [r7, #12]
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	4ba2      	ldr	r3, [pc, #648]	; (8004dd4 <HAL_RCC_OscConfig+0x350>)
 8004b4c:	681a      	ldr	r2, [r3, #0]
 8004b4e:	4ba1      	ldr	r3, [pc, #644]	; (8004dd4 <HAL_RCC_OscConfig+0x350>)
 8004b50:	49a2      	ldr	r1, [pc, #648]	; (8004ddc <HAL_RCC_OscConfig+0x358>)
 8004b52:	400a      	ands	r2, r1
 8004b54:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	685b      	ldr	r3, [r3, #4]
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d014      	beq.n	8004b88 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004b5e:	f7ff f865 	bl	8003c2c <HAL_GetTick>
 8004b62:	0003      	movs	r3, r0
 8004b64:	61bb      	str	r3, [r7, #24]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004b66:	e008      	b.n	8004b7a <HAL_RCC_OscConfig+0xf6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004b68:	f7ff f860 	bl	8003c2c <HAL_GetTick>
 8004b6c:	0002      	movs	r2, r0
 8004b6e:	69bb      	ldr	r3, [r7, #24]
 8004b70:	1ad3      	subs	r3, r2, r3
 8004b72:	2b64      	cmp	r3, #100	; 0x64
 8004b74:	d901      	bls.n	8004b7a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8004b76:	2303      	movs	r3, #3
 8004b78:	e2e8      	b.n	800514c <HAL_RCC_OscConfig+0x6c8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004b7a:	4b96      	ldr	r3, [pc, #600]	; (8004dd4 <HAL_RCC_OscConfig+0x350>)
 8004b7c:	681a      	ldr	r2, [r3, #0]
 8004b7e:	2380      	movs	r3, #128	; 0x80
 8004b80:	029b      	lsls	r3, r3, #10
 8004b82:	4013      	ands	r3, r2
 8004b84:	d0f0      	beq.n	8004b68 <HAL_RCC_OscConfig+0xe4>
 8004b86:	e015      	b.n	8004bb4 <HAL_RCC_OscConfig+0x130>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004b88:	f7ff f850 	bl	8003c2c <HAL_GetTick>
 8004b8c:	0003      	movs	r3, r0
 8004b8e:	61bb      	str	r3, [r7, #24]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8004b90:	e008      	b.n	8004ba4 <HAL_RCC_OscConfig+0x120>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004b92:	f7ff f84b 	bl	8003c2c <HAL_GetTick>
 8004b96:	0002      	movs	r2, r0
 8004b98:	69bb      	ldr	r3, [r7, #24]
 8004b9a:	1ad3      	subs	r3, r2, r3
 8004b9c:	2b64      	cmp	r3, #100	; 0x64
 8004b9e:	d901      	bls.n	8004ba4 <HAL_RCC_OscConfig+0x120>
          {
            return HAL_TIMEOUT;
 8004ba0:	2303      	movs	r3, #3
 8004ba2:	e2d3      	b.n	800514c <HAL_RCC_OscConfig+0x6c8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8004ba4:	4b8b      	ldr	r3, [pc, #556]	; (8004dd4 <HAL_RCC_OscConfig+0x350>)
 8004ba6:	681a      	ldr	r2, [r3, #0]
 8004ba8:	2380      	movs	r3, #128	; 0x80
 8004baa:	029b      	lsls	r3, r3, #10
 8004bac:	4013      	ands	r3, r2
 8004bae:	d1f0      	bne.n	8004b92 <HAL_RCC_OscConfig+0x10e>
 8004bb0:	e000      	b.n	8004bb4 <HAL_RCC_OscConfig+0x130>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004bb2:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	2202      	movs	r2, #2
 8004bba:	4013      	ands	r3, r2
 8004bbc:	d100      	bne.n	8004bc0 <HAL_RCC_OscConfig+0x13c>
 8004bbe:	e08b      	b.n	8004cd8 <HAL_RCC_OscConfig+0x254>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	68db      	ldr	r3, [r3, #12]
 8004bc4:	617b      	str	r3, [r7, #20]
      hsi_state &= ~RCC_CR_HSIOUTEN;
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004bc6:	6a3b      	ldr	r3, [r7, #32]
 8004bc8:	2b04      	cmp	r3, #4
 8004bca:	d005      	beq.n	8004bd8 <HAL_RCC_OscConfig+0x154>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8004bcc:	6a3b      	ldr	r3, [r7, #32]
 8004bce:	2b0c      	cmp	r3, #12
 8004bd0:	d13e      	bne.n	8004c50 <HAL_RCC_OscConfig+0x1cc>
 8004bd2:	69fb      	ldr	r3, [r7, #28]
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	d13b      	bne.n	8004c50 <HAL_RCC_OscConfig+0x1cc>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 8004bd8:	4b7e      	ldr	r3, [pc, #504]	; (8004dd4 <HAL_RCC_OscConfig+0x350>)
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	2204      	movs	r2, #4
 8004bde:	4013      	ands	r3, r2
 8004be0:	d004      	beq.n	8004bec <HAL_RCC_OscConfig+0x168>
 8004be2:	697b      	ldr	r3, [r7, #20]
 8004be4:	2b00      	cmp	r3, #0
 8004be6:	d101      	bne.n	8004bec <HAL_RCC_OscConfig+0x168>
      {
        return HAL_ERROR;
 8004be8:	2301      	movs	r3, #1
 8004bea:	e2af      	b.n	800514c <HAL_RCC_OscConfig+0x6c8>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004bec:	4b79      	ldr	r3, [pc, #484]	; (8004dd4 <HAL_RCC_OscConfig+0x350>)
 8004bee:	685b      	ldr	r3, [r3, #4]
 8004bf0:	4a7b      	ldr	r2, [pc, #492]	; (8004de0 <HAL_RCC_OscConfig+0x35c>)
 8004bf2:	4013      	ands	r3, r2
 8004bf4:	0019      	movs	r1, r3
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	691b      	ldr	r3, [r3, #16]
 8004bfa:	021a      	lsls	r2, r3, #8
 8004bfc:	4b75      	ldr	r3, [pc, #468]	; (8004dd4 <HAL_RCC_OscConfig+0x350>)
 8004bfe:	430a      	orrs	r2, r1
 8004c00:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8004c02:	4b74      	ldr	r3, [pc, #464]	; (8004dd4 <HAL_RCC_OscConfig+0x350>)
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	2209      	movs	r2, #9
 8004c08:	4393      	bics	r3, r2
 8004c0a:	0019      	movs	r1, r3
 8004c0c:	4b71      	ldr	r3, [pc, #452]	; (8004dd4 <HAL_RCC_OscConfig+0x350>)
 8004c0e:	697a      	ldr	r2, [r7, #20]
 8004c10:	430a      	orrs	r2, r1
 8004c12:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004c14:	f000 fbe8 	bl	80053e8 <HAL_RCC_GetSysClockFreq>
 8004c18:	0001      	movs	r1, r0
 8004c1a:	4b6e      	ldr	r3, [pc, #440]	; (8004dd4 <HAL_RCC_OscConfig+0x350>)
 8004c1c:	68db      	ldr	r3, [r3, #12]
 8004c1e:	091b      	lsrs	r3, r3, #4
 8004c20:	220f      	movs	r2, #15
 8004c22:	4013      	ands	r3, r2
 8004c24:	4a6f      	ldr	r2, [pc, #444]	; (8004de4 <HAL_RCC_OscConfig+0x360>)
 8004c26:	5cd3      	ldrb	r3, [r2, r3]
 8004c28:	000a      	movs	r2, r1
 8004c2a:	40da      	lsrs	r2, r3
 8004c2c:	4b6e      	ldr	r3, [pc, #440]	; (8004de8 <HAL_RCC_OscConfig+0x364>)
 8004c2e:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 8004c30:	4b6e      	ldr	r3, [pc, #440]	; (8004dec <HAL_RCC_OscConfig+0x368>)
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	2513      	movs	r5, #19
 8004c36:	197c      	adds	r4, r7, r5
 8004c38:	0018      	movs	r0, r3
 8004c3a:	f7fe ffb1 	bl	8003ba0 <HAL_InitTick>
 8004c3e:	0003      	movs	r3, r0
 8004c40:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 8004c42:	197b      	adds	r3, r7, r5
 8004c44:	781b      	ldrb	r3, [r3, #0]
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	d046      	beq.n	8004cd8 <HAL_RCC_OscConfig+0x254>
      {
        return status;
 8004c4a:	197b      	adds	r3, r7, r5
 8004c4c:	781b      	ldrb	r3, [r3, #0]
 8004c4e:	e27d      	b.n	800514c <HAL_RCC_OscConfig+0x6c8>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 8004c50:	697b      	ldr	r3, [r7, #20]
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	d027      	beq.n	8004ca6 <HAL_RCC_OscConfig+0x222>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8004c56:	4b5f      	ldr	r3, [pc, #380]	; (8004dd4 <HAL_RCC_OscConfig+0x350>)
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	2209      	movs	r2, #9
 8004c5c:	4393      	bics	r3, r2
 8004c5e:	0019      	movs	r1, r3
 8004c60:	4b5c      	ldr	r3, [pc, #368]	; (8004dd4 <HAL_RCC_OscConfig+0x350>)
 8004c62:	697a      	ldr	r2, [r7, #20]
 8004c64:	430a      	orrs	r2, r1
 8004c66:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004c68:	f7fe ffe0 	bl	8003c2c <HAL_GetTick>
 8004c6c:	0003      	movs	r3, r0
 8004c6e:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004c70:	e008      	b.n	8004c84 <HAL_RCC_OscConfig+0x200>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004c72:	f7fe ffdb 	bl	8003c2c <HAL_GetTick>
 8004c76:	0002      	movs	r2, r0
 8004c78:	69bb      	ldr	r3, [r7, #24]
 8004c7a:	1ad3      	subs	r3, r2, r3
 8004c7c:	2b02      	cmp	r3, #2
 8004c7e:	d901      	bls.n	8004c84 <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 8004c80:	2303      	movs	r3, #3
 8004c82:	e263      	b.n	800514c <HAL_RCC_OscConfig+0x6c8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004c84:	4b53      	ldr	r3, [pc, #332]	; (8004dd4 <HAL_RCC_OscConfig+0x350>)
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	2204      	movs	r2, #4
 8004c8a:	4013      	ands	r3, r2
 8004c8c:	d0f1      	beq.n	8004c72 <HAL_RCC_OscConfig+0x1ee>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004c8e:	4b51      	ldr	r3, [pc, #324]	; (8004dd4 <HAL_RCC_OscConfig+0x350>)
 8004c90:	685b      	ldr	r3, [r3, #4]
 8004c92:	4a53      	ldr	r2, [pc, #332]	; (8004de0 <HAL_RCC_OscConfig+0x35c>)
 8004c94:	4013      	ands	r3, r2
 8004c96:	0019      	movs	r1, r3
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	691b      	ldr	r3, [r3, #16]
 8004c9c:	021a      	lsls	r2, r3, #8
 8004c9e:	4b4d      	ldr	r3, [pc, #308]	; (8004dd4 <HAL_RCC_OscConfig+0x350>)
 8004ca0:	430a      	orrs	r2, r1
 8004ca2:	605a      	str	r2, [r3, #4]
 8004ca4:	e018      	b.n	8004cd8 <HAL_RCC_OscConfig+0x254>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004ca6:	4b4b      	ldr	r3, [pc, #300]	; (8004dd4 <HAL_RCC_OscConfig+0x350>)
 8004ca8:	681a      	ldr	r2, [r3, #0]
 8004caa:	4b4a      	ldr	r3, [pc, #296]	; (8004dd4 <HAL_RCC_OscConfig+0x350>)
 8004cac:	2101      	movs	r1, #1
 8004cae:	438a      	bics	r2, r1
 8004cb0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004cb2:	f7fe ffbb 	bl	8003c2c <HAL_GetTick>
 8004cb6:	0003      	movs	r3, r0
 8004cb8:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004cba:	e008      	b.n	8004cce <HAL_RCC_OscConfig+0x24a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004cbc:	f7fe ffb6 	bl	8003c2c <HAL_GetTick>
 8004cc0:	0002      	movs	r2, r0
 8004cc2:	69bb      	ldr	r3, [r7, #24]
 8004cc4:	1ad3      	subs	r3, r2, r3
 8004cc6:	2b02      	cmp	r3, #2
 8004cc8:	d901      	bls.n	8004cce <HAL_RCC_OscConfig+0x24a>
          {
            return HAL_TIMEOUT;
 8004cca:	2303      	movs	r3, #3
 8004ccc:	e23e      	b.n	800514c <HAL_RCC_OscConfig+0x6c8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004cce:	4b41      	ldr	r3, [pc, #260]	; (8004dd4 <HAL_RCC_OscConfig+0x350>)
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	2204      	movs	r2, #4
 8004cd4:	4013      	ands	r3, r2
 8004cd6:	d1f1      	bne.n	8004cbc <HAL_RCC_OscConfig+0x238>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	2210      	movs	r2, #16
 8004cde:	4013      	ands	r3, r2
 8004ce0:	d100      	bne.n	8004ce4 <HAL_RCC_OscConfig+0x260>
 8004ce2:	e0a1      	b.n	8004e28 <HAL_RCC_OscConfig+0x3a4>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004ce4:	6a3b      	ldr	r3, [r7, #32]
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	d140      	bne.n	8004d6c <HAL_RCC_OscConfig+0x2e8>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004cea:	4b3a      	ldr	r3, [pc, #232]	; (8004dd4 <HAL_RCC_OscConfig+0x350>)
 8004cec:	681a      	ldr	r2, [r3, #0]
 8004cee:	2380      	movs	r3, #128	; 0x80
 8004cf0:	009b      	lsls	r3, r3, #2
 8004cf2:	4013      	ands	r3, r2
 8004cf4:	d005      	beq.n	8004d02 <HAL_RCC_OscConfig+0x27e>
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	699b      	ldr	r3, [r3, #24]
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	d101      	bne.n	8004d02 <HAL_RCC_OscConfig+0x27e>
      {
        return HAL_ERROR;
 8004cfe:	2301      	movs	r3, #1
 8004d00:	e224      	b.n	800514c <HAL_RCC_OscConfig+0x6c8>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004d02:	4b34      	ldr	r3, [pc, #208]	; (8004dd4 <HAL_RCC_OscConfig+0x350>)
 8004d04:	685b      	ldr	r3, [r3, #4]
 8004d06:	4a3a      	ldr	r2, [pc, #232]	; (8004df0 <HAL_RCC_OscConfig+0x36c>)
 8004d08:	4013      	ands	r3, r2
 8004d0a:	0019      	movs	r1, r3
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	6a1a      	ldr	r2, [r3, #32]
 8004d10:	4b30      	ldr	r3, [pc, #192]	; (8004dd4 <HAL_RCC_OscConfig+0x350>)
 8004d12:	430a      	orrs	r2, r1
 8004d14:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004d16:	4b2f      	ldr	r3, [pc, #188]	; (8004dd4 <HAL_RCC_OscConfig+0x350>)
 8004d18:	685b      	ldr	r3, [r3, #4]
 8004d1a:	021b      	lsls	r3, r3, #8
 8004d1c:	0a19      	lsrs	r1, r3, #8
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	69db      	ldr	r3, [r3, #28]
 8004d22:	061a      	lsls	r2, r3, #24
 8004d24:	4b2b      	ldr	r3, [pc, #172]	; (8004dd4 <HAL_RCC_OscConfig+0x350>)
 8004d26:	430a      	orrs	r2, r1
 8004d28:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	6a1b      	ldr	r3, [r3, #32]
 8004d2e:	0b5b      	lsrs	r3, r3, #13
 8004d30:	3301      	adds	r3, #1
 8004d32:	2280      	movs	r2, #128	; 0x80
 8004d34:	0212      	lsls	r2, r2, #8
 8004d36:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8004d38:	4b26      	ldr	r3, [pc, #152]	; (8004dd4 <HAL_RCC_OscConfig+0x350>)
 8004d3a:	68db      	ldr	r3, [r3, #12]
 8004d3c:	091b      	lsrs	r3, r3, #4
 8004d3e:	210f      	movs	r1, #15
 8004d40:	400b      	ands	r3, r1
 8004d42:	4928      	ldr	r1, [pc, #160]	; (8004de4 <HAL_RCC_OscConfig+0x360>)
 8004d44:	5ccb      	ldrb	r3, [r1, r3]
 8004d46:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8004d48:	4b27      	ldr	r3, [pc, #156]	; (8004de8 <HAL_RCC_OscConfig+0x364>)
 8004d4a:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 8004d4c:	4b27      	ldr	r3, [pc, #156]	; (8004dec <HAL_RCC_OscConfig+0x368>)
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	2513      	movs	r5, #19
 8004d52:	197c      	adds	r4, r7, r5
 8004d54:	0018      	movs	r0, r3
 8004d56:	f7fe ff23 	bl	8003ba0 <HAL_InitTick>
 8004d5a:	0003      	movs	r3, r0
 8004d5c:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 8004d5e:	197b      	adds	r3, r7, r5
 8004d60:	781b      	ldrb	r3, [r3, #0]
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	d060      	beq.n	8004e28 <HAL_RCC_OscConfig+0x3a4>
        {
          return status;
 8004d66:	197b      	adds	r3, r7, r5
 8004d68:	781b      	ldrb	r3, [r3, #0]
 8004d6a:	e1ef      	b.n	800514c <HAL_RCC_OscConfig+0x6c8>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	699b      	ldr	r3, [r3, #24]
 8004d70:	2b00      	cmp	r3, #0
 8004d72:	d03f      	beq.n	8004df4 <HAL_RCC_OscConfig+0x370>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8004d74:	4b17      	ldr	r3, [pc, #92]	; (8004dd4 <HAL_RCC_OscConfig+0x350>)
 8004d76:	681a      	ldr	r2, [r3, #0]
 8004d78:	4b16      	ldr	r3, [pc, #88]	; (8004dd4 <HAL_RCC_OscConfig+0x350>)
 8004d7a:	2180      	movs	r1, #128	; 0x80
 8004d7c:	0049      	lsls	r1, r1, #1
 8004d7e:	430a      	orrs	r2, r1
 8004d80:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004d82:	f7fe ff53 	bl	8003c2c <HAL_GetTick>
 8004d86:	0003      	movs	r3, r0
 8004d88:	61bb      	str	r3, [r7, #24]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8004d8a:	e008      	b.n	8004d9e <HAL_RCC_OscConfig+0x31a>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004d8c:	f7fe ff4e 	bl	8003c2c <HAL_GetTick>
 8004d90:	0002      	movs	r2, r0
 8004d92:	69bb      	ldr	r3, [r7, #24]
 8004d94:	1ad3      	subs	r3, r2, r3
 8004d96:	2b02      	cmp	r3, #2
 8004d98:	d901      	bls.n	8004d9e <HAL_RCC_OscConfig+0x31a>
          {
            return HAL_TIMEOUT;
 8004d9a:	2303      	movs	r3, #3
 8004d9c:	e1d6      	b.n	800514c <HAL_RCC_OscConfig+0x6c8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8004d9e:	4b0d      	ldr	r3, [pc, #52]	; (8004dd4 <HAL_RCC_OscConfig+0x350>)
 8004da0:	681a      	ldr	r2, [r3, #0]
 8004da2:	2380      	movs	r3, #128	; 0x80
 8004da4:	009b      	lsls	r3, r3, #2
 8004da6:	4013      	ands	r3, r2
 8004da8:	d0f0      	beq.n	8004d8c <HAL_RCC_OscConfig+0x308>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004daa:	4b0a      	ldr	r3, [pc, #40]	; (8004dd4 <HAL_RCC_OscConfig+0x350>)
 8004dac:	685b      	ldr	r3, [r3, #4]
 8004dae:	4a10      	ldr	r2, [pc, #64]	; (8004df0 <HAL_RCC_OscConfig+0x36c>)
 8004db0:	4013      	ands	r3, r2
 8004db2:	0019      	movs	r1, r3
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	6a1a      	ldr	r2, [r3, #32]
 8004db8:	4b06      	ldr	r3, [pc, #24]	; (8004dd4 <HAL_RCC_OscConfig+0x350>)
 8004dba:	430a      	orrs	r2, r1
 8004dbc:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004dbe:	4b05      	ldr	r3, [pc, #20]	; (8004dd4 <HAL_RCC_OscConfig+0x350>)
 8004dc0:	685b      	ldr	r3, [r3, #4]
 8004dc2:	021b      	lsls	r3, r3, #8
 8004dc4:	0a19      	lsrs	r1, r3, #8
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	69db      	ldr	r3, [r3, #28]
 8004dca:	061a      	lsls	r2, r3, #24
 8004dcc:	4b01      	ldr	r3, [pc, #4]	; (8004dd4 <HAL_RCC_OscConfig+0x350>)
 8004dce:	430a      	orrs	r2, r1
 8004dd0:	605a      	str	r2, [r3, #4]
 8004dd2:	e029      	b.n	8004e28 <HAL_RCC_OscConfig+0x3a4>
 8004dd4:	40021000 	.word	0x40021000
 8004dd8:	fffeffff 	.word	0xfffeffff
 8004ddc:	fffbffff 	.word	0xfffbffff
 8004de0:	ffffe0ff 	.word	0xffffe0ff
 8004de4:	0800ccb0 	.word	0x0800ccb0
 8004de8:	20000010 	.word	0x20000010
 8004dec:	20000014 	.word	0x20000014
 8004df0:	ffff1fff 	.word	0xffff1fff
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8004df4:	4bbe      	ldr	r3, [pc, #760]	; (80050f0 <HAL_RCC_OscConfig+0x66c>)
 8004df6:	681a      	ldr	r2, [r3, #0]
 8004df8:	4bbd      	ldr	r3, [pc, #756]	; (80050f0 <HAL_RCC_OscConfig+0x66c>)
 8004dfa:	49be      	ldr	r1, [pc, #760]	; (80050f4 <HAL_RCC_OscConfig+0x670>)
 8004dfc:	400a      	ands	r2, r1
 8004dfe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004e00:	f7fe ff14 	bl	8003c2c <HAL_GetTick>
 8004e04:	0003      	movs	r3, r0
 8004e06:	61bb      	str	r3, [r7, #24]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8004e08:	e008      	b.n	8004e1c <HAL_RCC_OscConfig+0x398>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004e0a:	f7fe ff0f 	bl	8003c2c <HAL_GetTick>
 8004e0e:	0002      	movs	r2, r0
 8004e10:	69bb      	ldr	r3, [r7, #24]
 8004e12:	1ad3      	subs	r3, r2, r3
 8004e14:	2b02      	cmp	r3, #2
 8004e16:	d901      	bls.n	8004e1c <HAL_RCC_OscConfig+0x398>
          {
            return HAL_TIMEOUT;
 8004e18:	2303      	movs	r3, #3
 8004e1a:	e197      	b.n	800514c <HAL_RCC_OscConfig+0x6c8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8004e1c:	4bb4      	ldr	r3, [pc, #720]	; (80050f0 <HAL_RCC_OscConfig+0x66c>)
 8004e1e:	681a      	ldr	r2, [r3, #0]
 8004e20:	2380      	movs	r3, #128	; 0x80
 8004e22:	009b      	lsls	r3, r3, #2
 8004e24:	4013      	ands	r3, r2
 8004e26:	d1f0      	bne.n	8004e0a <HAL_RCC_OscConfig+0x386>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	2208      	movs	r2, #8
 8004e2e:	4013      	ands	r3, r2
 8004e30:	d036      	beq.n	8004ea0 <HAL_RCC_OscConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	695b      	ldr	r3, [r3, #20]
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	d019      	beq.n	8004e6e <HAL_RCC_OscConfig+0x3ea>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004e3a:	4bad      	ldr	r3, [pc, #692]	; (80050f0 <HAL_RCC_OscConfig+0x66c>)
 8004e3c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004e3e:	4bac      	ldr	r3, [pc, #688]	; (80050f0 <HAL_RCC_OscConfig+0x66c>)
 8004e40:	2101      	movs	r1, #1
 8004e42:	430a      	orrs	r2, r1
 8004e44:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004e46:	f7fe fef1 	bl	8003c2c <HAL_GetTick>
 8004e4a:	0003      	movs	r3, r0
 8004e4c:	61bb      	str	r3, [r7, #24]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8004e4e:	e008      	b.n	8004e62 <HAL_RCC_OscConfig+0x3de>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004e50:	f7fe feec 	bl	8003c2c <HAL_GetTick>
 8004e54:	0002      	movs	r2, r0
 8004e56:	69bb      	ldr	r3, [r7, #24]
 8004e58:	1ad3      	subs	r3, r2, r3
 8004e5a:	2b02      	cmp	r3, #2
 8004e5c:	d901      	bls.n	8004e62 <HAL_RCC_OscConfig+0x3de>
        {
          return HAL_TIMEOUT;
 8004e5e:	2303      	movs	r3, #3
 8004e60:	e174      	b.n	800514c <HAL_RCC_OscConfig+0x6c8>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8004e62:	4ba3      	ldr	r3, [pc, #652]	; (80050f0 <HAL_RCC_OscConfig+0x66c>)
 8004e64:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004e66:	2202      	movs	r2, #2
 8004e68:	4013      	ands	r3, r2
 8004e6a:	d0f1      	beq.n	8004e50 <HAL_RCC_OscConfig+0x3cc>
 8004e6c:	e018      	b.n	8004ea0 <HAL_RCC_OscConfig+0x41c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004e6e:	4ba0      	ldr	r3, [pc, #640]	; (80050f0 <HAL_RCC_OscConfig+0x66c>)
 8004e70:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004e72:	4b9f      	ldr	r3, [pc, #636]	; (80050f0 <HAL_RCC_OscConfig+0x66c>)
 8004e74:	2101      	movs	r1, #1
 8004e76:	438a      	bics	r2, r1
 8004e78:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004e7a:	f7fe fed7 	bl	8003c2c <HAL_GetTick>
 8004e7e:	0003      	movs	r3, r0
 8004e80:	61bb      	str	r3, [r7, #24]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8004e82:	e008      	b.n	8004e96 <HAL_RCC_OscConfig+0x412>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004e84:	f7fe fed2 	bl	8003c2c <HAL_GetTick>
 8004e88:	0002      	movs	r2, r0
 8004e8a:	69bb      	ldr	r3, [r7, #24]
 8004e8c:	1ad3      	subs	r3, r2, r3
 8004e8e:	2b02      	cmp	r3, #2
 8004e90:	d901      	bls.n	8004e96 <HAL_RCC_OscConfig+0x412>
        {
          return HAL_TIMEOUT;
 8004e92:	2303      	movs	r3, #3
 8004e94:	e15a      	b.n	800514c <HAL_RCC_OscConfig+0x6c8>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8004e96:	4b96      	ldr	r3, [pc, #600]	; (80050f0 <HAL_RCC_OscConfig+0x66c>)
 8004e98:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004e9a:	2202      	movs	r2, #2
 8004e9c:	4013      	ands	r3, r2
 8004e9e:	d1f1      	bne.n	8004e84 <HAL_RCC_OscConfig+0x400>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	2204      	movs	r2, #4
 8004ea6:	4013      	ands	r3, r2
 8004ea8:	d100      	bne.n	8004eac <HAL_RCC_OscConfig+0x428>
 8004eaa:	e0ae      	b.n	800500a <HAL_RCC_OscConfig+0x586>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004eac:	2027      	movs	r0, #39	; 0x27
 8004eae:	183b      	adds	r3, r7, r0
 8004eb0:	2200      	movs	r2, #0
 8004eb2:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004eb4:	4b8e      	ldr	r3, [pc, #568]	; (80050f0 <HAL_RCC_OscConfig+0x66c>)
 8004eb6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004eb8:	2380      	movs	r3, #128	; 0x80
 8004eba:	055b      	lsls	r3, r3, #21
 8004ebc:	4013      	ands	r3, r2
 8004ebe:	d109      	bne.n	8004ed4 <HAL_RCC_OscConfig+0x450>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004ec0:	4b8b      	ldr	r3, [pc, #556]	; (80050f0 <HAL_RCC_OscConfig+0x66c>)
 8004ec2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004ec4:	4b8a      	ldr	r3, [pc, #552]	; (80050f0 <HAL_RCC_OscConfig+0x66c>)
 8004ec6:	2180      	movs	r1, #128	; 0x80
 8004ec8:	0549      	lsls	r1, r1, #21
 8004eca:	430a      	orrs	r2, r1
 8004ecc:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 8004ece:	183b      	adds	r3, r7, r0
 8004ed0:	2201      	movs	r2, #1
 8004ed2:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004ed4:	4b88      	ldr	r3, [pc, #544]	; (80050f8 <HAL_RCC_OscConfig+0x674>)
 8004ed6:	681a      	ldr	r2, [r3, #0]
 8004ed8:	2380      	movs	r3, #128	; 0x80
 8004eda:	005b      	lsls	r3, r3, #1
 8004edc:	4013      	ands	r3, r2
 8004ede:	d11a      	bne.n	8004f16 <HAL_RCC_OscConfig+0x492>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004ee0:	4b85      	ldr	r3, [pc, #532]	; (80050f8 <HAL_RCC_OscConfig+0x674>)
 8004ee2:	681a      	ldr	r2, [r3, #0]
 8004ee4:	4b84      	ldr	r3, [pc, #528]	; (80050f8 <HAL_RCC_OscConfig+0x674>)
 8004ee6:	2180      	movs	r1, #128	; 0x80
 8004ee8:	0049      	lsls	r1, r1, #1
 8004eea:	430a      	orrs	r2, r1
 8004eec:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004eee:	f7fe fe9d 	bl	8003c2c <HAL_GetTick>
 8004ef2:	0003      	movs	r3, r0
 8004ef4:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004ef6:	e008      	b.n	8004f0a <HAL_RCC_OscConfig+0x486>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004ef8:	f7fe fe98 	bl	8003c2c <HAL_GetTick>
 8004efc:	0002      	movs	r2, r0
 8004efe:	69bb      	ldr	r3, [r7, #24]
 8004f00:	1ad3      	subs	r3, r2, r3
 8004f02:	2b64      	cmp	r3, #100	; 0x64
 8004f04:	d901      	bls.n	8004f0a <HAL_RCC_OscConfig+0x486>
        {
          return HAL_TIMEOUT;
 8004f06:	2303      	movs	r3, #3
 8004f08:	e120      	b.n	800514c <HAL_RCC_OscConfig+0x6c8>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004f0a:	4b7b      	ldr	r3, [pc, #492]	; (80050f8 <HAL_RCC_OscConfig+0x674>)
 8004f0c:	681a      	ldr	r2, [r3, #0]
 8004f0e:	2380      	movs	r3, #128	; 0x80
 8004f10:	005b      	lsls	r3, r3, #1
 8004f12:	4013      	ands	r3, r2
 8004f14:	d0f0      	beq.n	8004ef8 <HAL_RCC_OscConfig+0x474>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	689a      	ldr	r2, [r3, #8]
 8004f1a:	2380      	movs	r3, #128	; 0x80
 8004f1c:	005b      	lsls	r3, r3, #1
 8004f1e:	429a      	cmp	r2, r3
 8004f20:	d107      	bne.n	8004f32 <HAL_RCC_OscConfig+0x4ae>
 8004f22:	4b73      	ldr	r3, [pc, #460]	; (80050f0 <HAL_RCC_OscConfig+0x66c>)
 8004f24:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004f26:	4b72      	ldr	r3, [pc, #456]	; (80050f0 <HAL_RCC_OscConfig+0x66c>)
 8004f28:	2180      	movs	r1, #128	; 0x80
 8004f2a:	0049      	lsls	r1, r1, #1
 8004f2c:	430a      	orrs	r2, r1
 8004f2e:	651a      	str	r2, [r3, #80]	; 0x50
 8004f30:	e031      	b.n	8004f96 <HAL_RCC_OscConfig+0x512>
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	689b      	ldr	r3, [r3, #8]
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	d10c      	bne.n	8004f54 <HAL_RCC_OscConfig+0x4d0>
 8004f3a:	4b6d      	ldr	r3, [pc, #436]	; (80050f0 <HAL_RCC_OscConfig+0x66c>)
 8004f3c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004f3e:	4b6c      	ldr	r3, [pc, #432]	; (80050f0 <HAL_RCC_OscConfig+0x66c>)
 8004f40:	496c      	ldr	r1, [pc, #432]	; (80050f4 <HAL_RCC_OscConfig+0x670>)
 8004f42:	400a      	ands	r2, r1
 8004f44:	651a      	str	r2, [r3, #80]	; 0x50
 8004f46:	4b6a      	ldr	r3, [pc, #424]	; (80050f0 <HAL_RCC_OscConfig+0x66c>)
 8004f48:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004f4a:	4b69      	ldr	r3, [pc, #420]	; (80050f0 <HAL_RCC_OscConfig+0x66c>)
 8004f4c:	496b      	ldr	r1, [pc, #428]	; (80050fc <HAL_RCC_OscConfig+0x678>)
 8004f4e:	400a      	ands	r2, r1
 8004f50:	651a      	str	r2, [r3, #80]	; 0x50
 8004f52:	e020      	b.n	8004f96 <HAL_RCC_OscConfig+0x512>
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	689a      	ldr	r2, [r3, #8]
 8004f58:	23a0      	movs	r3, #160	; 0xa0
 8004f5a:	00db      	lsls	r3, r3, #3
 8004f5c:	429a      	cmp	r2, r3
 8004f5e:	d10e      	bne.n	8004f7e <HAL_RCC_OscConfig+0x4fa>
 8004f60:	4b63      	ldr	r3, [pc, #396]	; (80050f0 <HAL_RCC_OscConfig+0x66c>)
 8004f62:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004f64:	4b62      	ldr	r3, [pc, #392]	; (80050f0 <HAL_RCC_OscConfig+0x66c>)
 8004f66:	2180      	movs	r1, #128	; 0x80
 8004f68:	00c9      	lsls	r1, r1, #3
 8004f6a:	430a      	orrs	r2, r1
 8004f6c:	651a      	str	r2, [r3, #80]	; 0x50
 8004f6e:	4b60      	ldr	r3, [pc, #384]	; (80050f0 <HAL_RCC_OscConfig+0x66c>)
 8004f70:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004f72:	4b5f      	ldr	r3, [pc, #380]	; (80050f0 <HAL_RCC_OscConfig+0x66c>)
 8004f74:	2180      	movs	r1, #128	; 0x80
 8004f76:	0049      	lsls	r1, r1, #1
 8004f78:	430a      	orrs	r2, r1
 8004f7a:	651a      	str	r2, [r3, #80]	; 0x50
 8004f7c:	e00b      	b.n	8004f96 <HAL_RCC_OscConfig+0x512>
 8004f7e:	4b5c      	ldr	r3, [pc, #368]	; (80050f0 <HAL_RCC_OscConfig+0x66c>)
 8004f80:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004f82:	4b5b      	ldr	r3, [pc, #364]	; (80050f0 <HAL_RCC_OscConfig+0x66c>)
 8004f84:	495b      	ldr	r1, [pc, #364]	; (80050f4 <HAL_RCC_OscConfig+0x670>)
 8004f86:	400a      	ands	r2, r1
 8004f88:	651a      	str	r2, [r3, #80]	; 0x50
 8004f8a:	4b59      	ldr	r3, [pc, #356]	; (80050f0 <HAL_RCC_OscConfig+0x66c>)
 8004f8c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004f8e:	4b58      	ldr	r3, [pc, #352]	; (80050f0 <HAL_RCC_OscConfig+0x66c>)
 8004f90:	495a      	ldr	r1, [pc, #360]	; (80050fc <HAL_RCC_OscConfig+0x678>)
 8004f92:	400a      	ands	r2, r1
 8004f94:	651a      	str	r2, [r3, #80]	; 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	689b      	ldr	r3, [r3, #8]
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	d015      	beq.n	8004fca <HAL_RCC_OscConfig+0x546>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004f9e:	f7fe fe45 	bl	8003c2c <HAL_GetTick>
 8004fa2:	0003      	movs	r3, r0
 8004fa4:	61bb      	str	r3, [r7, #24]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004fa6:	e009      	b.n	8004fbc <HAL_RCC_OscConfig+0x538>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004fa8:	f7fe fe40 	bl	8003c2c <HAL_GetTick>
 8004fac:	0002      	movs	r2, r0
 8004fae:	69bb      	ldr	r3, [r7, #24]
 8004fb0:	1ad3      	subs	r3, r2, r3
 8004fb2:	4a53      	ldr	r2, [pc, #332]	; (8005100 <HAL_RCC_OscConfig+0x67c>)
 8004fb4:	4293      	cmp	r3, r2
 8004fb6:	d901      	bls.n	8004fbc <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 8004fb8:	2303      	movs	r3, #3
 8004fba:	e0c7      	b.n	800514c <HAL_RCC_OscConfig+0x6c8>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004fbc:	4b4c      	ldr	r3, [pc, #304]	; (80050f0 <HAL_RCC_OscConfig+0x66c>)
 8004fbe:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004fc0:	2380      	movs	r3, #128	; 0x80
 8004fc2:	009b      	lsls	r3, r3, #2
 8004fc4:	4013      	ands	r3, r2
 8004fc6:	d0ef      	beq.n	8004fa8 <HAL_RCC_OscConfig+0x524>
 8004fc8:	e014      	b.n	8004ff4 <HAL_RCC_OscConfig+0x570>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004fca:	f7fe fe2f 	bl	8003c2c <HAL_GetTick>
 8004fce:	0003      	movs	r3, r0
 8004fd0:	61bb      	str	r3, [r7, #24]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8004fd2:	e009      	b.n	8004fe8 <HAL_RCC_OscConfig+0x564>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004fd4:	f7fe fe2a 	bl	8003c2c <HAL_GetTick>
 8004fd8:	0002      	movs	r2, r0
 8004fda:	69bb      	ldr	r3, [r7, #24]
 8004fdc:	1ad3      	subs	r3, r2, r3
 8004fde:	4a48      	ldr	r2, [pc, #288]	; (8005100 <HAL_RCC_OscConfig+0x67c>)
 8004fe0:	4293      	cmp	r3, r2
 8004fe2:	d901      	bls.n	8004fe8 <HAL_RCC_OscConfig+0x564>
        {
          return HAL_TIMEOUT;
 8004fe4:	2303      	movs	r3, #3
 8004fe6:	e0b1      	b.n	800514c <HAL_RCC_OscConfig+0x6c8>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8004fe8:	4b41      	ldr	r3, [pc, #260]	; (80050f0 <HAL_RCC_OscConfig+0x66c>)
 8004fea:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004fec:	2380      	movs	r3, #128	; 0x80
 8004fee:	009b      	lsls	r3, r3, #2
 8004ff0:	4013      	ands	r3, r2
 8004ff2:	d1ef      	bne.n	8004fd4 <HAL_RCC_OscConfig+0x550>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8004ff4:	2327      	movs	r3, #39	; 0x27
 8004ff6:	18fb      	adds	r3, r7, r3
 8004ff8:	781b      	ldrb	r3, [r3, #0]
 8004ffa:	2b01      	cmp	r3, #1
 8004ffc:	d105      	bne.n	800500a <HAL_RCC_OscConfig+0x586>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004ffe:	4b3c      	ldr	r3, [pc, #240]	; (80050f0 <HAL_RCC_OscConfig+0x66c>)
 8005000:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005002:	4b3b      	ldr	r3, [pc, #236]	; (80050f0 <HAL_RCC_OscConfig+0x66c>)
 8005004:	493f      	ldr	r1, [pc, #252]	; (8005104 <HAL_RCC_OscConfig+0x680>)
 8005006:	400a      	ands	r2, r1
 8005008:	639a      	str	r2, [r3, #56]	; 0x38
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800500e:	2b00      	cmp	r3, #0
 8005010:	d100      	bne.n	8005014 <HAL_RCC_OscConfig+0x590>
 8005012:	e09a      	b.n	800514a <HAL_RCC_OscConfig+0x6c6>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005014:	6a3b      	ldr	r3, [r7, #32]
 8005016:	2b0c      	cmp	r3, #12
 8005018:	d064      	beq.n	80050e4 <HAL_RCC_OscConfig+0x660>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800501e:	2b02      	cmp	r3, #2
 8005020:	d145      	bne.n	80050ae <HAL_RCC_OscConfig+0x62a>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005022:	4b33      	ldr	r3, [pc, #204]	; (80050f0 <HAL_RCC_OscConfig+0x66c>)
 8005024:	681a      	ldr	r2, [r3, #0]
 8005026:	4b32      	ldr	r3, [pc, #200]	; (80050f0 <HAL_RCC_OscConfig+0x66c>)
 8005028:	4937      	ldr	r1, [pc, #220]	; (8005108 <HAL_RCC_OscConfig+0x684>)
 800502a:	400a      	ands	r2, r1
 800502c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800502e:	f7fe fdfd 	bl	8003c2c <HAL_GetTick>
 8005032:	0003      	movs	r3, r0
 8005034:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8005036:	e008      	b.n	800504a <HAL_RCC_OscConfig+0x5c6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005038:	f7fe fdf8 	bl	8003c2c <HAL_GetTick>
 800503c:	0002      	movs	r2, r0
 800503e:	69bb      	ldr	r3, [r7, #24]
 8005040:	1ad3      	subs	r3, r2, r3
 8005042:	2b02      	cmp	r3, #2
 8005044:	d901      	bls.n	800504a <HAL_RCC_OscConfig+0x5c6>
          {
            return HAL_TIMEOUT;
 8005046:	2303      	movs	r3, #3
 8005048:	e080      	b.n	800514c <HAL_RCC_OscConfig+0x6c8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 800504a:	4b29      	ldr	r3, [pc, #164]	; (80050f0 <HAL_RCC_OscConfig+0x66c>)
 800504c:	681a      	ldr	r2, [r3, #0]
 800504e:	2380      	movs	r3, #128	; 0x80
 8005050:	049b      	lsls	r3, r3, #18
 8005052:	4013      	ands	r3, r2
 8005054:	d1f0      	bne.n	8005038 <HAL_RCC_OscConfig+0x5b4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005056:	4b26      	ldr	r3, [pc, #152]	; (80050f0 <HAL_RCC_OscConfig+0x66c>)
 8005058:	68db      	ldr	r3, [r3, #12]
 800505a:	4a2c      	ldr	r2, [pc, #176]	; (800510c <HAL_RCC_OscConfig+0x688>)
 800505c:	4013      	ands	r3, r2
 800505e:	0019      	movs	r1, r3
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005068:	431a      	orrs	r2, r3
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800506e:	431a      	orrs	r2, r3
 8005070:	4b1f      	ldr	r3, [pc, #124]	; (80050f0 <HAL_RCC_OscConfig+0x66c>)
 8005072:	430a      	orrs	r2, r1
 8005074:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005076:	4b1e      	ldr	r3, [pc, #120]	; (80050f0 <HAL_RCC_OscConfig+0x66c>)
 8005078:	681a      	ldr	r2, [r3, #0]
 800507a:	4b1d      	ldr	r3, [pc, #116]	; (80050f0 <HAL_RCC_OscConfig+0x66c>)
 800507c:	2180      	movs	r1, #128	; 0x80
 800507e:	0449      	lsls	r1, r1, #17
 8005080:	430a      	orrs	r2, r1
 8005082:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005084:	f7fe fdd2 	bl	8003c2c <HAL_GetTick>
 8005088:	0003      	movs	r3, r0
 800508a:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 800508c:	e008      	b.n	80050a0 <HAL_RCC_OscConfig+0x61c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800508e:	f7fe fdcd 	bl	8003c2c <HAL_GetTick>
 8005092:	0002      	movs	r2, r0
 8005094:	69bb      	ldr	r3, [r7, #24]
 8005096:	1ad3      	subs	r3, r2, r3
 8005098:	2b02      	cmp	r3, #2
 800509a:	d901      	bls.n	80050a0 <HAL_RCC_OscConfig+0x61c>
          {
            return HAL_TIMEOUT;
 800509c:	2303      	movs	r3, #3
 800509e:	e055      	b.n	800514c <HAL_RCC_OscConfig+0x6c8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 80050a0:	4b13      	ldr	r3, [pc, #76]	; (80050f0 <HAL_RCC_OscConfig+0x66c>)
 80050a2:	681a      	ldr	r2, [r3, #0]
 80050a4:	2380      	movs	r3, #128	; 0x80
 80050a6:	049b      	lsls	r3, r3, #18
 80050a8:	4013      	ands	r3, r2
 80050aa:	d0f0      	beq.n	800508e <HAL_RCC_OscConfig+0x60a>
 80050ac:	e04d      	b.n	800514a <HAL_RCC_OscConfig+0x6c6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80050ae:	4b10      	ldr	r3, [pc, #64]	; (80050f0 <HAL_RCC_OscConfig+0x66c>)
 80050b0:	681a      	ldr	r2, [r3, #0]
 80050b2:	4b0f      	ldr	r3, [pc, #60]	; (80050f0 <HAL_RCC_OscConfig+0x66c>)
 80050b4:	4914      	ldr	r1, [pc, #80]	; (8005108 <HAL_RCC_OscConfig+0x684>)
 80050b6:	400a      	ands	r2, r1
 80050b8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80050ba:	f7fe fdb7 	bl	8003c2c <HAL_GetTick>
 80050be:	0003      	movs	r3, r0
 80050c0:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80050c2:	e008      	b.n	80050d6 <HAL_RCC_OscConfig+0x652>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80050c4:	f7fe fdb2 	bl	8003c2c <HAL_GetTick>
 80050c8:	0002      	movs	r2, r0
 80050ca:	69bb      	ldr	r3, [r7, #24]
 80050cc:	1ad3      	subs	r3, r2, r3
 80050ce:	2b02      	cmp	r3, #2
 80050d0:	d901      	bls.n	80050d6 <HAL_RCC_OscConfig+0x652>
          {
            return HAL_TIMEOUT;
 80050d2:	2303      	movs	r3, #3
 80050d4:	e03a      	b.n	800514c <HAL_RCC_OscConfig+0x6c8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80050d6:	4b06      	ldr	r3, [pc, #24]	; (80050f0 <HAL_RCC_OscConfig+0x66c>)
 80050d8:	681a      	ldr	r2, [r3, #0]
 80050da:	2380      	movs	r3, #128	; 0x80
 80050dc:	049b      	lsls	r3, r3, #18
 80050de:	4013      	ands	r3, r2
 80050e0:	d1f0      	bne.n	80050c4 <HAL_RCC_OscConfig+0x640>
 80050e2:	e032      	b.n	800514a <HAL_RCC_OscConfig+0x6c6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050e8:	2b01      	cmp	r3, #1
 80050ea:	d111      	bne.n	8005110 <HAL_RCC_OscConfig+0x68c>
      {
        return HAL_ERROR;
 80050ec:	2301      	movs	r3, #1
 80050ee:	e02d      	b.n	800514c <HAL_RCC_OscConfig+0x6c8>
 80050f0:	40021000 	.word	0x40021000
 80050f4:	fffffeff 	.word	0xfffffeff
 80050f8:	40007000 	.word	0x40007000
 80050fc:	fffffbff 	.word	0xfffffbff
 8005100:	00001388 	.word	0x00001388
 8005104:	efffffff 	.word	0xefffffff
 8005108:	feffffff 	.word	0xfeffffff
 800510c:	ff02ffff 	.word	0xff02ffff
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8005110:	4b10      	ldr	r3, [pc, #64]	; (8005154 <HAL_RCC_OscConfig+0x6d0>)
 8005112:	68db      	ldr	r3, [r3, #12]
 8005114:	61fb      	str	r3, [r7, #28]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005116:	69fa      	ldr	r2, [r7, #28]
 8005118:	2380      	movs	r3, #128	; 0x80
 800511a:	025b      	lsls	r3, r3, #9
 800511c:	401a      	ands	r2, r3
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005122:	429a      	cmp	r2, r3
 8005124:	d10f      	bne.n	8005146 <HAL_RCC_OscConfig+0x6c2>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8005126:	69fa      	ldr	r2, [r7, #28]
 8005128:	23f0      	movs	r3, #240	; 0xf0
 800512a:	039b      	lsls	r3, r3, #14
 800512c:	401a      	ands	r2, r3
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005132:	429a      	cmp	r2, r3
 8005134:	d107      	bne.n	8005146 <HAL_RCC_OscConfig+0x6c2>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8005136:	69fa      	ldr	r2, [r7, #28]
 8005138:	23c0      	movs	r3, #192	; 0xc0
 800513a:	041b      	lsls	r3, r3, #16
 800513c:	401a      	ands	r2, r3
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	6b1b      	ldr	r3, [r3, #48]	; 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8005142:	429a      	cmp	r2, r3
 8005144:	d001      	beq.n	800514a <HAL_RCC_OscConfig+0x6c6>
        {
          return HAL_ERROR;
 8005146:	2301      	movs	r3, #1
 8005148:	e000      	b.n	800514c <HAL_RCC_OscConfig+0x6c8>
        }
      }
    }
  }
  return HAL_OK;
 800514a:	2300      	movs	r3, #0
}
 800514c:	0018      	movs	r0, r3
 800514e:	46bd      	mov	sp, r7
 8005150:	b00a      	add	sp, #40	; 0x28
 8005152:	bdb0      	pop	{r4, r5, r7, pc}
 8005154:	40021000 	.word	0x40021000

08005158 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005158:	b5b0      	push	{r4, r5, r7, lr}
 800515a:	b084      	sub	sp, #16
 800515c:	af00      	add	r7, sp, #0
 800515e:	6078      	str	r0, [r7, #4]
 8005160:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	2b00      	cmp	r3, #0
 8005166:	d101      	bne.n	800516c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005168:	2301      	movs	r3, #1
 800516a:	e128      	b.n	80053be <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800516c:	4b96      	ldr	r3, [pc, #600]	; (80053c8 <HAL_RCC_ClockConfig+0x270>)
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	2201      	movs	r2, #1
 8005172:	4013      	ands	r3, r2
 8005174:	683a      	ldr	r2, [r7, #0]
 8005176:	429a      	cmp	r2, r3
 8005178:	d91e      	bls.n	80051b8 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800517a:	4b93      	ldr	r3, [pc, #588]	; (80053c8 <HAL_RCC_ClockConfig+0x270>)
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	2201      	movs	r2, #1
 8005180:	4393      	bics	r3, r2
 8005182:	0019      	movs	r1, r3
 8005184:	4b90      	ldr	r3, [pc, #576]	; (80053c8 <HAL_RCC_ClockConfig+0x270>)
 8005186:	683a      	ldr	r2, [r7, #0]
 8005188:	430a      	orrs	r2, r1
 800518a:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800518c:	f7fe fd4e 	bl	8003c2c <HAL_GetTick>
 8005190:	0003      	movs	r3, r0
 8005192:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005194:	e009      	b.n	80051aa <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005196:	f7fe fd49 	bl	8003c2c <HAL_GetTick>
 800519a:	0002      	movs	r2, r0
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	1ad3      	subs	r3, r2, r3
 80051a0:	4a8a      	ldr	r2, [pc, #552]	; (80053cc <HAL_RCC_ClockConfig+0x274>)
 80051a2:	4293      	cmp	r3, r2
 80051a4:	d901      	bls.n	80051aa <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 80051a6:	2303      	movs	r3, #3
 80051a8:	e109      	b.n	80053be <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80051aa:	4b87      	ldr	r3, [pc, #540]	; (80053c8 <HAL_RCC_ClockConfig+0x270>)
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	2201      	movs	r2, #1
 80051b0:	4013      	ands	r3, r2
 80051b2:	683a      	ldr	r2, [r7, #0]
 80051b4:	429a      	cmp	r2, r3
 80051b6:	d1ee      	bne.n	8005196 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	2202      	movs	r2, #2
 80051be:	4013      	ands	r3, r2
 80051c0:	d009      	beq.n	80051d6 <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80051c2:	4b83      	ldr	r3, [pc, #524]	; (80053d0 <HAL_RCC_ClockConfig+0x278>)
 80051c4:	68db      	ldr	r3, [r3, #12]
 80051c6:	22f0      	movs	r2, #240	; 0xf0
 80051c8:	4393      	bics	r3, r2
 80051ca:	0019      	movs	r1, r3
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	689a      	ldr	r2, [r3, #8]
 80051d0:	4b7f      	ldr	r3, [pc, #508]	; (80053d0 <HAL_RCC_ClockConfig+0x278>)
 80051d2:	430a      	orrs	r2, r1
 80051d4:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	2201      	movs	r2, #1
 80051dc:	4013      	ands	r3, r2
 80051de:	d100      	bne.n	80051e2 <HAL_RCC_ClockConfig+0x8a>
 80051e0:	e089      	b.n	80052f6 <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	685b      	ldr	r3, [r3, #4]
 80051e6:	2b02      	cmp	r3, #2
 80051e8:	d107      	bne.n	80051fa <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80051ea:	4b79      	ldr	r3, [pc, #484]	; (80053d0 <HAL_RCC_ClockConfig+0x278>)
 80051ec:	681a      	ldr	r2, [r3, #0]
 80051ee:	2380      	movs	r3, #128	; 0x80
 80051f0:	029b      	lsls	r3, r3, #10
 80051f2:	4013      	ands	r3, r2
 80051f4:	d120      	bne.n	8005238 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 80051f6:	2301      	movs	r3, #1
 80051f8:	e0e1      	b.n	80053be <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	685b      	ldr	r3, [r3, #4]
 80051fe:	2b03      	cmp	r3, #3
 8005200:	d107      	bne.n	8005212 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005202:	4b73      	ldr	r3, [pc, #460]	; (80053d0 <HAL_RCC_ClockConfig+0x278>)
 8005204:	681a      	ldr	r2, [r3, #0]
 8005206:	2380      	movs	r3, #128	; 0x80
 8005208:	049b      	lsls	r3, r3, #18
 800520a:	4013      	ands	r3, r2
 800520c:	d114      	bne.n	8005238 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 800520e:	2301      	movs	r3, #1
 8005210:	e0d5      	b.n	80053be <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	685b      	ldr	r3, [r3, #4]
 8005216:	2b01      	cmp	r3, #1
 8005218:	d106      	bne.n	8005228 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800521a:	4b6d      	ldr	r3, [pc, #436]	; (80053d0 <HAL_RCC_ClockConfig+0x278>)
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	2204      	movs	r2, #4
 8005220:	4013      	ands	r3, r2
 8005222:	d109      	bne.n	8005238 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8005224:	2301      	movs	r3, #1
 8005226:	e0ca      	b.n	80053be <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8005228:	4b69      	ldr	r3, [pc, #420]	; (80053d0 <HAL_RCC_ClockConfig+0x278>)
 800522a:	681a      	ldr	r2, [r3, #0]
 800522c:	2380      	movs	r3, #128	; 0x80
 800522e:	009b      	lsls	r3, r3, #2
 8005230:	4013      	ands	r3, r2
 8005232:	d101      	bne.n	8005238 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8005234:	2301      	movs	r3, #1
 8005236:	e0c2      	b.n	80053be <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005238:	4b65      	ldr	r3, [pc, #404]	; (80053d0 <HAL_RCC_ClockConfig+0x278>)
 800523a:	68db      	ldr	r3, [r3, #12]
 800523c:	2203      	movs	r2, #3
 800523e:	4393      	bics	r3, r2
 8005240:	0019      	movs	r1, r3
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	685a      	ldr	r2, [r3, #4]
 8005246:	4b62      	ldr	r3, [pc, #392]	; (80053d0 <HAL_RCC_ClockConfig+0x278>)
 8005248:	430a      	orrs	r2, r1
 800524a:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800524c:	f7fe fcee 	bl	8003c2c <HAL_GetTick>
 8005250:	0003      	movs	r3, r0
 8005252:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	685b      	ldr	r3, [r3, #4]
 8005258:	2b02      	cmp	r3, #2
 800525a:	d111      	bne.n	8005280 <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800525c:	e009      	b.n	8005272 <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800525e:	f7fe fce5 	bl	8003c2c <HAL_GetTick>
 8005262:	0002      	movs	r2, r0
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	1ad3      	subs	r3, r2, r3
 8005268:	4a58      	ldr	r2, [pc, #352]	; (80053cc <HAL_RCC_ClockConfig+0x274>)
 800526a:	4293      	cmp	r3, r2
 800526c:	d901      	bls.n	8005272 <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 800526e:	2303      	movs	r3, #3
 8005270:	e0a5      	b.n	80053be <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8005272:	4b57      	ldr	r3, [pc, #348]	; (80053d0 <HAL_RCC_ClockConfig+0x278>)
 8005274:	68db      	ldr	r3, [r3, #12]
 8005276:	220c      	movs	r2, #12
 8005278:	4013      	ands	r3, r2
 800527a:	2b08      	cmp	r3, #8
 800527c:	d1ef      	bne.n	800525e <HAL_RCC_ClockConfig+0x106>
 800527e:	e03a      	b.n	80052f6 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	685b      	ldr	r3, [r3, #4]
 8005284:	2b03      	cmp	r3, #3
 8005286:	d111      	bne.n	80052ac <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005288:	e009      	b.n	800529e <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800528a:	f7fe fccf 	bl	8003c2c <HAL_GetTick>
 800528e:	0002      	movs	r2, r0
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	1ad3      	subs	r3, r2, r3
 8005294:	4a4d      	ldr	r2, [pc, #308]	; (80053cc <HAL_RCC_ClockConfig+0x274>)
 8005296:	4293      	cmp	r3, r2
 8005298:	d901      	bls.n	800529e <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 800529a:	2303      	movs	r3, #3
 800529c:	e08f      	b.n	80053be <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800529e:	4b4c      	ldr	r3, [pc, #304]	; (80053d0 <HAL_RCC_ClockConfig+0x278>)
 80052a0:	68db      	ldr	r3, [r3, #12]
 80052a2:	220c      	movs	r2, #12
 80052a4:	4013      	ands	r3, r2
 80052a6:	2b0c      	cmp	r3, #12
 80052a8:	d1ef      	bne.n	800528a <HAL_RCC_ClockConfig+0x132>
 80052aa:	e024      	b.n	80052f6 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	685b      	ldr	r3, [r3, #4]
 80052b0:	2b01      	cmp	r3, #1
 80052b2:	d11b      	bne.n	80052ec <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80052b4:	e009      	b.n	80052ca <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80052b6:	f7fe fcb9 	bl	8003c2c <HAL_GetTick>
 80052ba:	0002      	movs	r2, r0
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	1ad3      	subs	r3, r2, r3
 80052c0:	4a42      	ldr	r2, [pc, #264]	; (80053cc <HAL_RCC_ClockConfig+0x274>)
 80052c2:	4293      	cmp	r3, r2
 80052c4:	d901      	bls.n	80052ca <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 80052c6:	2303      	movs	r3, #3
 80052c8:	e079      	b.n	80053be <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80052ca:	4b41      	ldr	r3, [pc, #260]	; (80053d0 <HAL_RCC_ClockConfig+0x278>)
 80052cc:	68db      	ldr	r3, [r3, #12]
 80052ce:	220c      	movs	r2, #12
 80052d0:	4013      	ands	r3, r2
 80052d2:	2b04      	cmp	r3, #4
 80052d4:	d1ef      	bne.n	80052b6 <HAL_RCC_ClockConfig+0x15e>
 80052d6:	e00e      	b.n	80052f6 <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80052d8:	f7fe fca8 	bl	8003c2c <HAL_GetTick>
 80052dc:	0002      	movs	r2, r0
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	1ad3      	subs	r3, r2, r3
 80052e2:	4a3a      	ldr	r2, [pc, #232]	; (80053cc <HAL_RCC_ClockConfig+0x274>)
 80052e4:	4293      	cmp	r3, r2
 80052e6:	d901      	bls.n	80052ec <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 80052e8:	2303      	movs	r3, #3
 80052ea:	e068      	b.n	80053be <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 80052ec:	4b38      	ldr	r3, [pc, #224]	; (80053d0 <HAL_RCC_ClockConfig+0x278>)
 80052ee:	68db      	ldr	r3, [r3, #12]
 80052f0:	220c      	movs	r2, #12
 80052f2:	4013      	ands	r3, r2
 80052f4:	d1f0      	bne.n	80052d8 <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80052f6:	4b34      	ldr	r3, [pc, #208]	; (80053c8 <HAL_RCC_ClockConfig+0x270>)
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	2201      	movs	r2, #1
 80052fc:	4013      	ands	r3, r2
 80052fe:	683a      	ldr	r2, [r7, #0]
 8005300:	429a      	cmp	r2, r3
 8005302:	d21e      	bcs.n	8005342 <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005304:	4b30      	ldr	r3, [pc, #192]	; (80053c8 <HAL_RCC_ClockConfig+0x270>)
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	2201      	movs	r2, #1
 800530a:	4393      	bics	r3, r2
 800530c:	0019      	movs	r1, r3
 800530e:	4b2e      	ldr	r3, [pc, #184]	; (80053c8 <HAL_RCC_ClockConfig+0x270>)
 8005310:	683a      	ldr	r2, [r7, #0]
 8005312:	430a      	orrs	r2, r1
 8005314:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8005316:	f7fe fc89 	bl	8003c2c <HAL_GetTick>
 800531a:	0003      	movs	r3, r0
 800531c:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800531e:	e009      	b.n	8005334 <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005320:	f7fe fc84 	bl	8003c2c <HAL_GetTick>
 8005324:	0002      	movs	r2, r0
 8005326:	68fb      	ldr	r3, [r7, #12]
 8005328:	1ad3      	subs	r3, r2, r3
 800532a:	4a28      	ldr	r2, [pc, #160]	; (80053cc <HAL_RCC_ClockConfig+0x274>)
 800532c:	4293      	cmp	r3, r2
 800532e:	d901      	bls.n	8005334 <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 8005330:	2303      	movs	r3, #3
 8005332:	e044      	b.n	80053be <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005334:	4b24      	ldr	r3, [pc, #144]	; (80053c8 <HAL_RCC_ClockConfig+0x270>)
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	2201      	movs	r2, #1
 800533a:	4013      	ands	r3, r2
 800533c:	683a      	ldr	r2, [r7, #0]
 800533e:	429a      	cmp	r2, r3
 8005340:	d1ee      	bne.n	8005320 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	2204      	movs	r2, #4
 8005348:	4013      	ands	r3, r2
 800534a:	d009      	beq.n	8005360 <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800534c:	4b20      	ldr	r3, [pc, #128]	; (80053d0 <HAL_RCC_ClockConfig+0x278>)
 800534e:	68db      	ldr	r3, [r3, #12]
 8005350:	4a20      	ldr	r2, [pc, #128]	; (80053d4 <HAL_RCC_ClockConfig+0x27c>)
 8005352:	4013      	ands	r3, r2
 8005354:	0019      	movs	r1, r3
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	68da      	ldr	r2, [r3, #12]
 800535a:	4b1d      	ldr	r3, [pc, #116]	; (80053d0 <HAL_RCC_ClockConfig+0x278>)
 800535c:	430a      	orrs	r2, r1
 800535e:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	2208      	movs	r2, #8
 8005366:	4013      	ands	r3, r2
 8005368:	d00a      	beq.n	8005380 <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800536a:	4b19      	ldr	r3, [pc, #100]	; (80053d0 <HAL_RCC_ClockConfig+0x278>)
 800536c:	68db      	ldr	r3, [r3, #12]
 800536e:	4a1a      	ldr	r2, [pc, #104]	; (80053d8 <HAL_RCC_ClockConfig+0x280>)
 8005370:	4013      	ands	r3, r2
 8005372:	0019      	movs	r1, r3
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	691b      	ldr	r3, [r3, #16]
 8005378:	00da      	lsls	r2, r3, #3
 800537a:	4b15      	ldr	r3, [pc, #84]	; (80053d0 <HAL_RCC_ClockConfig+0x278>)
 800537c:	430a      	orrs	r2, r1
 800537e:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005380:	f000 f832 	bl	80053e8 <HAL_RCC_GetSysClockFreq>
 8005384:	0001      	movs	r1, r0
 8005386:	4b12      	ldr	r3, [pc, #72]	; (80053d0 <HAL_RCC_ClockConfig+0x278>)
 8005388:	68db      	ldr	r3, [r3, #12]
 800538a:	091b      	lsrs	r3, r3, #4
 800538c:	220f      	movs	r2, #15
 800538e:	4013      	ands	r3, r2
 8005390:	4a12      	ldr	r2, [pc, #72]	; (80053dc <HAL_RCC_ClockConfig+0x284>)
 8005392:	5cd3      	ldrb	r3, [r2, r3]
 8005394:	000a      	movs	r2, r1
 8005396:	40da      	lsrs	r2, r3
 8005398:	4b11      	ldr	r3, [pc, #68]	; (80053e0 <HAL_RCC_ClockConfig+0x288>)
 800539a:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800539c:	4b11      	ldr	r3, [pc, #68]	; (80053e4 <HAL_RCC_ClockConfig+0x28c>)
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	250b      	movs	r5, #11
 80053a2:	197c      	adds	r4, r7, r5
 80053a4:	0018      	movs	r0, r3
 80053a6:	f7fe fbfb 	bl	8003ba0 <HAL_InitTick>
 80053aa:	0003      	movs	r3, r0
 80053ac:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 80053ae:	197b      	adds	r3, r7, r5
 80053b0:	781b      	ldrb	r3, [r3, #0]
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	d002      	beq.n	80053bc <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 80053b6:	197b      	adds	r3, r7, r5
 80053b8:	781b      	ldrb	r3, [r3, #0]
 80053ba:	e000      	b.n	80053be <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 80053bc:	2300      	movs	r3, #0
}
 80053be:	0018      	movs	r0, r3
 80053c0:	46bd      	mov	sp, r7
 80053c2:	b004      	add	sp, #16
 80053c4:	bdb0      	pop	{r4, r5, r7, pc}
 80053c6:	46c0      	nop			; (mov r8, r8)
 80053c8:	40022000 	.word	0x40022000
 80053cc:	00001388 	.word	0x00001388
 80053d0:	40021000 	.word	0x40021000
 80053d4:	fffff8ff 	.word	0xfffff8ff
 80053d8:	ffffc7ff 	.word	0xffffc7ff
 80053dc:	0800ccb0 	.word	0x0800ccb0
 80053e0:	20000010 	.word	0x20000010
 80053e4:	20000014 	.word	0x20000014

080053e8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80053e8:	b5b0      	push	{r4, r5, r7, lr}
 80053ea:	b08e      	sub	sp, #56	; 0x38
 80053ec:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 80053ee:	4b4c      	ldr	r3, [pc, #304]	; (8005520 <HAL_RCC_GetSysClockFreq+0x138>)
 80053f0:	68db      	ldr	r3, [r3, #12]
 80053f2:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80053f4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80053f6:	230c      	movs	r3, #12
 80053f8:	4013      	ands	r3, r2
 80053fa:	2b0c      	cmp	r3, #12
 80053fc:	d014      	beq.n	8005428 <HAL_RCC_GetSysClockFreq+0x40>
 80053fe:	d900      	bls.n	8005402 <HAL_RCC_GetSysClockFreq+0x1a>
 8005400:	e07b      	b.n	80054fa <HAL_RCC_GetSysClockFreq+0x112>
 8005402:	2b04      	cmp	r3, #4
 8005404:	d002      	beq.n	800540c <HAL_RCC_GetSysClockFreq+0x24>
 8005406:	2b08      	cmp	r3, #8
 8005408:	d00b      	beq.n	8005422 <HAL_RCC_GetSysClockFreq+0x3a>
 800540a:	e076      	b.n	80054fa <HAL_RCC_GetSysClockFreq+0x112>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 800540c:	4b44      	ldr	r3, [pc, #272]	; (8005520 <HAL_RCC_GetSysClockFreq+0x138>)
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	2210      	movs	r2, #16
 8005412:	4013      	ands	r3, r2
 8005414:	d002      	beq.n	800541c <HAL_RCC_GetSysClockFreq+0x34>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 8005416:	4b43      	ldr	r3, [pc, #268]	; (8005524 <HAL_RCC_GetSysClockFreq+0x13c>)
 8005418:	633b      	str	r3, [r7, #48]	; 0x30
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 800541a:	e07c      	b.n	8005516 <HAL_RCC_GetSysClockFreq+0x12e>
        sysclockfreq =  HSI_VALUE;
 800541c:	4b42      	ldr	r3, [pc, #264]	; (8005528 <HAL_RCC_GetSysClockFreq+0x140>)
 800541e:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8005420:	e079      	b.n	8005516 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8005422:	4b42      	ldr	r3, [pc, #264]	; (800552c <HAL_RCC_GetSysClockFreq+0x144>)
 8005424:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8005426:	e076      	b.n	8005516 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8005428:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800542a:	0c9a      	lsrs	r2, r3, #18
 800542c:	230f      	movs	r3, #15
 800542e:	401a      	ands	r2, r3
 8005430:	4b3f      	ldr	r3, [pc, #252]	; (8005530 <HAL_RCC_GetSysClockFreq+0x148>)
 8005432:	5c9b      	ldrb	r3, [r3, r2]
 8005434:	62bb      	str	r3, [r7, #40]	; 0x28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8005436:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005438:	0d9a      	lsrs	r2, r3, #22
 800543a:	2303      	movs	r3, #3
 800543c:	4013      	ands	r3, r2
 800543e:	3301      	adds	r3, #1
 8005440:	627b      	str	r3, [r7, #36]	; 0x24
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005442:	4b37      	ldr	r3, [pc, #220]	; (8005520 <HAL_RCC_GetSysClockFreq+0x138>)
 8005444:	68da      	ldr	r2, [r3, #12]
 8005446:	2380      	movs	r3, #128	; 0x80
 8005448:	025b      	lsls	r3, r3, #9
 800544a:	4013      	ands	r3, r2
 800544c:	d01a      	beq.n	8005484 <HAL_RCC_GetSysClockFreq+0x9c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 800544e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005450:	61bb      	str	r3, [r7, #24]
 8005452:	2300      	movs	r3, #0
 8005454:	61fb      	str	r3, [r7, #28]
 8005456:	4a35      	ldr	r2, [pc, #212]	; (800552c <HAL_RCC_GetSysClockFreq+0x144>)
 8005458:	2300      	movs	r3, #0
 800545a:	69b8      	ldr	r0, [r7, #24]
 800545c:	69f9      	ldr	r1, [r7, #28]
 800545e:	f7fb f87d 	bl	800055c <__aeabi_lmul>
 8005462:	0002      	movs	r2, r0
 8005464:	000b      	movs	r3, r1
 8005466:	0010      	movs	r0, r2
 8005468:	0019      	movs	r1, r3
 800546a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800546c:	613b      	str	r3, [r7, #16]
 800546e:	2300      	movs	r3, #0
 8005470:	617b      	str	r3, [r7, #20]
 8005472:	693a      	ldr	r2, [r7, #16]
 8005474:	697b      	ldr	r3, [r7, #20]
 8005476:	f7fb f851 	bl	800051c <__aeabi_uldivmod>
 800547a:	0002      	movs	r2, r0
 800547c:	000b      	movs	r3, r1
 800547e:	0013      	movs	r3, r2
 8005480:	637b      	str	r3, [r7, #52]	; 0x34
 8005482:	e037      	b.n	80054f4 <HAL_RCC_GetSysClockFreq+0x10c>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8005484:	4b26      	ldr	r3, [pc, #152]	; (8005520 <HAL_RCC_GetSysClockFreq+0x138>)
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	2210      	movs	r2, #16
 800548a:	4013      	ands	r3, r2
 800548c:	d01a      	beq.n	80054c4 <HAL_RCC_GetSysClockFreq+0xdc>
        {
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 800548e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005490:	60bb      	str	r3, [r7, #8]
 8005492:	2300      	movs	r3, #0
 8005494:	60fb      	str	r3, [r7, #12]
 8005496:	4a23      	ldr	r2, [pc, #140]	; (8005524 <HAL_RCC_GetSysClockFreq+0x13c>)
 8005498:	2300      	movs	r3, #0
 800549a:	68b8      	ldr	r0, [r7, #8]
 800549c:	68f9      	ldr	r1, [r7, #12]
 800549e:	f7fb f85d 	bl	800055c <__aeabi_lmul>
 80054a2:	0002      	movs	r2, r0
 80054a4:	000b      	movs	r3, r1
 80054a6:	0010      	movs	r0, r2
 80054a8:	0019      	movs	r1, r3
 80054aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054ac:	603b      	str	r3, [r7, #0]
 80054ae:	2300      	movs	r3, #0
 80054b0:	607b      	str	r3, [r7, #4]
 80054b2:	683a      	ldr	r2, [r7, #0]
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	f7fb f831 	bl	800051c <__aeabi_uldivmod>
 80054ba:	0002      	movs	r2, r0
 80054bc:	000b      	movs	r3, r1
 80054be:	0013      	movs	r3, r2
 80054c0:	637b      	str	r3, [r7, #52]	; 0x34
 80054c2:	e017      	b.n	80054f4 <HAL_RCC_GetSysClockFreq+0x10c>
        }
        else
        {
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 80054c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054c6:	0018      	movs	r0, r3
 80054c8:	2300      	movs	r3, #0
 80054ca:	0019      	movs	r1, r3
 80054cc:	4a16      	ldr	r2, [pc, #88]	; (8005528 <HAL_RCC_GetSysClockFreq+0x140>)
 80054ce:	2300      	movs	r3, #0
 80054d0:	f7fb f844 	bl	800055c <__aeabi_lmul>
 80054d4:	0002      	movs	r2, r0
 80054d6:	000b      	movs	r3, r1
 80054d8:	0010      	movs	r0, r2
 80054da:	0019      	movs	r1, r3
 80054dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054de:	001c      	movs	r4, r3
 80054e0:	2300      	movs	r3, #0
 80054e2:	001d      	movs	r5, r3
 80054e4:	0022      	movs	r2, r4
 80054e6:	002b      	movs	r3, r5
 80054e8:	f7fb f818 	bl	800051c <__aeabi_uldivmod>
 80054ec:	0002      	movs	r2, r0
 80054ee:	000b      	movs	r3, r1
 80054f0:	0013      	movs	r3, r2
 80054f2:	637b      	str	r3, [r7, #52]	; 0x34
        }
      }
      sysclockfreq = pllvco;
 80054f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80054f6:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80054f8:	e00d      	b.n	8005516 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 80054fa:	4b09      	ldr	r3, [pc, #36]	; (8005520 <HAL_RCC_GetSysClockFreq+0x138>)
 80054fc:	685b      	ldr	r3, [r3, #4]
 80054fe:	0b5b      	lsrs	r3, r3, #13
 8005500:	2207      	movs	r2, #7
 8005502:	4013      	ands	r3, r2
 8005504:	623b      	str	r3, [r7, #32]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8005506:	6a3b      	ldr	r3, [r7, #32]
 8005508:	3301      	adds	r3, #1
 800550a:	2280      	movs	r2, #128	; 0x80
 800550c:	0212      	lsls	r2, r2, #8
 800550e:	409a      	lsls	r2, r3
 8005510:	0013      	movs	r3, r2
 8005512:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8005514:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8005516:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8005518:	0018      	movs	r0, r3
 800551a:	46bd      	mov	sp, r7
 800551c:	b00e      	add	sp, #56	; 0x38
 800551e:	bdb0      	pop	{r4, r5, r7, pc}
 8005520:	40021000 	.word	0x40021000
 8005524:	003d0900 	.word	0x003d0900
 8005528:	00f42400 	.word	0x00f42400
 800552c:	007a1200 	.word	0x007a1200
 8005530:	0800ccc8 	.word	0x0800ccc8

08005534 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005534:	b580      	push	{r7, lr}
 8005536:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005538:	4b02      	ldr	r3, [pc, #8]	; (8005544 <HAL_RCC_GetHCLKFreq+0x10>)
 800553a:	681b      	ldr	r3, [r3, #0]
}
 800553c:	0018      	movs	r0, r3
 800553e:	46bd      	mov	sp, r7
 8005540:	bd80      	pop	{r7, pc}
 8005542:	46c0      	nop			; (mov r8, r8)
 8005544:	20000010 	.word	0x20000010

08005548 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005548:	b580      	push	{r7, lr}
 800554a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800554c:	f7ff fff2 	bl	8005534 <HAL_RCC_GetHCLKFreq>
 8005550:	0001      	movs	r1, r0
 8005552:	4b06      	ldr	r3, [pc, #24]	; (800556c <HAL_RCC_GetPCLK1Freq+0x24>)
 8005554:	68db      	ldr	r3, [r3, #12]
 8005556:	0a1b      	lsrs	r3, r3, #8
 8005558:	2207      	movs	r2, #7
 800555a:	4013      	ands	r3, r2
 800555c:	4a04      	ldr	r2, [pc, #16]	; (8005570 <HAL_RCC_GetPCLK1Freq+0x28>)
 800555e:	5cd3      	ldrb	r3, [r2, r3]
 8005560:	40d9      	lsrs	r1, r3
 8005562:	000b      	movs	r3, r1
}
 8005564:	0018      	movs	r0, r3
 8005566:	46bd      	mov	sp, r7
 8005568:	bd80      	pop	{r7, pc}
 800556a:	46c0      	nop			; (mov r8, r8)
 800556c:	40021000 	.word	0x40021000
 8005570:	0800ccc0 	.word	0x0800ccc0

08005574 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005574:	b580      	push	{r7, lr}
 8005576:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8005578:	f7ff ffdc 	bl	8005534 <HAL_RCC_GetHCLKFreq>
 800557c:	0001      	movs	r1, r0
 800557e:	4b06      	ldr	r3, [pc, #24]	; (8005598 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005580:	68db      	ldr	r3, [r3, #12]
 8005582:	0adb      	lsrs	r3, r3, #11
 8005584:	2207      	movs	r2, #7
 8005586:	4013      	ands	r3, r2
 8005588:	4a04      	ldr	r2, [pc, #16]	; (800559c <HAL_RCC_GetPCLK2Freq+0x28>)
 800558a:	5cd3      	ldrb	r3, [r2, r3]
 800558c:	40d9      	lsrs	r1, r3
 800558e:	000b      	movs	r3, r1
}
 8005590:	0018      	movs	r0, r3
 8005592:	46bd      	mov	sp, r7
 8005594:	bd80      	pop	{r7, pc}
 8005596:	46c0      	nop			; (mov r8, r8)
 8005598:	40021000 	.word	0x40021000
 800559c:	0800ccc0 	.word	0x0800ccc0

080055a0 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80055a0:	b580      	push	{r7, lr}
 80055a2:	b086      	sub	sp, #24
 80055a4:	af00      	add	r7, sp, #0
 80055a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_reg;
  FlagStatus       pwrclkchanged = RESET;
 80055a8:	2017      	movs	r0, #23
 80055aa:	183b      	adds	r3, r7, r0
 80055ac:	2200      	movs	r2, #0
 80055ae:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	2220      	movs	r2, #32
 80055b6:	4013      	ands	r3, r2
 80055b8:	d100      	bne.n	80055bc <HAL_RCCEx_PeriphCLKConfig+0x1c>
 80055ba:	e0c7      	b.n	800574c <HAL_RCCEx_PeriphCLKConfig+0x1ac>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80055bc:	4b8b      	ldr	r3, [pc, #556]	; (80057ec <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 80055be:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80055c0:	2380      	movs	r3, #128	; 0x80
 80055c2:	055b      	lsls	r3, r3, #21
 80055c4:	4013      	ands	r3, r2
 80055c6:	d109      	bne.n	80055dc <HAL_RCCEx_PeriphCLKConfig+0x3c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80055c8:	4b88      	ldr	r3, [pc, #544]	; (80057ec <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 80055ca:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80055cc:	4b87      	ldr	r3, [pc, #540]	; (80057ec <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 80055ce:	2180      	movs	r1, #128	; 0x80
 80055d0:	0549      	lsls	r1, r1, #21
 80055d2:	430a      	orrs	r2, r1
 80055d4:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 80055d6:	183b      	adds	r3, r7, r0
 80055d8:	2201      	movs	r2, #1
 80055da:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80055dc:	4b84      	ldr	r3, [pc, #528]	; (80057f0 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 80055de:	681a      	ldr	r2, [r3, #0]
 80055e0:	2380      	movs	r3, #128	; 0x80
 80055e2:	005b      	lsls	r3, r3, #1
 80055e4:	4013      	ands	r3, r2
 80055e6:	d11a      	bne.n	800561e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80055e8:	4b81      	ldr	r3, [pc, #516]	; (80057f0 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 80055ea:	681a      	ldr	r2, [r3, #0]
 80055ec:	4b80      	ldr	r3, [pc, #512]	; (80057f0 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 80055ee:	2180      	movs	r1, #128	; 0x80
 80055f0:	0049      	lsls	r1, r1, #1
 80055f2:	430a      	orrs	r2, r1
 80055f4:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80055f6:	f7fe fb19 	bl	8003c2c <HAL_GetTick>
 80055fa:	0003      	movs	r3, r0
 80055fc:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80055fe:	e008      	b.n	8005612 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005600:	f7fe fb14 	bl	8003c2c <HAL_GetTick>
 8005604:	0002      	movs	r2, r0
 8005606:	693b      	ldr	r3, [r7, #16]
 8005608:	1ad3      	subs	r3, r2, r3
 800560a:	2b64      	cmp	r3, #100	; 0x64
 800560c:	d901      	bls.n	8005612 <HAL_RCCEx_PeriphCLKConfig+0x72>
        {
          return HAL_TIMEOUT;
 800560e:	2303      	movs	r3, #3
 8005610:	e0e8      	b.n	80057e4 <HAL_RCCEx_PeriphCLKConfig+0x244>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005612:	4b77      	ldr	r3, [pc, #476]	; (80057f0 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 8005614:	681a      	ldr	r2, [r3, #0]
 8005616:	2380      	movs	r3, #128	; 0x80
 8005618:	005b      	lsls	r3, r3, #1
 800561a:	4013      	ands	r3, r2
 800561c:	d0f0      	beq.n	8005600 <HAL_RCCEx_PeriphCLKConfig+0x60>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 800561e:	4b73      	ldr	r3, [pc, #460]	; (80057ec <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8005620:	681a      	ldr	r2, [r3, #0]
 8005622:	23c0      	movs	r3, #192	; 0xc0
 8005624:	039b      	lsls	r3, r3, #14
 8005626:	4013      	ands	r3, r2
 8005628:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	685a      	ldr	r2, [r3, #4]
 800562e:	23c0      	movs	r3, #192	; 0xc0
 8005630:	039b      	lsls	r3, r3, #14
 8005632:	4013      	ands	r3, r2
 8005634:	68fa      	ldr	r2, [r7, #12]
 8005636:	429a      	cmp	r2, r3
 8005638:	d013      	beq.n	8005662 <HAL_RCCEx_PeriphCLKConfig+0xc2>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	685a      	ldr	r2, [r3, #4]
 800563e:	23c0      	movs	r3, #192	; 0xc0
 8005640:	029b      	lsls	r3, r3, #10
 8005642:	401a      	ands	r2, r3
 8005644:	23c0      	movs	r3, #192	; 0xc0
 8005646:	029b      	lsls	r3, r3, #10
 8005648:	429a      	cmp	r2, r3
 800564a:	d10a      	bne.n	8005662 <HAL_RCCEx_PeriphCLKConfig+0xc2>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800564c:	4b67      	ldr	r3, [pc, #412]	; (80057ec <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 800564e:	681a      	ldr	r2, [r3, #0]
 8005650:	2380      	movs	r3, #128	; 0x80
 8005652:	029b      	lsls	r3, r3, #10
 8005654:	401a      	ands	r2, r3
 8005656:	2380      	movs	r3, #128	; 0x80
 8005658:	029b      	lsls	r3, r3, #10
 800565a:	429a      	cmp	r2, r3
 800565c:	d101      	bne.n	8005662 <HAL_RCCEx_PeriphCLKConfig+0xc2>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 800565e:	2301      	movs	r3, #1
 8005660:	e0c0      	b.n	80057e4 <HAL_RCCEx_PeriphCLKConfig+0x244>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 8005662:	4b62      	ldr	r3, [pc, #392]	; (80057ec <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8005664:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005666:	23c0      	movs	r3, #192	; 0xc0
 8005668:	029b      	lsls	r3, r3, #10
 800566a:	4013      	ands	r3, r2
 800566c:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	2b00      	cmp	r3, #0
 8005672:	d03b      	beq.n	80056ec <HAL_RCCEx_PeriphCLKConfig+0x14c>
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	685a      	ldr	r2, [r3, #4]
 8005678:	23c0      	movs	r3, #192	; 0xc0
 800567a:	029b      	lsls	r3, r3, #10
 800567c:	4013      	ands	r3, r2
 800567e:	68fa      	ldr	r2, [r7, #12]
 8005680:	429a      	cmp	r2, r3
 8005682:	d033      	beq.n	80056ec <HAL_RCCEx_PeriphCLKConfig+0x14c>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	2220      	movs	r2, #32
 800568a:	4013      	ands	r3, r2
 800568c:	d02e      	beq.n	80056ec <HAL_RCCEx_PeriphCLKConfig+0x14c>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 800568e:	4b57      	ldr	r3, [pc, #348]	; (80057ec <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8005690:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005692:	4a58      	ldr	r2, [pc, #352]	; (80057f4 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8005694:	4013      	ands	r3, r2
 8005696:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005698:	4b54      	ldr	r3, [pc, #336]	; (80057ec <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 800569a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800569c:	4b53      	ldr	r3, [pc, #332]	; (80057ec <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 800569e:	2180      	movs	r1, #128	; 0x80
 80056a0:	0309      	lsls	r1, r1, #12
 80056a2:	430a      	orrs	r2, r1
 80056a4:	651a      	str	r2, [r3, #80]	; 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 80056a6:	4b51      	ldr	r3, [pc, #324]	; (80057ec <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 80056a8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80056aa:	4b50      	ldr	r3, [pc, #320]	; (80057ec <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 80056ac:	4952      	ldr	r1, [pc, #328]	; (80057f8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80056ae:	400a      	ands	r2, r1
 80056b0:	651a      	str	r2, [r3, #80]	; 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 80056b2:	4b4e      	ldr	r3, [pc, #312]	; (80057ec <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 80056b4:	68fa      	ldr	r2, [r7, #12]
 80056b6:	651a      	str	r2, [r3, #80]	; 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 80056b8:	68fa      	ldr	r2, [r7, #12]
 80056ba:	2380      	movs	r3, #128	; 0x80
 80056bc:	005b      	lsls	r3, r3, #1
 80056be:	4013      	ands	r3, r2
 80056c0:	d014      	beq.n	80056ec <HAL_RCCEx_PeriphCLKConfig+0x14c>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80056c2:	f7fe fab3 	bl	8003c2c <HAL_GetTick>
 80056c6:	0003      	movs	r3, r0
 80056c8:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80056ca:	e009      	b.n	80056e0 <HAL_RCCEx_PeriphCLKConfig+0x140>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80056cc:	f7fe faae 	bl	8003c2c <HAL_GetTick>
 80056d0:	0002      	movs	r2, r0
 80056d2:	693b      	ldr	r3, [r7, #16]
 80056d4:	1ad3      	subs	r3, r2, r3
 80056d6:	4a49      	ldr	r2, [pc, #292]	; (80057fc <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 80056d8:	4293      	cmp	r3, r2
 80056da:	d901      	bls.n	80056e0 <HAL_RCCEx_PeriphCLKConfig+0x140>
          {
            return HAL_TIMEOUT;
 80056dc:	2303      	movs	r3, #3
 80056de:	e081      	b.n	80057e4 <HAL_RCCEx_PeriphCLKConfig+0x244>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80056e0:	4b42      	ldr	r3, [pc, #264]	; (80057ec <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 80056e2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80056e4:	2380      	movs	r3, #128	; 0x80
 80056e6:	009b      	lsls	r3, r3, #2
 80056e8:	4013      	ands	r3, r2
 80056ea:	d0ef      	beq.n	80056cc <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      __HAL_RCC_LCD_CONFIG(PeriphClkInit->LCDClockSelection);
    } 
#endif /* LCD */

    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	2220      	movs	r2, #32
 80056f2:	4013      	ands	r3, r2
 80056f4:	d01f      	beq.n	8005736 <HAL_RCCEx_PeriphCLKConfig+0x196>
    {
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	685a      	ldr	r2, [r3, #4]
 80056fa:	23c0      	movs	r3, #192	; 0xc0
 80056fc:	029b      	lsls	r3, r3, #10
 80056fe:	401a      	ands	r2, r3
 8005700:	23c0      	movs	r3, #192	; 0xc0
 8005702:	029b      	lsls	r3, r3, #10
 8005704:	429a      	cmp	r2, r3
 8005706:	d10c      	bne.n	8005722 <HAL_RCCEx_PeriphCLKConfig+0x182>
 8005708:	4b38      	ldr	r3, [pc, #224]	; (80057ec <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	4a3c      	ldr	r2, [pc, #240]	; (8005800 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800570e:	4013      	ands	r3, r2
 8005710:	0019      	movs	r1, r3
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	685a      	ldr	r2, [r3, #4]
 8005716:	23c0      	movs	r3, #192	; 0xc0
 8005718:	039b      	lsls	r3, r3, #14
 800571a:	401a      	ands	r2, r3
 800571c:	4b33      	ldr	r3, [pc, #204]	; (80057ec <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 800571e:	430a      	orrs	r2, r1
 8005720:	601a      	str	r2, [r3, #0]
 8005722:	4b32      	ldr	r3, [pc, #200]	; (80057ec <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8005724:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	685a      	ldr	r2, [r3, #4]
 800572a:	23c0      	movs	r3, #192	; 0xc0
 800572c:	029b      	lsls	r3, r3, #10
 800572e:	401a      	ands	r2, r3
 8005730:	4b2e      	ldr	r3, [pc, #184]	; (80057ec <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8005732:	430a      	orrs	r2, r1
 8005734:	651a      	str	r2, [r3, #80]	; 0x50
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8005736:	2317      	movs	r3, #23
 8005738:	18fb      	adds	r3, r7, r3
 800573a:	781b      	ldrb	r3, [r3, #0]
 800573c:	2b01      	cmp	r3, #1
 800573e:	d105      	bne.n	800574c <HAL_RCCEx_PeriphCLKConfig+0x1ac>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005740:	4b2a      	ldr	r3, [pc, #168]	; (80057ec <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8005742:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005744:	4b29      	ldr	r3, [pc, #164]	; (80057ec <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8005746:	492f      	ldr	r1, [pc, #188]	; (8005804 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8005748:	400a      	ands	r2, r1
 800574a:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined (RCC_CCIPR_USART1SEL)
  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	2201      	movs	r2, #1
 8005752:	4013      	ands	r3, r2
 8005754:	d009      	beq.n	800576a <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005756:	4b25      	ldr	r3, [pc, #148]	; (80057ec <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8005758:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800575a:	2203      	movs	r2, #3
 800575c:	4393      	bics	r3, r2
 800575e:	0019      	movs	r1, r3
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	689a      	ldr	r2, [r3, #8]
 8005764:	4b21      	ldr	r3, [pc, #132]	; (80057ec <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8005766:	430a      	orrs	r2, r1
 8005768:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	2202      	movs	r2, #2
 8005770:	4013      	ands	r3, r2
 8005772:	d009      	beq.n	8005788 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005774:	4b1d      	ldr	r3, [pc, #116]	; (80057ec <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8005776:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005778:	220c      	movs	r2, #12
 800577a:	4393      	bics	r3, r2
 800577c:	0019      	movs	r1, r3
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	68da      	ldr	r2, [r3, #12]
 8005782:	4b1a      	ldr	r3, [pc, #104]	; (80057ec <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8005784:	430a      	orrs	r2, r1
 8005786:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	2204      	movs	r2, #4
 800578e:	4013      	ands	r3, r2
 8005790:	d009      	beq.n	80057a6 <HAL_RCCEx_PeriphCLKConfig+0x206>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005792:	4b16      	ldr	r3, [pc, #88]	; (80057ec <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8005794:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005796:	4a1c      	ldr	r2, [pc, #112]	; (8005808 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005798:	4013      	ands	r3, r2
 800579a:	0019      	movs	r1, r3
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	691a      	ldr	r2, [r3, #16]
 80057a0:	4b12      	ldr	r3, [pc, #72]	; (80057ec <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 80057a2:	430a      	orrs	r2, r1
 80057a4:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	2208      	movs	r2, #8
 80057ac:	4013      	ands	r3, r2
 80057ae:	d009      	beq.n	80057c4 <HAL_RCCEx_PeriphCLKConfig+0x224>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80057b0:	4b0e      	ldr	r3, [pc, #56]	; (80057ec <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 80057b2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80057b4:	4a15      	ldr	r2, [pc, #84]	; (800580c <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 80057b6:	4013      	ands	r3, r2
 80057b8:	0019      	movs	r1, r3
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	695a      	ldr	r2, [r3, #20]
 80057be:	4b0b      	ldr	r3, [pc, #44]	; (80057ec <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 80057c0:	430a      	orrs	r2, r1
 80057c2:	64da      	str	r2, [r3, #76]	; 0x4c
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	2280      	movs	r2, #128	; 0x80
 80057ca:	4013      	ands	r3, r2
 80057cc:	d009      	beq.n	80057e2 <HAL_RCCEx_PeriphCLKConfig+0x242>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 80057ce:	4b07      	ldr	r3, [pc, #28]	; (80057ec <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 80057d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80057d2:	4a0f      	ldr	r2, [pc, #60]	; (8005810 <HAL_RCCEx_PeriphCLKConfig+0x270>)
 80057d4:	4013      	ands	r3, r2
 80057d6:	0019      	movs	r1, r3
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	699a      	ldr	r2, [r3, #24]
 80057dc:	4b03      	ldr	r3, [pc, #12]	; (80057ec <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 80057de:	430a      	orrs	r2, r1
 80057e0:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 80057e2:	2300      	movs	r3, #0
}
 80057e4:	0018      	movs	r0, r3
 80057e6:	46bd      	mov	sp, r7
 80057e8:	b006      	add	sp, #24
 80057ea:	bd80      	pop	{r7, pc}
 80057ec:	40021000 	.word	0x40021000
 80057f0:	40007000 	.word	0x40007000
 80057f4:	fffcffff 	.word	0xfffcffff
 80057f8:	fff7ffff 	.word	0xfff7ffff
 80057fc:	00001388 	.word	0x00001388
 8005800:	ffcfffff 	.word	0xffcfffff
 8005804:	efffffff 	.word	0xefffffff
 8005808:	fffff3ff 	.word	0xfffff3ff
 800580c:	ffffcfff 	.word	0xffffcfff
 8005810:	fff3ffff 	.word	0xfff3ffff

08005814 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005814:	b580      	push	{r7, lr}
 8005816:	b082      	sub	sp, #8
 8005818:	af00      	add	r7, sp, #0
 800581a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	2b00      	cmp	r3, #0
 8005820:	d101      	bne.n	8005826 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005822:	2301      	movs	r3, #1
 8005824:	e083      	b.n	800592e <HAL_SPI_Init+0x11a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800582a:	2b00      	cmp	r3, #0
 800582c:	d109      	bne.n	8005842 <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	685a      	ldr	r2, [r3, #4]
 8005832:	2382      	movs	r3, #130	; 0x82
 8005834:	005b      	lsls	r3, r3, #1
 8005836:	429a      	cmp	r2, r3
 8005838:	d009      	beq.n	800584e <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	2200      	movs	r2, #0
 800583e:	61da      	str	r2, [r3, #28]
 8005840:	e005      	b.n	800584e <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	2200      	movs	r2, #0
 8005846:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	2200      	movs	r2, #0
 800584c:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	2200      	movs	r2, #0
 8005852:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	2251      	movs	r2, #81	; 0x51
 8005858:	5c9b      	ldrb	r3, [r3, r2]
 800585a:	b2db      	uxtb	r3, r3
 800585c:	2b00      	cmp	r3, #0
 800585e:	d107      	bne.n	8005870 <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	2250      	movs	r2, #80	; 0x50
 8005864:	2100      	movs	r1, #0
 8005866:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	0018      	movs	r0, r3
 800586c:	f7fd fff6 	bl	800385c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	2251      	movs	r2, #81	; 0x51
 8005874:	2102      	movs	r1, #2
 8005876:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	681a      	ldr	r2, [r3, #0]
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	2140      	movs	r1, #64	; 0x40
 8005884:	438a      	bics	r2, r1
 8005886:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	685a      	ldr	r2, [r3, #4]
 800588c:	2382      	movs	r3, #130	; 0x82
 800588e:	005b      	lsls	r3, r3, #1
 8005890:	401a      	ands	r2, r3
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	6899      	ldr	r1, [r3, #8]
 8005896:	2384      	movs	r3, #132	; 0x84
 8005898:	021b      	lsls	r3, r3, #8
 800589a:	400b      	ands	r3, r1
 800589c:	431a      	orrs	r2, r3
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	68d9      	ldr	r1, [r3, #12]
 80058a2:	2380      	movs	r3, #128	; 0x80
 80058a4:	011b      	lsls	r3, r3, #4
 80058a6:	400b      	ands	r3, r1
 80058a8:	431a      	orrs	r2, r3
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	691b      	ldr	r3, [r3, #16]
 80058ae:	2102      	movs	r1, #2
 80058b0:	400b      	ands	r3, r1
 80058b2:	431a      	orrs	r2, r3
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	695b      	ldr	r3, [r3, #20]
 80058b8:	2101      	movs	r1, #1
 80058ba:	400b      	ands	r3, r1
 80058bc:	431a      	orrs	r2, r3
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	6999      	ldr	r1, [r3, #24]
 80058c2:	2380      	movs	r3, #128	; 0x80
 80058c4:	009b      	lsls	r3, r3, #2
 80058c6:	400b      	ands	r3, r1
 80058c8:	431a      	orrs	r2, r3
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	69db      	ldr	r3, [r3, #28]
 80058ce:	2138      	movs	r1, #56	; 0x38
 80058d0:	400b      	ands	r3, r1
 80058d2:	431a      	orrs	r2, r3
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	6a1b      	ldr	r3, [r3, #32]
 80058d8:	2180      	movs	r1, #128	; 0x80
 80058da:	400b      	ands	r3, r1
 80058dc:	431a      	orrs	r2, r3
 80058de:	0011      	movs	r1, r2
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80058e4:	2380      	movs	r3, #128	; 0x80
 80058e6:	019b      	lsls	r3, r3, #6
 80058e8:	401a      	ands	r2, r3
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	430a      	orrs	r2, r1
 80058f0:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	699b      	ldr	r3, [r3, #24]
 80058f6:	0c1b      	lsrs	r3, r3, #16
 80058f8:	2204      	movs	r2, #4
 80058fa:	4013      	ands	r3, r2
 80058fc:	0019      	movs	r1, r3
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005902:	2210      	movs	r2, #16
 8005904:	401a      	ands	r2, r3
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	430a      	orrs	r2, r1
 800590c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	69da      	ldr	r2, [r3, #28]
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	4907      	ldr	r1, [pc, #28]	; (8005938 <HAL_SPI_Init+0x124>)
 800591a:	400a      	ands	r2, r1
 800591c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	2200      	movs	r2, #0
 8005922:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	2251      	movs	r2, #81	; 0x51
 8005928:	2101      	movs	r1, #1
 800592a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800592c:	2300      	movs	r3, #0
}
 800592e:	0018      	movs	r0, r3
 8005930:	46bd      	mov	sp, r7
 8005932:	b002      	add	sp, #8
 8005934:	bd80      	pop	{r7, pc}
 8005936:	46c0      	nop			; (mov r8, r8)
 8005938:	fffff7ff 	.word	0xfffff7ff

0800593c <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800593c:	b580      	push	{r7, lr}
 800593e:	b088      	sub	sp, #32
 8005940:	af00      	add	r7, sp, #0
 8005942:	60f8      	str	r0, [r7, #12]
 8005944:	60b9      	str	r1, [r7, #8]
 8005946:	603b      	str	r3, [r7, #0]
 8005948:	1dbb      	adds	r3, r7, #6
 800594a:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800594c:	231f      	movs	r3, #31
 800594e:	18fb      	adds	r3, r7, r3
 8005950:	2200      	movs	r2, #0
 8005952:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	2250      	movs	r2, #80	; 0x50
 8005958:	5c9b      	ldrb	r3, [r3, r2]
 800595a:	2b01      	cmp	r3, #1
 800595c:	d101      	bne.n	8005962 <HAL_SPI_Transmit+0x26>
 800595e:	2302      	movs	r3, #2
 8005960:	e145      	b.n	8005bee <HAL_SPI_Transmit+0x2b2>
 8005962:	68fb      	ldr	r3, [r7, #12]
 8005964:	2250      	movs	r2, #80	; 0x50
 8005966:	2101      	movs	r1, #1
 8005968:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800596a:	f7fe f95f 	bl	8003c2c <HAL_GetTick>
 800596e:	0003      	movs	r3, r0
 8005970:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8005972:	2316      	movs	r3, #22
 8005974:	18fb      	adds	r3, r7, r3
 8005976:	1dba      	adds	r2, r7, #6
 8005978:	8812      	ldrh	r2, [r2, #0]
 800597a:	801a      	strh	r2, [r3, #0]

  if (hspi->State != HAL_SPI_STATE_READY)
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	2251      	movs	r2, #81	; 0x51
 8005980:	5c9b      	ldrb	r3, [r3, r2]
 8005982:	b2db      	uxtb	r3, r3
 8005984:	2b01      	cmp	r3, #1
 8005986:	d004      	beq.n	8005992 <HAL_SPI_Transmit+0x56>
  {
    errorcode = HAL_BUSY;
 8005988:	231f      	movs	r3, #31
 800598a:	18fb      	adds	r3, r7, r3
 800598c:	2202      	movs	r2, #2
 800598e:	701a      	strb	r2, [r3, #0]
    goto error;
 8005990:	e126      	b.n	8005be0 <HAL_SPI_Transmit+0x2a4>
  }

  if ((pData == NULL) || (Size == 0U))
 8005992:	68bb      	ldr	r3, [r7, #8]
 8005994:	2b00      	cmp	r3, #0
 8005996:	d003      	beq.n	80059a0 <HAL_SPI_Transmit+0x64>
 8005998:	1dbb      	adds	r3, r7, #6
 800599a:	881b      	ldrh	r3, [r3, #0]
 800599c:	2b00      	cmp	r3, #0
 800599e:	d104      	bne.n	80059aa <HAL_SPI_Transmit+0x6e>
  {
    errorcode = HAL_ERROR;
 80059a0:	231f      	movs	r3, #31
 80059a2:	18fb      	adds	r3, r7, r3
 80059a4:	2201      	movs	r2, #1
 80059a6:	701a      	strb	r2, [r3, #0]
    goto error;
 80059a8:	e11a      	b.n	8005be0 <HAL_SPI_Transmit+0x2a4>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80059aa:	68fb      	ldr	r3, [r7, #12]
 80059ac:	2251      	movs	r2, #81	; 0x51
 80059ae:	2103      	movs	r1, #3
 80059b0:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80059b2:	68fb      	ldr	r3, [r7, #12]
 80059b4:	2200      	movs	r2, #0
 80059b6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	68ba      	ldr	r2, [r7, #8]
 80059bc:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80059be:	68fb      	ldr	r3, [r7, #12]
 80059c0:	1dba      	adds	r2, r7, #6
 80059c2:	8812      	ldrh	r2, [r2, #0]
 80059c4:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80059c6:	68fb      	ldr	r3, [r7, #12]
 80059c8:	1dba      	adds	r2, r7, #6
 80059ca:	8812      	ldrh	r2, [r2, #0]
 80059cc:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80059ce:	68fb      	ldr	r3, [r7, #12]
 80059d0:	2200      	movs	r2, #0
 80059d2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80059d4:	68fb      	ldr	r3, [r7, #12]
 80059d6:	2200      	movs	r2, #0
 80059d8:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80059da:	68fb      	ldr	r3, [r7, #12]
 80059dc:	2200      	movs	r2, #0
 80059de:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	2200      	movs	r2, #0
 80059e4:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80059e6:	68fb      	ldr	r3, [r7, #12]
 80059e8:	2200      	movs	r2, #0
 80059ea:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80059ec:	68fb      	ldr	r3, [r7, #12]
 80059ee:	689a      	ldr	r2, [r3, #8]
 80059f0:	2380      	movs	r3, #128	; 0x80
 80059f2:	021b      	lsls	r3, r3, #8
 80059f4:	429a      	cmp	r2, r3
 80059f6:	d110      	bne.n	8005a1a <HAL_SPI_Transmit+0xde>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	681a      	ldr	r2, [r3, #0]
 80059fe:	68fb      	ldr	r3, [r7, #12]
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	2140      	movs	r1, #64	; 0x40
 8005a04:	438a      	bics	r2, r1
 8005a06:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8005a08:	68fb      	ldr	r3, [r7, #12]
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	681a      	ldr	r2, [r3, #0]
 8005a0e:	68fb      	ldr	r3, [r7, #12]
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	2180      	movs	r1, #128	; 0x80
 8005a14:	01c9      	lsls	r1, r1, #7
 8005a16:	430a      	orrs	r2, r1
 8005a18:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005a1a:	68fb      	ldr	r3, [r7, #12]
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	2240      	movs	r2, #64	; 0x40
 8005a22:	4013      	ands	r3, r2
 8005a24:	2b40      	cmp	r3, #64	; 0x40
 8005a26:	d007      	beq.n	8005a38 <HAL_SPI_Transmit+0xfc>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	681a      	ldr	r2, [r3, #0]
 8005a2e:	68fb      	ldr	r3, [r7, #12]
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	2140      	movs	r1, #64	; 0x40
 8005a34:	430a      	orrs	r2, r1
 8005a36:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	68da      	ldr	r2, [r3, #12]
 8005a3c:	2380      	movs	r3, #128	; 0x80
 8005a3e:	011b      	lsls	r3, r3, #4
 8005a40:	429a      	cmp	r2, r3
 8005a42:	d152      	bne.n	8005aea <HAL_SPI_Transmit+0x1ae>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005a44:	68fb      	ldr	r3, [r7, #12]
 8005a46:	685b      	ldr	r3, [r3, #4]
 8005a48:	2b00      	cmp	r3, #0
 8005a4a:	d004      	beq.n	8005a56 <HAL_SPI_Transmit+0x11a>
 8005a4c:	2316      	movs	r3, #22
 8005a4e:	18fb      	adds	r3, r7, r3
 8005a50:	881b      	ldrh	r3, [r3, #0]
 8005a52:	2b01      	cmp	r3, #1
 8005a54:	d143      	bne.n	8005ade <HAL_SPI_Transmit+0x1a2>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005a56:	68fb      	ldr	r3, [r7, #12]
 8005a58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a5a:	881a      	ldrh	r2, [r3, #0]
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005a62:	68fb      	ldr	r3, [r7, #12]
 8005a64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a66:	1c9a      	adds	r2, r3, #2
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005a70:	b29b      	uxth	r3, r3
 8005a72:	3b01      	subs	r3, #1
 8005a74:	b29a      	uxth	r2, r3
 8005a76:	68fb      	ldr	r3, [r7, #12]
 8005a78:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8005a7a:	e030      	b.n	8005ade <HAL_SPI_Transmit+0x1a2>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005a7c:	68fb      	ldr	r3, [r7, #12]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	689b      	ldr	r3, [r3, #8]
 8005a82:	2202      	movs	r2, #2
 8005a84:	4013      	ands	r3, r2
 8005a86:	2b02      	cmp	r3, #2
 8005a88:	d112      	bne.n	8005ab0 <HAL_SPI_Transmit+0x174>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005a8a:	68fb      	ldr	r3, [r7, #12]
 8005a8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a8e:	881a      	ldrh	r2, [r3, #0]
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005a96:	68fb      	ldr	r3, [r7, #12]
 8005a98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a9a:	1c9a      	adds	r2, r3, #2
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005aa0:	68fb      	ldr	r3, [r7, #12]
 8005aa2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005aa4:	b29b      	uxth	r3, r3
 8005aa6:	3b01      	subs	r3, #1
 8005aa8:	b29a      	uxth	r2, r3
 8005aaa:	68fb      	ldr	r3, [r7, #12]
 8005aac:	86da      	strh	r2, [r3, #54]	; 0x36
 8005aae:	e016      	b.n	8005ade <HAL_SPI_Transmit+0x1a2>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005ab0:	f7fe f8bc 	bl	8003c2c <HAL_GetTick>
 8005ab4:	0002      	movs	r2, r0
 8005ab6:	69bb      	ldr	r3, [r7, #24]
 8005ab8:	1ad3      	subs	r3, r2, r3
 8005aba:	683a      	ldr	r2, [r7, #0]
 8005abc:	429a      	cmp	r2, r3
 8005abe:	d802      	bhi.n	8005ac6 <HAL_SPI_Transmit+0x18a>
 8005ac0:	683b      	ldr	r3, [r7, #0]
 8005ac2:	3301      	adds	r3, #1
 8005ac4:	d102      	bne.n	8005acc <HAL_SPI_Transmit+0x190>
 8005ac6:	683b      	ldr	r3, [r7, #0]
 8005ac8:	2b00      	cmp	r3, #0
 8005aca:	d108      	bne.n	8005ade <HAL_SPI_Transmit+0x1a2>
        {
          errorcode = HAL_TIMEOUT;
 8005acc:	231f      	movs	r3, #31
 8005ace:	18fb      	adds	r3, r7, r3
 8005ad0:	2203      	movs	r2, #3
 8005ad2:	701a      	strb	r2, [r3, #0]
          hspi->State = HAL_SPI_STATE_READY;
 8005ad4:	68fb      	ldr	r3, [r7, #12]
 8005ad6:	2251      	movs	r2, #81	; 0x51
 8005ad8:	2101      	movs	r1, #1
 8005ada:	5499      	strb	r1, [r3, r2]
          goto error;
 8005adc:	e080      	b.n	8005be0 <HAL_SPI_Transmit+0x2a4>
    while (hspi->TxXferCount > 0U)
 8005ade:	68fb      	ldr	r3, [r7, #12]
 8005ae0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005ae2:	b29b      	uxth	r3, r3
 8005ae4:	2b00      	cmp	r3, #0
 8005ae6:	d1c9      	bne.n	8005a7c <HAL_SPI_Transmit+0x140>
 8005ae8:	e053      	b.n	8005b92 <HAL_SPI_Transmit+0x256>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005aea:	68fb      	ldr	r3, [r7, #12]
 8005aec:	685b      	ldr	r3, [r3, #4]
 8005aee:	2b00      	cmp	r3, #0
 8005af0:	d004      	beq.n	8005afc <HAL_SPI_Transmit+0x1c0>
 8005af2:	2316      	movs	r3, #22
 8005af4:	18fb      	adds	r3, r7, r3
 8005af6:	881b      	ldrh	r3, [r3, #0]
 8005af8:	2b01      	cmp	r3, #1
 8005afa:	d145      	bne.n	8005b88 <HAL_SPI_Transmit+0x24c>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005afc:	68fb      	ldr	r3, [r7, #12]
 8005afe:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005b00:	68fb      	ldr	r3, [r7, #12]
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	330c      	adds	r3, #12
 8005b06:	7812      	ldrb	r2, [r2, #0]
 8005b08:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005b0a:	68fb      	ldr	r3, [r7, #12]
 8005b0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b0e:	1c5a      	adds	r2, r3, #1
 8005b10:	68fb      	ldr	r3, [r7, #12]
 8005b12:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005b14:	68fb      	ldr	r3, [r7, #12]
 8005b16:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005b18:	b29b      	uxth	r3, r3
 8005b1a:	3b01      	subs	r3, #1
 8005b1c:	b29a      	uxth	r2, r3
 8005b1e:	68fb      	ldr	r3, [r7, #12]
 8005b20:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8005b22:	e031      	b.n	8005b88 <HAL_SPI_Transmit+0x24c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	689b      	ldr	r3, [r3, #8]
 8005b2a:	2202      	movs	r2, #2
 8005b2c:	4013      	ands	r3, r2
 8005b2e:	2b02      	cmp	r3, #2
 8005b30:	d113      	bne.n	8005b5a <HAL_SPI_Transmit+0x21e>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005b32:	68fb      	ldr	r3, [r7, #12]
 8005b34:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005b36:	68fb      	ldr	r3, [r7, #12]
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	330c      	adds	r3, #12
 8005b3c:	7812      	ldrb	r2, [r2, #0]
 8005b3e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8005b40:	68fb      	ldr	r3, [r7, #12]
 8005b42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b44:	1c5a      	adds	r2, r3, #1
 8005b46:	68fb      	ldr	r3, [r7, #12]
 8005b48:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005b4e:	b29b      	uxth	r3, r3
 8005b50:	3b01      	subs	r3, #1
 8005b52:	b29a      	uxth	r2, r3
 8005b54:	68fb      	ldr	r3, [r7, #12]
 8005b56:	86da      	strh	r2, [r3, #54]	; 0x36
 8005b58:	e016      	b.n	8005b88 <HAL_SPI_Transmit+0x24c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005b5a:	f7fe f867 	bl	8003c2c <HAL_GetTick>
 8005b5e:	0002      	movs	r2, r0
 8005b60:	69bb      	ldr	r3, [r7, #24]
 8005b62:	1ad3      	subs	r3, r2, r3
 8005b64:	683a      	ldr	r2, [r7, #0]
 8005b66:	429a      	cmp	r2, r3
 8005b68:	d802      	bhi.n	8005b70 <HAL_SPI_Transmit+0x234>
 8005b6a:	683b      	ldr	r3, [r7, #0]
 8005b6c:	3301      	adds	r3, #1
 8005b6e:	d102      	bne.n	8005b76 <HAL_SPI_Transmit+0x23a>
 8005b70:	683b      	ldr	r3, [r7, #0]
 8005b72:	2b00      	cmp	r3, #0
 8005b74:	d108      	bne.n	8005b88 <HAL_SPI_Transmit+0x24c>
        {
          errorcode = HAL_TIMEOUT;
 8005b76:	231f      	movs	r3, #31
 8005b78:	18fb      	adds	r3, r7, r3
 8005b7a:	2203      	movs	r2, #3
 8005b7c:	701a      	strb	r2, [r3, #0]
          hspi->State = HAL_SPI_STATE_READY;
 8005b7e:	68fb      	ldr	r3, [r7, #12]
 8005b80:	2251      	movs	r2, #81	; 0x51
 8005b82:	2101      	movs	r1, #1
 8005b84:	5499      	strb	r1, [r3, r2]
          goto error;
 8005b86:	e02b      	b.n	8005be0 <HAL_SPI_Transmit+0x2a4>
    while (hspi->TxXferCount > 0U)
 8005b88:	68fb      	ldr	r3, [r7, #12]
 8005b8a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005b8c:	b29b      	uxth	r3, r3
 8005b8e:	2b00      	cmp	r3, #0
 8005b90:	d1c8      	bne.n	8005b24 <HAL_SPI_Transmit+0x1e8>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005b92:	69ba      	ldr	r2, [r7, #24]
 8005b94:	6839      	ldr	r1, [r7, #0]
 8005b96:	68fb      	ldr	r3, [r7, #12]
 8005b98:	0018      	movs	r0, r3
 8005b9a:	f000 fc1f 	bl	80063dc <SPI_EndRxTxTransaction>
 8005b9e:	1e03      	subs	r3, r0, #0
 8005ba0:	d002      	beq.n	8005ba8 <HAL_SPI_Transmit+0x26c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005ba2:	68fb      	ldr	r3, [r7, #12]
 8005ba4:	2220      	movs	r2, #32
 8005ba6:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005ba8:	68fb      	ldr	r3, [r7, #12]
 8005baa:	689b      	ldr	r3, [r3, #8]
 8005bac:	2b00      	cmp	r3, #0
 8005bae:	d10a      	bne.n	8005bc6 <HAL_SPI_Transmit+0x28a>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005bb0:	2300      	movs	r3, #0
 8005bb2:	613b      	str	r3, [r7, #16]
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	68db      	ldr	r3, [r3, #12]
 8005bba:	613b      	str	r3, [r7, #16]
 8005bbc:	68fb      	ldr	r3, [r7, #12]
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	689b      	ldr	r3, [r3, #8]
 8005bc2:	613b      	str	r3, [r7, #16]
 8005bc4:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005bc6:	68fb      	ldr	r3, [r7, #12]
 8005bc8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005bca:	2b00      	cmp	r3, #0
 8005bcc:	d004      	beq.n	8005bd8 <HAL_SPI_Transmit+0x29c>
  {
    errorcode = HAL_ERROR;
 8005bce:	231f      	movs	r3, #31
 8005bd0:	18fb      	adds	r3, r7, r3
 8005bd2:	2201      	movs	r2, #1
 8005bd4:	701a      	strb	r2, [r3, #0]
 8005bd6:	e003      	b.n	8005be0 <HAL_SPI_Transmit+0x2a4>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8005bd8:	68fb      	ldr	r3, [r7, #12]
 8005bda:	2251      	movs	r2, #81	; 0x51
 8005bdc:	2101      	movs	r1, #1
 8005bde:	5499      	strb	r1, [r3, r2]
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005be0:	68fb      	ldr	r3, [r7, #12]
 8005be2:	2250      	movs	r2, #80	; 0x50
 8005be4:	2100      	movs	r1, #0
 8005be6:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8005be8:	231f      	movs	r3, #31
 8005bea:	18fb      	adds	r3, r7, r3
 8005bec:	781b      	ldrb	r3, [r3, #0]
}
 8005bee:	0018      	movs	r0, r3
 8005bf0:	46bd      	mov	sp, r7
 8005bf2:	b008      	add	sp, #32
 8005bf4:	bd80      	pop	{r7, pc}
	...

08005bf8 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005bf8:	b590      	push	{r4, r7, lr}
 8005bfa:	b089      	sub	sp, #36	; 0x24
 8005bfc:	af02      	add	r7, sp, #8
 8005bfe:	60f8      	str	r0, [r7, #12]
 8005c00:	60b9      	str	r1, [r7, #8]
 8005c02:	603b      	str	r3, [r7, #0]
 8005c04:	1dbb      	adds	r3, r7, #6
 8005c06:	801a      	strh	r2, [r3, #0]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005c08:	2117      	movs	r1, #23
 8005c0a:	187b      	adds	r3, r7, r1
 8005c0c:	2200      	movs	r2, #0
 8005c0e:	701a      	strb	r2, [r3, #0]
    /* in this case, 16-bit access is performed on Data
       So, check Data is 16-bit aligned address */
    assert_param(IS_SPI_16BIT_ALIGNED_ADDRESS(pData));
  }

  if (hspi->State != HAL_SPI_STATE_READY)
 8005c10:	68fb      	ldr	r3, [r7, #12]
 8005c12:	2251      	movs	r2, #81	; 0x51
 8005c14:	5c9b      	ldrb	r3, [r3, r2]
 8005c16:	b2db      	uxtb	r3, r3
 8005c18:	2b01      	cmp	r3, #1
 8005c1a:	d003      	beq.n	8005c24 <HAL_SPI_Receive+0x2c>
  {
    errorcode = HAL_BUSY;
 8005c1c:	187b      	adds	r3, r7, r1
 8005c1e:	2202      	movs	r2, #2
 8005c20:	701a      	strb	r2, [r3, #0]
    goto error;
 8005c22:	e109      	b.n	8005e38 <HAL_SPI_Receive+0x240>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	685a      	ldr	r2, [r3, #4]
 8005c28:	2382      	movs	r3, #130	; 0x82
 8005c2a:	005b      	lsls	r3, r3, #1
 8005c2c:	429a      	cmp	r2, r3
 8005c2e:	d113      	bne.n	8005c58 <HAL_SPI_Receive+0x60>
 8005c30:	68fb      	ldr	r3, [r7, #12]
 8005c32:	689b      	ldr	r3, [r3, #8]
 8005c34:	2b00      	cmp	r3, #0
 8005c36:	d10f      	bne.n	8005c58 <HAL_SPI_Receive+0x60>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	2251      	movs	r2, #81	; 0x51
 8005c3c:	2104      	movs	r1, #4
 8005c3e:	5499      	strb	r1, [r3, r2]
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8005c40:	1dbb      	adds	r3, r7, #6
 8005c42:	881c      	ldrh	r4, [r3, #0]
 8005c44:	68ba      	ldr	r2, [r7, #8]
 8005c46:	68b9      	ldr	r1, [r7, #8]
 8005c48:	68f8      	ldr	r0, [r7, #12]
 8005c4a:	683b      	ldr	r3, [r7, #0]
 8005c4c:	9300      	str	r3, [sp, #0]
 8005c4e:	0023      	movs	r3, r4
 8005c50:	f000 f900 	bl	8005e54 <HAL_SPI_TransmitReceive>
 8005c54:	0003      	movs	r3, r0
 8005c56:	e0f6      	b.n	8005e46 <HAL_SPI_Receive+0x24e>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005c58:	68fb      	ldr	r3, [r7, #12]
 8005c5a:	2250      	movs	r2, #80	; 0x50
 8005c5c:	5c9b      	ldrb	r3, [r3, r2]
 8005c5e:	2b01      	cmp	r3, #1
 8005c60:	d101      	bne.n	8005c66 <HAL_SPI_Receive+0x6e>
 8005c62:	2302      	movs	r3, #2
 8005c64:	e0ef      	b.n	8005e46 <HAL_SPI_Receive+0x24e>
 8005c66:	68fb      	ldr	r3, [r7, #12]
 8005c68:	2250      	movs	r2, #80	; 0x50
 8005c6a:	2101      	movs	r1, #1
 8005c6c:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005c6e:	f7fd ffdd 	bl	8003c2c <HAL_GetTick>
 8005c72:	0003      	movs	r3, r0
 8005c74:	613b      	str	r3, [r7, #16]

  if ((pData == NULL) || (Size == 0U))
 8005c76:	68bb      	ldr	r3, [r7, #8]
 8005c78:	2b00      	cmp	r3, #0
 8005c7a:	d003      	beq.n	8005c84 <HAL_SPI_Receive+0x8c>
 8005c7c:	1dbb      	adds	r3, r7, #6
 8005c7e:	881b      	ldrh	r3, [r3, #0]
 8005c80:	2b00      	cmp	r3, #0
 8005c82:	d104      	bne.n	8005c8e <HAL_SPI_Receive+0x96>
  {
    errorcode = HAL_ERROR;
 8005c84:	2317      	movs	r3, #23
 8005c86:	18fb      	adds	r3, r7, r3
 8005c88:	2201      	movs	r2, #1
 8005c8a:	701a      	strb	r2, [r3, #0]
    goto error;
 8005c8c:	e0d4      	b.n	8005e38 <HAL_SPI_Receive+0x240>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8005c8e:	68fb      	ldr	r3, [r7, #12]
 8005c90:	2251      	movs	r2, #81	; 0x51
 8005c92:	2104      	movs	r1, #4
 8005c94:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005c96:	68fb      	ldr	r3, [r7, #12]
 8005c98:	2200      	movs	r2, #0
 8005c9a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8005c9c:	68fb      	ldr	r3, [r7, #12]
 8005c9e:	68ba      	ldr	r2, [r7, #8]
 8005ca0:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8005ca2:	68fb      	ldr	r3, [r7, #12]
 8005ca4:	1dba      	adds	r2, r7, #6
 8005ca6:	8812      	ldrh	r2, [r2, #0]
 8005ca8:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8005caa:	68fb      	ldr	r3, [r7, #12]
 8005cac:	1dba      	adds	r2, r7, #6
 8005cae:	8812      	ldrh	r2, [r2, #0]
 8005cb0:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8005cb2:	68fb      	ldr	r3, [r7, #12]
 8005cb4:	2200      	movs	r2, #0
 8005cb6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	2200      	movs	r2, #0
 8005cbc:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8005cbe:	68fb      	ldr	r3, [r7, #12]
 8005cc0:	2200      	movs	r2, #0
 8005cc2:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8005cc4:	68fb      	ldr	r3, [r7, #12]
 8005cc6:	2200      	movs	r2, #0
 8005cc8:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8005cca:	68fb      	ldr	r3, [r7, #12]
 8005ccc:	2200      	movs	r2, #0
 8005cce:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005cd0:	68fb      	ldr	r3, [r7, #12]
 8005cd2:	689a      	ldr	r2, [r3, #8]
 8005cd4:	2380      	movs	r3, #128	; 0x80
 8005cd6:	021b      	lsls	r3, r3, #8
 8005cd8:	429a      	cmp	r2, r3
 8005cda:	d10f      	bne.n	8005cfc <HAL_SPI_Receive+0x104>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005cdc:	68fb      	ldr	r3, [r7, #12]
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	681a      	ldr	r2, [r3, #0]
 8005ce2:	68fb      	ldr	r3, [r7, #12]
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	2140      	movs	r1, #64	; 0x40
 8005ce8:	438a      	bics	r2, r1
 8005cea:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8005cec:	68fb      	ldr	r3, [r7, #12]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	681a      	ldr	r2, [r3, #0]
 8005cf2:	68fb      	ldr	r3, [r7, #12]
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	4956      	ldr	r1, [pc, #344]	; (8005e50 <HAL_SPI_Receive+0x258>)
 8005cf8:	400a      	ands	r2, r1
 8005cfa:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005cfc:	68fb      	ldr	r3, [r7, #12]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	2240      	movs	r2, #64	; 0x40
 8005d04:	4013      	ands	r3, r2
 8005d06:	2b40      	cmp	r3, #64	; 0x40
 8005d08:	d007      	beq.n	8005d1a <HAL_SPI_Receive+0x122>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005d0a:	68fb      	ldr	r3, [r7, #12]
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	681a      	ldr	r2, [r3, #0]
 8005d10:	68fb      	ldr	r3, [r7, #12]
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	2140      	movs	r1, #64	; 0x40
 8005d16:	430a      	orrs	r2, r1
 8005d18:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8005d1a:	68fb      	ldr	r3, [r7, #12]
 8005d1c:	68db      	ldr	r3, [r3, #12]
 8005d1e:	2b00      	cmp	r3, #0
 8005d20:	d000      	beq.n	8005d24 <HAL_SPI_Receive+0x12c>
 8005d22:	e06c      	b.n	8005dfe <HAL_SPI_Receive+0x206>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8005d24:	e033      	b.n	8005d8e <HAL_SPI_Receive+0x196>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8005d26:	68fb      	ldr	r3, [r7, #12]
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	689b      	ldr	r3, [r3, #8]
 8005d2c:	2201      	movs	r2, #1
 8005d2e:	4013      	ands	r3, r2
 8005d30:	2b01      	cmp	r3, #1
 8005d32:	d115      	bne.n	8005d60 <HAL_SPI_Receive+0x168>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8005d34:	68fb      	ldr	r3, [r7, #12]
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	330c      	adds	r3, #12
 8005d3a:	001a      	movs	r2, r3
 8005d3c:	68fb      	ldr	r3, [r7, #12]
 8005d3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d40:	7812      	ldrb	r2, [r2, #0]
 8005d42:	b2d2      	uxtb	r2, r2
 8005d44:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8005d46:	68fb      	ldr	r3, [r7, #12]
 8005d48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d4a:	1c5a      	adds	r2, r3, #1
 8005d4c:	68fb      	ldr	r3, [r7, #12]
 8005d4e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8005d50:	68fb      	ldr	r3, [r7, #12]
 8005d52:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005d54:	b29b      	uxth	r3, r3
 8005d56:	3b01      	subs	r3, #1
 8005d58:	b29a      	uxth	r2, r3
 8005d5a:	68fb      	ldr	r3, [r7, #12]
 8005d5c:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005d5e:	e016      	b.n	8005d8e <HAL_SPI_Receive+0x196>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005d60:	f7fd ff64 	bl	8003c2c <HAL_GetTick>
 8005d64:	0002      	movs	r2, r0
 8005d66:	693b      	ldr	r3, [r7, #16]
 8005d68:	1ad3      	subs	r3, r2, r3
 8005d6a:	683a      	ldr	r2, [r7, #0]
 8005d6c:	429a      	cmp	r2, r3
 8005d6e:	d802      	bhi.n	8005d76 <HAL_SPI_Receive+0x17e>
 8005d70:	683b      	ldr	r3, [r7, #0]
 8005d72:	3301      	adds	r3, #1
 8005d74:	d102      	bne.n	8005d7c <HAL_SPI_Receive+0x184>
 8005d76:	683b      	ldr	r3, [r7, #0]
 8005d78:	2b00      	cmp	r3, #0
 8005d7a:	d108      	bne.n	8005d8e <HAL_SPI_Receive+0x196>
        {
          errorcode = HAL_TIMEOUT;
 8005d7c:	2317      	movs	r3, #23
 8005d7e:	18fb      	adds	r3, r7, r3
 8005d80:	2203      	movs	r2, #3
 8005d82:	701a      	strb	r2, [r3, #0]
          hspi->State = HAL_SPI_STATE_READY;
 8005d84:	68fb      	ldr	r3, [r7, #12]
 8005d86:	2251      	movs	r2, #81	; 0x51
 8005d88:	2101      	movs	r1, #1
 8005d8a:	5499      	strb	r1, [r3, r2]
          goto error;
 8005d8c:	e054      	b.n	8005e38 <HAL_SPI_Receive+0x240>
    while (hspi->RxXferCount > 0U)
 8005d8e:	68fb      	ldr	r3, [r7, #12]
 8005d90:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005d92:	b29b      	uxth	r3, r3
 8005d94:	2b00      	cmp	r3, #0
 8005d96:	d1c6      	bne.n	8005d26 <HAL_SPI_Receive+0x12e>
 8005d98:	e036      	b.n	8005e08 <HAL_SPI_Receive+0x210>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8005d9a:	68fb      	ldr	r3, [r7, #12]
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	689b      	ldr	r3, [r3, #8]
 8005da0:	2201      	movs	r2, #1
 8005da2:	4013      	ands	r3, r2
 8005da4:	2b01      	cmp	r3, #1
 8005da6:	d113      	bne.n	8005dd0 <HAL_SPI_Receive+0x1d8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005da8:	68fb      	ldr	r3, [r7, #12]
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	68da      	ldr	r2, [r3, #12]
 8005dae:	68fb      	ldr	r3, [r7, #12]
 8005db0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005db2:	b292      	uxth	r2, r2
 8005db4:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005db6:	68fb      	ldr	r3, [r7, #12]
 8005db8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005dba:	1c9a      	adds	r2, r3, #2
 8005dbc:	68fb      	ldr	r3, [r7, #12]
 8005dbe:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8005dc0:	68fb      	ldr	r3, [r7, #12]
 8005dc2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005dc4:	b29b      	uxth	r3, r3
 8005dc6:	3b01      	subs	r3, #1
 8005dc8:	b29a      	uxth	r2, r3
 8005dca:	68fb      	ldr	r3, [r7, #12]
 8005dcc:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005dce:	e016      	b.n	8005dfe <HAL_SPI_Receive+0x206>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005dd0:	f7fd ff2c 	bl	8003c2c <HAL_GetTick>
 8005dd4:	0002      	movs	r2, r0
 8005dd6:	693b      	ldr	r3, [r7, #16]
 8005dd8:	1ad3      	subs	r3, r2, r3
 8005dda:	683a      	ldr	r2, [r7, #0]
 8005ddc:	429a      	cmp	r2, r3
 8005dde:	d802      	bhi.n	8005de6 <HAL_SPI_Receive+0x1ee>
 8005de0:	683b      	ldr	r3, [r7, #0]
 8005de2:	3301      	adds	r3, #1
 8005de4:	d102      	bne.n	8005dec <HAL_SPI_Receive+0x1f4>
 8005de6:	683b      	ldr	r3, [r7, #0]
 8005de8:	2b00      	cmp	r3, #0
 8005dea:	d108      	bne.n	8005dfe <HAL_SPI_Receive+0x206>
        {
          errorcode = HAL_TIMEOUT;
 8005dec:	2317      	movs	r3, #23
 8005dee:	18fb      	adds	r3, r7, r3
 8005df0:	2203      	movs	r2, #3
 8005df2:	701a      	strb	r2, [r3, #0]
          hspi->State = HAL_SPI_STATE_READY;
 8005df4:	68fb      	ldr	r3, [r7, #12]
 8005df6:	2251      	movs	r2, #81	; 0x51
 8005df8:	2101      	movs	r1, #1
 8005dfa:	5499      	strb	r1, [r3, r2]
          goto error;
 8005dfc:	e01c      	b.n	8005e38 <HAL_SPI_Receive+0x240>
    while (hspi->RxXferCount > 0U)
 8005dfe:	68fb      	ldr	r3, [r7, #12]
 8005e00:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005e02:	b29b      	uxth	r3, r3
 8005e04:	2b00      	cmp	r3, #0
 8005e06:	d1c8      	bne.n	8005d9a <HAL_SPI_Receive+0x1a2>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005e08:	693a      	ldr	r2, [r7, #16]
 8005e0a:	6839      	ldr	r1, [r7, #0]
 8005e0c:	68fb      	ldr	r3, [r7, #12]
 8005e0e:	0018      	movs	r0, r3
 8005e10:	f000 fa7a 	bl	8006308 <SPI_EndRxTransaction>
 8005e14:	1e03      	subs	r3, r0, #0
 8005e16:	d002      	beq.n	8005e1e <HAL_SPI_Receive+0x226>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005e18:	68fb      	ldr	r3, [r7, #12]
 8005e1a:	2220      	movs	r2, #32
 8005e1c:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005e1e:	68fb      	ldr	r3, [r7, #12]
 8005e20:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005e22:	2b00      	cmp	r3, #0
 8005e24:	d004      	beq.n	8005e30 <HAL_SPI_Receive+0x238>
  {
    errorcode = HAL_ERROR;
 8005e26:	2317      	movs	r3, #23
 8005e28:	18fb      	adds	r3, r7, r3
 8005e2a:	2201      	movs	r2, #1
 8005e2c:	701a      	strb	r2, [r3, #0]
 8005e2e:	e003      	b.n	8005e38 <HAL_SPI_Receive+0x240>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8005e30:	68fb      	ldr	r3, [r7, #12]
 8005e32:	2251      	movs	r2, #81	; 0x51
 8005e34:	2101      	movs	r1, #1
 8005e36:	5499      	strb	r1, [r3, r2]
  }

error :
  __HAL_UNLOCK(hspi);
 8005e38:	68fb      	ldr	r3, [r7, #12]
 8005e3a:	2250      	movs	r2, #80	; 0x50
 8005e3c:	2100      	movs	r1, #0
 8005e3e:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8005e40:	2317      	movs	r3, #23
 8005e42:	18fb      	adds	r3, r7, r3
 8005e44:	781b      	ldrb	r3, [r3, #0]
}
 8005e46:	0018      	movs	r0, r3
 8005e48:	46bd      	mov	sp, r7
 8005e4a:	b007      	add	sp, #28
 8005e4c:	bd90      	pop	{r4, r7, pc}
 8005e4e:	46c0      	nop			; (mov r8, r8)
 8005e50:	ffffbfff 	.word	0xffffbfff

08005e54 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8005e54:	b580      	push	{r7, lr}
 8005e56:	b08c      	sub	sp, #48	; 0x30
 8005e58:	af00      	add	r7, sp, #0
 8005e5a:	60f8      	str	r0, [r7, #12]
 8005e5c:	60b9      	str	r1, [r7, #8]
 8005e5e:	607a      	str	r2, [r7, #4]
 8005e60:	001a      	movs	r2, r3
 8005e62:	1cbb      	adds	r3, r7, #2
 8005e64:	801a      	strh	r2, [r3, #0]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8005e66:	2301      	movs	r3, #1
 8005e68:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8005e6a:	232b      	movs	r3, #43	; 0x2b
 8005e6c:	18fb      	adds	r3, r7, r3
 8005e6e:	2200      	movs	r2, #0
 8005e70:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005e72:	68fb      	ldr	r3, [r7, #12]
 8005e74:	2250      	movs	r2, #80	; 0x50
 8005e76:	5c9b      	ldrb	r3, [r3, r2]
 8005e78:	2b01      	cmp	r3, #1
 8005e7a:	d101      	bne.n	8005e80 <HAL_SPI_TransmitReceive+0x2c>
 8005e7c:	2302      	movs	r3, #2
 8005e7e:	e1b0      	b.n	80061e2 <HAL_SPI_TransmitReceive+0x38e>
 8005e80:	68fb      	ldr	r3, [r7, #12]
 8005e82:	2250      	movs	r2, #80	; 0x50
 8005e84:	2101      	movs	r1, #1
 8005e86:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005e88:	f7fd fed0 	bl	8003c2c <HAL_GetTick>
 8005e8c:	0003      	movs	r3, r0
 8005e8e:	627b      	str	r3, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8005e90:	2023      	movs	r0, #35	; 0x23
 8005e92:	183b      	adds	r3, r7, r0
 8005e94:	68fa      	ldr	r2, [r7, #12]
 8005e96:	2151      	movs	r1, #81	; 0x51
 8005e98:	5c52      	ldrb	r2, [r2, r1]
 8005e9a:	701a      	strb	r2, [r3, #0]
  tmp_mode            = hspi->Init.Mode;
 8005e9c:	68fb      	ldr	r3, [r7, #12]
 8005e9e:	685b      	ldr	r3, [r3, #4]
 8005ea0:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8005ea2:	231a      	movs	r3, #26
 8005ea4:	18fb      	adds	r3, r7, r3
 8005ea6:	1cba      	adds	r2, r7, #2
 8005ea8:	8812      	ldrh	r2, [r2, #0]
 8005eaa:	801a      	strh	r2, [r3, #0]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8005eac:	183b      	adds	r3, r7, r0
 8005eae:	781b      	ldrb	r3, [r3, #0]
 8005eb0:	2b01      	cmp	r3, #1
 8005eb2:	d011      	beq.n	8005ed8 <HAL_SPI_TransmitReceive+0x84>
 8005eb4:	69fa      	ldr	r2, [r7, #28]
 8005eb6:	2382      	movs	r3, #130	; 0x82
 8005eb8:	005b      	lsls	r3, r3, #1
 8005eba:	429a      	cmp	r2, r3
 8005ebc:	d107      	bne.n	8005ece <HAL_SPI_TransmitReceive+0x7a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8005ebe:	68fb      	ldr	r3, [r7, #12]
 8005ec0:	689b      	ldr	r3, [r3, #8]
 8005ec2:	2b00      	cmp	r3, #0
 8005ec4:	d103      	bne.n	8005ece <HAL_SPI_TransmitReceive+0x7a>
 8005ec6:	183b      	adds	r3, r7, r0
 8005ec8:	781b      	ldrb	r3, [r3, #0]
 8005eca:	2b04      	cmp	r3, #4
 8005ecc:	d004      	beq.n	8005ed8 <HAL_SPI_TransmitReceive+0x84>
  {
    errorcode = HAL_BUSY;
 8005ece:	232b      	movs	r3, #43	; 0x2b
 8005ed0:	18fb      	adds	r3, r7, r3
 8005ed2:	2202      	movs	r2, #2
 8005ed4:	701a      	strb	r2, [r3, #0]
    goto error;
 8005ed6:	e17d      	b.n	80061d4 <HAL_SPI_TransmitReceive+0x380>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8005ed8:	68bb      	ldr	r3, [r7, #8]
 8005eda:	2b00      	cmp	r3, #0
 8005edc:	d006      	beq.n	8005eec <HAL_SPI_TransmitReceive+0x98>
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	2b00      	cmp	r3, #0
 8005ee2:	d003      	beq.n	8005eec <HAL_SPI_TransmitReceive+0x98>
 8005ee4:	1cbb      	adds	r3, r7, #2
 8005ee6:	881b      	ldrh	r3, [r3, #0]
 8005ee8:	2b00      	cmp	r3, #0
 8005eea:	d104      	bne.n	8005ef6 <HAL_SPI_TransmitReceive+0xa2>
  {
    errorcode = HAL_ERROR;
 8005eec:	232b      	movs	r3, #43	; 0x2b
 8005eee:	18fb      	adds	r3, r7, r3
 8005ef0:	2201      	movs	r2, #1
 8005ef2:	701a      	strb	r2, [r3, #0]
    goto error;
 8005ef4:	e16e      	b.n	80061d4 <HAL_SPI_TransmitReceive+0x380>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8005ef6:	68fb      	ldr	r3, [r7, #12]
 8005ef8:	2251      	movs	r2, #81	; 0x51
 8005efa:	5c9b      	ldrb	r3, [r3, r2]
 8005efc:	b2db      	uxtb	r3, r3
 8005efe:	2b04      	cmp	r3, #4
 8005f00:	d003      	beq.n	8005f0a <HAL_SPI_TransmitReceive+0xb6>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8005f02:	68fb      	ldr	r3, [r7, #12]
 8005f04:	2251      	movs	r2, #81	; 0x51
 8005f06:	2105      	movs	r1, #5
 8005f08:	5499      	strb	r1, [r3, r2]
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005f0a:	68fb      	ldr	r3, [r7, #12]
 8005f0c:	2200      	movs	r2, #0
 8005f0e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8005f10:	68fb      	ldr	r3, [r7, #12]
 8005f12:	687a      	ldr	r2, [r7, #4]
 8005f14:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8005f16:	68fb      	ldr	r3, [r7, #12]
 8005f18:	1cba      	adds	r2, r7, #2
 8005f1a:	8812      	ldrh	r2, [r2, #0]
 8005f1c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8005f1e:	68fb      	ldr	r3, [r7, #12]
 8005f20:	1cba      	adds	r2, r7, #2
 8005f22:	8812      	ldrh	r2, [r2, #0]
 8005f24:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8005f26:	68fb      	ldr	r3, [r7, #12]
 8005f28:	68ba      	ldr	r2, [r7, #8]
 8005f2a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8005f2c:	68fb      	ldr	r3, [r7, #12]
 8005f2e:	1cba      	adds	r2, r7, #2
 8005f30:	8812      	ldrh	r2, [r2, #0]
 8005f32:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8005f34:	68fb      	ldr	r3, [r7, #12]
 8005f36:	1cba      	adds	r2, r7, #2
 8005f38:	8812      	ldrh	r2, [r2, #0]
 8005f3a:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8005f3c:	68fb      	ldr	r3, [r7, #12]
 8005f3e:	2200      	movs	r2, #0
 8005f40:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8005f42:	68fb      	ldr	r3, [r7, #12]
 8005f44:	2200      	movs	r2, #0
 8005f46:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005f48:	68fb      	ldr	r3, [r7, #12]
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	2240      	movs	r2, #64	; 0x40
 8005f50:	4013      	ands	r3, r2
 8005f52:	2b40      	cmp	r3, #64	; 0x40
 8005f54:	d007      	beq.n	8005f66 <HAL_SPI_TransmitReceive+0x112>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005f56:	68fb      	ldr	r3, [r7, #12]
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	681a      	ldr	r2, [r3, #0]
 8005f5c:	68fb      	ldr	r3, [r7, #12]
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	2140      	movs	r1, #64	; 0x40
 8005f62:	430a      	orrs	r2, r1
 8005f64:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8005f66:	68fb      	ldr	r3, [r7, #12]
 8005f68:	68da      	ldr	r2, [r3, #12]
 8005f6a:	2380      	movs	r3, #128	; 0x80
 8005f6c:	011b      	lsls	r3, r3, #4
 8005f6e:	429a      	cmp	r2, r3
 8005f70:	d000      	beq.n	8005f74 <HAL_SPI_TransmitReceive+0x120>
 8005f72:	e07f      	b.n	8006074 <HAL_SPI_TransmitReceive+0x220>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005f74:	68fb      	ldr	r3, [r7, #12]
 8005f76:	685b      	ldr	r3, [r3, #4]
 8005f78:	2b00      	cmp	r3, #0
 8005f7a:	d005      	beq.n	8005f88 <HAL_SPI_TransmitReceive+0x134>
 8005f7c:	231a      	movs	r3, #26
 8005f7e:	18fb      	adds	r3, r7, r3
 8005f80:	881b      	ldrh	r3, [r3, #0]
 8005f82:	2b01      	cmp	r3, #1
 8005f84:	d000      	beq.n	8005f88 <HAL_SPI_TransmitReceive+0x134>
 8005f86:	e06a      	b.n	800605e <HAL_SPI_TransmitReceive+0x20a>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005f88:	68fb      	ldr	r3, [r7, #12]
 8005f8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f8c:	881a      	ldrh	r2, [r3, #0]
 8005f8e:	68fb      	ldr	r3, [r7, #12]
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005f94:	68fb      	ldr	r3, [r7, #12]
 8005f96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f98:	1c9a      	adds	r2, r3, #2
 8005f9a:	68fb      	ldr	r3, [r7, #12]
 8005f9c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005f9e:	68fb      	ldr	r3, [r7, #12]
 8005fa0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005fa2:	b29b      	uxth	r3, r3
 8005fa4:	3b01      	subs	r3, #1
 8005fa6:	b29a      	uxth	r2, r3
 8005fa8:	68fb      	ldr	r3, [r7, #12]
 8005faa:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005fac:	e057      	b.n	800605e <HAL_SPI_TransmitReceive+0x20a>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005fae:	68fb      	ldr	r3, [r7, #12]
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	689b      	ldr	r3, [r3, #8]
 8005fb4:	2202      	movs	r2, #2
 8005fb6:	4013      	ands	r3, r2
 8005fb8:	2b02      	cmp	r3, #2
 8005fba:	d11b      	bne.n	8005ff4 <HAL_SPI_TransmitReceive+0x1a0>
 8005fbc:	68fb      	ldr	r3, [r7, #12]
 8005fbe:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005fc0:	b29b      	uxth	r3, r3
 8005fc2:	2b00      	cmp	r3, #0
 8005fc4:	d016      	beq.n	8005ff4 <HAL_SPI_TransmitReceive+0x1a0>
 8005fc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005fc8:	2b01      	cmp	r3, #1
 8005fca:	d113      	bne.n	8005ff4 <HAL_SPI_TransmitReceive+0x1a0>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005fcc:	68fb      	ldr	r3, [r7, #12]
 8005fce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005fd0:	881a      	ldrh	r2, [r3, #0]
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005fd8:	68fb      	ldr	r3, [r7, #12]
 8005fda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005fdc:	1c9a      	adds	r2, r3, #2
 8005fde:	68fb      	ldr	r3, [r7, #12]
 8005fe0:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005fe2:	68fb      	ldr	r3, [r7, #12]
 8005fe4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005fe6:	b29b      	uxth	r3, r3
 8005fe8:	3b01      	subs	r3, #1
 8005fea:	b29a      	uxth	r2, r3
 8005fec:	68fb      	ldr	r3, [r7, #12]
 8005fee:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005ff0:	2300      	movs	r3, #0
 8005ff2:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005ff4:	68fb      	ldr	r3, [r7, #12]
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	689b      	ldr	r3, [r3, #8]
 8005ffa:	2201      	movs	r2, #1
 8005ffc:	4013      	ands	r3, r2
 8005ffe:	2b01      	cmp	r3, #1
 8006000:	d119      	bne.n	8006036 <HAL_SPI_TransmitReceive+0x1e2>
 8006002:	68fb      	ldr	r3, [r7, #12]
 8006004:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006006:	b29b      	uxth	r3, r3
 8006008:	2b00      	cmp	r3, #0
 800600a:	d014      	beq.n	8006036 <HAL_SPI_TransmitReceive+0x1e2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800600c:	68fb      	ldr	r3, [r7, #12]
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	68da      	ldr	r2, [r3, #12]
 8006012:	68fb      	ldr	r3, [r7, #12]
 8006014:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006016:	b292      	uxth	r2, r2
 8006018:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800601a:	68fb      	ldr	r3, [r7, #12]
 800601c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800601e:	1c9a      	adds	r2, r3, #2
 8006020:	68fb      	ldr	r3, [r7, #12]
 8006022:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8006024:	68fb      	ldr	r3, [r7, #12]
 8006026:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006028:	b29b      	uxth	r3, r3
 800602a:	3b01      	subs	r3, #1
 800602c:	b29a      	uxth	r2, r3
 800602e:	68fb      	ldr	r3, [r7, #12]
 8006030:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006032:	2301      	movs	r3, #1
 8006034:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8006036:	f7fd fdf9 	bl	8003c2c <HAL_GetTick>
 800603a:	0002      	movs	r2, r0
 800603c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800603e:	1ad3      	subs	r3, r2, r3
 8006040:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006042:	429a      	cmp	r2, r3
 8006044:	d80b      	bhi.n	800605e <HAL_SPI_TransmitReceive+0x20a>
 8006046:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006048:	3301      	adds	r3, #1
 800604a:	d008      	beq.n	800605e <HAL_SPI_TransmitReceive+0x20a>
      {
        errorcode = HAL_TIMEOUT;
 800604c:	232b      	movs	r3, #43	; 0x2b
 800604e:	18fb      	adds	r3, r7, r3
 8006050:	2203      	movs	r2, #3
 8006052:	701a      	strb	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 8006054:	68fb      	ldr	r3, [r7, #12]
 8006056:	2251      	movs	r2, #81	; 0x51
 8006058:	2101      	movs	r1, #1
 800605a:	5499      	strb	r1, [r3, r2]
        goto error;
 800605c:	e0ba      	b.n	80061d4 <HAL_SPI_TransmitReceive+0x380>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800605e:	68fb      	ldr	r3, [r7, #12]
 8006060:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006062:	b29b      	uxth	r3, r3
 8006064:	2b00      	cmp	r3, #0
 8006066:	d1a2      	bne.n	8005fae <HAL_SPI_TransmitReceive+0x15a>
 8006068:	68fb      	ldr	r3, [r7, #12]
 800606a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800606c:	b29b      	uxth	r3, r3
 800606e:	2b00      	cmp	r3, #0
 8006070:	d19d      	bne.n	8005fae <HAL_SPI_TransmitReceive+0x15a>
 8006072:	e083      	b.n	800617c <HAL_SPI_TransmitReceive+0x328>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006074:	68fb      	ldr	r3, [r7, #12]
 8006076:	685b      	ldr	r3, [r3, #4]
 8006078:	2b00      	cmp	r3, #0
 800607a:	d005      	beq.n	8006088 <HAL_SPI_TransmitReceive+0x234>
 800607c:	231a      	movs	r3, #26
 800607e:	18fb      	adds	r3, r7, r3
 8006080:	881b      	ldrh	r3, [r3, #0]
 8006082:	2b01      	cmp	r3, #1
 8006084:	d000      	beq.n	8006088 <HAL_SPI_TransmitReceive+0x234>
 8006086:	e06f      	b.n	8006168 <HAL_SPI_TransmitReceive+0x314>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006088:	68fb      	ldr	r3, [r7, #12]
 800608a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800608c:	68fb      	ldr	r3, [r7, #12]
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	330c      	adds	r3, #12
 8006092:	7812      	ldrb	r2, [r2, #0]
 8006094:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8006096:	68fb      	ldr	r3, [r7, #12]
 8006098:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800609a:	1c5a      	adds	r2, r3, #1
 800609c:	68fb      	ldr	r3, [r7, #12]
 800609e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80060a0:	68fb      	ldr	r3, [r7, #12]
 80060a2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80060a4:	b29b      	uxth	r3, r3
 80060a6:	3b01      	subs	r3, #1
 80060a8:	b29a      	uxth	r2, r3
 80060aa:	68fb      	ldr	r3, [r7, #12]
 80060ac:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80060ae:	e05b      	b.n	8006168 <HAL_SPI_TransmitReceive+0x314>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80060b0:	68fb      	ldr	r3, [r7, #12]
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	689b      	ldr	r3, [r3, #8]
 80060b6:	2202      	movs	r2, #2
 80060b8:	4013      	ands	r3, r2
 80060ba:	2b02      	cmp	r3, #2
 80060bc:	d11c      	bne.n	80060f8 <HAL_SPI_TransmitReceive+0x2a4>
 80060be:	68fb      	ldr	r3, [r7, #12]
 80060c0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80060c2:	b29b      	uxth	r3, r3
 80060c4:	2b00      	cmp	r3, #0
 80060c6:	d017      	beq.n	80060f8 <HAL_SPI_TransmitReceive+0x2a4>
 80060c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80060ca:	2b01      	cmp	r3, #1
 80060cc:	d114      	bne.n	80060f8 <HAL_SPI_TransmitReceive+0x2a4>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80060ce:	68fb      	ldr	r3, [r7, #12]
 80060d0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80060d2:	68fb      	ldr	r3, [r7, #12]
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	330c      	adds	r3, #12
 80060d8:	7812      	ldrb	r2, [r2, #0]
 80060da:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80060dc:	68fb      	ldr	r3, [r7, #12]
 80060de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80060e0:	1c5a      	adds	r2, r3, #1
 80060e2:	68fb      	ldr	r3, [r7, #12]
 80060e4:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80060e6:	68fb      	ldr	r3, [r7, #12]
 80060e8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80060ea:	b29b      	uxth	r3, r3
 80060ec:	3b01      	subs	r3, #1
 80060ee:	b29a      	uxth	r2, r3
 80060f0:	68fb      	ldr	r3, [r7, #12]
 80060f2:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80060f4:	2300      	movs	r3, #0
 80060f6:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80060f8:	68fb      	ldr	r3, [r7, #12]
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	689b      	ldr	r3, [r3, #8]
 80060fe:	2201      	movs	r2, #1
 8006100:	4013      	ands	r3, r2
 8006102:	2b01      	cmp	r3, #1
 8006104:	d119      	bne.n	800613a <HAL_SPI_TransmitReceive+0x2e6>
 8006106:	68fb      	ldr	r3, [r7, #12]
 8006108:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800610a:	b29b      	uxth	r3, r3
 800610c:	2b00      	cmp	r3, #0
 800610e:	d014      	beq.n	800613a <HAL_SPI_TransmitReceive+0x2e6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8006110:	68fb      	ldr	r3, [r7, #12]
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	68da      	ldr	r2, [r3, #12]
 8006116:	68fb      	ldr	r3, [r7, #12]
 8006118:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800611a:	b2d2      	uxtb	r2, r2
 800611c:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800611e:	68fb      	ldr	r3, [r7, #12]
 8006120:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006122:	1c5a      	adds	r2, r3, #1
 8006124:	68fb      	ldr	r3, [r7, #12]
 8006126:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8006128:	68fb      	ldr	r3, [r7, #12]
 800612a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800612c:	b29b      	uxth	r3, r3
 800612e:	3b01      	subs	r3, #1
 8006130:	b29a      	uxth	r2, r3
 8006132:	68fb      	ldr	r3, [r7, #12]
 8006134:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006136:	2301      	movs	r3, #1
 8006138:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800613a:	f7fd fd77 	bl	8003c2c <HAL_GetTick>
 800613e:	0002      	movs	r2, r0
 8006140:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006142:	1ad3      	subs	r3, r2, r3
 8006144:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006146:	429a      	cmp	r2, r3
 8006148:	d802      	bhi.n	8006150 <HAL_SPI_TransmitReceive+0x2fc>
 800614a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800614c:	3301      	adds	r3, #1
 800614e:	d102      	bne.n	8006156 <HAL_SPI_TransmitReceive+0x302>
 8006150:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006152:	2b00      	cmp	r3, #0
 8006154:	d108      	bne.n	8006168 <HAL_SPI_TransmitReceive+0x314>
      {
        errorcode = HAL_TIMEOUT;
 8006156:	232b      	movs	r3, #43	; 0x2b
 8006158:	18fb      	adds	r3, r7, r3
 800615a:	2203      	movs	r2, #3
 800615c:	701a      	strb	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 800615e:	68fb      	ldr	r3, [r7, #12]
 8006160:	2251      	movs	r2, #81	; 0x51
 8006162:	2101      	movs	r1, #1
 8006164:	5499      	strb	r1, [r3, r2]
        goto error;
 8006166:	e035      	b.n	80061d4 <HAL_SPI_TransmitReceive+0x380>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006168:	68fb      	ldr	r3, [r7, #12]
 800616a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800616c:	b29b      	uxth	r3, r3
 800616e:	2b00      	cmp	r3, #0
 8006170:	d19e      	bne.n	80060b0 <HAL_SPI_TransmitReceive+0x25c>
 8006172:	68fb      	ldr	r3, [r7, #12]
 8006174:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006176:	b29b      	uxth	r3, r3
 8006178:	2b00      	cmp	r3, #0
 800617a:	d199      	bne.n	80060b0 <HAL_SPI_TransmitReceive+0x25c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800617c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800617e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8006180:	68fb      	ldr	r3, [r7, #12]
 8006182:	0018      	movs	r0, r3
 8006184:	f000 f92a 	bl	80063dc <SPI_EndRxTxTransaction>
 8006188:	1e03      	subs	r3, r0, #0
 800618a:	d007      	beq.n	800619c <HAL_SPI_TransmitReceive+0x348>
  {
    errorcode = HAL_ERROR;
 800618c:	232b      	movs	r3, #43	; 0x2b
 800618e:	18fb      	adds	r3, r7, r3
 8006190:	2201      	movs	r2, #1
 8006192:	701a      	strb	r2, [r3, #0]
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006194:	68fb      	ldr	r3, [r7, #12]
 8006196:	2220      	movs	r2, #32
 8006198:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 800619a:	e01b      	b.n	80061d4 <HAL_SPI_TransmitReceive+0x380>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800619c:	68fb      	ldr	r3, [r7, #12]
 800619e:	689b      	ldr	r3, [r3, #8]
 80061a0:	2b00      	cmp	r3, #0
 80061a2:	d10a      	bne.n	80061ba <HAL_SPI_TransmitReceive+0x366>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80061a4:	2300      	movs	r3, #0
 80061a6:	617b      	str	r3, [r7, #20]
 80061a8:	68fb      	ldr	r3, [r7, #12]
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	68db      	ldr	r3, [r3, #12]
 80061ae:	617b      	str	r3, [r7, #20]
 80061b0:	68fb      	ldr	r3, [r7, #12]
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	689b      	ldr	r3, [r3, #8]
 80061b6:	617b      	str	r3, [r7, #20]
 80061b8:	697b      	ldr	r3, [r7, #20]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80061ba:	68fb      	ldr	r3, [r7, #12]
 80061bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80061be:	2b00      	cmp	r3, #0
 80061c0:	d004      	beq.n	80061cc <HAL_SPI_TransmitReceive+0x378>
  {
    errorcode = HAL_ERROR;
 80061c2:	232b      	movs	r3, #43	; 0x2b
 80061c4:	18fb      	adds	r3, r7, r3
 80061c6:	2201      	movs	r2, #1
 80061c8:	701a      	strb	r2, [r3, #0]
 80061ca:	e003      	b.n	80061d4 <HAL_SPI_TransmitReceive+0x380>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80061cc:	68fb      	ldr	r3, [r7, #12]
 80061ce:	2251      	movs	r2, #81	; 0x51
 80061d0:	2101      	movs	r1, #1
 80061d2:	5499      	strb	r1, [r3, r2]
  }
  
error :
  __HAL_UNLOCK(hspi);
 80061d4:	68fb      	ldr	r3, [r7, #12]
 80061d6:	2250      	movs	r2, #80	; 0x50
 80061d8:	2100      	movs	r1, #0
 80061da:	5499      	strb	r1, [r3, r2]
  return errorcode;
 80061dc:	232b      	movs	r3, #43	; 0x2b
 80061de:	18fb      	adds	r3, r7, r3
 80061e0:	781b      	ldrb	r3, [r3, #0]
}
 80061e2:	0018      	movs	r0, r3
 80061e4:	46bd      	mov	sp, r7
 80061e6:	b00c      	add	sp, #48	; 0x30
 80061e8:	bd80      	pop	{r7, pc}
	...

080061ec <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80061ec:	b580      	push	{r7, lr}
 80061ee:	b088      	sub	sp, #32
 80061f0:	af00      	add	r7, sp, #0
 80061f2:	60f8      	str	r0, [r7, #12]
 80061f4:	60b9      	str	r1, [r7, #8]
 80061f6:	603b      	str	r3, [r7, #0]
 80061f8:	1dfb      	adds	r3, r7, #7
 80061fa:	701a      	strb	r2, [r3, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80061fc:	f7fd fd16 	bl	8003c2c <HAL_GetTick>
 8006200:	0002      	movs	r2, r0
 8006202:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006204:	1a9b      	subs	r3, r3, r2
 8006206:	683a      	ldr	r2, [r7, #0]
 8006208:	18d3      	adds	r3, r2, r3
 800620a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800620c:	f7fd fd0e 	bl	8003c2c <HAL_GetTick>
 8006210:	0003      	movs	r3, r0
 8006212:	61bb      	str	r3, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8006214:	4b3a      	ldr	r3, [pc, #232]	; (8006300 <SPI_WaitFlagStateUntilTimeout+0x114>)
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	015b      	lsls	r3, r3, #5
 800621a:	0d1b      	lsrs	r3, r3, #20
 800621c:	69fa      	ldr	r2, [r7, #28]
 800621e:	4353      	muls	r3, r2
 8006220:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006222:	e058      	b.n	80062d6 <SPI_WaitFlagStateUntilTimeout+0xea>
  {
    if (Timeout != HAL_MAX_DELAY)
 8006224:	683b      	ldr	r3, [r7, #0]
 8006226:	3301      	adds	r3, #1
 8006228:	d055      	beq.n	80062d6 <SPI_WaitFlagStateUntilTimeout+0xea>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800622a:	f7fd fcff 	bl	8003c2c <HAL_GetTick>
 800622e:	0002      	movs	r2, r0
 8006230:	69bb      	ldr	r3, [r7, #24]
 8006232:	1ad3      	subs	r3, r2, r3
 8006234:	69fa      	ldr	r2, [r7, #28]
 8006236:	429a      	cmp	r2, r3
 8006238:	d902      	bls.n	8006240 <SPI_WaitFlagStateUntilTimeout+0x54>
 800623a:	69fb      	ldr	r3, [r7, #28]
 800623c:	2b00      	cmp	r3, #0
 800623e:	d142      	bne.n	80062c6 <SPI_WaitFlagStateUntilTimeout+0xda>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006240:	68fb      	ldr	r3, [r7, #12]
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	685a      	ldr	r2, [r3, #4]
 8006246:	68fb      	ldr	r3, [r7, #12]
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	21e0      	movs	r1, #224	; 0xe0
 800624c:	438a      	bics	r2, r1
 800624e:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006250:	68fb      	ldr	r3, [r7, #12]
 8006252:	685a      	ldr	r2, [r3, #4]
 8006254:	2382      	movs	r3, #130	; 0x82
 8006256:	005b      	lsls	r3, r3, #1
 8006258:	429a      	cmp	r2, r3
 800625a:	d113      	bne.n	8006284 <SPI_WaitFlagStateUntilTimeout+0x98>
 800625c:	68fb      	ldr	r3, [r7, #12]
 800625e:	689a      	ldr	r2, [r3, #8]
 8006260:	2380      	movs	r3, #128	; 0x80
 8006262:	021b      	lsls	r3, r3, #8
 8006264:	429a      	cmp	r2, r3
 8006266:	d005      	beq.n	8006274 <SPI_WaitFlagStateUntilTimeout+0x88>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006268:	68fb      	ldr	r3, [r7, #12]
 800626a:	689a      	ldr	r2, [r3, #8]
 800626c:	2380      	movs	r3, #128	; 0x80
 800626e:	00db      	lsls	r3, r3, #3
 8006270:	429a      	cmp	r2, r3
 8006272:	d107      	bne.n	8006284 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006274:	68fb      	ldr	r3, [r7, #12]
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	681a      	ldr	r2, [r3, #0]
 800627a:	68fb      	ldr	r3, [r7, #12]
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	2140      	movs	r1, #64	; 0x40
 8006280:	438a      	bics	r2, r1
 8006282:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006284:	68fb      	ldr	r3, [r7, #12]
 8006286:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006288:	2380      	movs	r3, #128	; 0x80
 800628a:	019b      	lsls	r3, r3, #6
 800628c:	429a      	cmp	r2, r3
 800628e:	d110      	bne.n	80062b2 <SPI_WaitFlagStateUntilTimeout+0xc6>
        {
          SPI_RESET_CRC(hspi);
 8006290:	68fb      	ldr	r3, [r7, #12]
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	681a      	ldr	r2, [r3, #0]
 8006296:	68fb      	ldr	r3, [r7, #12]
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	491a      	ldr	r1, [pc, #104]	; (8006304 <SPI_WaitFlagStateUntilTimeout+0x118>)
 800629c:	400a      	ands	r2, r1
 800629e:	601a      	str	r2, [r3, #0]
 80062a0:	68fb      	ldr	r3, [r7, #12]
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	681a      	ldr	r2, [r3, #0]
 80062a6:	68fb      	ldr	r3, [r7, #12]
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	2180      	movs	r1, #128	; 0x80
 80062ac:	0189      	lsls	r1, r1, #6
 80062ae:	430a      	orrs	r2, r1
 80062b0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80062b2:	68fb      	ldr	r3, [r7, #12]
 80062b4:	2251      	movs	r2, #81	; 0x51
 80062b6:	2101      	movs	r1, #1
 80062b8:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80062ba:	68fb      	ldr	r3, [r7, #12]
 80062bc:	2250      	movs	r2, #80	; 0x50
 80062be:	2100      	movs	r1, #0
 80062c0:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80062c2:	2303      	movs	r3, #3
 80062c4:	e017      	b.n	80062f6 <SPI_WaitFlagStateUntilTimeout+0x10a>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80062c6:	697b      	ldr	r3, [r7, #20]
 80062c8:	2b00      	cmp	r3, #0
 80062ca:	d101      	bne.n	80062d0 <SPI_WaitFlagStateUntilTimeout+0xe4>
      {
        tmp_timeout = 0U;
 80062cc:	2300      	movs	r3, #0
 80062ce:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80062d0:	697b      	ldr	r3, [r7, #20]
 80062d2:	3b01      	subs	r3, #1
 80062d4:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80062d6:	68fb      	ldr	r3, [r7, #12]
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	689b      	ldr	r3, [r3, #8]
 80062dc:	68ba      	ldr	r2, [r7, #8]
 80062de:	4013      	ands	r3, r2
 80062e0:	68ba      	ldr	r2, [r7, #8]
 80062e2:	1ad3      	subs	r3, r2, r3
 80062e4:	425a      	negs	r2, r3
 80062e6:	4153      	adcs	r3, r2
 80062e8:	b2db      	uxtb	r3, r3
 80062ea:	001a      	movs	r2, r3
 80062ec:	1dfb      	adds	r3, r7, #7
 80062ee:	781b      	ldrb	r3, [r3, #0]
 80062f0:	429a      	cmp	r2, r3
 80062f2:	d197      	bne.n	8006224 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80062f4:	2300      	movs	r3, #0
}
 80062f6:	0018      	movs	r0, r3
 80062f8:	46bd      	mov	sp, r7
 80062fa:	b008      	add	sp, #32
 80062fc:	bd80      	pop	{r7, pc}
 80062fe:	46c0      	nop			; (mov r8, r8)
 8006300:	20000010 	.word	0x20000010
 8006304:	ffffdfff 	.word	0xffffdfff

08006308 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8006308:	b580      	push	{r7, lr}
 800630a:	b086      	sub	sp, #24
 800630c:	af02      	add	r7, sp, #8
 800630e:	60f8      	str	r0, [r7, #12]
 8006310:	60b9      	str	r1, [r7, #8]
 8006312:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006314:	68fb      	ldr	r3, [r7, #12]
 8006316:	685a      	ldr	r2, [r3, #4]
 8006318:	2382      	movs	r3, #130	; 0x82
 800631a:	005b      	lsls	r3, r3, #1
 800631c:	429a      	cmp	r2, r3
 800631e:	d113      	bne.n	8006348 <SPI_EndRxTransaction+0x40>
 8006320:	68fb      	ldr	r3, [r7, #12]
 8006322:	689a      	ldr	r2, [r3, #8]
 8006324:	2380      	movs	r3, #128	; 0x80
 8006326:	021b      	lsls	r3, r3, #8
 8006328:	429a      	cmp	r2, r3
 800632a:	d005      	beq.n	8006338 <SPI_EndRxTransaction+0x30>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800632c:	68fb      	ldr	r3, [r7, #12]
 800632e:	689a      	ldr	r2, [r3, #8]
 8006330:	2380      	movs	r3, #128	; 0x80
 8006332:	00db      	lsls	r3, r3, #3
 8006334:	429a      	cmp	r2, r3
 8006336:	d107      	bne.n	8006348 <SPI_EndRxTransaction+0x40>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8006338:	68fb      	ldr	r3, [r7, #12]
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	681a      	ldr	r2, [r3, #0]
 800633e:	68fb      	ldr	r3, [r7, #12]
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	2140      	movs	r1, #64	; 0x40
 8006344:	438a      	bics	r2, r1
 8006346:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006348:	68fb      	ldr	r3, [r7, #12]
 800634a:	685a      	ldr	r2, [r3, #4]
 800634c:	2382      	movs	r3, #130	; 0x82
 800634e:	005b      	lsls	r3, r3, #1
 8006350:	429a      	cmp	r2, r3
 8006352:	d12b      	bne.n	80063ac <SPI_EndRxTransaction+0xa4>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8006354:	68fb      	ldr	r3, [r7, #12]
 8006356:	689a      	ldr	r2, [r3, #8]
 8006358:	2380      	movs	r3, #128	; 0x80
 800635a:	00db      	lsls	r3, r3, #3
 800635c:	429a      	cmp	r2, r3
 800635e:	d012      	beq.n	8006386 <SPI_EndRxTransaction+0x7e>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006360:	68ba      	ldr	r2, [r7, #8]
 8006362:	68f8      	ldr	r0, [r7, #12]
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	9300      	str	r3, [sp, #0]
 8006368:	0013      	movs	r3, r2
 800636a:	2200      	movs	r2, #0
 800636c:	2180      	movs	r1, #128	; 0x80
 800636e:	f7ff ff3d 	bl	80061ec <SPI_WaitFlagStateUntilTimeout>
 8006372:	1e03      	subs	r3, r0, #0
 8006374:	d02d      	beq.n	80063d2 <SPI_EndRxTransaction+0xca>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006376:	68fb      	ldr	r3, [r7, #12]
 8006378:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800637a:	2220      	movs	r2, #32
 800637c:	431a      	orrs	r2, r3
 800637e:	68fb      	ldr	r3, [r7, #12]
 8006380:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8006382:	2303      	movs	r3, #3
 8006384:	e026      	b.n	80063d4 <SPI_EndRxTransaction+0xcc>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8006386:	68ba      	ldr	r2, [r7, #8]
 8006388:	68f8      	ldr	r0, [r7, #12]
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	9300      	str	r3, [sp, #0]
 800638e:	0013      	movs	r3, r2
 8006390:	2200      	movs	r2, #0
 8006392:	2101      	movs	r1, #1
 8006394:	f7ff ff2a 	bl	80061ec <SPI_WaitFlagStateUntilTimeout>
 8006398:	1e03      	subs	r3, r0, #0
 800639a:	d01a      	beq.n	80063d2 <SPI_EndRxTransaction+0xca>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800639c:	68fb      	ldr	r3, [r7, #12]
 800639e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80063a0:	2220      	movs	r2, #32
 80063a2:	431a      	orrs	r2, r3
 80063a4:	68fb      	ldr	r3, [r7, #12]
 80063a6:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 80063a8:	2303      	movs	r3, #3
 80063aa:	e013      	b.n	80063d4 <SPI_EndRxTransaction+0xcc>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80063ac:	68ba      	ldr	r2, [r7, #8]
 80063ae:	68f8      	ldr	r0, [r7, #12]
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	9300      	str	r3, [sp, #0]
 80063b4:	0013      	movs	r3, r2
 80063b6:	2200      	movs	r2, #0
 80063b8:	2101      	movs	r1, #1
 80063ba:	f7ff ff17 	bl	80061ec <SPI_WaitFlagStateUntilTimeout>
 80063be:	1e03      	subs	r3, r0, #0
 80063c0:	d007      	beq.n	80063d2 <SPI_EndRxTransaction+0xca>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80063c2:	68fb      	ldr	r3, [r7, #12]
 80063c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80063c6:	2220      	movs	r2, #32
 80063c8:	431a      	orrs	r2, r3
 80063ca:	68fb      	ldr	r3, [r7, #12]
 80063cc:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80063ce:	2303      	movs	r3, #3
 80063d0:	e000      	b.n	80063d4 <SPI_EndRxTransaction+0xcc>
    }
  }
  return HAL_OK;
 80063d2:	2300      	movs	r3, #0
}
 80063d4:	0018      	movs	r0, r3
 80063d6:	46bd      	mov	sp, r7
 80063d8:	b004      	add	sp, #16
 80063da:	bd80      	pop	{r7, pc}

080063dc <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80063dc:	b580      	push	{r7, lr}
 80063de:	b088      	sub	sp, #32
 80063e0:	af02      	add	r7, sp, #8
 80063e2:	60f8      	str	r0, [r7, #12]
 80063e4:	60b9      	str	r1, [r7, #8]
 80063e6:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80063e8:	4b1d      	ldr	r3, [pc, #116]	; (8006460 <SPI_EndRxTxTransaction+0x84>)
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	491d      	ldr	r1, [pc, #116]	; (8006464 <SPI_EndRxTxTransaction+0x88>)
 80063ee:	0018      	movs	r0, r3
 80063f0:	f7f9 fea6 	bl	8000140 <__udivsi3>
 80063f4:	0003      	movs	r3, r0
 80063f6:	001a      	movs	r2, r3
 80063f8:	0013      	movs	r3, r2
 80063fa:	015b      	lsls	r3, r3, #5
 80063fc:	1a9b      	subs	r3, r3, r2
 80063fe:	009b      	lsls	r3, r3, #2
 8006400:	189b      	adds	r3, r3, r2
 8006402:	00db      	lsls	r3, r3, #3
 8006404:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006406:	68fb      	ldr	r3, [r7, #12]
 8006408:	685a      	ldr	r2, [r3, #4]
 800640a:	2382      	movs	r3, #130	; 0x82
 800640c:	005b      	lsls	r3, r3, #1
 800640e:	429a      	cmp	r2, r3
 8006410:	d112      	bne.n	8006438 <SPI_EndRxTxTransaction+0x5c>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006412:	68ba      	ldr	r2, [r7, #8]
 8006414:	68f8      	ldr	r0, [r7, #12]
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	9300      	str	r3, [sp, #0]
 800641a:	0013      	movs	r3, r2
 800641c:	2200      	movs	r2, #0
 800641e:	2180      	movs	r1, #128	; 0x80
 8006420:	f7ff fee4 	bl	80061ec <SPI_WaitFlagStateUntilTimeout>
 8006424:	1e03      	subs	r3, r0, #0
 8006426:	d016      	beq.n	8006456 <SPI_EndRxTxTransaction+0x7a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006428:	68fb      	ldr	r3, [r7, #12]
 800642a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800642c:	2220      	movs	r2, #32
 800642e:	431a      	orrs	r2, r3
 8006430:	68fb      	ldr	r3, [r7, #12]
 8006432:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8006434:	2303      	movs	r3, #3
 8006436:	e00f      	b.n	8006458 <SPI_EndRxTxTransaction+0x7c>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8006438:	697b      	ldr	r3, [r7, #20]
 800643a:	2b00      	cmp	r3, #0
 800643c:	d00a      	beq.n	8006454 <SPI_EndRxTxTransaction+0x78>
      {
        break;
      }
      count--;
 800643e:	697b      	ldr	r3, [r7, #20]
 8006440:	3b01      	subs	r3, #1
 8006442:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8006444:	68fb      	ldr	r3, [r7, #12]
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	689b      	ldr	r3, [r3, #8]
 800644a:	2280      	movs	r2, #128	; 0x80
 800644c:	4013      	ands	r3, r2
 800644e:	2b80      	cmp	r3, #128	; 0x80
 8006450:	d0f2      	beq.n	8006438 <SPI_EndRxTxTransaction+0x5c>
 8006452:	e000      	b.n	8006456 <SPI_EndRxTxTransaction+0x7a>
        break;
 8006454:	46c0      	nop			; (mov r8, r8)
  }

  return HAL_OK;
 8006456:	2300      	movs	r3, #0
}
 8006458:	0018      	movs	r0, r3
 800645a:	46bd      	mov	sp, r7
 800645c:	b006      	add	sp, #24
 800645e:	bd80      	pop	{r7, pc}
 8006460:	20000010 	.word	0x20000010
 8006464:	016e3600 	.word	0x016e3600

08006468 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006468:	b580      	push	{r7, lr}
 800646a:	b082      	sub	sp, #8
 800646c:	af00      	add	r7, sp, #0
 800646e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	2b00      	cmp	r3, #0
 8006474:	d101      	bne.n	800647a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006476:	2301      	movs	r3, #1
 8006478:	e032      	b.n	80064e0 <HAL_TIM_Base_Init+0x78>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_PRESCALER(htim->Init.Prescaler));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	2239      	movs	r2, #57	; 0x39
 800647e:	5c9b      	ldrb	r3, [r3, r2]
 8006480:	b2db      	uxtb	r3, r3
 8006482:	2b00      	cmp	r3, #0
 8006484:	d107      	bne.n	8006496 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	2238      	movs	r2, #56	; 0x38
 800648a:	2100      	movs	r1, #0
 800648c:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	0018      	movs	r0, r3
 8006492:	f7fd fa27 	bl	80038e4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	2239      	movs	r2, #57	; 0x39
 800649a:	2102      	movs	r1, #2
 800649c:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	681a      	ldr	r2, [r3, #0]
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	3304      	adds	r3, #4
 80064a6:	0019      	movs	r1, r3
 80064a8:	0010      	movs	r0, r2
 80064aa:	f000 f81d 	bl	80064e8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	223e      	movs	r2, #62	; 0x3e
 80064b2:	2101      	movs	r1, #1
 80064b4:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	223a      	movs	r2, #58	; 0x3a
 80064ba:	2101      	movs	r1, #1
 80064bc:	5499      	strb	r1, [r3, r2]
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	223b      	movs	r2, #59	; 0x3b
 80064c2:	2101      	movs	r1, #1
 80064c4:	5499      	strb	r1, [r3, r2]
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	223c      	movs	r2, #60	; 0x3c
 80064ca:	2101      	movs	r1, #1
 80064cc:	5499      	strb	r1, [r3, r2]
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	223d      	movs	r2, #61	; 0x3d
 80064d2:	2101      	movs	r1, #1
 80064d4:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	2239      	movs	r2, #57	; 0x39
 80064da:	2101      	movs	r1, #1
 80064dc:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80064de:	2300      	movs	r3, #0
}
 80064e0:	0018      	movs	r0, r3
 80064e2:	46bd      	mov	sp, r7
 80064e4:	b002      	add	sp, #8
 80064e6:	bd80      	pop	{r7, pc}

080064e8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
static void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80064e8:	b580      	push	{r7, lr}
 80064ea:	b084      	sub	sp, #16
 80064ec:	af00      	add	r7, sp, #0
 80064ee:	6078      	str	r0, [r7, #4]
 80064f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80064f8:	687a      	ldr	r2, [r7, #4]
 80064fa:	2380      	movs	r3, #128	; 0x80
 80064fc:	05db      	lsls	r3, r3, #23
 80064fe:	429a      	cmp	r2, r3
 8006500:	d007      	beq.n	8006512 <TIM_Base_SetConfig+0x2a>
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	4a1f      	ldr	r2, [pc, #124]	; (8006584 <TIM_Base_SetConfig+0x9c>)
 8006506:	4293      	cmp	r3, r2
 8006508:	d003      	beq.n	8006512 <TIM_Base_SetConfig+0x2a>
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	4a1e      	ldr	r2, [pc, #120]	; (8006588 <TIM_Base_SetConfig+0xa0>)
 800650e:	4293      	cmp	r3, r2
 8006510:	d108      	bne.n	8006524 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006512:	68fb      	ldr	r3, [r7, #12]
 8006514:	2270      	movs	r2, #112	; 0x70
 8006516:	4393      	bics	r3, r2
 8006518:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800651a:	683b      	ldr	r3, [r7, #0]
 800651c:	685b      	ldr	r3, [r3, #4]
 800651e:	68fa      	ldr	r2, [r7, #12]
 8006520:	4313      	orrs	r3, r2
 8006522:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006524:	687a      	ldr	r2, [r7, #4]
 8006526:	2380      	movs	r3, #128	; 0x80
 8006528:	05db      	lsls	r3, r3, #23
 800652a:	429a      	cmp	r2, r3
 800652c:	d007      	beq.n	800653e <TIM_Base_SetConfig+0x56>
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	4a14      	ldr	r2, [pc, #80]	; (8006584 <TIM_Base_SetConfig+0x9c>)
 8006532:	4293      	cmp	r3, r2
 8006534:	d003      	beq.n	800653e <TIM_Base_SetConfig+0x56>
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	4a13      	ldr	r2, [pc, #76]	; (8006588 <TIM_Base_SetConfig+0xa0>)
 800653a:	4293      	cmp	r3, r2
 800653c:	d108      	bne.n	8006550 <TIM_Base_SetConfig+0x68>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800653e:	68fb      	ldr	r3, [r7, #12]
 8006540:	4a12      	ldr	r2, [pc, #72]	; (800658c <TIM_Base_SetConfig+0xa4>)
 8006542:	4013      	ands	r3, r2
 8006544:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006546:	683b      	ldr	r3, [r7, #0]
 8006548:	68db      	ldr	r3, [r3, #12]
 800654a:	68fa      	ldr	r2, [r7, #12]
 800654c:	4313      	orrs	r3, r2
 800654e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006550:	68fb      	ldr	r3, [r7, #12]
 8006552:	2280      	movs	r2, #128	; 0x80
 8006554:	4393      	bics	r3, r2
 8006556:	001a      	movs	r2, r3
 8006558:	683b      	ldr	r3, [r7, #0]
 800655a:	691b      	ldr	r3, [r3, #16]
 800655c:	4313      	orrs	r3, r2
 800655e:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	68fa      	ldr	r2, [r7, #12]
 8006564:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006566:	683b      	ldr	r3, [r7, #0]
 8006568:	689a      	ldr	r2, [r3, #8]
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800656e:	683b      	ldr	r3, [r7, #0]
 8006570:	681a      	ldr	r2, [r3, #0]
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	629a      	str	r2, [r3, #40]	; 0x28

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	2201      	movs	r2, #1
 800657a:	615a      	str	r2, [r3, #20]
}
 800657c:	46c0      	nop			; (mov r8, r8)
 800657e:	46bd      	mov	sp, r7
 8006580:	b004      	add	sp, #16
 8006582:	bd80      	pop	{r7, pc}
 8006584:	40010800 	.word	0x40010800
 8006588:	40011400 	.word	0x40011400
 800658c:	fffffcff 	.word	0xfffffcff

08006590 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006590:	b580      	push	{r7, lr}
 8006592:	b084      	sub	sp, #16
 8006594:	af00      	add	r7, sp, #0
 8006596:	6078      	str	r0, [r7, #4]
 8006598:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	2238      	movs	r2, #56	; 0x38
 800659e:	5c9b      	ldrb	r3, [r3, r2]
 80065a0:	2b01      	cmp	r3, #1
 80065a2:	d101      	bne.n	80065a8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80065a4:	2302      	movs	r3, #2
 80065a6:	e042      	b.n	800662e <HAL_TIMEx_MasterConfigSynchronization+0x9e>
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	2238      	movs	r2, #56	; 0x38
 80065ac:	2101      	movs	r1, #1
 80065ae:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	2239      	movs	r2, #57	; 0x39
 80065b4:	2102      	movs	r1, #2
 80065b6:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	685b      	ldr	r3, [r3, #4]
 80065be:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	689b      	ldr	r3, [r3, #8]
 80065c6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80065c8:	68fb      	ldr	r3, [r7, #12]
 80065ca:	2270      	movs	r2, #112	; 0x70
 80065cc:	4393      	bics	r3, r2
 80065ce:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80065d0:	683b      	ldr	r3, [r7, #0]
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	68fa      	ldr	r2, [r7, #12]
 80065d6:	4313      	orrs	r3, r2
 80065d8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	68fa      	ldr	r2, [r7, #12]
 80065e0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	681a      	ldr	r2, [r3, #0]
 80065e6:	2380      	movs	r3, #128	; 0x80
 80065e8:	05db      	lsls	r3, r3, #23
 80065ea:	429a      	cmp	r2, r3
 80065ec:	d009      	beq.n	8006602 <HAL_TIMEx_MasterConfigSynchronization+0x72>
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	4a11      	ldr	r2, [pc, #68]	; (8006638 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 80065f4:	4293      	cmp	r3, r2
 80065f6:	d004      	beq.n	8006602 <HAL_TIMEx_MasterConfigSynchronization+0x72>
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	4a0f      	ldr	r2, [pc, #60]	; (800663c <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 80065fe:	4293      	cmp	r3, r2
 8006600:	d10c      	bne.n	800661c <HAL_TIMEx_MasterConfigSynchronization+0x8c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006602:	68bb      	ldr	r3, [r7, #8]
 8006604:	2280      	movs	r2, #128	; 0x80
 8006606:	4393      	bics	r3, r2
 8006608:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800660a:	683b      	ldr	r3, [r7, #0]
 800660c:	685b      	ldr	r3, [r3, #4]
 800660e:	68ba      	ldr	r2, [r7, #8]
 8006610:	4313      	orrs	r3, r2
 8006612:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	68ba      	ldr	r2, [r7, #8]
 800661a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	2239      	movs	r2, #57	; 0x39
 8006620:	2101      	movs	r1, #1
 8006622:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	2238      	movs	r2, #56	; 0x38
 8006628:	2100      	movs	r1, #0
 800662a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800662c:	2300      	movs	r3, #0
}
 800662e:	0018      	movs	r0, r3
 8006630:	46bd      	mov	sp, r7
 8006632:	b004      	add	sp, #16
 8006634:	bd80      	pop	{r7, pc}
 8006636:	46c0      	nop			; (mov r8, r8)
 8006638:	40010800 	.word	0x40010800
 800663c:	40011400 	.word	0x40011400

08006640 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006640:	b580      	push	{r7, lr}
 8006642:	b082      	sub	sp, #8
 8006644:	af00      	add	r7, sp, #0
 8006646:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	2b00      	cmp	r3, #0
 800664c:	d101      	bne.n	8006652 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800664e:	2301      	movs	r3, #1
 8006650:	e044      	b.n	80066dc <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006656:	2b00      	cmp	r3, #0
 8006658:	d107      	bne.n	800666a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	2278      	movs	r2, #120	; 0x78
 800665e:	2100      	movs	r1, #0
 8006660:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	0018      	movs	r0, r3
 8006666:	f7fd f8b3 	bl	80037d0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	2224      	movs	r2, #36	; 0x24
 800666e:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	681a      	ldr	r2, [r3, #0]
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	2101      	movs	r1, #1
 800667c:	438a      	bics	r2, r1
 800667e:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	0018      	movs	r0, r3
 8006684:	f000 f8d0 	bl	8006828 <UART_SetConfig>
 8006688:	0003      	movs	r3, r0
 800668a:	2b01      	cmp	r3, #1
 800668c:	d101      	bne.n	8006692 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800668e:	2301      	movs	r3, #1
 8006690:	e024      	b.n	80066dc <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006696:	2b00      	cmp	r3, #0
 8006698:	d003      	beq.n	80066a2 <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	0018      	movs	r0, r3
 800669e:	f000 fb47 	bl	8006d30 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	685a      	ldr	r2, [r3, #4]
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	490d      	ldr	r1, [pc, #52]	; (80066e4 <HAL_UART_Init+0xa4>)
 80066ae:	400a      	ands	r2, r1
 80066b0:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	689a      	ldr	r2, [r3, #8]
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	212a      	movs	r1, #42	; 0x2a
 80066be:	438a      	bics	r2, r1
 80066c0:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	681a      	ldr	r2, [r3, #0]
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	2101      	movs	r1, #1
 80066ce:	430a      	orrs	r2, r1
 80066d0:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	0018      	movs	r0, r3
 80066d6:	f000 fbdf 	bl	8006e98 <UART_CheckIdleState>
 80066da:	0003      	movs	r3, r0
}
 80066dc:	0018      	movs	r0, r3
 80066de:	46bd      	mov	sp, r7
 80066e0:	b002      	add	sp, #8
 80066e2:	bd80      	pop	{r7, pc}
 80066e4:	ffffb7ff 	.word	0xffffb7ff

080066e8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80066e8:	b580      	push	{r7, lr}
 80066ea:	b08a      	sub	sp, #40	; 0x28
 80066ec:	af02      	add	r7, sp, #8
 80066ee:	60f8      	str	r0, [r7, #12]
 80066f0:	60b9      	str	r1, [r7, #8]
 80066f2:	603b      	str	r3, [r7, #0]
 80066f4:	1dbb      	adds	r3, r7, #6
 80066f6:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80066f8:	68fb      	ldr	r3, [r7, #12]
 80066fa:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80066fc:	2b20      	cmp	r3, #32
 80066fe:	d000      	beq.n	8006702 <HAL_UART_Transmit+0x1a>
 8006700:	e08c      	b.n	800681c <HAL_UART_Transmit+0x134>
  {
    if ((pData == NULL) || (Size == 0U))
 8006702:	68bb      	ldr	r3, [r7, #8]
 8006704:	2b00      	cmp	r3, #0
 8006706:	d003      	beq.n	8006710 <HAL_UART_Transmit+0x28>
 8006708:	1dbb      	adds	r3, r7, #6
 800670a:	881b      	ldrh	r3, [r3, #0]
 800670c:	2b00      	cmp	r3, #0
 800670e:	d101      	bne.n	8006714 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8006710:	2301      	movs	r3, #1
 8006712:	e084      	b.n	800681e <HAL_UART_Transmit+0x136>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006714:	68fb      	ldr	r3, [r7, #12]
 8006716:	689a      	ldr	r2, [r3, #8]
 8006718:	2380      	movs	r3, #128	; 0x80
 800671a:	015b      	lsls	r3, r3, #5
 800671c:	429a      	cmp	r2, r3
 800671e:	d109      	bne.n	8006734 <HAL_UART_Transmit+0x4c>
 8006720:	68fb      	ldr	r3, [r7, #12]
 8006722:	691b      	ldr	r3, [r3, #16]
 8006724:	2b00      	cmp	r3, #0
 8006726:	d105      	bne.n	8006734 <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8006728:	68bb      	ldr	r3, [r7, #8]
 800672a:	2201      	movs	r2, #1
 800672c:	4013      	ands	r3, r2
 800672e:	d001      	beq.n	8006734 <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 8006730:	2301      	movs	r3, #1
 8006732:	e074      	b.n	800681e <HAL_UART_Transmit+0x136>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006734:	68fb      	ldr	r3, [r7, #12]
 8006736:	2284      	movs	r2, #132	; 0x84
 8006738:	2100      	movs	r1, #0
 800673a:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800673c:	68fb      	ldr	r3, [r7, #12]
 800673e:	2221      	movs	r2, #33	; 0x21
 8006740:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006742:	f7fd fa73 	bl	8003c2c <HAL_GetTick>
 8006746:	0003      	movs	r3, r0
 8006748:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 800674a:	68fb      	ldr	r3, [r7, #12]
 800674c:	1dba      	adds	r2, r7, #6
 800674e:	2150      	movs	r1, #80	; 0x50
 8006750:	8812      	ldrh	r2, [r2, #0]
 8006752:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8006754:	68fb      	ldr	r3, [r7, #12]
 8006756:	1dba      	adds	r2, r7, #6
 8006758:	2152      	movs	r1, #82	; 0x52
 800675a:	8812      	ldrh	r2, [r2, #0]
 800675c:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800675e:	68fb      	ldr	r3, [r7, #12]
 8006760:	689a      	ldr	r2, [r3, #8]
 8006762:	2380      	movs	r3, #128	; 0x80
 8006764:	015b      	lsls	r3, r3, #5
 8006766:	429a      	cmp	r2, r3
 8006768:	d108      	bne.n	800677c <HAL_UART_Transmit+0x94>
 800676a:	68fb      	ldr	r3, [r7, #12]
 800676c:	691b      	ldr	r3, [r3, #16]
 800676e:	2b00      	cmp	r3, #0
 8006770:	d104      	bne.n	800677c <HAL_UART_Transmit+0x94>
    {
      pdata8bits  = NULL;
 8006772:	2300      	movs	r3, #0
 8006774:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006776:	68bb      	ldr	r3, [r7, #8]
 8006778:	61bb      	str	r3, [r7, #24]
 800677a:	e003      	b.n	8006784 <HAL_UART_Transmit+0x9c>
    }
    else
    {
      pdata8bits  = pData;
 800677c:	68bb      	ldr	r3, [r7, #8]
 800677e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006780:	2300      	movs	r3, #0
 8006782:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8006784:	e02f      	b.n	80067e6 <HAL_UART_Transmit+0xfe>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006786:	697a      	ldr	r2, [r7, #20]
 8006788:	68f8      	ldr	r0, [r7, #12]
 800678a:	683b      	ldr	r3, [r7, #0]
 800678c:	9300      	str	r3, [sp, #0]
 800678e:	0013      	movs	r3, r2
 8006790:	2200      	movs	r2, #0
 8006792:	2180      	movs	r1, #128	; 0x80
 8006794:	f000 fc28 	bl	8006fe8 <UART_WaitOnFlagUntilTimeout>
 8006798:	1e03      	subs	r3, r0, #0
 800679a:	d004      	beq.n	80067a6 <HAL_UART_Transmit+0xbe>
      {

        huart->gState = HAL_UART_STATE_READY;
 800679c:	68fb      	ldr	r3, [r7, #12]
 800679e:	2220      	movs	r2, #32
 80067a0:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 80067a2:	2303      	movs	r3, #3
 80067a4:	e03b      	b.n	800681e <HAL_UART_Transmit+0x136>
      }
      if (pdata8bits == NULL)
 80067a6:	69fb      	ldr	r3, [r7, #28]
 80067a8:	2b00      	cmp	r3, #0
 80067aa:	d10b      	bne.n	80067c4 <HAL_UART_Transmit+0xdc>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80067ac:	69bb      	ldr	r3, [r7, #24]
 80067ae:	881b      	ldrh	r3, [r3, #0]
 80067b0:	001a      	movs	r2, r3
 80067b2:	68fb      	ldr	r3, [r7, #12]
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	05d2      	lsls	r2, r2, #23
 80067b8:	0dd2      	lsrs	r2, r2, #23
 80067ba:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80067bc:	69bb      	ldr	r3, [r7, #24]
 80067be:	3302      	adds	r3, #2
 80067c0:	61bb      	str	r3, [r7, #24]
 80067c2:	e007      	b.n	80067d4 <HAL_UART_Transmit+0xec>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80067c4:	69fb      	ldr	r3, [r7, #28]
 80067c6:	781a      	ldrb	r2, [r3, #0]
 80067c8:	68fb      	ldr	r3, [r7, #12]
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80067ce:	69fb      	ldr	r3, [r7, #28]
 80067d0:	3301      	adds	r3, #1
 80067d2:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80067d4:	68fb      	ldr	r3, [r7, #12]
 80067d6:	2252      	movs	r2, #82	; 0x52
 80067d8:	5a9b      	ldrh	r3, [r3, r2]
 80067da:	b29b      	uxth	r3, r3
 80067dc:	3b01      	subs	r3, #1
 80067de:	b299      	uxth	r1, r3
 80067e0:	68fb      	ldr	r3, [r7, #12]
 80067e2:	2252      	movs	r2, #82	; 0x52
 80067e4:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 80067e6:	68fb      	ldr	r3, [r7, #12]
 80067e8:	2252      	movs	r2, #82	; 0x52
 80067ea:	5a9b      	ldrh	r3, [r3, r2]
 80067ec:	b29b      	uxth	r3, r3
 80067ee:	2b00      	cmp	r3, #0
 80067f0:	d1c9      	bne.n	8006786 <HAL_UART_Transmit+0x9e>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80067f2:	697a      	ldr	r2, [r7, #20]
 80067f4:	68f8      	ldr	r0, [r7, #12]
 80067f6:	683b      	ldr	r3, [r7, #0]
 80067f8:	9300      	str	r3, [sp, #0]
 80067fa:	0013      	movs	r3, r2
 80067fc:	2200      	movs	r2, #0
 80067fe:	2140      	movs	r1, #64	; 0x40
 8006800:	f000 fbf2 	bl	8006fe8 <UART_WaitOnFlagUntilTimeout>
 8006804:	1e03      	subs	r3, r0, #0
 8006806:	d004      	beq.n	8006812 <HAL_UART_Transmit+0x12a>
    {
      huart->gState = HAL_UART_STATE_READY;
 8006808:	68fb      	ldr	r3, [r7, #12]
 800680a:	2220      	movs	r2, #32
 800680c:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 800680e:	2303      	movs	r3, #3
 8006810:	e005      	b.n	800681e <HAL_UART_Transmit+0x136>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006812:	68fb      	ldr	r3, [r7, #12]
 8006814:	2220      	movs	r2, #32
 8006816:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8006818:	2300      	movs	r3, #0
 800681a:	e000      	b.n	800681e <HAL_UART_Transmit+0x136>
  }
  else
  {
    return HAL_BUSY;
 800681c:	2302      	movs	r3, #2
  }
}
 800681e:	0018      	movs	r0, r3
 8006820:	46bd      	mov	sp, r7
 8006822:	b008      	add	sp, #32
 8006824:	bd80      	pop	{r7, pc}
	...

08006828 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006828:	b5b0      	push	{r4, r5, r7, lr}
 800682a:	b08e      	sub	sp, #56	; 0x38
 800682c:	af00      	add	r7, sp, #0
 800682e:	61f8      	str	r0, [r7, #28]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006830:	231a      	movs	r3, #26
 8006832:	2218      	movs	r2, #24
 8006834:	189b      	adds	r3, r3, r2
 8006836:	19db      	adds	r3, r3, r7
 8006838:	2200      	movs	r2, #0
 800683a:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800683c:	69fb      	ldr	r3, [r7, #28]
 800683e:	689a      	ldr	r2, [r3, #8]
 8006840:	69fb      	ldr	r3, [r7, #28]
 8006842:	691b      	ldr	r3, [r3, #16]
 8006844:	431a      	orrs	r2, r3
 8006846:	69fb      	ldr	r3, [r7, #28]
 8006848:	695b      	ldr	r3, [r3, #20]
 800684a:	431a      	orrs	r2, r3
 800684c:	69fb      	ldr	r3, [r7, #28]
 800684e:	69db      	ldr	r3, [r3, #28]
 8006850:	4313      	orrs	r3, r2
 8006852:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006854:	69fb      	ldr	r3, [r7, #28]
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	4ac6      	ldr	r2, [pc, #792]	; (8006b74 <UART_SetConfig+0x34c>)
 800685c:	4013      	ands	r3, r2
 800685e:	0019      	movs	r1, r3
 8006860:	69fb      	ldr	r3, [r7, #28]
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006866:	430a      	orrs	r2, r1
 8006868:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800686a:	69fb      	ldr	r3, [r7, #28]
 800686c:	681b      	ldr	r3, [r3, #0]
 800686e:	685b      	ldr	r3, [r3, #4]
 8006870:	4ac1      	ldr	r2, [pc, #772]	; (8006b78 <UART_SetConfig+0x350>)
 8006872:	4013      	ands	r3, r2
 8006874:	0019      	movs	r1, r3
 8006876:	69fb      	ldr	r3, [r7, #28]
 8006878:	68da      	ldr	r2, [r3, #12]
 800687a:	69fb      	ldr	r3, [r7, #28]
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	430a      	orrs	r2, r1
 8006880:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006882:	69fb      	ldr	r3, [r7, #28]
 8006884:	699b      	ldr	r3, [r3, #24]
 8006886:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006888:	69fb      	ldr	r3, [r7, #28]
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	4abb      	ldr	r2, [pc, #748]	; (8006b7c <UART_SetConfig+0x354>)
 800688e:	4293      	cmp	r3, r2
 8006890:	d004      	beq.n	800689c <UART_SetConfig+0x74>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8006892:	69fb      	ldr	r3, [r7, #28]
 8006894:	6a1b      	ldr	r3, [r3, #32]
 8006896:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006898:	4313      	orrs	r3, r2
 800689a:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800689c:	69fb      	ldr	r3, [r7, #28]
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	689b      	ldr	r3, [r3, #8]
 80068a2:	4ab7      	ldr	r2, [pc, #732]	; (8006b80 <UART_SetConfig+0x358>)
 80068a4:	4013      	ands	r3, r2
 80068a6:	0019      	movs	r1, r3
 80068a8:	69fb      	ldr	r3, [r7, #28]
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80068ae:	430a      	orrs	r2, r1
 80068b0:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80068b2:	69fb      	ldr	r3, [r7, #28]
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	4ab3      	ldr	r2, [pc, #716]	; (8006b84 <UART_SetConfig+0x35c>)
 80068b8:	4293      	cmp	r3, r2
 80068ba:	d131      	bne.n	8006920 <UART_SetConfig+0xf8>
 80068bc:	4bb2      	ldr	r3, [pc, #712]	; (8006b88 <UART_SetConfig+0x360>)
 80068be:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80068c0:	2203      	movs	r2, #3
 80068c2:	4013      	ands	r3, r2
 80068c4:	2b03      	cmp	r3, #3
 80068c6:	d01d      	beq.n	8006904 <UART_SetConfig+0xdc>
 80068c8:	d823      	bhi.n	8006912 <UART_SetConfig+0xea>
 80068ca:	2b02      	cmp	r3, #2
 80068cc:	d00c      	beq.n	80068e8 <UART_SetConfig+0xc0>
 80068ce:	d820      	bhi.n	8006912 <UART_SetConfig+0xea>
 80068d0:	2b00      	cmp	r3, #0
 80068d2:	d002      	beq.n	80068da <UART_SetConfig+0xb2>
 80068d4:	2b01      	cmp	r3, #1
 80068d6:	d00e      	beq.n	80068f6 <UART_SetConfig+0xce>
 80068d8:	e01b      	b.n	8006912 <UART_SetConfig+0xea>
 80068da:	231b      	movs	r3, #27
 80068dc:	2218      	movs	r2, #24
 80068de:	189b      	adds	r3, r3, r2
 80068e0:	19db      	adds	r3, r3, r7
 80068e2:	2201      	movs	r2, #1
 80068e4:	701a      	strb	r2, [r3, #0]
 80068e6:	e09c      	b.n	8006a22 <UART_SetConfig+0x1fa>
 80068e8:	231b      	movs	r3, #27
 80068ea:	2218      	movs	r2, #24
 80068ec:	189b      	adds	r3, r3, r2
 80068ee:	19db      	adds	r3, r3, r7
 80068f0:	2202      	movs	r2, #2
 80068f2:	701a      	strb	r2, [r3, #0]
 80068f4:	e095      	b.n	8006a22 <UART_SetConfig+0x1fa>
 80068f6:	231b      	movs	r3, #27
 80068f8:	2218      	movs	r2, #24
 80068fa:	189b      	adds	r3, r3, r2
 80068fc:	19db      	adds	r3, r3, r7
 80068fe:	2204      	movs	r2, #4
 8006900:	701a      	strb	r2, [r3, #0]
 8006902:	e08e      	b.n	8006a22 <UART_SetConfig+0x1fa>
 8006904:	231b      	movs	r3, #27
 8006906:	2218      	movs	r2, #24
 8006908:	189b      	adds	r3, r3, r2
 800690a:	19db      	adds	r3, r3, r7
 800690c:	2208      	movs	r2, #8
 800690e:	701a      	strb	r2, [r3, #0]
 8006910:	e087      	b.n	8006a22 <UART_SetConfig+0x1fa>
 8006912:	231b      	movs	r3, #27
 8006914:	2218      	movs	r2, #24
 8006916:	189b      	adds	r3, r3, r2
 8006918:	19db      	adds	r3, r3, r7
 800691a:	2210      	movs	r2, #16
 800691c:	701a      	strb	r2, [r3, #0]
 800691e:	e080      	b.n	8006a22 <UART_SetConfig+0x1fa>
 8006920:	69fb      	ldr	r3, [r7, #28]
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	4a99      	ldr	r2, [pc, #612]	; (8006b8c <UART_SetConfig+0x364>)
 8006926:	4293      	cmp	r3, r2
 8006928:	d131      	bne.n	800698e <UART_SetConfig+0x166>
 800692a:	4b97      	ldr	r3, [pc, #604]	; (8006b88 <UART_SetConfig+0x360>)
 800692c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800692e:	220c      	movs	r2, #12
 8006930:	4013      	ands	r3, r2
 8006932:	2b0c      	cmp	r3, #12
 8006934:	d01d      	beq.n	8006972 <UART_SetConfig+0x14a>
 8006936:	d823      	bhi.n	8006980 <UART_SetConfig+0x158>
 8006938:	2b08      	cmp	r3, #8
 800693a:	d00c      	beq.n	8006956 <UART_SetConfig+0x12e>
 800693c:	d820      	bhi.n	8006980 <UART_SetConfig+0x158>
 800693e:	2b00      	cmp	r3, #0
 8006940:	d002      	beq.n	8006948 <UART_SetConfig+0x120>
 8006942:	2b04      	cmp	r3, #4
 8006944:	d00e      	beq.n	8006964 <UART_SetConfig+0x13c>
 8006946:	e01b      	b.n	8006980 <UART_SetConfig+0x158>
 8006948:	231b      	movs	r3, #27
 800694a:	2218      	movs	r2, #24
 800694c:	189b      	adds	r3, r3, r2
 800694e:	19db      	adds	r3, r3, r7
 8006950:	2200      	movs	r2, #0
 8006952:	701a      	strb	r2, [r3, #0]
 8006954:	e065      	b.n	8006a22 <UART_SetConfig+0x1fa>
 8006956:	231b      	movs	r3, #27
 8006958:	2218      	movs	r2, #24
 800695a:	189b      	adds	r3, r3, r2
 800695c:	19db      	adds	r3, r3, r7
 800695e:	2202      	movs	r2, #2
 8006960:	701a      	strb	r2, [r3, #0]
 8006962:	e05e      	b.n	8006a22 <UART_SetConfig+0x1fa>
 8006964:	231b      	movs	r3, #27
 8006966:	2218      	movs	r2, #24
 8006968:	189b      	adds	r3, r3, r2
 800696a:	19db      	adds	r3, r3, r7
 800696c:	2204      	movs	r2, #4
 800696e:	701a      	strb	r2, [r3, #0]
 8006970:	e057      	b.n	8006a22 <UART_SetConfig+0x1fa>
 8006972:	231b      	movs	r3, #27
 8006974:	2218      	movs	r2, #24
 8006976:	189b      	adds	r3, r3, r2
 8006978:	19db      	adds	r3, r3, r7
 800697a:	2208      	movs	r2, #8
 800697c:	701a      	strb	r2, [r3, #0]
 800697e:	e050      	b.n	8006a22 <UART_SetConfig+0x1fa>
 8006980:	231b      	movs	r3, #27
 8006982:	2218      	movs	r2, #24
 8006984:	189b      	adds	r3, r3, r2
 8006986:	19db      	adds	r3, r3, r7
 8006988:	2210      	movs	r2, #16
 800698a:	701a      	strb	r2, [r3, #0]
 800698c:	e049      	b.n	8006a22 <UART_SetConfig+0x1fa>
 800698e:	69fb      	ldr	r3, [r7, #28]
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	4a7a      	ldr	r2, [pc, #488]	; (8006b7c <UART_SetConfig+0x354>)
 8006994:	4293      	cmp	r3, r2
 8006996:	d13e      	bne.n	8006a16 <UART_SetConfig+0x1ee>
 8006998:	4b7b      	ldr	r3, [pc, #492]	; (8006b88 <UART_SetConfig+0x360>)
 800699a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800699c:	23c0      	movs	r3, #192	; 0xc0
 800699e:	011b      	lsls	r3, r3, #4
 80069a0:	4013      	ands	r3, r2
 80069a2:	22c0      	movs	r2, #192	; 0xc0
 80069a4:	0112      	lsls	r2, r2, #4
 80069a6:	4293      	cmp	r3, r2
 80069a8:	d027      	beq.n	80069fa <UART_SetConfig+0x1d2>
 80069aa:	22c0      	movs	r2, #192	; 0xc0
 80069ac:	0112      	lsls	r2, r2, #4
 80069ae:	4293      	cmp	r3, r2
 80069b0:	d82a      	bhi.n	8006a08 <UART_SetConfig+0x1e0>
 80069b2:	2280      	movs	r2, #128	; 0x80
 80069b4:	0112      	lsls	r2, r2, #4
 80069b6:	4293      	cmp	r3, r2
 80069b8:	d011      	beq.n	80069de <UART_SetConfig+0x1b6>
 80069ba:	2280      	movs	r2, #128	; 0x80
 80069bc:	0112      	lsls	r2, r2, #4
 80069be:	4293      	cmp	r3, r2
 80069c0:	d822      	bhi.n	8006a08 <UART_SetConfig+0x1e0>
 80069c2:	2b00      	cmp	r3, #0
 80069c4:	d004      	beq.n	80069d0 <UART_SetConfig+0x1a8>
 80069c6:	2280      	movs	r2, #128	; 0x80
 80069c8:	00d2      	lsls	r2, r2, #3
 80069ca:	4293      	cmp	r3, r2
 80069cc:	d00e      	beq.n	80069ec <UART_SetConfig+0x1c4>
 80069ce:	e01b      	b.n	8006a08 <UART_SetConfig+0x1e0>
 80069d0:	231b      	movs	r3, #27
 80069d2:	2218      	movs	r2, #24
 80069d4:	189b      	adds	r3, r3, r2
 80069d6:	19db      	adds	r3, r3, r7
 80069d8:	2200      	movs	r2, #0
 80069da:	701a      	strb	r2, [r3, #0]
 80069dc:	e021      	b.n	8006a22 <UART_SetConfig+0x1fa>
 80069de:	231b      	movs	r3, #27
 80069e0:	2218      	movs	r2, #24
 80069e2:	189b      	adds	r3, r3, r2
 80069e4:	19db      	adds	r3, r3, r7
 80069e6:	2202      	movs	r2, #2
 80069e8:	701a      	strb	r2, [r3, #0]
 80069ea:	e01a      	b.n	8006a22 <UART_SetConfig+0x1fa>
 80069ec:	231b      	movs	r3, #27
 80069ee:	2218      	movs	r2, #24
 80069f0:	189b      	adds	r3, r3, r2
 80069f2:	19db      	adds	r3, r3, r7
 80069f4:	2204      	movs	r2, #4
 80069f6:	701a      	strb	r2, [r3, #0]
 80069f8:	e013      	b.n	8006a22 <UART_SetConfig+0x1fa>
 80069fa:	231b      	movs	r3, #27
 80069fc:	2218      	movs	r2, #24
 80069fe:	189b      	adds	r3, r3, r2
 8006a00:	19db      	adds	r3, r3, r7
 8006a02:	2208      	movs	r2, #8
 8006a04:	701a      	strb	r2, [r3, #0]
 8006a06:	e00c      	b.n	8006a22 <UART_SetConfig+0x1fa>
 8006a08:	231b      	movs	r3, #27
 8006a0a:	2218      	movs	r2, #24
 8006a0c:	189b      	adds	r3, r3, r2
 8006a0e:	19db      	adds	r3, r3, r7
 8006a10:	2210      	movs	r2, #16
 8006a12:	701a      	strb	r2, [r3, #0]
 8006a14:	e005      	b.n	8006a22 <UART_SetConfig+0x1fa>
 8006a16:	231b      	movs	r3, #27
 8006a18:	2218      	movs	r2, #24
 8006a1a:	189b      	adds	r3, r3, r2
 8006a1c:	19db      	adds	r3, r3, r7
 8006a1e:	2210      	movs	r2, #16
 8006a20:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8006a22:	69fb      	ldr	r3, [r7, #28]
 8006a24:	681b      	ldr	r3, [r3, #0]
 8006a26:	4a55      	ldr	r2, [pc, #340]	; (8006b7c <UART_SetConfig+0x354>)
 8006a28:	4293      	cmp	r3, r2
 8006a2a:	d000      	beq.n	8006a2e <UART_SetConfig+0x206>
 8006a2c:	e084      	b.n	8006b38 <UART_SetConfig+0x310>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006a2e:	231b      	movs	r3, #27
 8006a30:	2218      	movs	r2, #24
 8006a32:	189b      	adds	r3, r3, r2
 8006a34:	19db      	adds	r3, r3, r7
 8006a36:	781b      	ldrb	r3, [r3, #0]
 8006a38:	2b08      	cmp	r3, #8
 8006a3a:	d01d      	beq.n	8006a78 <UART_SetConfig+0x250>
 8006a3c:	dc20      	bgt.n	8006a80 <UART_SetConfig+0x258>
 8006a3e:	2b04      	cmp	r3, #4
 8006a40:	d015      	beq.n	8006a6e <UART_SetConfig+0x246>
 8006a42:	dc1d      	bgt.n	8006a80 <UART_SetConfig+0x258>
 8006a44:	2b00      	cmp	r3, #0
 8006a46:	d002      	beq.n	8006a4e <UART_SetConfig+0x226>
 8006a48:	2b02      	cmp	r3, #2
 8006a4a:	d005      	beq.n	8006a58 <UART_SetConfig+0x230>
 8006a4c:	e018      	b.n	8006a80 <UART_SetConfig+0x258>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006a4e:	f7fe fd7b 	bl	8005548 <HAL_RCC_GetPCLK1Freq>
 8006a52:	0003      	movs	r3, r0
 8006a54:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006a56:	e01c      	b.n	8006a92 <UART_SetConfig+0x26a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006a58:	4b4b      	ldr	r3, [pc, #300]	; (8006b88 <UART_SetConfig+0x360>)
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	2210      	movs	r2, #16
 8006a5e:	4013      	ands	r3, r2
 8006a60:	d002      	beq.n	8006a68 <UART_SetConfig+0x240>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8006a62:	4b4b      	ldr	r3, [pc, #300]	; (8006b90 <UART_SetConfig+0x368>)
 8006a64:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8006a66:	e014      	b.n	8006a92 <UART_SetConfig+0x26a>
          pclk = (uint32_t) HSI_VALUE;
 8006a68:	4b4a      	ldr	r3, [pc, #296]	; (8006b94 <UART_SetConfig+0x36c>)
 8006a6a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006a6c:	e011      	b.n	8006a92 <UART_SetConfig+0x26a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006a6e:	f7fe fcbb 	bl	80053e8 <HAL_RCC_GetSysClockFreq>
 8006a72:	0003      	movs	r3, r0
 8006a74:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006a76:	e00c      	b.n	8006a92 <UART_SetConfig+0x26a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006a78:	2380      	movs	r3, #128	; 0x80
 8006a7a:	021b      	lsls	r3, r3, #8
 8006a7c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006a7e:	e008      	b.n	8006a92 <UART_SetConfig+0x26a>
      default:
        pclk = 0U;
 8006a80:	2300      	movs	r3, #0
 8006a82:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8006a84:	231a      	movs	r3, #26
 8006a86:	2218      	movs	r2, #24
 8006a88:	189b      	adds	r3, r3, r2
 8006a8a:	19db      	adds	r3, r3, r7
 8006a8c:	2201      	movs	r2, #1
 8006a8e:	701a      	strb	r2, [r3, #0]
        break;
 8006a90:	46c0      	nop			; (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8006a92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a94:	2b00      	cmp	r3, #0
 8006a96:	d100      	bne.n	8006a9a <UART_SetConfig+0x272>
 8006a98:	e132      	b.n	8006d00 <UART_SetConfig+0x4d8>
    {
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8006a9a:	69fb      	ldr	r3, [r7, #28]
 8006a9c:	685a      	ldr	r2, [r3, #4]
 8006a9e:	0013      	movs	r3, r2
 8006aa0:	005b      	lsls	r3, r3, #1
 8006aa2:	189b      	adds	r3, r3, r2
 8006aa4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006aa6:	429a      	cmp	r2, r3
 8006aa8:	d305      	bcc.n	8006ab6 <UART_SetConfig+0x28e>
          (pclk > (4096U * huart->Init.BaudRate)))
 8006aaa:	69fb      	ldr	r3, [r7, #28]
 8006aac:	685b      	ldr	r3, [r3, #4]
 8006aae:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8006ab0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006ab2:	429a      	cmp	r2, r3
 8006ab4:	d906      	bls.n	8006ac4 <UART_SetConfig+0x29c>
      {
        ret = HAL_ERROR;
 8006ab6:	231a      	movs	r3, #26
 8006ab8:	2218      	movs	r2, #24
 8006aba:	189b      	adds	r3, r3, r2
 8006abc:	19db      	adds	r3, r3, r7
 8006abe:	2201      	movs	r2, #1
 8006ac0:	701a      	strb	r2, [r3, #0]
 8006ac2:	e11d      	b.n	8006d00 <UART_SetConfig+0x4d8>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8006ac4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ac6:	613b      	str	r3, [r7, #16]
 8006ac8:	2300      	movs	r3, #0
 8006aca:	617b      	str	r3, [r7, #20]
 8006acc:	6939      	ldr	r1, [r7, #16]
 8006ace:	697a      	ldr	r2, [r7, #20]
 8006ad0:	000b      	movs	r3, r1
 8006ad2:	0e1b      	lsrs	r3, r3, #24
 8006ad4:	0010      	movs	r0, r2
 8006ad6:	0205      	lsls	r5, r0, #8
 8006ad8:	431d      	orrs	r5, r3
 8006ada:	000b      	movs	r3, r1
 8006adc:	021c      	lsls	r4, r3, #8
 8006ade:	69fb      	ldr	r3, [r7, #28]
 8006ae0:	685b      	ldr	r3, [r3, #4]
 8006ae2:	085b      	lsrs	r3, r3, #1
 8006ae4:	60bb      	str	r3, [r7, #8]
 8006ae6:	2300      	movs	r3, #0
 8006ae8:	60fb      	str	r3, [r7, #12]
 8006aea:	68b8      	ldr	r0, [r7, #8]
 8006aec:	68f9      	ldr	r1, [r7, #12]
 8006aee:	1900      	adds	r0, r0, r4
 8006af0:	4169      	adcs	r1, r5
 8006af2:	69fb      	ldr	r3, [r7, #28]
 8006af4:	685b      	ldr	r3, [r3, #4]
 8006af6:	603b      	str	r3, [r7, #0]
 8006af8:	2300      	movs	r3, #0
 8006afa:	607b      	str	r3, [r7, #4]
 8006afc:	683a      	ldr	r2, [r7, #0]
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	f7f9 fd0c 	bl	800051c <__aeabi_uldivmod>
 8006b04:	0002      	movs	r2, r0
 8006b06:	000b      	movs	r3, r1
 8006b08:	0013      	movs	r3, r2
 8006b0a:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006b0c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006b0e:	23c0      	movs	r3, #192	; 0xc0
 8006b10:	009b      	lsls	r3, r3, #2
 8006b12:	429a      	cmp	r2, r3
 8006b14:	d309      	bcc.n	8006b2a <UART_SetConfig+0x302>
 8006b16:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006b18:	2380      	movs	r3, #128	; 0x80
 8006b1a:	035b      	lsls	r3, r3, #13
 8006b1c:	429a      	cmp	r2, r3
 8006b1e:	d204      	bcs.n	8006b2a <UART_SetConfig+0x302>
        {
          huart->Instance->BRR = usartdiv;
 8006b20:	69fb      	ldr	r3, [r7, #28]
 8006b22:	681b      	ldr	r3, [r3, #0]
 8006b24:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006b26:	60da      	str	r2, [r3, #12]
 8006b28:	e0ea      	b.n	8006d00 <UART_SetConfig+0x4d8>
        }
        else
        {
          ret = HAL_ERROR;
 8006b2a:	231a      	movs	r3, #26
 8006b2c:	2218      	movs	r2, #24
 8006b2e:	189b      	adds	r3, r3, r2
 8006b30:	19db      	adds	r3, r3, r7
 8006b32:	2201      	movs	r2, #1
 8006b34:	701a      	strb	r2, [r3, #0]
 8006b36:	e0e3      	b.n	8006d00 <UART_SetConfig+0x4d8>
        }
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006b38:	69fb      	ldr	r3, [r7, #28]
 8006b3a:	69da      	ldr	r2, [r3, #28]
 8006b3c:	2380      	movs	r3, #128	; 0x80
 8006b3e:	021b      	lsls	r3, r3, #8
 8006b40:	429a      	cmp	r2, r3
 8006b42:	d000      	beq.n	8006b46 <UART_SetConfig+0x31e>
 8006b44:	e085      	b.n	8006c52 <UART_SetConfig+0x42a>
  {
    switch (clocksource)
 8006b46:	231b      	movs	r3, #27
 8006b48:	2218      	movs	r2, #24
 8006b4a:	189b      	adds	r3, r3, r2
 8006b4c:	19db      	adds	r3, r3, r7
 8006b4e:	781b      	ldrb	r3, [r3, #0]
 8006b50:	2b08      	cmp	r3, #8
 8006b52:	d837      	bhi.n	8006bc4 <UART_SetConfig+0x39c>
 8006b54:	009a      	lsls	r2, r3, #2
 8006b56:	4b10      	ldr	r3, [pc, #64]	; (8006b98 <UART_SetConfig+0x370>)
 8006b58:	18d3      	adds	r3, r2, r3
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006b5e:	f7fe fcf3 	bl	8005548 <HAL_RCC_GetPCLK1Freq>
 8006b62:	0003      	movs	r3, r0
 8006b64:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006b66:	e036      	b.n	8006bd6 <UART_SetConfig+0x3ae>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006b68:	f7fe fd04 	bl	8005574 <HAL_RCC_GetPCLK2Freq>
 8006b6c:	0003      	movs	r3, r0
 8006b6e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006b70:	e031      	b.n	8006bd6 <UART_SetConfig+0x3ae>
 8006b72:	46c0      	nop			; (mov r8, r8)
 8006b74:	efff69f3 	.word	0xefff69f3
 8006b78:	ffffcfff 	.word	0xffffcfff
 8006b7c:	40004800 	.word	0x40004800
 8006b80:	fffff4ff 	.word	0xfffff4ff
 8006b84:	40013800 	.word	0x40013800
 8006b88:	40021000 	.word	0x40021000
 8006b8c:	40004400 	.word	0x40004400
 8006b90:	003d0900 	.word	0x003d0900
 8006b94:	00f42400 	.word	0x00f42400
 8006b98:	0800ccd4 	.word	0x0800ccd4
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006b9c:	4b60      	ldr	r3, [pc, #384]	; (8006d20 <UART_SetConfig+0x4f8>)
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	2210      	movs	r2, #16
 8006ba2:	4013      	ands	r3, r2
 8006ba4:	d002      	beq.n	8006bac <UART_SetConfig+0x384>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8006ba6:	4b5f      	ldr	r3, [pc, #380]	; (8006d24 <UART_SetConfig+0x4fc>)
 8006ba8:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8006baa:	e014      	b.n	8006bd6 <UART_SetConfig+0x3ae>
          pclk = (uint32_t) HSI_VALUE;
 8006bac:	4b5e      	ldr	r3, [pc, #376]	; (8006d28 <UART_SetConfig+0x500>)
 8006bae:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006bb0:	e011      	b.n	8006bd6 <UART_SetConfig+0x3ae>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006bb2:	f7fe fc19 	bl	80053e8 <HAL_RCC_GetSysClockFreq>
 8006bb6:	0003      	movs	r3, r0
 8006bb8:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006bba:	e00c      	b.n	8006bd6 <UART_SetConfig+0x3ae>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006bbc:	2380      	movs	r3, #128	; 0x80
 8006bbe:	021b      	lsls	r3, r3, #8
 8006bc0:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006bc2:	e008      	b.n	8006bd6 <UART_SetConfig+0x3ae>
      default:
        pclk = 0U;
 8006bc4:	2300      	movs	r3, #0
 8006bc6:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8006bc8:	231a      	movs	r3, #26
 8006bca:	2218      	movs	r2, #24
 8006bcc:	189b      	adds	r3, r3, r2
 8006bce:	19db      	adds	r3, r3, r7
 8006bd0:	2201      	movs	r2, #1
 8006bd2:	701a      	strb	r2, [r3, #0]
        break;
 8006bd4:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006bd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006bd8:	2b00      	cmp	r3, #0
 8006bda:	d100      	bne.n	8006bde <UART_SetConfig+0x3b6>
 8006bdc:	e090      	b.n	8006d00 <UART_SetConfig+0x4d8>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006bde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006be0:	005a      	lsls	r2, r3, #1
 8006be2:	69fb      	ldr	r3, [r7, #28]
 8006be4:	685b      	ldr	r3, [r3, #4]
 8006be6:	085b      	lsrs	r3, r3, #1
 8006be8:	18d2      	adds	r2, r2, r3
 8006bea:	69fb      	ldr	r3, [r7, #28]
 8006bec:	685b      	ldr	r3, [r3, #4]
 8006bee:	0019      	movs	r1, r3
 8006bf0:	0010      	movs	r0, r2
 8006bf2:	f7f9 faa5 	bl	8000140 <__udivsi3>
 8006bf6:	0003      	movs	r3, r0
 8006bf8:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006bfa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006bfc:	2b0f      	cmp	r3, #15
 8006bfe:	d921      	bls.n	8006c44 <UART_SetConfig+0x41c>
 8006c00:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006c02:	2380      	movs	r3, #128	; 0x80
 8006c04:	025b      	lsls	r3, r3, #9
 8006c06:	429a      	cmp	r2, r3
 8006c08:	d21c      	bcs.n	8006c44 <UART_SetConfig+0x41c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006c0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c0c:	b29a      	uxth	r2, r3
 8006c0e:	200e      	movs	r0, #14
 8006c10:	2418      	movs	r4, #24
 8006c12:	1903      	adds	r3, r0, r4
 8006c14:	19db      	adds	r3, r3, r7
 8006c16:	210f      	movs	r1, #15
 8006c18:	438a      	bics	r2, r1
 8006c1a:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006c1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c1e:	085b      	lsrs	r3, r3, #1
 8006c20:	b29b      	uxth	r3, r3
 8006c22:	2207      	movs	r2, #7
 8006c24:	4013      	ands	r3, r2
 8006c26:	b299      	uxth	r1, r3
 8006c28:	1903      	adds	r3, r0, r4
 8006c2a:	19db      	adds	r3, r3, r7
 8006c2c:	1902      	adds	r2, r0, r4
 8006c2e:	19d2      	adds	r2, r2, r7
 8006c30:	8812      	ldrh	r2, [r2, #0]
 8006c32:	430a      	orrs	r2, r1
 8006c34:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8006c36:	69fb      	ldr	r3, [r7, #28]
 8006c38:	681b      	ldr	r3, [r3, #0]
 8006c3a:	1902      	adds	r2, r0, r4
 8006c3c:	19d2      	adds	r2, r2, r7
 8006c3e:	8812      	ldrh	r2, [r2, #0]
 8006c40:	60da      	str	r2, [r3, #12]
 8006c42:	e05d      	b.n	8006d00 <UART_SetConfig+0x4d8>
      }
      else
      {
        ret = HAL_ERROR;
 8006c44:	231a      	movs	r3, #26
 8006c46:	2218      	movs	r2, #24
 8006c48:	189b      	adds	r3, r3, r2
 8006c4a:	19db      	adds	r3, r3, r7
 8006c4c:	2201      	movs	r2, #1
 8006c4e:	701a      	strb	r2, [r3, #0]
 8006c50:	e056      	b.n	8006d00 <UART_SetConfig+0x4d8>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006c52:	231b      	movs	r3, #27
 8006c54:	2218      	movs	r2, #24
 8006c56:	189b      	adds	r3, r3, r2
 8006c58:	19db      	adds	r3, r3, r7
 8006c5a:	781b      	ldrb	r3, [r3, #0]
 8006c5c:	2b08      	cmp	r3, #8
 8006c5e:	d822      	bhi.n	8006ca6 <UART_SetConfig+0x47e>
 8006c60:	009a      	lsls	r2, r3, #2
 8006c62:	4b32      	ldr	r3, [pc, #200]	; (8006d2c <UART_SetConfig+0x504>)
 8006c64:	18d3      	adds	r3, r2, r3
 8006c66:	681b      	ldr	r3, [r3, #0]
 8006c68:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006c6a:	f7fe fc6d 	bl	8005548 <HAL_RCC_GetPCLK1Freq>
 8006c6e:	0003      	movs	r3, r0
 8006c70:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006c72:	e021      	b.n	8006cb8 <UART_SetConfig+0x490>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006c74:	f7fe fc7e 	bl	8005574 <HAL_RCC_GetPCLK2Freq>
 8006c78:	0003      	movs	r3, r0
 8006c7a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006c7c:	e01c      	b.n	8006cb8 <UART_SetConfig+0x490>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006c7e:	4b28      	ldr	r3, [pc, #160]	; (8006d20 <UART_SetConfig+0x4f8>)
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	2210      	movs	r2, #16
 8006c84:	4013      	ands	r3, r2
 8006c86:	d002      	beq.n	8006c8e <UART_SetConfig+0x466>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8006c88:	4b26      	ldr	r3, [pc, #152]	; (8006d24 <UART_SetConfig+0x4fc>)
 8006c8a:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8006c8c:	e014      	b.n	8006cb8 <UART_SetConfig+0x490>
          pclk = (uint32_t) HSI_VALUE;
 8006c8e:	4b26      	ldr	r3, [pc, #152]	; (8006d28 <UART_SetConfig+0x500>)
 8006c90:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006c92:	e011      	b.n	8006cb8 <UART_SetConfig+0x490>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006c94:	f7fe fba8 	bl	80053e8 <HAL_RCC_GetSysClockFreq>
 8006c98:	0003      	movs	r3, r0
 8006c9a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006c9c:	e00c      	b.n	8006cb8 <UART_SetConfig+0x490>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006c9e:	2380      	movs	r3, #128	; 0x80
 8006ca0:	021b      	lsls	r3, r3, #8
 8006ca2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006ca4:	e008      	b.n	8006cb8 <UART_SetConfig+0x490>
      default:
        pclk = 0U;
 8006ca6:	2300      	movs	r3, #0
 8006ca8:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8006caa:	231a      	movs	r3, #26
 8006cac:	2218      	movs	r2, #24
 8006cae:	189b      	adds	r3, r3, r2
 8006cb0:	19db      	adds	r3, r3, r7
 8006cb2:	2201      	movs	r2, #1
 8006cb4:	701a      	strb	r2, [r3, #0]
        break;
 8006cb6:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8006cb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006cba:	2b00      	cmp	r3, #0
 8006cbc:	d020      	beq.n	8006d00 <UART_SetConfig+0x4d8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006cbe:	69fb      	ldr	r3, [r7, #28]
 8006cc0:	685b      	ldr	r3, [r3, #4]
 8006cc2:	085a      	lsrs	r2, r3, #1
 8006cc4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006cc6:	18d2      	adds	r2, r2, r3
 8006cc8:	69fb      	ldr	r3, [r7, #28]
 8006cca:	685b      	ldr	r3, [r3, #4]
 8006ccc:	0019      	movs	r1, r3
 8006cce:	0010      	movs	r0, r2
 8006cd0:	f7f9 fa36 	bl	8000140 <__udivsi3>
 8006cd4:	0003      	movs	r3, r0
 8006cd6:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006cd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006cda:	2b0f      	cmp	r3, #15
 8006cdc:	d90a      	bls.n	8006cf4 <UART_SetConfig+0x4cc>
 8006cde:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006ce0:	2380      	movs	r3, #128	; 0x80
 8006ce2:	025b      	lsls	r3, r3, #9
 8006ce4:	429a      	cmp	r2, r3
 8006ce6:	d205      	bcs.n	8006cf4 <UART_SetConfig+0x4cc>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006ce8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006cea:	b29a      	uxth	r2, r3
 8006cec:	69fb      	ldr	r3, [r7, #28]
 8006cee:	681b      	ldr	r3, [r3, #0]
 8006cf0:	60da      	str	r2, [r3, #12]
 8006cf2:	e005      	b.n	8006d00 <UART_SetConfig+0x4d8>
      }
      else
      {
        ret = HAL_ERROR;
 8006cf4:	231a      	movs	r3, #26
 8006cf6:	2218      	movs	r2, #24
 8006cf8:	189b      	adds	r3, r3, r2
 8006cfa:	19db      	adds	r3, r3, r7
 8006cfc:	2201      	movs	r2, #1
 8006cfe:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006d00:	69fb      	ldr	r3, [r7, #28]
 8006d02:	2200      	movs	r2, #0
 8006d04:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8006d06:	69fb      	ldr	r3, [r7, #28]
 8006d08:	2200      	movs	r2, #0
 8006d0a:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8006d0c:	231a      	movs	r3, #26
 8006d0e:	2218      	movs	r2, #24
 8006d10:	189b      	adds	r3, r3, r2
 8006d12:	19db      	adds	r3, r3, r7
 8006d14:	781b      	ldrb	r3, [r3, #0]
}
 8006d16:	0018      	movs	r0, r3
 8006d18:	46bd      	mov	sp, r7
 8006d1a:	b00e      	add	sp, #56	; 0x38
 8006d1c:	bdb0      	pop	{r4, r5, r7, pc}
 8006d1e:	46c0      	nop			; (mov r8, r8)
 8006d20:	40021000 	.word	0x40021000
 8006d24:	003d0900 	.word	0x003d0900
 8006d28:	00f42400 	.word	0x00f42400
 8006d2c:	0800ccf8 	.word	0x0800ccf8

08006d30 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006d30:	b580      	push	{r7, lr}
 8006d32:	b082      	sub	sp, #8
 8006d34:	af00      	add	r7, sp, #0
 8006d36:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d3c:	2201      	movs	r2, #1
 8006d3e:	4013      	ands	r3, r2
 8006d40:	d00b      	beq.n	8006d5a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	681b      	ldr	r3, [r3, #0]
 8006d46:	685b      	ldr	r3, [r3, #4]
 8006d48:	4a4a      	ldr	r2, [pc, #296]	; (8006e74 <UART_AdvFeatureConfig+0x144>)
 8006d4a:	4013      	ands	r3, r2
 8006d4c:	0019      	movs	r1, r3
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	681b      	ldr	r3, [r3, #0]
 8006d56:	430a      	orrs	r2, r1
 8006d58:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d5e:	2202      	movs	r2, #2
 8006d60:	4013      	ands	r3, r2
 8006d62:	d00b      	beq.n	8006d7c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	681b      	ldr	r3, [r3, #0]
 8006d68:	685b      	ldr	r3, [r3, #4]
 8006d6a:	4a43      	ldr	r2, [pc, #268]	; (8006e78 <UART_AdvFeatureConfig+0x148>)
 8006d6c:	4013      	ands	r3, r2
 8006d6e:	0019      	movs	r1, r3
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	681b      	ldr	r3, [r3, #0]
 8006d78:	430a      	orrs	r2, r1
 8006d7a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d80:	2204      	movs	r2, #4
 8006d82:	4013      	ands	r3, r2
 8006d84:	d00b      	beq.n	8006d9e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	681b      	ldr	r3, [r3, #0]
 8006d8a:	685b      	ldr	r3, [r3, #4]
 8006d8c:	4a3b      	ldr	r2, [pc, #236]	; (8006e7c <UART_AdvFeatureConfig+0x14c>)
 8006d8e:	4013      	ands	r3, r2
 8006d90:	0019      	movs	r1, r3
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	681b      	ldr	r3, [r3, #0]
 8006d9a:	430a      	orrs	r2, r1
 8006d9c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006da2:	2208      	movs	r2, #8
 8006da4:	4013      	ands	r3, r2
 8006da6:	d00b      	beq.n	8006dc0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	681b      	ldr	r3, [r3, #0]
 8006dac:	685b      	ldr	r3, [r3, #4]
 8006dae:	4a34      	ldr	r2, [pc, #208]	; (8006e80 <UART_AdvFeatureConfig+0x150>)
 8006db0:	4013      	ands	r3, r2
 8006db2:	0019      	movs	r1, r3
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	681b      	ldr	r3, [r3, #0]
 8006dbc:	430a      	orrs	r2, r1
 8006dbe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006dc4:	2210      	movs	r2, #16
 8006dc6:	4013      	ands	r3, r2
 8006dc8:	d00b      	beq.n	8006de2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	681b      	ldr	r3, [r3, #0]
 8006dce:	689b      	ldr	r3, [r3, #8]
 8006dd0:	4a2c      	ldr	r2, [pc, #176]	; (8006e84 <UART_AdvFeatureConfig+0x154>)
 8006dd2:	4013      	ands	r3, r2
 8006dd4:	0019      	movs	r1, r3
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	430a      	orrs	r2, r1
 8006de0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006de6:	2220      	movs	r2, #32
 8006de8:	4013      	ands	r3, r2
 8006dea:	d00b      	beq.n	8006e04 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	689b      	ldr	r3, [r3, #8]
 8006df2:	4a25      	ldr	r2, [pc, #148]	; (8006e88 <UART_AdvFeatureConfig+0x158>)
 8006df4:	4013      	ands	r3, r2
 8006df6:	0019      	movs	r1, r3
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	681b      	ldr	r3, [r3, #0]
 8006e00:	430a      	orrs	r2, r1
 8006e02:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e08:	2240      	movs	r2, #64	; 0x40
 8006e0a:	4013      	ands	r3, r2
 8006e0c:	d01d      	beq.n	8006e4a <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	681b      	ldr	r3, [r3, #0]
 8006e12:	685b      	ldr	r3, [r3, #4]
 8006e14:	4a1d      	ldr	r2, [pc, #116]	; (8006e8c <UART_AdvFeatureConfig+0x15c>)
 8006e16:	4013      	ands	r3, r2
 8006e18:	0019      	movs	r1, r3
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	681b      	ldr	r3, [r3, #0]
 8006e22:	430a      	orrs	r2, r1
 8006e24:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006e2a:	2380      	movs	r3, #128	; 0x80
 8006e2c:	035b      	lsls	r3, r3, #13
 8006e2e:	429a      	cmp	r2, r3
 8006e30:	d10b      	bne.n	8006e4a <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	681b      	ldr	r3, [r3, #0]
 8006e36:	685b      	ldr	r3, [r3, #4]
 8006e38:	4a15      	ldr	r2, [pc, #84]	; (8006e90 <UART_AdvFeatureConfig+0x160>)
 8006e3a:	4013      	ands	r3, r2
 8006e3c:	0019      	movs	r1, r3
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	681b      	ldr	r3, [r3, #0]
 8006e46:	430a      	orrs	r2, r1
 8006e48:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e4e:	2280      	movs	r2, #128	; 0x80
 8006e50:	4013      	ands	r3, r2
 8006e52:	d00b      	beq.n	8006e6c <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	681b      	ldr	r3, [r3, #0]
 8006e58:	685b      	ldr	r3, [r3, #4]
 8006e5a:	4a0e      	ldr	r2, [pc, #56]	; (8006e94 <UART_AdvFeatureConfig+0x164>)
 8006e5c:	4013      	ands	r3, r2
 8006e5e:	0019      	movs	r1, r3
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	681b      	ldr	r3, [r3, #0]
 8006e68:	430a      	orrs	r2, r1
 8006e6a:	605a      	str	r2, [r3, #4]
  }
}
 8006e6c:	46c0      	nop			; (mov r8, r8)
 8006e6e:	46bd      	mov	sp, r7
 8006e70:	b002      	add	sp, #8
 8006e72:	bd80      	pop	{r7, pc}
 8006e74:	fffdffff 	.word	0xfffdffff
 8006e78:	fffeffff 	.word	0xfffeffff
 8006e7c:	fffbffff 	.word	0xfffbffff
 8006e80:	ffff7fff 	.word	0xffff7fff
 8006e84:	ffffefff 	.word	0xffffefff
 8006e88:	ffffdfff 	.word	0xffffdfff
 8006e8c:	ffefffff 	.word	0xffefffff
 8006e90:	ff9fffff 	.word	0xff9fffff
 8006e94:	fff7ffff 	.word	0xfff7ffff

08006e98 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006e98:	b580      	push	{r7, lr}
 8006e9a:	b092      	sub	sp, #72	; 0x48
 8006e9c:	af02      	add	r7, sp, #8
 8006e9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	2284      	movs	r2, #132	; 0x84
 8006ea4:	2100      	movs	r1, #0
 8006ea6:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006ea8:	f7fc fec0 	bl	8003c2c <HAL_GetTick>
 8006eac:	0003      	movs	r3, r0
 8006eae:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	681b      	ldr	r3, [r3, #0]
 8006eb4:	681b      	ldr	r3, [r3, #0]
 8006eb6:	2208      	movs	r2, #8
 8006eb8:	4013      	ands	r3, r2
 8006eba:	2b08      	cmp	r3, #8
 8006ebc:	d12c      	bne.n	8006f18 <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006ebe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006ec0:	2280      	movs	r2, #128	; 0x80
 8006ec2:	0391      	lsls	r1, r2, #14
 8006ec4:	6878      	ldr	r0, [r7, #4]
 8006ec6:	4a46      	ldr	r2, [pc, #280]	; (8006fe0 <UART_CheckIdleState+0x148>)
 8006ec8:	9200      	str	r2, [sp, #0]
 8006eca:	2200      	movs	r2, #0
 8006ecc:	f000 f88c 	bl	8006fe8 <UART_WaitOnFlagUntilTimeout>
 8006ed0:	1e03      	subs	r3, r0, #0
 8006ed2:	d021      	beq.n	8006f18 <UART_CheckIdleState+0x80>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006ed4:	f3ef 8310 	mrs	r3, PRIMASK
 8006ed8:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8006eda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8006edc:	63bb      	str	r3, [r7, #56]	; 0x38
 8006ede:	2301      	movs	r3, #1
 8006ee0:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006ee2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ee4:	f383 8810 	msr	PRIMASK, r3
}
 8006ee8:	46c0      	nop			; (mov r8, r8)
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	681b      	ldr	r3, [r3, #0]
 8006eee:	681a      	ldr	r2, [r3, #0]
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	681b      	ldr	r3, [r3, #0]
 8006ef4:	2180      	movs	r1, #128	; 0x80
 8006ef6:	438a      	bics	r2, r1
 8006ef8:	601a      	str	r2, [r3, #0]
 8006efa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006efc:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006efe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f00:	f383 8810 	msr	PRIMASK, r3
}
 8006f04:	46c0      	nop			; (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	2220      	movs	r2, #32
 8006f0a:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	2278      	movs	r2, #120	; 0x78
 8006f10:	2100      	movs	r1, #0
 8006f12:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006f14:	2303      	movs	r3, #3
 8006f16:	e05f      	b.n	8006fd8 <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	681b      	ldr	r3, [r3, #0]
 8006f1c:	681b      	ldr	r3, [r3, #0]
 8006f1e:	2204      	movs	r2, #4
 8006f20:	4013      	ands	r3, r2
 8006f22:	2b04      	cmp	r3, #4
 8006f24:	d146      	bne.n	8006fb4 <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006f26:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006f28:	2280      	movs	r2, #128	; 0x80
 8006f2a:	03d1      	lsls	r1, r2, #15
 8006f2c:	6878      	ldr	r0, [r7, #4]
 8006f2e:	4a2c      	ldr	r2, [pc, #176]	; (8006fe0 <UART_CheckIdleState+0x148>)
 8006f30:	9200      	str	r2, [sp, #0]
 8006f32:	2200      	movs	r2, #0
 8006f34:	f000 f858 	bl	8006fe8 <UART_WaitOnFlagUntilTimeout>
 8006f38:	1e03      	subs	r3, r0, #0
 8006f3a:	d03b      	beq.n	8006fb4 <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006f3c:	f3ef 8310 	mrs	r3, PRIMASK
 8006f40:	60fb      	str	r3, [r7, #12]
  return(result);
 8006f42:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006f44:	637b      	str	r3, [r7, #52]	; 0x34
 8006f46:	2301      	movs	r3, #1
 8006f48:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006f4a:	693b      	ldr	r3, [r7, #16]
 8006f4c:	f383 8810 	msr	PRIMASK, r3
}
 8006f50:	46c0      	nop			; (mov r8, r8)
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	681b      	ldr	r3, [r3, #0]
 8006f56:	681a      	ldr	r2, [r3, #0]
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	681b      	ldr	r3, [r3, #0]
 8006f5c:	4921      	ldr	r1, [pc, #132]	; (8006fe4 <UART_CheckIdleState+0x14c>)
 8006f5e:	400a      	ands	r2, r1
 8006f60:	601a      	str	r2, [r3, #0]
 8006f62:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006f64:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006f66:	697b      	ldr	r3, [r7, #20]
 8006f68:	f383 8810 	msr	PRIMASK, r3
}
 8006f6c:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006f6e:	f3ef 8310 	mrs	r3, PRIMASK
 8006f72:	61bb      	str	r3, [r7, #24]
  return(result);
 8006f74:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006f76:	633b      	str	r3, [r7, #48]	; 0x30
 8006f78:	2301      	movs	r3, #1
 8006f7a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006f7c:	69fb      	ldr	r3, [r7, #28]
 8006f7e:	f383 8810 	msr	PRIMASK, r3
}
 8006f82:	46c0      	nop			; (mov r8, r8)
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	681b      	ldr	r3, [r3, #0]
 8006f88:	689a      	ldr	r2, [r3, #8]
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	681b      	ldr	r3, [r3, #0]
 8006f8e:	2101      	movs	r1, #1
 8006f90:	438a      	bics	r2, r1
 8006f92:	609a      	str	r2, [r3, #8]
 8006f94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f96:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006f98:	6a3b      	ldr	r3, [r7, #32]
 8006f9a:	f383 8810 	msr	PRIMASK, r3
}
 8006f9e:	46c0      	nop			; (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	2280      	movs	r2, #128	; 0x80
 8006fa4:	2120      	movs	r1, #32
 8006fa6:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	2278      	movs	r2, #120	; 0x78
 8006fac:	2100      	movs	r1, #0
 8006fae:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006fb0:	2303      	movs	r3, #3
 8006fb2:	e011      	b.n	8006fd8 <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	2220      	movs	r2, #32
 8006fb8:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	2280      	movs	r2, #128	; 0x80
 8006fbe:	2120      	movs	r1, #32
 8006fc0:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	2200      	movs	r2, #0
 8006fc6:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	2200      	movs	r2, #0
 8006fcc:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	2278      	movs	r2, #120	; 0x78
 8006fd2:	2100      	movs	r1, #0
 8006fd4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006fd6:	2300      	movs	r3, #0
}
 8006fd8:	0018      	movs	r0, r3
 8006fda:	46bd      	mov	sp, r7
 8006fdc:	b010      	add	sp, #64	; 0x40
 8006fde:	bd80      	pop	{r7, pc}
 8006fe0:	01ffffff 	.word	0x01ffffff
 8006fe4:	fffffedf 	.word	0xfffffedf

08006fe8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006fe8:	b580      	push	{r7, lr}
 8006fea:	b084      	sub	sp, #16
 8006fec:	af00      	add	r7, sp, #0
 8006fee:	60f8      	str	r0, [r7, #12]
 8006ff0:	60b9      	str	r1, [r7, #8]
 8006ff2:	603b      	str	r3, [r7, #0]
 8006ff4:	1dfb      	adds	r3, r7, #7
 8006ff6:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006ff8:	e04b      	b.n	8007092 <UART_WaitOnFlagUntilTimeout+0xaa>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006ffa:	69bb      	ldr	r3, [r7, #24]
 8006ffc:	3301      	adds	r3, #1
 8006ffe:	d048      	beq.n	8007092 <UART_WaitOnFlagUntilTimeout+0xaa>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007000:	f7fc fe14 	bl	8003c2c <HAL_GetTick>
 8007004:	0002      	movs	r2, r0
 8007006:	683b      	ldr	r3, [r7, #0]
 8007008:	1ad3      	subs	r3, r2, r3
 800700a:	69ba      	ldr	r2, [r7, #24]
 800700c:	429a      	cmp	r2, r3
 800700e:	d302      	bcc.n	8007016 <UART_WaitOnFlagUntilTimeout+0x2e>
 8007010:	69bb      	ldr	r3, [r7, #24]
 8007012:	2b00      	cmp	r3, #0
 8007014:	d101      	bne.n	800701a <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 8007016:	2303      	movs	r3, #3
 8007018:	e04b      	b.n	80070b2 <UART_WaitOnFlagUntilTimeout+0xca>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800701a:	68fb      	ldr	r3, [r7, #12]
 800701c:	681b      	ldr	r3, [r3, #0]
 800701e:	681b      	ldr	r3, [r3, #0]
 8007020:	2204      	movs	r2, #4
 8007022:	4013      	ands	r3, r2
 8007024:	d035      	beq.n	8007092 <UART_WaitOnFlagUntilTimeout+0xaa>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8007026:	68fb      	ldr	r3, [r7, #12]
 8007028:	681b      	ldr	r3, [r3, #0]
 800702a:	69db      	ldr	r3, [r3, #28]
 800702c:	2208      	movs	r2, #8
 800702e:	4013      	ands	r3, r2
 8007030:	2b08      	cmp	r3, #8
 8007032:	d111      	bne.n	8007058 <UART_WaitOnFlagUntilTimeout+0x70>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007034:	68fb      	ldr	r3, [r7, #12]
 8007036:	681b      	ldr	r3, [r3, #0]
 8007038:	2208      	movs	r2, #8
 800703a:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 800703c:	68fb      	ldr	r3, [r7, #12]
 800703e:	0018      	movs	r0, r3
 8007040:	f000 f83c 	bl	80070bc <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8007044:	68fb      	ldr	r3, [r7, #12]
 8007046:	2284      	movs	r2, #132	; 0x84
 8007048:	2108      	movs	r1, #8
 800704a:	5099      	str	r1, [r3, r2]

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 800704c:	68fb      	ldr	r3, [r7, #12]
 800704e:	2278      	movs	r2, #120	; 0x78
 8007050:	2100      	movs	r1, #0
 8007052:	5499      	strb	r1, [r3, r2]

           return HAL_ERROR;
 8007054:	2301      	movs	r3, #1
 8007056:	e02c      	b.n	80070b2 <UART_WaitOnFlagUntilTimeout+0xca>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007058:	68fb      	ldr	r3, [r7, #12]
 800705a:	681b      	ldr	r3, [r3, #0]
 800705c:	69da      	ldr	r2, [r3, #28]
 800705e:	2380      	movs	r3, #128	; 0x80
 8007060:	011b      	lsls	r3, r3, #4
 8007062:	401a      	ands	r2, r3
 8007064:	2380      	movs	r3, #128	; 0x80
 8007066:	011b      	lsls	r3, r3, #4
 8007068:	429a      	cmp	r2, r3
 800706a:	d112      	bne.n	8007092 <UART_WaitOnFlagUntilTimeout+0xaa>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800706c:	68fb      	ldr	r3, [r7, #12]
 800706e:	681b      	ldr	r3, [r3, #0]
 8007070:	2280      	movs	r2, #128	; 0x80
 8007072:	0112      	lsls	r2, r2, #4
 8007074:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007076:	68fb      	ldr	r3, [r7, #12]
 8007078:	0018      	movs	r0, r3
 800707a:	f000 f81f 	bl	80070bc <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800707e:	68fb      	ldr	r3, [r7, #12]
 8007080:	2284      	movs	r2, #132	; 0x84
 8007082:	2120      	movs	r1, #32
 8007084:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007086:	68fb      	ldr	r3, [r7, #12]
 8007088:	2278      	movs	r2, #120	; 0x78
 800708a:	2100      	movs	r1, #0
 800708c:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 800708e:	2303      	movs	r3, #3
 8007090:	e00f      	b.n	80070b2 <UART_WaitOnFlagUntilTimeout+0xca>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007092:	68fb      	ldr	r3, [r7, #12]
 8007094:	681b      	ldr	r3, [r3, #0]
 8007096:	69db      	ldr	r3, [r3, #28]
 8007098:	68ba      	ldr	r2, [r7, #8]
 800709a:	4013      	ands	r3, r2
 800709c:	68ba      	ldr	r2, [r7, #8]
 800709e:	1ad3      	subs	r3, r2, r3
 80070a0:	425a      	negs	r2, r3
 80070a2:	4153      	adcs	r3, r2
 80070a4:	b2db      	uxtb	r3, r3
 80070a6:	001a      	movs	r2, r3
 80070a8:	1dfb      	adds	r3, r7, #7
 80070aa:	781b      	ldrb	r3, [r3, #0]
 80070ac:	429a      	cmp	r2, r3
 80070ae:	d0a4      	beq.n	8006ffa <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80070b0:	2300      	movs	r3, #0
}
 80070b2:	0018      	movs	r0, r3
 80070b4:	46bd      	mov	sp, r7
 80070b6:	b004      	add	sp, #16
 80070b8:	bd80      	pop	{r7, pc}
	...

080070bc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80070bc:	b580      	push	{r7, lr}
 80070be:	b08e      	sub	sp, #56	; 0x38
 80070c0:	af00      	add	r7, sp, #0
 80070c2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80070c4:	f3ef 8310 	mrs	r3, PRIMASK
 80070c8:	617b      	str	r3, [r7, #20]
  return(result);
 80070ca:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80070cc:	637b      	str	r3, [r7, #52]	; 0x34
 80070ce:	2301      	movs	r3, #1
 80070d0:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80070d2:	69bb      	ldr	r3, [r7, #24]
 80070d4:	f383 8810 	msr	PRIMASK, r3
}
 80070d8:	46c0      	nop			; (mov r8, r8)
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	681b      	ldr	r3, [r3, #0]
 80070de:	681a      	ldr	r2, [r3, #0]
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	681b      	ldr	r3, [r3, #0]
 80070e4:	4926      	ldr	r1, [pc, #152]	; (8007180 <UART_EndRxTransfer+0xc4>)
 80070e6:	400a      	ands	r2, r1
 80070e8:	601a      	str	r2, [r3, #0]
 80070ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80070ec:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80070ee:	69fb      	ldr	r3, [r7, #28]
 80070f0:	f383 8810 	msr	PRIMASK, r3
}
 80070f4:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80070f6:	f3ef 8310 	mrs	r3, PRIMASK
 80070fa:	623b      	str	r3, [r7, #32]
  return(result);
 80070fc:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80070fe:	633b      	str	r3, [r7, #48]	; 0x30
 8007100:	2301      	movs	r3, #1
 8007102:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007104:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007106:	f383 8810 	msr	PRIMASK, r3
}
 800710a:	46c0      	nop			; (mov r8, r8)
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	681b      	ldr	r3, [r3, #0]
 8007110:	689a      	ldr	r2, [r3, #8]
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	681b      	ldr	r3, [r3, #0]
 8007116:	2101      	movs	r1, #1
 8007118:	438a      	bics	r2, r1
 800711a:	609a      	str	r2, [r3, #8]
 800711c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800711e:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007120:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007122:	f383 8810 	msr	PRIMASK, r3
}
 8007126:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800712c:	2b01      	cmp	r3, #1
 800712e:	d118      	bne.n	8007162 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007130:	f3ef 8310 	mrs	r3, PRIMASK
 8007134:	60bb      	str	r3, [r7, #8]
  return(result);
 8007136:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007138:	62fb      	str	r3, [r7, #44]	; 0x2c
 800713a:	2301      	movs	r3, #1
 800713c:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800713e:	68fb      	ldr	r3, [r7, #12]
 8007140:	f383 8810 	msr	PRIMASK, r3
}
 8007144:	46c0      	nop			; (mov r8, r8)
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	681b      	ldr	r3, [r3, #0]
 800714a:	681a      	ldr	r2, [r3, #0]
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	681b      	ldr	r3, [r3, #0]
 8007150:	2110      	movs	r1, #16
 8007152:	438a      	bics	r2, r1
 8007154:	601a      	str	r2, [r3, #0]
 8007156:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007158:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800715a:	693b      	ldr	r3, [r7, #16]
 800715c:	f383 8810 	msr	PRIMASK, r3
}
 8007160:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	2280      	movs	r2, #128	; 0x80
 8007166:	2120      	movs	r1, #32
 8007168:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	2200      	movs	r2, #0
 800716e:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	2200      	movs	r2, #0
 8007174:	669a      	str	r2, [r3, #104]	; 0x68
}
 8007176:	46c0      	nop			; (mov r8, r8)
 8007178:	46bd      	mov	sp, r7
 800717a:	b00e      	add	sp, #56	; 0x38
 800717c:	bd80      	pop	{r7, pc}
 800717e:	46c0      	nop			; (mov r8, r8)
 8007180:	fffffedf 	.word	0xfffffedf

08007184 <nRF24_CSN_Select>:

//#define Debug


void nRF24_CSN_Select(uint16_t Sel_CSN_Pin)
{
 8007184:	b580      	push	{r7, lr}
 8007186:	b082      	sub	sp, #8
 8007188:	af00      	add	r7, sp, #0
 800718a:	0002      	movs	r2, r0
 800718c:	1dbb      	adds	r3, r7, #6
 800718e:	801a      	strh	r2, [r3, #0]
	switch (Sel_CSN_Pin)
 8007190:	1dbb      	adds	r3, r7, #6
 8007192:	881b      	ldrh	r3, [r3, #0]
 8007194:	2b08      	cmp	r3, #8
 8007196:	d107      	bne.n	80071a8 <nRF24_CSN_Select+0x24>
	{
		case nRF_CSN_Pin:
			HAL_GPIO_WritePin(GPIOA, nRF_CSN_Pin, GPIO_PIN_RESET);
 8007198:	23a0      	movs	r3, #160	; 0xa0
 800719a:	05db      	lsls	r3, r3, #23
 800719c:	2200      	movs	r2, #0
 800719e:	2108      	movs	r1, #8
 80071a0:	0018      	movs	r0, r3
 80071a2:	f7fd fbda 	bl	800495a <HAL_GPIO_WritePin>
			break;
 80071a6:	e000      	b.n	80071aa <nRF24_CSN_Select+0x26>
		default:
			break;
 80071a8:	46c0      	nop			; (mov r8, r8)
	}
}
 80071aa:	46c0      	nop			; (mov r8, r8)
 80071ac:	46bd      	mov	sp, r7
 80071ae:	b002      	add	sp, #8
 80071b0:	bd80      	pop	{r7, pc}

080071b2 <nRF24_CSN_UnSelect>:

void nRF24_CSN_UnSelect(uint16_t Sel_CSN_Pin)
{
 80071b2:	b580      	push	{r7, lr}
 80071b4:	b082      	sub	sp, #8
 80071b6:	af00      	add	r7, sp, #0
 80071b8:	0002      	movs	r2, r0
 80071ba:	1dbb      	adds	r3, r7, #6
 80071bc:	801a      	strh	r2, [r3, #0]
	switch (Sel_CSN_Pin)
 80071be:	1dbb      	adds	r3, r7, #6
 80071c0:	881b      	ldrh	r3, [r3, #0]
 80071c2:	2b08      	cmp	r3, #8
 80071c4:	d107      	bne.n	80071d6 <nRF24_CSN_UnSelect+0x24>
	{
		case nRF_CSN_Pin:
			HAL_GPIO_WritePin(GPIOA, nRF_CSN_Pin, GPIO_PIN_SET);
 80071c6:	23a0      	movs	r3, #160	; 0xa0
 80071c8:	05db      	lsls	r3, r3, #23
 80071ca:	2201      	movs	r2, #1
 80071cc:	2108      	movs	r1, #8
 80071ce:	0018      	movs	r0, r3
 80071d0:	f7fd fbc3 	bl	800495a <HAL_GPIO_WritePin>
			break;
 80071d4:	e000      	b.n	80071d8 <nRF24_CSN_UnSelect+0x26>
		default:
			break;
 80071d6:	46c0      	nop			; (mov r8, r8)
	}
}
 80071d8:	46c0      	nop			; (mov r8, r8)
 80071da:	46bd      	mov	sp, r7
 80071dc:	b002      	add	sp, #8
 80071de:	bd80      	pop	{r7, pc}

080071e0 <nRF24_CE_Enable>:

void nRF24_CE_Enable(uint16_t Sel_CE_Pin)
{
 80071e0:	b580      	push	{r7, lr}
 80071e2:	b082      	sub	sp, #8
 80071e4:	af00      	add	r7, sp, #0
 80071e6:	0002      	movs	r2, r0
 80071e8:	1dbb      	adds	r3, r7, #6
 80071ea:	801a      	strh	r2, [r3, #0]
	switch (Sel_CE_Pin)
 80071ec:	1dbb      	adds	r3, r7, #6
 80071ee:	881b      	ldrh	r3, [r3, #0]
 80071f0:	2b04      	cmp	r3, #4
 80071f2:	d106      	bne.n	8007202 <nRF24_CE_Enable+0x22>
	{
		case nRF_CE_Pin:
			HAL_GPIO_WritePin(nRF_CE_GPIO_Port, nRF_CE_Pin, GPIO_PIN_SET);
 80071f4:	4b05      	ldr	r3, [pc, #20]	; (800720c <nRF24_CE_Enable+0x2c>)
 80071f6:	2201      	movs	r2, #1
 80071f8:	2104      	movs	r1, #4
 80071fa:	0018      	movs	r0, r3
 80071fc:	f7fd fbad 	bl	800495a <HAL_GPIO_WritePin>
			break;
 8007200:	e000      	b.n	8007204 <nRF24_CE_Enable+0x24>
		default:
			break;
 8007202:	46c0      	nop			; (mov r8, r8)
	}
}
 8007204:	46c0      	nop			; (mov r8, r8)
 8007206:	46bd      	mov	sp, r7
 8007208:	b002      	add	sp, #8
 800720a:	bd80      	pop	{r7, pc}
 800720c:	50000400 	.word	0x50000400

08007210 <nRF24_CE_Disable>:

void nRF24_CE_Disable(uint16_t Sel_CE_Pin)
{
 8007210:	b580      	push	{r7, lr}
 8007212:	b082      	sub	sp, #8
 8007214:	af00      	add	r7, sp, #0
 8007216:	0002      	movs	r2, r0
 8007218:	1dbb      	adds	r3, r7, #6
 800721a:	801a      	strh	r2, [r3, #0]
	switch (Sel_CE_Pin)
 800721c:	1dbb      	adds	r3, r7, #6
 800721e:	881b      	ldrh	r3, [r3, #0]
 8007220:	2b04      	cmp	r3, #4
 8007222:	d106      	bne.n	8007232 <nRF24_CE_Disable+0x22>
	{
		case nRF_CE_Pin:
			HAL_GPIO_WritePin(nRF_CE_GPIO_Port, nRF_CE_Pin, GPIO_PIN_RESET);
 8007224:	4b05      	ldr	r3, [pc, #20]	; (800723c <nRF24_CE_Disable+0x2c>)
 8007226:	2200      	movs	r2, #0
 8007228:	2104      	movs	r1, #4
 800722a:	0018      	movs	r0, r3
 800722c:	f7fd fb95 	bl	800495a <HAL_GPIO_WritePin>
			break;
 8007230:	e000      	b.n	8007234 <nRF24_CE_Disable+0x24>
		default:
			break;
 8007232:	46c0      	nop			; (mov r8, r8)
	}
}
 8007234:	46c0      	nop			; (mov r8, r8)
 8007236:	46bd      	mov	sp, r7
 8007238:	b002      	add	sp, #8
 800723a:	bd80      	pop	{r7, pc}
 800723c:	50000400 	.word	0x50000400

08007240 <nRF24_WriteReg>:
// input:
//   Sel_CSN_Pin - Select the RF Module
//   reg - number of register to write
//   data - value to write
void nRF24_WriteReg(uint16_t Sel_CSN_Pin, uint8_t reg, uint8_t data)
{
 8007240:	b590      	push	{r4, r7, lr}
 8007242:	b085      	sub	sp, #20
 8007244:	af00      	add	r7, sp, #0
 8007246:	0004      	movs	r4, r0
 8007248:	0008      	movs	r0, r1
 800724a:	0011      	movs	r1, r2
 800724c:	1dbb      	adds	r3, r7, #6
 800724e:	1c22      	adds	r2, r4, #0
 8007250:	801a      	strh	r2, [r3, #0]
 8007252:	1d7b      	adds	r3, r7, #5
 8007254:	1c02      	adds	r2, r0, #0
 8007256:	701a      	strb	r2, [r3, #0]
 8007258:	1d3b      	adds	r3, r7, #4
 800725a:	1c0a      	adds	r2, r1, #0
 800725c:	701a      	strb	r2, [r3, #0]
	uint8_t buf[2];
	buf[0] = reg | 1<<5;                                       //Set the 6th bit of the reg to make it a write command
 800725e:	1d7b      	adds	r3, r7, #5
 8007260:	781b      	ldrb	r3, [r3, #0]
 8007262:	2220      	movs	r2, #32
 8007264:	4313      	orrs	r3, r2
 8007266:	b2da      	uxtb	r2, r3
 8007268:	240c      	movs	r4, #12
 800726a:	193b      	adds	r3, r7, r4
 800726c:	701a      	strb	r2, [r3, #0]
	buf[1] = data;
 800726e:	193b      	adds	r3, r7, r4
 8007270:	1d3a      	adds	r2, r7, #4
 8007272:	7812      	ldrb	r2, [r2, #0]
 8007274:	705a      	strb	r2, [r3, #1]

	switch(Sel_CSN_Pin)
 8007276:	1dbb      	adds	r3, r7, #6
 8007278:	881b      	ldrh	r3, [r3, #0]
 800727a:	2b08      	cmp	r3, #8
 800727c:	d10d      	bne.n	800729a <nRF24_WriteReg+0x5a>
	{
	case nRF_CSN_Pin:
		nRF24_CSN_Select(nRF_CSN_Pin);                         //Pull CSN pin low to select the nRF24 on SPI BUS
 800727e:	2008      	movs	r0, #8
 8007280:	f7ff ff80 	bl	8007184 <nRF24_CSN_Select>
		HAL_SPI_Transmit(&hspi1, buf, 2, 1000);                //Write command and register address (001AAAAA) and then the data to be written
 8007284:	23fa      	movs	r3, #250	; 0xfa
 8007286:	009b      	lsls	r3, r3, #2
 8007288:	1939      	adds	r1, r7, r4
 800728a:	4806      	ldr	r0, [pc, #24]	; (80072a4 <nRF24_WriteReg+0x64>)
 800728c:	2202      	movs	r2, #2
 800728e:	f7fe fb55 	bl	800593c <HAL_SPI_Transmit>
		nRF24_CSN_UnSelect(nRF_CSN_Pin);                       //Pull CSN pin high to unselect the nRF24 on SPI BUS
 8007292:	2008      	movs	r0, #8
 8007294:	f7ff ff8d 	bl	80071b2 <nRF24_CSN_UnSelect>
		break;
 8007298:	e000      	b.n	800729c <nRF24_WriteReg+0x5c>
	default:
		break;
 800729a:	46c0      	nop			; (mov r8, r8)
	}
}
 800729c:	46c0      	nop			; (mov r8, r8)
 800729e:	46bd      	mov	sp, r7
 80072a0:	b005      	add	sp, #20
 80072a2:	bd90      	pop	{r4, r7, pc}
 80072a4:	200002f0 	.word	0x200002f0

080072a8 <nRF24_WriteMBReg>:
//   Sel_CSN_Pin - Select the RF Module
//   reg - number of register to write
//   data - pointer to the buffer with data to write
//   size - number of bytes to write
void nRF24_WriteMBReg(uint16_t Sel_CSN_Pin, uint8_t reg, uint8_t *data, uint8_t size)
{
 80072a8:	b590      	push	{r4, r7, lr}
 80072aa:	b085      	sub	sp, #20
 80072ac:	af00      	add	r7, sp, #0
 80072ae:	0004      	movs	r4, r0
 80072b0:	0008      	movs	r0, r1
 80072b2:	603a      	str	r2, [r7, #0]
 80072b4:	0019      	movs	r1, r3
 80072b6:	1dbb      	adds	r3, r7, #6
 80072b8:	1c22      	adds	r2, r4, #0
 80072ba:	801a      	strh	r2, [r3, #0]
 80072bc:	1d7b      	adds	r3, r7, #5
 80072be:	1c02      	adds	r2, r0, #0
 80072c0:	701a      	strb	r2, [r3, #0]
 80072c2:	1d3b      	adds	r3, r7, #4
 80072c4:	1c0a      	adds	r2, r1, #0
 80072c6:	701a      	strb	r2, [r3, #0]
	uint8_t buf[2];
	buf[0] = reg | 1<<5;                                       //Set the 6th bit of the reg to make it a write command
 80072c8:	1d7b      	adds	r3, r7, #5
 80072ca:	781b      	ldrb	r3, [r3, #0]
 80072cc:	2220      	movs	r2, #32
 80072ce:	4313      	orrs	r3, r2
 80072d0:	b2da      	uxtb	r2, r3
 80072d2:	240c      	movs	r4, #12
 80072d4:	193b      	adds	r3, r7, r4
 80072d6:	701a      	strb	r2, [r3, #0]
//	buf[1] = data;

	switch(Sel_CSN_Pin)
 80072d8:	1dbb      	adds	r3, r7, #6
 80072da:	881b      	ldrh	r3, [r3, #0]
 80072dc:	2b08      	cmp	r3, #8
 80072de:	d116      	bne.n	800730e <nRF24_WriteMBReg+0x66>
	{
	case nRF_CSN_Pin:
		nRF24_CSN_Select(nRF_CSN_Pin);                         //Pull CSN pin low to select the nRF24 on SPI BUS
 80072e0:	2008      	movs	r0, #8
 80072e2:	f7ff ff4f 	bl	8007184 <nRF24_CSN_Select>
		HAL_SPI_Transmit(&hspi1, buf, 1, 1000);                //Write command and register address (001AAAAA)
 80072e6:	23fa      	movs	r3, #250	; 0xfa
 80072e8:	009b      	lsls	r3, r3, #2
 80072ea:	1939      	adds	r1, r7, r4
 80072ec:	480a      	ldr	r0, [pc, #40]	; (8007318 <nRF24_WriteMBReg+0x70>)
 80072ee:	2201      	movs	r2, #1
 80072f0:	f7fe fb24 	bl	800593c <HAL_SPI_Transmit>
		HAL_SPI_Transmit(&hspi1, data, size, 1000);            //Send the data to be written in that address
 80072f4:	1d3b      	adds	r3, r7, #4
 80072f6:	781b      	ldrb	r3, [r3, #0]
 80072f8:	b29a      	uxth	r2, r3
 80072fa:	23fa      	movs	r3, #250	; 0xfa
 80072fc:	009b      	lsls	r3, r3, #2
 80072fe:	6839      	ldr	r1, [r7, #0]
 8007300:	4805      	ldr	r0, [pc, #20]	; (8007318 <nRF24_WriteMBReg+0x70>)
 8007302:	f7fe fb1b 	bl	800593c <HAL_SPI_Transmit>
		nRF24_CSN_UnSelect(nRF_CSN_Pin);                       //Pull CSN pin high to unselect the nRF24 on SPI BUS
 8007306:	2008      	movs	r0, #8
 8007308:	f7ff ff53 	bl	80071b2 <nRF24_CSN_UnSelect>
		break;
 800730c:	e000      	b.n	8007310 <nRF24_WriteMBReg+0x68>
	default:
		break;
 800730e:	46c0      	nop			; (mov r8, r8)
	}
}
 8007310:	46c0      	nop			; (mov r8, r8)
 8007312:	46bd      	mov	sp, r7
 8007314:	b005      	add	sp, #20
 8007316:	bd90      	pop	{r4, r7, pc}
 8007318:	200002f0 	.word	0x200002f0

0800731c <nRF24_ReadReg>:
// Reads a value of register
// input:
//   Sel_CSN_Pin - Select the RF Module
//   reg - number of register to read
// return: value of register
uint8_t nRF24_ReadReg(uint16_t Sel_CSN_Pin, uint8_t reg) {
 800731c:	b590      	push	{r4, r7, lr}
 800731e:	b085      	sub	sp, #20
 8007320:	af00      	add	r7, sp, #0
 8007322:	0002      	movs	r2, r0
 8007324:	1dbb      	adds	r3, r7, #6
 8007326:	801a      	strh	r2, [r3, #0]
 8007328:	1d7b      	adds	r3, r7, #5
 800732a:	1c0a      	adds	r2, r1, #0
 800732c:	701a      	strb	r2, [r3, #0]

	uint8_t data = 0;
 800732e:	240f      	movs	r4, #15
 8007330:	193b      	adds	r3, r7, r4
 8007332:	2200      	movs	r2, #0
 8007334:	701a      	strb	r2, [r3, #0]

	switch(Sel_CSN_Pin)
 8007336:	1dbb      	adds	r3, r7, #6
 8007338:	881b      	ldrh	r3, [r3, #0]
 800733a:	2b08      	cmp	r3, #8
 800733c:	d114      	bne.n	8007368 <nRF24_ReadReg+0x4c>
	{
	case nRF_CSN_Pin:
		nRF24_CSN_Select(nRF_CSN_Pin);                       //Pull CSN pin low to select the nRF24 on SPI BUS
 800733e:	2008      	movs	r0, #8
 8007340:	f7ff ff20 	bl	8007184 <nRF24_CSN_Select>
		HAL_SPI_Transmit(&hspi1, &reg, 1, 1000);               //Sending the read command and register address (000AAAAA)
 8007344:	23fa      	movs	r3, #250	; 0xfa
 8007346:	009b      	lsls	r3, r3, #2
 8007348:	1d79      	adds	r1, r7, #5
 800734a:	480b      	ldr	r0, [pc, #44]	; (8007378 <nRF24_ReadReg+0x5c>)
 800734c:	2201      	movs	r2, #1
 800734e:	f7fe faf5 	bl	800593c <HAL_SPI_Transmit>
		HAL_SPI_Receive(&hspi1, &data, 1, 1000);               //Reading the one byte received
 8007352:	23fa      	movs	r3, #250	; 0xfa
 8007354:	009b      	lsls	r3, r3, #2
 8007356:	1939      	adds	r1, r7, r4
 8007358:	4807      	ldr	r0, [pc, #28]	; (8007378 <nRF24_ReadReg+0x5c>)
 800735a:	2201      	movs	r2, #1
 800735c:	f7fe fc4c 	bl	8005bf8 <HAL_SPI_Receive>
		nRF24_CSN_UnSelect(nRF_CSN_Pin);                       //Pull CSN pin high to unselect the nRF24 on SPI BUS
 8007360:	2008      	movs	r0, #8
 8007362:	f7ff ff26 	bl	80071b2 <nRF24_CSN_UnSelect>
		break;
 8007366:	e000      	b.n	800736a <nRF24_ReadReg+0x4e>
	default:
        break;
 8007368:	46c0      	nop			; (mov r8, r8)
	}

	return data;
 800736a:	230f      	movs	r3, #15
 800736c:	18fb      	adds	r3, r7, r3
 800736e:	781b      	ldrb	r3, [r3, #0]
}
 8007370:	0018      	movs	r0, r3
 8007372:	46bd      	mov	sp, r7
 8007374:	b005      	add	sp, #20
 8007376:	bd90      	pop	{r4, r7, pc}
 8007378:	200002f0 	.word	0x200002f0

0800737c <nRF24_ReadMBReg>:
// Reads multiple bytes starting from a particular register
// input:
//   reg - number of register to write
//   data - pointer to the buffer with data to write
//   size - number of bytes to write
void nRF24_ReadMBReg(uint16_t Sel_CSN_Pin, uint8_t reg, uint8_t *data, uint8_t size) {
 800737c:	b590      	push	{r4, r7, lr}
 800737e:	b083      	sub	sp, #12
 8007380:	af00      	add	r7, sp, #0
 8007382:	0004      	movs	r4, r0
 8007384:	0008      	movs	r0, r1
 8007386:	603a      	str	r2, [r7, #0]
 8007388:	0019      	movs	r1, r3
 800738a:	1dbb      	adds	r3, r7, #6
 800738c:	1c22      	adds	r2, r4, #0
 800738e:	801a      	strh	r2, [r3, #0]
 8007390:	1d7b      	adds	r3, r7, #5
 8007392:	1c02      	adds	r2, r0, #0
 8007394:	701a      	strb	r2, [r3, #0]
 8007396:	1d3b      	adds	r3, r7, #4
 8007398:	1c0a      	adds	r2, r1, #0
 800739a:	701a      	strb	r2, [r3, #0]

	switch(Sel_CSN_Pin)
 800739c:	1dbb      	adds	r3, r7, #6
 800739e:	881b      	ldrh	r3, [r3, #0]
 80073a0:	2b08      	cmp	r3, #8
 80073a2:	d116      	bne.n	80073d2 <nRF24_ReadMBReg+0x56>
	{
	case nRF_CSN_Pin:
		nRF24_CSN_Select(nRF_CSN_Pin);                      //Pull CSN pin low to select the nRF24 on SPI BUS
 80073a4:	2008      	movs	r0, #8
 80073a6:	f7ff feed 	bl	8007184 <nRF24_CSN_Select>
		HAL_SPI_Transmit(&hspi1, &reg, 1, 1000);       //Sending the read command and register address (000AAAAA)
 80073aa:	23fa      	movs	r3, #250	; 0xfa
 80073ac:	009b      	lsls	r3, r3, #2
 80073ae:	1d79      	adds	r1, r7, #5
 80073b0:	480a      	ldr	r0, [pc, #40]	; (80073dc <nRF24_ReadMBReg+0x60>)
 80073b2:	2201      	movs	r2, #1
 80073b4:	f7fe fac2 	bl	800593c <HAL_SPI_Transmit>
		HAL_SPI_Receive(&hspi1, data, size, 1000);     //Reading the received bytes
 80073b8:	1d3b      	adds	r3, r7, #4
 80073ba:	781b      	ldrb	r3, [r3, #0]
 80073bc:	b29a      	uxth	r2, r3
 80073be:	23fa      	movs	r3, #250	; 0xfa
 80073c0:	009b      	lsls	r3, r3, #2
 80073c2:	6839      	ldr	r1, [r7, #0]
 80073c4:	4805      	ldr	r0, [pc, #20]	; (80073dc <nRF24_ReadMBReg+0x60>)
 80073c6:	f7fe fc17 	bl	8005bf8 <HAL_SPI_Receive>
		nRF24_CSN_UnSelect(nRF_CSN_Pin);		              //Pull CSN pin low to select the nRF24 on SPI BUS
 80073ca:	2008      	movs	r0, #8
 80073cc:	f7ff fef1 	bl	80071b2 <nRF24_CSN_UnSelect>
		break;
 80073d0:	e000      	b.n	80073d4 <nRF24_ReadMBReg+0x58>
	default:
		break;
 80073d2:	46c0      	nop			; (mov r8, r8)
	}
}
 80073d4:	46c0      	nop			; (mov r8, r8)
 80073d6:	46bd      	mov	sp, r7
 80073d8:	b003      	add	sp, #12
 80073da:	bd90      	pop	{r4, r7, pc}
 80073dc:	200002f0 	.word	0x200002f0

080073e0 <nRF24_Reset>:
// Reset all the nRF24's registers
// input:
//   Sel_CSN_Pin - Select the RF Module
//   reg - number of register to write
void nRF24_Reset(uint16_t Sel_CSN_Pin, uint8_t Reg)
{
 80073e0:	b580      	push	{r7, lr}
 80073e2:	b082      	sub	sp, #8
 80073e4:	af00      	add	r7, sp, #0
 80073e6:	0002      	movs	r2, r0
 80073e8:	1dbb      	adds	r3, r7, #6
 80073ea:	801a      	strh	r2, [r3, #0]
 80073ec:	1d7b      	adds	r3, r7, #5
 80073ee:	1c0a      	adds	r2, r1, #0
 80073f0:	701a      	strb	r2, [r3, #0]
	switch(Sel_CSN_Pin)
 80073f2:	1dbb      	adds	r3, r7, #6
 80073f4:	881b      	ldrh	r3, [r3, #0]
 80073f6:	2b08      	cmp	r3, #8
 80073f8:	d113      	bne.n	8007422 <nRF24_Reset+0x42>
	{
	case nRF_CSN_Pin:
		if(Reg == nRF24_REG_STATUS)
 80073fa:	1d7b      	adds	r3, r7, #5
 80073fc:	781b      	ldrb	r3, [r3, #0]
 80073fe:	2b07      	cmp	r3, #7
 8007400:	d105      	bne.n	800740e <nRF24_Reset+0x2e>
		{
			nRF24_WriteReg(nRF_CSN_Pin, nRF24_REG_STATUS, 0x70);
 8007402:	2270      	movs	r2, #112	; 0x70
 8007404:	2107      	movs	r1, #7
 8007406:	2008      	movs	r0, #8
 8007408:	f7ff ff1a 	bl	8007240 <nRF24_WriteReg>
		}
		else if(Reg == nRF24_REG_FIFO_STATUS)
		{
			nRF24_WriteReg(nRF_CSN_Pin, nRF24_REG_FIFO_STATUS, 0x11);
		}
		break;
 800740c:	e00b      	b.n	8007426 <nRF24_Reset+0x46>
		else if(Reg == nRF24_REG_FIFO_STATUS)
 800740e:	1d7b      	adds	r3, r7, #5
 8007410:	781b      	ldrb	r3, [r3, #0]
 8007412:	2b17      	cmp	r3, #23
 8007414:	d107      	bne.n	8007426 <nRF24_Reset+0x46>
			nRF24_WriteReg(nRF_CSN_Pin, nRF24_REG_FIFO_STATUS, 0x11);
 8007416:	2211      	movs	r2, #17
 8007418:	2117      	movs	r1, #23
 800741a:	2008      	movs	r0, #8
 800741c:	f7ff ff10 	bl	8007240 <nRF24_WriteReg>
		break;
 8007420:	e001      	b.n	8007426 <nRF24_Reset+0x46>
	default:
		break;
 8007422:	46c0      	nop			; (mov r8, r8)
 8007424:	e000      	b.n	8007428 <nRF24_Reset+0x48>
		break;
 8007426:	46c0      	nop			; (mov r8, r8)
	}
}
 8007428:	46c0      	nop			; (mov r8, r8)
 800742a:	46bd      	mov	sp, r7
 800742c:	b002      	add	sp, #8
 800742e:	bd80      	pop	{r7, pc}

08007430 <nRF24_Module_Setup>:

void nRF24_Module_Setup(uint16_t Sel_CSN_Pin, uint8_t mode, uint8_t RF_Ch, uint8_t *Tx_Addr, uint8_t *Rx_Addr, uint8_t RF_Setup, uint8_t Payloadsize)
{
 8007430:	b590      	push	{r4, r7, lr}
 8007432:	b089      	sub	sp, #36	; 0x24
 8007434:	af00      	add	r7, sp, #0
 8007436:	0004      	movs	r4, r0
 8007438:	0008      	movs	r0, r1
 800743a:	0011      	movs	r1, r2
 800743c:	603b      	str	r3, [r7, #0]
 800743e:	1dbb      	adds	r3, r7, #6
 8007440:	1c22      	adds	r2, r4, #0
 8007442:	801a      	strh	r2, [r3, #0]
 8007444:	1d7b      	adds	r3, r7, #5
 8007446:	1c02      	adds	r2, r0, #0
 8007448:	701a      	strb	r2, [r3, #0]
 800744a:	1d3b      	adds	r3, r7, #4
 800744c:	1c0a      	adds	r2, r1, #0
 800744e:	701a      	strb	r2, [r3, #0]
	Pipe3_Addr = Cat_Mod_Pipe[0][0][3];
	Pipe4_Addr = Cat_Mod_Pipe[0][0][4];
	Pipe5_Addr = Cat_Mod_Pipe[0][0][5];*/

	uint8_t rx_addr_p0[5],rx_addr_p1[5],rx_addr_p2,rx_addr_p3,rx_addr_p4,rx_addr_p5;
	rx_addr_p0[0] = *Rx_Addr;
 8007450:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007452:	781a      	ldrb	r2, [r3, #0]
 8007454:	2114      	movs	r1, #20
 8007456:	187b      	adds	r3, r7, r1
 8007458:	701a      	strb	r2, [r3, #0]
	rx_addr_p0[1] = *(Rx_Addr+1);
 800745a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800745c:	785a      	ldrb	r2, [r3, #1]
 800745e:	187b      	adds	r3, r7, r1
 8007460:	705a      	strb	r2, [r3, #1]
	rx_addr_p0[2] = *(Rx_Addr+2);
 8007462:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007464:	789a      	ldrb	r2, [r3, #2]
 8007466:	187b      	adds	r3, r7, r1
 8007468:	709a      	strb	r2, [r3, #2]
	rx_addr_p0[3] = *(Rx_Addr+3);
 800746a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800746c:	78da      	ldrb	r2, [r3, #3]
 800746e:	187b      	adds	r3, r7, r1
 8007470:	70da      	strb	r2, [r3, #3]
	rx_addr_p0[4] = *(Rx_Addr+4);
 8007472:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007474:	791a      	ldrb	r2, [r3, #4]
 8007476:	187b      	adds	r3, r7, r1
 8007478:	711a      	strb	r2, [r3, #4]
	rx_addr_p1[0] = (*Rx_Addr)+1;
 800747a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800747c:	781b      	ldrb	r3, [r3, #0]
 800747e:	3301      	adds	r3, #1
 8007480:	b2da      	uxtb	r2, r3
 8007482:	210c      	movs	r1, #12
 8007484:	187b      	adds	r3, r7, r1
 8007486:	701a      	strb	r2, [r3, #0]
	rx_addr_p1[1] = *(Rx_Addr+1);
 8007488:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800748a:	785a      	ldrb	r2, [r3, #1]
 800748c:	187b      	adds	r3, r7, r1
 800748e:	705a      	strb	r2, [r3, #1]
	rx_addr_p1[2] = *(Rx_Addr+2);
 8007490:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007492:	789a      	ldrb	r2, [r3, #2]
 8007494:	187b      	adds	r3, r7, r1
 8007496:	709a      	strb	r2, [r3, #2]
	rx_addr_p1[3] = *(Rx_Addr+3);
 8007498:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800749a:	78da      	ldrb	r2, [r3, #3]
 800749c:	187b      	adds	r3, r7, r1
 800749e:	70da      	strb	r2, [r3, #3]
	rx_addr_p1[4] = *(Rx_Addr+4);
 80074a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074a2:	791a      	ldrb	r2, [r3, #4]
 80074a4:	187b      	adds	r3, r7, r1
 80074a6:	711a      	strb	r2, [r3, #4]
	rx_addr_p2 = rx_addr_p1[0]+1;
 80074a8:	187b      	adds	r3, r7, r1
 80074aa:	781a      	ldrb	r2, [r3, #0]
 80074ac:	211f      	movs	r1, #31
 80074ae:	187b      	adds	r3, r7, r1
 80074b0:	3201      	adds	r2, #1
 80074b2:	701a      	strb	r2, [r3, #0]
	rx_addr_p3 = rx_addr_p2+1;
 80074b4:	201e      	movs	r0, #30
 80074b6:	183b      	adds	r3, r7, r0
 80074b8:	187a      	adds	r2, r7, r1
 80074ba:	7812      	ldrb	r2, [r2, #0]
 80074bc:	3201      	adds	r2, #1
 80074be:	701a      	strb	r2, [r3, #0]
	rx_addr_p4 = rx_addr_p3+1;
 80074c0:	211d      	movs	r1, #29
 80074c2:	187b      	adds	r3, r7, r1
 80074c4:	183a      	adds	r2, r7, r0
 80074c6:	7812      	ldrb	r2, [r2, #0]
 80074c8:	3201      	adds	r2, #1
 80074ca:	701a      	strb	r2, [r3, #0]
	rx_addr_p5 = rx_addr_p4+1;
 80074cc:	231c      	movs	r3, #28
 80074ce:	18fb      	adds	r3, r7, r3
 80074d0:	187a      	adds	r2, r7, r1
 80074d2:	7812      	ldrb	r2, [r2, #0]
 80074d4:	3201      	adds	r2, #1
 80074d6:	701a      	strb	r2, [r3, #0]

	switch(Sel_CSN_Pin)
 80074d8:	1dbb      	adds	r3, r7, #6
 80074da:	881b      	ldrh	r3, [r3, #0]
 80074dc:	2b08      	cmp	r3, #8
 80074de:	d000      	beq.n	80074e2 <nRF24_Module_Setup+0xb2>
 80074e0:	e138      	b.n	8007754 <nRF24_Module_Setup+0x324>
	{
	case nRF_CSN_Pin:

		switch(mode)
 80074e2:	1d7b      	adds	r3, r7, #5
 80074e4:	781b      	ldrb	r3, [r3, #0]
 80074e6:	2b05      	cmp	r3, #5
 80074e8:	d864      	bhi.n	80075b4 <nRF24_Module_Setup+0x184>
 80074ea:	009a      	lsls	r2, r3, #2
 80074ec:	4b9c      	ldr	r3, [pc, #624]	; (8007760 <nRF24_Module_Setup+0x330>)
 80074ee:	18d3      	adds	r3, r2, r3
 80074f0:	681b      	ldr	r3, [r3, #0]
 80074f2:	469f      	mov	pc, r3
		{
	    case Receiver_Mode_AA:
			nRF24_WriteReg(nRF_CSN_Pin, nRF24_REG_CONFIG, 0x09);                      //PRIM_RX=1, PWR_UP=0, EN_CRC=1
 80074f4:	2209      	movs	r2, #9
 80074f6:	2100      	movs	r1, #0
 80074f8:	2008      	movs	r0, #8
 80074fa:	f7ff fea1 	bl	8007240 <nRF24_WriteReg>
			nRF24_WriteReg(nRF_CSN_Pin, nRF24_REG_EN_AA, 0x3F);                       //Enable AA for all pipes
 80074fe:	223f      	movs	r2, #63	; 0x3f
 8007500:	2101      	movs	r1, #1
 8007502:	2008      	movs	r0, #8
 8007504:	f7ff fe9c 	bl	8007240 <nRF24_WriteReg>
			nRF24_WriteReg(nRF_CSN_Pin, nRF24_REG_EN_RXADDR, 0x3F);                   //Enable RX addresses for all pipes
 8007508:	223f      	movs	r2, #63	; 0x3f
 800750a:	2102      	movs	r1, #2
 800750c:	2008      	movs	r0, #8
 800750e:	f7ff fe97 	bl	8007240 <nRF24_WriteReg>
			break;
 8007512:	e04f      	b.n	80075b4 <nRF24_Module_Setup+0x184>
	    case Receiver_Mode_noAA_CRC:
			nRF24_WriteReg(nRF_CSN_Pin, nRF24_REG_CONFIG, 0x09);                      //PRIM_RX=1, PWR_UP=0, EN_CRC=1
 8007514:	2209      	movs	r2, #9
 8007516:	2100      	movs	r1, #0
 8007518:	2008      	movs	r0, #8
 800751a:	f7ff fe91 	bl	8007240 <nRF24_WriteReg>
			nRF24_WriteReg(nRF_CSN_Pin, nRF24_REG_EN_AA, 0x00);                       //Disable AA for all pipes
 800751e:	2200      	movs	r2, #0
 8007520:	2101      	movs	r1, #1
 8007522:	2008      	movs	r0, #8
 8007524:	f7ff fe8c 	bl	8007240 <nRF24_WriteReg>
			nRF24_WriteReg(nRF_CSN_Pin, nRF24_REG_EN_RXADDR, 0x3F);                   //Enable RX addresses for all pipes
 8007528:	223f      	movs	r2, #63	; 0x3f
 800752a:	2102      	movs	r1, #2
 800752c:	2008      	movs	r0, #8
 800752e:	f7ff fe87 	bl	8007240 <nRF24_WriteReg>
			break;
 8007532:	e03f      	b.n	80075b4 <nRF24_Module_Setup+0x184>
	    case Receiver_Mode_noAA_noCRC:
			nRF24_WriteReg(nRF_CSN_Pin, nRF24_REG_CONFIG, 0x01);                      //PRIM_RX=1, PWR_UP=0, EN_CRC=0
 8007534:	2201      	movs	r2, #1
 8007536:	2100      	movs	r1, #0
 8007538:	2008      	movs	r0, #8
 800753a:	f7ff fe81 	bl	8007240 <nRF24_WriteReg>
			nRF24_WriteReg(nRF_CSN_Pin, nRF24_REG_EN_AA, 0x00);                       //Disable AA for all pipes
 800753e:	2200      	movs	r2, #0
 8007540:	2101      	movs	r1, #1
 8007542:	2008      	movs	r0, #8
 8007544:	f7ff fe7c 	bl	8007240 <nRF24_WriteReg>
			nRF24_WriteReg(nRF_CSN_Pin, nRF24_REG_EN_RXADDR, 0x3F);                   //Enable RX addresses for all pipes
 8007548:	223f      	movs	r2, #63	; 0x3f
 800754a:	2102      	movs	r1, #2
 800754c:	2008      	movs	r0, #8
 800754e:	f7ff fe77 	bl	8007240 <nRF24_WriteReg>
			break;
 8007552:	e02f      	b.n	80075b4 <nRF24_Module_Setup+0x184>
	    case Transmitter_Mode_AA:
			nRF24_WriteReg(nRF_CSN_Pin, nRF24_REG_CONFIG, 0x08);                      //PRIM_RX=0, PWR_UP=0, EN_CRC=1
 8007554:	2208      	movs	r2, #8
 8007556:	2100      	movs	r1, #0
 8007558:	2008      	movs	r0, #8
 800755a:	f7ff fe71 	bl	8007240 <nRF24_WriteReg>
			nRF24_WriteReg(nRF_CSN_Pin, nRF24_REG_EN_AA, 0x3F);                       //Enable AA for all pipes
 800755e:	223f      	movs	r2, #63	; 0x3f
 8007560:	2101      	movs	r1, #1
 8007562:	2008      	movs	r0, #8
 8007564:	f7ff fe6c 	bl	8007240 <nRF24_WriteReg>
			nRF24_WriteReg(nRF_CSN_Pin, nRF24_REG_EN_RXADDR, 0x01);                   //Enable RX addresses for pipe0
 8007568:	2201      	movs	r2, #1
 800756a:	2102      	movs	r1, #2
 800756c:	2008      	movs	r0, #8
 800756e:	f7ff fe67 	bl	8007240 <nRF24_WriteReg>
			break;
 8007572:	e01f      	b.n	80075b4 <nRF24_Module_Setup+0x184>
	    case Transmitter_Mode_noAA_CRC:
			nRF24_WriteReg(nRF_CSN_Pin, nRF24_REG_CONFIG, 0x08);                      //PRIM_RX=0, PWR_UP=0, EN_CRC=1
 8007574:	2208      	movs	r2, #8
 8007576:	2100      	movs	r1, #0
 8007578:	2008      	movs	r0, #8
 800757a:	f7ff fe61 	bl	8007240 <nRF24_WriteReg>
			nRF24_WriteReg(nRF_CSN_Pin, nRF24_REG_EN_AA, 0x00);                       //Disable AA for all pipes
 800757e:	2200      	movs	r2, #0
 8007580:	2101      	movs	r1, #1
 8007582:	2008      	movs	r0, #8
 8007584:	f7ff fe5c 	bl	8007240 <nRF24_WriteReg>
			nRF24_WriteReg(nRF_CSN_Pin, nRF24_REG_EN_RXADDR, 0x01);                   //Enable RX addresses for pipe0
 8007588:	2201      	movs	r2, #1
 800758a:	2102      	movs	r1, #2
 800758c:	2008      	movs	r0, #8
 800758e:	f7ff fe57 	bl	8007240 <nRF24_WriteReg>
			break;
 8007592:	e00f      	b.n	80075b4 <nRF24_Module_Setup+0x184>
	    case Transmitter_Mode_noAA_noCRC:
			nRF24_WriteReg(nRF_CSN_Pin, nRF24_REG_CONFIG, 0x00);                      //PRIM_RX=0, PWR_UP=0, EN_CRC=0
 8007594:	2200      	movs	r2, #0
 8007596:	2100      	movs	r1, #0
 8007598:	2008      	movs	r0, #8
 800759a:	f7ff fe51 	bl	8007240 <nRF24_WriteReg>
			nRF24_WriteReg(nRF_CSN_Pin, nRF24_REG_EN_AA, 0x00);                       //Disable AA for all pipes
 800759e:	2200      	movs	r2, #0
 80075a0:	2101      	movs	r1, #1
 80075a2:	2008      	movs	r0, #8
 80075a4:	f7ff fe4c 	bl	8007240 <nRF24_WriteReg>
			nRF24_WriteReg(nRF_CSN_Pin, nRF24_REG_EN_RXADDR, 0x01);                   //Enable RX addresses for pipe0
 80075a8:	2201      	movs	r2, #1
 80075aa:	2102      	movs	r1, #2
 80075ac:	2008      	movs	r0, #8
 80075ae:	f7ff fe47 	bl	8007240 <nRF24_WriteReg>
			break;
 80075b2:	46c0      	nop			; (mov r8, r8)
		}

		nRF24_WriteReg(nRF_CSN_Pin, nRF24_REG_SETUP_AW, 0x03);                        //5 Bytes Length Address
 80075b4:	2203      	movs	r2, #3
 80075b6:	2103      	movs	r1, #3
 80075b8:	2008      	movs	r0, #8
 80075ba:	f7ff fe41 	bl	8007240 <nRF24_WriteReg>
		nRF24_WriteReg(nRF_CSN_Pin, nRF24_REG_SETUP_RETR, 0x8A);                      //ARD=2000us, ARC=10
 80075be:	228a      	movs	r2, #138	; 0x8a
 80075c0:	2104      	movs	r1, #4
 80075c2:	2008      	movs	r0, #8
 80075c4:	f7ff fe3c 	bl	8007240 <nRF24_WriteReg>
		nRF24_WriteReg(nRF_CSN_Pin, nRF24_REG_RF_CH, RF_Ch);                          //Set the Frequency Channel to 2
 80075c8:	1d3b      	adds	r3, r7, #4
 80075ca:	781b      	ldrb	r3, [r3, #0]
 80075cc:	001a      	movs	r2, r3
 80075ce:	2105      	movs	r1, #5
 80075d0:	2008      	movs	r0, #8
 80075d2:	f7ff fe35 	bl	8007240 <nRF24_WriteReg>

		switch(RF_Setup)
 80075d6:	2334      	movs	r3, #52	; 0x34
 80075d8:	18fb      	adds	r3, r7, r3
 80075da:	781b      	ldrb	r3, [r3, #0]
 80075dc:	2b07      	cmp	r3, #7
 80075de:	d834      	bhi.n	800764a <nRF24_Module_Setup+0x21a>
 80075e0:	009a      	lsls	r2, r3, #2
 80075e2:	4b60      	ldr	r3, [pc, #384]	; (8007764 <nRF24_Module_Setup+0x334>)
 80075e4:	18d3      	adds	r3, r2, r3
 80075e6:	681b      	ldr	r3, [r3, #0]
 80075e8:	469f      	mov	pc, r3
		{
	    case MBPS1_Minus18dBm:
	    	nRF24_WriteReg(nRF_CSN_Pin, nRF24_REG_RF_SETUP, 0x01);                    //-18dBm, 1MBPS, LNA_HCURR=1
 80075ea:	2201      	movs	r2, #1
 80075ec:	2106      	movs	r1, #6
 80075ee:	2008      	movs	r0, #8
 80075f0:	f7ff fe26 	bl	8007240 <nRF24_WriteReg>
	    	break;
 80075f4:	e029      	b.n	800764a <nRF24_Module_Setup+0x21a>
	    case MBPS1_Minus12dBm:
	    	nRF24_WriteReg(nRF_CSN_Pin, nRF24_REG_RF_SETUP, 0x03);                    //-12dBm, 1MBPS, LNA_HCURR=1
 80075f6:	2203      	movs	r2, #3
 80075f8:	2106      	movs	r1, #6
 80075fa:	2008      	movs	r0, #8
 80075fc:	f7ff fe20 	bl	8007240 <nRF24_WriteReg>
	    	break;
 8007600:	e023      	b.n	800764a <nRF24_Module_Setup+0x21a>
	    case MBPS1_Minus6dBm:
	    	nRF24_WriteReg(nRF_CSN_Pin, nRF24_REG_RF_SETUP, 0x05);                    //-6dBm, 1MBPS, LNA_HCURR=1
 8007602:	2205      	movs	r2, #5
 8007604:	2106      	movs	r1, #6
 8007606:	2008      	movs	r0, #8
 8007608:	f7ff fe1a 	bl	8007240 <nRF24_WriteReg>
	    	break;
 800760c:	e01d      	b.n	800764a <nRF24_Module_Setup+0x21a>
	    case MBPS1_0dBm:
	    	nRF24_WriteReg(nRF_CSN_Pin, nRF24_REG_RF_SETUP, 0x07);                    //0dBm, 1MBPS, LNA_HCURR=1
 800760e:	2207      	movs	r2, #7
 8007610:	2106      	movs	r1, #6
 8007612:	2008      	movs	r0, #8
 8007614:	f7ff fe14 	bl	8007240 <nRF24_WriteReg>
	    	break;
 8007618:	e017      	b.n	800764a <nRF24_Module_Setup+0x21a>
	    case MBPS2_Minus18dBm:
	    	nRF24_WriteReg(nRF_CSN_Pin, nRF24_REG_RF_SETUP, 0x09);                    //-18dBm, 2MBPS, LNA_HCURR=1
 800761a:	2209      	movs	r2, #9
 800761c:	2106      	movs	r1, #6
 800761e:	2008      	movs	r0, #8
 8007620:	f7ff fe0e 	bl	8007240 <nRF24_WriteReg>
	    	break;
 8007624:	e011      	b.n	800764a <nRF24_Module_Setup+0x21a>
	    case MBPS2_Minus12dBm:
	    	nRF24_WriteReg(nRF_CSN_Pin, nRF24_REG_RF_SETUP, 0x0B);                    //-12dBm, 2MBPS, LNA_HCURR=1
 8007626:	220b      	movs	r2, #11
 8007628:	2106      	movs	r1, #6
 800762a:	2008      	movs	r0, #8
 800762c:	f7ff fe08 	bl	8007240 <nRF24_WriteReg>
	    	break;
 8007630:	e00b      	b.n	800764a <nRF24_Module_Setup+0x21a>
	    case MBPS2_Minus6dBm:
	    	nRF24_WriteReg(nRF_CSN_Pin, nRF24_REG_RF_SETUP, 0x0D);                    //-6dBm, 2MBPS, LNA_HCURR=1
 8007632:	220d      	movs	r2, #13
 8007634:	2106      	movs	r1, #6
 8007636:	2008      	movs	r0, #8
 8007638:	f7ff fe02 	bl	8007240 <nRF24_WriteReg>
	    	break;
 800763c:	e005      	b.n	800764a <nRF24_Module_Setup+0x21a>
	    case MBPS2_0dBm:
	    	nRF24_WriteReg(nRF_CSN_Pin, nRF24_REG_RF_SETUP, 0x0F);                    //0dBm, 2MBPS, LNA_HCURR=1
 800763e:	220f      	movs	r2, #15
 8007640:	2106      	movs	r1, #6
 8007642:	2008      	movs	r0, #8
 8007644:	f7ff fdfc 	bl	8007240 <nRF24_WriteReg>
	    	break;
 8007648:	46c0      	nop			; (mov r8, r8)
		}

		if((mode==Transmitter_Mode_AA)||(mode==Transmitter_Mode_noAA_CRC)||(mode==Transmitter_Mode_noAA_noCRC))
 800764a:	1d7b      	adds	r3, r7, #5
 800764c:	781b      	ldrb	r3, [r3, #0]
 800764e:	2b03      	cmp	r3, #3
 8007650:	d007      	beq.n	8007662 <nRF24_Module_Setup+0x232>
 8007652:	1d7b      	adds	r3, r7, #5
 8007654:	781b      	ldrb	r3, [r3, #0]
 8007656:	2b04      	cmp	r3, #4
 8007658:	d003      	beq.n	8007662 <nRF24_Module_Setup+0x232>
 800765a:	1d7b      	adds	r3, r7, #5
 800765c:	781b      	ldrb	r3, [r3, #0]
 800765e:	2b05      	cmp	r3, #5
 8007660:	d10c      	bne.n	800767c <nRF24_Module_Setup+0x24c>
		{
			nRF24_WriteMBReg(nRF_CSN_Pin, nRF24_REG_RX_ADDR_P0, Tx_Addr, 5);          //Set the Pipe0 address to {0x53, 0x52, 0x36, 0x34, 0x00}
 8007662:	683a      	ldr	r2, [r7, #0]
 8007664:	2305      	movs	r3, #5
 8007666:	210a      	movs	r1, #10
 8007668:	2008      	movs	r0, #8
 800766a:	f7ff fe1d 	bl	80072a8 <nRF24_WriteMBReg>
			nRF24_WriteMBReg(nRF_CSN_Pin, nRF24_REG_TX_ADDR, Tx_Addr, 5);             //Set the TX address to {0x53, 0x52, 0x36, 0x34, 0x00}
 800766e:	683a      	ldr	r2, [r7, #0]
 8007670:	2305      	movs	r3, #5
 8007672:	2110      	movs	r1, #16
 8007674:	2008      	movs	r0, #8
 8007676:	f7ff fe17 	bl	80072a8 <nRF24_WriteMBReg>
 800767a:	e03f      	b.n	80076fc <nRF24_Module_Setup+0x2cc>
		}
		else if((mode==Receiver_Mode_AA)||(mode==Receiver_Mode_noAA_CRC)||(mode==Receiver_Mode_noAA_noCRC))
 800767c:	1d7b      	adds	r3, r7, #5
 800767e:	781b      	ldrb	r3, [r3, #0]
 8007680:	2b00      	cmp	r3, #0
 8007682:	d007      	beq.n	8007694 <nRF24_Module_Setup+0x264>
 8007684:	1d7b      	adds	r3, r7, #5
 8007686:	781b      	ldrb	r3, [r3, #0]
 8007688:	2b01      	cmp	r3, #1
 800768a:	d003      	beq.n	8007694 <nRF24_Module_Setup+0x264>
 800768c:	1d7b      	adds	r3, r7, #5
 800768e:	781b      	ldrb	r3, [r3, #0]
 8007690:	2b02      	cmp	r3, #2
 8007692:	d133      	bne.n	80076fc <nRF24_Module_Setup+0x2cc>
		{
			nRF24_WriteMBReg(nRF_CSN_Pin, nRF24_REG_RX_ADDR_P0, rx_addr_p0, 5);       //Set the Pipe0 address
 8007694:	2314      	movs	r3, #20
 8007696:	18fa      	adds	r2, r7, r3
 8007698:	2305      	movs	r3, #5
 800769a:	210a      	movs	r1, #10
 800769c:	2008      	movs	r0, #8
 800769e:	f7ff fe03 	bl	80072a8 <nRF24_WriteMBReg>
			nRF24_WriteMBReg(nRF_CSN_Pin, nRF24_REG_RX_ADDR_P1, rx_addr_p1, 5);       //Set the Pipe1 address
 80076a2:	230c      	movs	r3, #12
 80076a4:	18fa      	adds	r2, r7, r3
 80076a6:	2305      	movs	r3, #5
 80076a8:	210b      	movs	r1, #11
 80076aa:	2008      	movs	r0, #8
 80076ac:	f7ff fdfc 	bl	80072a8 <nRF24_WriteMBReg>
			nRF24_WriteReg(nRF_CSN_Pin, nRF24_REG_RX_ADDR_P2, rx_addr_p2);            //Set the Pipe2 address
 80076b0:	231f      	movs	r3, #31
 80076b2:	18fb      	adds	r3, r7, r3
 80076b4:	781b      	ldrb	r3, [r3, #0]
 80076b6:	001a      	movs	r2, r3
 80076b8:	210c      	movs	r1, #12
 80076ba:	2008      	movs	r0, #8
 80076bc:	f7ff fdc0 	bl	8007240 <nRF24_WriteReg>
			nRF24_WriteReg(nRF_CSN_Pin, nRF24_REG_RX_ADDR_P3, rx_addr_p3);            //Set the Pipe3 address
 80076c0:	231e      	movs	r3, #30
 80076c2:	18fb      	adds	r3, r7, r3
 80076c4:	781b      	ldrb	r3, [r3, #0]
 80076c6:	001a      	movs	r2, r3
 80076c8:	210d      	movs	r1, #13
 80076ca:	2008      	movs	r0, #8
 80076cc:	f7ff fdb8 	bl	8007240 <nRF24_WriteReg>
			nRF24_WriteReg(nRF_CSN_Pin, nRF24_REG_RX_ADDR_P4, rx_addr_p4);            //Set the Pipe4 address
 80076d0:	231d      	movs	r3, #29
 80076d2:	18fb      	adds	r3, r7, r3
 80076d4:	781b      	ldrb	r3, [r3, #0]
 80076d6:	001a      	movs	r2, r3
 80076d8:	210e      	movs	r1, #14
 80076da:	2008      	movs	r0, #8
 80076dc:	f7ff fdb0 	bl	8007240 <nRF24_WriteReg>
			nRF24_WriteReg(nRF_CSN_Pin, nRF24_REG_RX_ADDR_P5, rx_addr_p5);            //Set the Pipe5 address
 80076e0:	231c      	movs	r3, #28
 80076e2:	18fb      	adds	r3, r7, r3
 80076e4:	781b      	ldrb	r3, [r3, #0]
 80076e6:	001a      	movs	r2, r3
 80076e8:	210f      	movs	r1, #15
 80076ea:	2008      	movs	r0, #8
 80076ec:	f7ff fda8 	bl	8007240 <nRF24_WriteReg>
			nRF24_WriteMBReg(nRF_CSN_Pin, nRF24_REG_TX_ADDR, Tx_Addr, 5);             //Set the TX address
 80076f0:	683a      	ldr	r2, [r7, #0]
 80076f2:	2305      	movs	r3, #5
 80076f4:	2110      	movs	r1, #16
 80076f6:	2008      	movs	r0, #8
 80076f8:	f7ff fdd6 	bl	80072a8 <nRF24_WriteMBReg>
		}


		nRF24_WriteReg(nRF_CSN_Pin, nRF24_REG_RX_PW_P0, Payloadsize);                 //Set the Pipe0 Payload size
 80076fc:	2438      	movs	r4, #56	; 0x38
 80076fe:	193b      	adds	r3, r7, r4
 8007700:	781b      	ldrb	r3, [r3, #0]
 8007702:	001a      	movs	r2, r3
 8007704:	2111      	movs	r1, #17
 8007706:	2008      	movs	r0, #8
 8007708:	f7ff fd9a 	bl	8007240 <nRF24_WriteReg>
		nRF24_WriteReg(nRF_CSN_Pin, nRF24_REG_RX_PW_P1, Payloadsize);                 //Set the Pipe1 Payload size
 800770c:	193b      	adds	r3, r7, r4
 800770e:	781b      	ldrb	r3, [r3, #0]
 8007710:	001a      	movs	r2, r3
 8007712:	2112      	movs	r1, #18
 8007714:	2008      	movs	r0, #8
 8007716:	f7ff fd93 	bl	8007240 <nRF24_WriteReg>
		nRF24_WriteReg(nRF_CSN_Pin, nRF24_REG_RX_PW_P2, Payloadsize);                 //Set the Pipe2 Payload size
 800771a:	193b      	adds	r3, r7, r4
 800771c:	781b      	ldrb	r3, [r3, #0]
 800771e:	001a      	movs	r2, r3
 8007720:	2113      	movs	r1, #19
 8007722:	2008      	movs	r0, #8
 8007724:	f7ff fd8c 	bl	8007240 <nRF24_WriteReg>
		nRF24_WriteReg(nRF_CSN_Pin, nRF24_REG_RX_PW_P3, Payloadsize);                 //Set the Pipe3 Payload size
 8007728:	193b      	adds	r3, r7, r4
 800772a:	781b      	ldrb	r3, [r3, #0]
 800772c:	001a      	movs	r2, r3
 800772e:	2114      	movs	r1, #20
 8007730:	2008      	movs	r0, #8
 8007732:	f7ff fd85 	bl	8007240 <nRF24_WriteReg>
		nRF24_WriteReg(nRF_CSN_Pin, nRF24_REG_RX_PW_P4, Payloadsize);                 //Set the Pipe4 Payload size
 8007736:	193b      	adds	r3, r7, r4
 8007738:	781b      	ldrb	r3, [r3, #0]
 800773a:	001a      	movs	r2, r3
 800773c:	2115      	movs	r1, #21
 800773e:	2008      	movs	r0, #8
 8007740:	f7ff fd7e 	bl	8007240 <nRF24_WriteReg>
		nRF24_WriteReg(nRF_CSN_Pin, nRF24_REG_RX_PW_P5, Payloadsize);                 //Set the Pipe5 Payload size
 8007744:	193b      	adds	r3, r7, r4
 8007746:	781b      	ldrb	r3, [r3, #0]
 8007748:	001a      	movs	r2, r3
 800774a:	2116      	movs	r1, #22
 800774c:	2008      	movs	r0, #8
 800774e:	f7ff fd77 	bl	8007240 <nRF24_WriteReg>
		break;
 8007752:	e000      	b.n	8007756 <nRF24_Module_Setup+0x326>
    default:
    	break;
 8007754:	46c0      	nop			; (mov r8, r8)
	}
}
 8007756:	46c0      	nop			; (mov r8, r8)
 8007758:	46bd      	mov	sp, r7
 800775a:	b009      	add	sp, #36	; 0x24
 800775c:	bd90      	pop	{r4, r7, pc}
 800775e:	46c0      	nop			; (mov r8, r8)
 8007760:	0800cd1c 	.word	0x0800cd1c
 8007764:	0800cd34 	.word	0x0800cd34

08007768 <nRF24_Transmit>:


uint8_t nRF24_Transmit(uint16_t Sel_CSN_Pin, uint8_t *data, uint8_t Payload_Size)
{
 8007768:	b5f0      	push	{r4, r5, r6, r7, lr}
 800776a:	b085      	sub	sp, #20
 800776c:	af00      	add	r7, sp, #0
 800776e:	6039      	str	r1, [r7, #0]
 8007770:	0011      	movs	r1, r2
 8007772:	1dbb      	adds	r3, r7, #6
 8007774:	1c02      	adds	r2, r0, #0
 8007776:	801a      	strh	r2, [r3, #0]
 8007778:	1d7b      	adds	r3, r7, #5
 800777a:	1c0a      	adds	r2, r1, #0
 800777c:	701a      	strb	r2, [r3, #0]
	uint8_t cmdtosend = 0;
 800777e:	250d      	movs	r5, #13
 8007780:	197b      	adds	r3, r7, r5
 8007782:	2200      	movs	r2, #0
 8007784:	701a      	strb	r2, [r3, #0]
	uint8_t STATUS_Register = 0;
 8007786:	240f      	movs	r4, #15
 8007788:	193b      	adds	r3, r7, r4
 800778a:	2200      	movs	r2, #0
 800778c:	701a      	strb	r2, [r3, #0]
    uint8_t Tr_Success = 0;
 800778e:	260e      	movs	r6, #14
 8007790:	19bb      	adds	r3, r7, r6
 8007792:	2200      	movs	r2, #0
 8007794:	701a      	strb	r2, [r3, #0]
	switch(Sel_CSN_Pin)
 8007796:	1dbb      	adds	r3, r7, #6
 8007798:	881b      	ldrh	r3, [r3, #0]
 800779a:	2b08      	cmp	r3, #8
 800779c:	d162      	bne.n	8007864 <nRF24_Transmit+0xfc>
	{
	case nRF_CSN_Pin:

		nRF24_CSN_Select(nRF_CSN_Pin);                                                   //Pull CSN pin low to select the module1 on SPI BUS
 800779e:	2008      	movs	r0, #8
 80077a0:	f7ff fcf0 	bl	8007184 <nRF24_CSN_Select>

		cmdtosend = nRF24_CMD_W_TX_PAYLOAD;                                                //Payload transmit command
 80077a4:	197b      	adds	r3, r7, r5
 80077a6:	22a0      	movs	r2, #160	; 0xa0
 80077a8:	701a      	strb	r2, [r3, #0]
		HAL_SPI_Transmit(&hspi1, &cmdtosend, 1, 100);
 80077aa:	1979      	adds	r1, r7, r5
 80077ac:	4830      	ldr	r0, [pc, #192]	; (8007870 <nRF24_Transmit+0x108>)
 80077ae:	2364      	movs	r3, #100	; 0x64
 80077b0:	2201      	movs	r2, #1
 80077b2:	f7fe f8c3 	bl	800593c <HAL_SPI_Transmit>
		HAL_SPI_Transmit(&hspi1, data, Payload_Size, 100);
 80077b6:	1d7b      	adds	r3, r7, #5
 80077b8:	781b      	ldrb	r3, [r3, #0]
 80077ba:	b29a      	uxth	r2, r3
 80077bc:	6839      	ldr	r1, [r7, #0]
 80077be:	482c      	ldr	r0, [pc, #176]	; (8007870 <nRF24_Transmit+0x108>)
 80077c0:	2364      	movs	r3, #100	; 0x64
 80077c2:	f7fe f8bb 	bl	800593c <HAL_SPI_Transmit>

		nRF24_Power(nRF_CSN_Pin,Power_Up);
 80077c6:	2101      	movs	r1, #1
 80077c8:	2008      	movs	r0, #8
 80077ca:	f000 f8c7 	bl	800795c <nRF24_Power>
		HAL_Delay(1);
 80077ce:	2001      	movs	r0, #1
 80077d0:	f7fc fa36 	bl	8003c40 <HAL_Delay>
		nRF24_CE_Enable(nRF_CE_Pin);                                                    //Enable the module1
 80077d4:	2004      	movs	r0, #4
 80077d6:	f7ff fd03 	bl	80071e0 <nRF24_CE_Enable>
		HAL_Delay(1);
 80077da:	2001      	movs	r0, #1
 80077dc:	f7fc fa30 	bl	8003c40 <HAL_Delay>
		nRF24_CE_Disable(nRF_CE_Pin);                                   //Disable the chip
 80077e0:	2004      	movs	r0, #4
 80077e2:	f7ff fd15 	bl	8007210 <nRF24_CE_Disable>
		HAL_Delay(1);
 80077e6:	2001      	movs	r0, #1
 80077e8:	f7fc fa2a 	bl	8003c40 <HAL_Delay>
		nRF24_Power(nRF_CSN_Pin,Power_Down);
 80077ec:	2100      	movs	r1, #0
 80077ee:	2008      	movs	r0, #8
 80077f0:	f000 f8b4 	bl	800795c <nRF24_Power>

		STATUS_Register = nRF24_ReadReg(nRF_CSN_Pin, nRF24_REG_STATUS);             //Reading the STATUS register
 80077f4:	0025      	movs	r5, r4
 80077f6:	193c      	adds	r4, r7, r4
 80077f8:	2107      	movs	r1, #7
 80077fa:	2008      	movs	r0, #8
 80077fc:	f7ff fd8e 	bl	800731c <nRF24_ReadReg>
 8007800:	0003      	movs	r3, r0
 8007802:	7023      	strb	r3, [r4, #0]
		if((STATUS_Register & (1<<5)) != 0)                                  //check TX_EMPTY flag to be 1 along with Reserved pin to be 0
 8007804:	0028      	movs	r0, r5
 8007806:	183b      	adds	r3, r7, r0
 8007808:	781b      	ldrb	r3, [r3, #0]
 800780a:	2220      	movs	r2, #32
 800780c:	4013      	ands	r3, r2
 800780e:	d00f      	beq.n	8007830 <nRF24_Transmit+0xc8>
		{
#ifndef Debug
			HAL_UART_Transmit(&hlpuart1, (uint8_t *)"Data Transmitted Successfully\n",30,100);
#endif
			//Remove the interrupt pin
			STATUS_Register = STATUS_Register | (1<<5);     //Write 1 to TX_DS to reset it
 8007810:	183b      	adds	r3, r7, r0
 8007812:	183a      	adds	r2, r7, r0
 8007814:	7812      	ldrb	r2, [r2, #0]
 8007816:	2120      	movs	r1, #32
 8007818:	430a      	orrs	r2, r1
 800781a:	701a      	strb	r2, [r3, #0]
			nRF24_WriteReg(nRF_CSN_Pin, nRF24_REG_STATUS, STATUS_Register);
 800781c:	183b      	adds	r3, r7, r0
 800781e:	781b      	ldrb	r3, [r3, #0]
 8007820:	001a      	movs	r2, r3
 8007822:	2107      	movs	r1, #7
 8007824:	2008      	movs	r0, #8
 8007826:	f7ff fd0b 	bl	8007240 <nRF24_WriteReg>

			Tr_Success = 1;
 800782a:	19bb      	adds	r3, r7, r6
 800782c:	2201      	movs	r2, #1
 800782e:	701a      	strb	r2, [r3, #0]
			}
		if((STATUS_Register & (1<<4)) != 0)                                  //check TX_EMPTY flag to be 1 along with Reserved pin to be 0
 8007830:	200f      	movs	r0, #15
 8007832:	183b      	adds	r3, r7, r0
 8007834:	781b      	ldrb	r3, [r3, #0]
 8007836:	2210      	movs	r2, #16
 8007838:	4013      	ands	r3, r2
 800783a:	d00c      	beq.n	8007856 <nRF24_Transmit+0xee>
		{
#ifndef Debug
			HAL_UART_Transmit(&hlpuart1, (uint8_t *)"Maximum Retry Reached\n",22,100);
#endif
			//Remove the interrupt pin
			STATUS_Register = STATUS_Register | (1<<4);   //Write 1 to MAX_RT to reset it
 800783c:	183b      	adds	r3, r7, r0
 800783e:	183a      	adds	r2, r7, r0
 8007840:	7812      	ldrb	r2, [r2, #0]
 8007842:	2110      	movs	r1, #16
 8007844:	430a      	orrs	r2, r1
 8007846:	701a      	strb	r2, [r3, #0]
			nRF24_WriteReg(nRF_CSN_Pin, nRF24_REG_STATUS, STATUS_Register);
 8007848:	183b      	adds	r3, r7, r0
 800784a:	781b      	ldrb	r3, [r3, #0]
 800784c:	001a      	movs	r2, r3
 800784e:	2107      	movs	r1, #7
 8007850:	2008      	movs	r0, #8
 8007852:	f7ff fcf5 	bl	8007240 <nRF24_WriteReg>
		}

	    nRF24_CSN_UnSelect(nRF_CSN_Pin);
 8007856:	2008      	movs	r0, #8
 8007858:	f7ff fcab 	bl	80071b2 <nRF24_CSN_UnSelect>
	    return Tr_Success;
 800785c:	230e      	movs	r3, #14
 800785e:	18fb      	adds	r3, r7, r3
 8007860:	781b      	ldrb	r3, [r3, #0]
 8007862:	e000      	b.n	8007866 <nRF24_Transmit+0xfe>

	default:
		return 0;
 8007864:	2300      	movs	r3, #0
	}
}
 8007866:	0018      	movs	r0, r3
 8007868:	46bd      	mov	sp, r7
 800786a:	b005      	add	sp, #20
 800786c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800786e:	46c0      	nop			; (mov r8, r8)
 8007870:	200002f0 	.word	0x200002f0

08007874 <nRF24_ReadAllRegs>:
}


// Read all the Register data
void nRF24_ReadAllRegs (uint16_t Sel_CSN_Pin, uint8_t *data)
{
 8007874:	b590      	push	{r4, r7, lr}
 8007876:	b085      	sub	sp, #20
 8007878:	af00      	add	r7, sp, #0
 800787a:	0002      	movs	r2, r0
 800787c:	6039      	str	r1, [r7, #0]
 800787e:	1dbb      	adds	r3, r7, #6
 8007880:	801a      	strh	r2, [r3, #0]
	switch(Sel_CSN_Pin)
 8007882:	1dbb      	adds	r3, r7, #6
 8007884:	881b      	ldrh	r3, [r3, #0]
 8007886:	2b08      	cmp	r3, #8
 8007888:	d163      	bne.n	8007952 <nRF24_ReadAllRegs+0xde>
	{

	case nRF_CSN_Pin:

		for (int i=0; i<10; i++)
 800788a:	2300      	movs	r3, #0
 800788c:	60fb      	str	r3, [r7, #12]
 800788e:	e00c      	b.n	80078aa <nRF24_ReadAllRegs+0x36>
		{
			data[i] = nRF24_ReadReg(nRF_CSN_Pin, i);
 8007890:	68fb      	ldr	r3, [r7, #12]
 8007892:	b2d9      	uxtb	r1, r3
 8007894:	68fb      	ldr	r3, [r7, #12]
 8007896:	683a      	ldr	r2, [r7, #0]
 8007898:	18d4      	adds	r4, r2, r3
 800789a:	2008      	movs	r0, #8
 800789c:	f7ff fd3e 	bl	800731c <nRF24_ReadReg>
 80078a0:	0003      	movs	r3, r0
 80078a2:	7023      	strb	r3, [r4, #0]
		for (int i=0; i<10; i++)
 80078a4:	68fb      	ldr	r3, [r7, #12]
 80078a6:	3301      	adds	r3, #1
 80078a8:	60fb      	str	r3, [r7, #12]
 80078aa:	68fb      	ldr	r3, [r7, #12]
 80078ac:	2b09      	cmp	r3, #9
 80078ae:	ddef      	ble.n	8007890 <nRF24_ReadAllRegs+0x1c>
		}

		nRF24_ReadMBReg(nRF_CSN_Pin, nRF24_REG_RX_ADDR_P0, &data[10], 5);
 80078b0:	683b      	ldr	r3, [r7, #0]
 80078b2:	330a      	adds	r3, #10
 80078b4:	001a      	movs	r2, r3
 80078b6:	2305      	movs	r3, #5
 80078b8:	210a      	movs	r1, #10
 80078ba:	2008      	movs	r0, #8
 80078bc:	f7ff fd5e 	bl	800737c <nRF24_ReadMBReg>

		nRF24_ReadMBReg(nRF_CSN_Pin, nRF24_REG_RX_ADDR_P1, &data[15], 5);
 80078c0:	683b      	ldr	r3, [r7, #0]
 80078c2:	330f      	adds	r3, #15
 80078c4:	001a      	movs	r2, r3
 80078c6:	2305      	movs	r3, #5
 80078c8:	210b      	movs	r1, #11
 80078ca:	2008      	movs	r0, #8
 80078cc:	f7ff fd56 	bl	800737c <nRF24_ReadMBReg>

		data[20] = nRF24_ReadReg(nRF_CSN_Pin, nRF24_REG_RX_ADDR_P2);
 80078d0:	683b      	ldr	r3, [r7, #0]
 80078d2:	3314      	adds	r3, #20
 80078d4:	001c      	movs	r4, r3
 80078d6:	210c      	movs	r1, #12
 80078d8:	2008      	movs	r0, #8
 80078da:	f7ff fd1f 	bl	800731c <nRF24_ReadReg>
 80078de:	0003      	movs	r3, r0
 80078e0:	7023      	strb	r3, [r4, #0]
		data[20] = nRF24_ReadReg(nRF_CSN_Pin, nRF24_REG_RX_ADDR_P3);
 80078e2:	683b      	ldr	r3, [r7, #0]
 80078e4:	3314      	adds	r3, #20
 80078e6:	001c      	movs	r4, r3
 80078e8:	210d      	movs	r1, #13
 80078ea:	2008      	movs	r0, #8
 80078ec:	f7ff fd16 	bl	800731c <nRF24_ReadReg>
 80078f0:	0003      	movs	r3, r0
 80078f2:	7023      	strb	r3, [r4, #0]
		data[20] = nRF24_ReadReg(nRF_CSN_Pin, nRF24_REG_RX_ADDR_P4);
 80078f4:	683b      	ldr	r3, [r7, #0]
 80078f6:	3314      	adds	r3, #20
 80078f8:	001c      	movs	r4, r3
 80078fa:	210e      	movs	r1, #14
 80078fc:	2008      	movs	r0, #8
 80078fe:	f7ff fd0d 	bl	800731c <nRF24_ReadReg>
 8007902:	0003      	movs	r3, r0
 8007904:	7023      	strb	r3, [r4, #0]
		data[20] = nRF24_ReadReg(nRF_CSN_Pin, nRF24_REG_RX_ADDR_P5);
 8007906:	683b      	ldr	r3, [r7, #0]
 8007908:	3314      	adds	r3, #20
 800790a:	001c      	movs	r4, r3
 800790c:	210f      	movs	r1, #15
 800790e:	2008      	movs	r0, #8
 8007910:	f7ff fd04 	bl	800731c <nRF24_ReadReg>
 8007914:	0003      	movs	r3, r0
 8007916:	7023      	strb	r3, [r4, #0]

		nRF24_ReadMBReg(nRF_CSN_Pin, nRF24_REG_TX_ADDR, &data[24], 5);
 8007918:	683b      	ldr	r3, [r7, #0]
 800791a:	3318      	adds	r3, #24
 800791c:	001a      	movs	r2, r3
 800791e:	2305      	movs	r3, #5
 8007920:	2110      	movs	r1, #16
 8007922:	2008      	movs	r0, #8
 8007924:	f7ff fd2a 	bl	800737c <nRF24_ReadMBReg>

		for (int i=29; i<38; i++)
 8007928:	231d      	movs	r3, #29
 800792a:	60bb      	str	r3, [r7, #8]
 800792c:	e00e      	b.n	800794c <nRF24_ReadAllRegs+0xd8>
		{
			data[i] = nRF24_ReadReg(nRF_CSN_Pin, (i-12));
 800792e:	68bb      	ldr	r3, [r7, #8]
 8007930:	b2db      	uxtb	r3, r3
 8007932:	3b0c      	subs	r3, #12
 8007934:	b2d9      	uxtb	r1, r3
 8007936:	68bb      	ldr	r3, [r7, #8]
 8007938:	683a      	ldr	r2, [r7, #0]
 800793a:	18d4      	adds	r4, r2, r3
 800793c:	2008      	movs	r0, #8
 800793e:	f7ff fced 	bl	800731c <nRF24_ReadReg>
 8007942:	0003      	movs	r3, r0
 8007944:	7023      	strb	r3, [r4, #0]
		for (int i=29; i<38; i++)
 8007946:	68bb      	ldr	r3, [r7, #8]
 8007948:	3301      	adds	r3, #1
 800794a:	60bb      	str	r3, [r7, #8]
 800794c:	68bb      	ldr	r3, [r7, #8]
 800794e:	2b25      	cmp	r3, #37	; 0x25
 8007950:	dded      	ble.n	800792e <nRF24_ReadAllRegs+0xba>
		}

	default:
		break;
 8007952:	46c0      	nop			; (mov r8, r8)

	}
}
 8007954:	46c0      	nop			; (mov r8, r8)
 8007956:	46bd      	mov	sp, r7
 8007958:	b005      	add	sp, #20
 800795a:	bd90      	pop	{r4, r7, pc}

0800795c <nRF24_Power>:

void nRF24_Power(uint16_t Sel_CSN_Pin, uint8_t On_Off_Cmd)
{
 800795c:	b5b0      	push	{r4, r5, r7, lr}
 800795e:	b084      	sub	sp, #16
 8007960:	af00      	add	r7, sp, #0
 8007962:	0002      	movs	r2, r0
 8007964:	1dbb      	adds	r3, r7, #6
 8007966:	801a      	strh	r2, [r3, #0]
 8007968:	1d7b      	adds	r3, r7, #5
 800796a:	1c0a      	adds	r2, r1, #0
 800796c:	701a      	strb	r2, [r3, #0]
	uint8_t Temp_Reg;

	switch(Sel_CSN_Pin)
 800796e:	1dbb      	adds	r3, r7, #6
 8007970:	881b      	ldrh	r3, [r3, #0]
 8007972:	2b08      	cmp	r3, #8
 8007974:	d12c      	bne.n	80079d0 <nRF24_Power+0x74>
	{
	case nRF_CSN_Pin:
		Temp_Reg = nRF24_ReadReg(nRF_CSN_Pin, nRF24_REG_CONFIG);
 8007976:	250f      	movs	r5, #15
 8007978:	197c      	adds	r4, r7, r5
 800797a:	2100      	movs	r1, #0
 800797c:	2008      	movs	r0, #8
 800797e:	f7ff fccd 	bl	800731c <nRF24_ReadReg>
 8007982:	0003      	movs	r3, r0
 8007984:	7023      	strb	r3, [r4, #0]

		if(On_Off_Cmd == 1)
 8007986:	1d7b      	adds	r3, r7, #5
 8007988:	781b      	ldrb	r3, [r3, #0]
 800798a:	2b01      	cmp	r3, #1
 800798c:	d10d      	bne.n	80079aa <nRF24_Power+0x4e>
		{
			Temp_Reg = Temp_Reg | (1<<1);
 800798e:	197b      	adds	r3, r7, r5
 8007990:	197a      	adds	r2, r7, r5
 8007992:	7812      	ldrb	r2, [r2, #0]
 8007994:	2102      	movs	r1, #2
 8007996:	430a      	orrs	r2, r1
 8007998:	701a      	strb	r2, [r3, #0]
			nRF24_WriteReg(nRF_CSN_Pin, nRF24_REG_CONFIG, Temp_Reg);
 800799a:	197b      	adds	r3, r7, r5
 800799c:	781b      	ldrb	r3, [r3, #0]
 800799e:	001a      	movs	r2, r3
 80079a0:	2100      	movs	r1, #0
 80079a2:	2008      	movs	r0, #8
 80079a4:	f7ff fc4c 	bl	8007240 <nRF24_WriteReg>
		else if(On_Off_Cmd == 0)
		{
			Temp_Reg = Temp_Reg & 0x7D;
			nRF24_WriteReg(nRF_CSN_Pin, nRF24_REG_CONFIG, Temp_Reg);
		}
		break;
 80079a8:	e014      	b.n	80079d4 <nRF24_Power+0x78>
		else if(On_Off_Cmd == 0)
 80079aa:	1d7b      	adds	r3, r7, #5
 80079ac:	781b      	ldrb	r3, [r3, #0]
 80079ae:	2b00      	cmp	r3, #0
 80079b0:	d110      	bne.n	80079d4 <nRF24_Power+0x78>
			Temp_Reg = Temp_Reg & 0x7D;
 80079b2:	200f      	movs	r0, #15
 80079b4:	183b      	adds	r3, r7, r0
 80079b6:	183a      	adds	r2, r7, r0
 80079b8:	7812      	ldrb	r2, [r2, #0]
 80079ba:	217d      	movs	r1, #125	; 0x7d
 80079bc:	400a      	ands	r2, r1
 80079be:	701a      	strb	r2, [r3, #0]
			nRF24_WriteReg(nRF_CSN_Pin, nRF24_REG_CONFIG, Temp_Reg);
 80079c0:	183b      	adds	r3, r7, r0
 80079c2:	781b      	ldrb	r3, [r3, #0]
 80079c4:	001a      	movs	r2, r3
 80079c6:	2100      	movs	r1, #0
 80079c8:	2008      	movs	r0, #8
 80079ca:	f7ff fc39 	bl	8007240 <nRF24_WriteReg>
		break;
 80079ce:	e001      	b.n	80079d4 <nRF24_Power+0x78>
	default:
		break;
 80079d0:	46c0      	nop			; (mov r8, r8)
 80079d2:	e000      	b.n	80079d6 <nRF24_Power+0x7a>
		break;
 80079d4:	46c0      	nop			; (mov r8, r8)
	}
}
 80079d6:	46c0      	nop			; (mov r8, r8)
 80079d8:	46bd      	mov	sp, r7
 80079da:	b004      	add	sp, #16
 80079dc:	bdb0      	pop	{r4, r5, r7, pc}
	...

080079e0 <nRF24_Register_Display>:

}


void nRF24_Register_Display(uint16_t Sel_CSN_Pin)
{
 80079e0:	b590      	push	{r4, r7, lr}
 80079e2:	b08d      	sub	sp, #52	; 0x34
 80079e4:	af00      	add	r7, sp, #0
 80079e6:	0002      	movs	r2, r0
 80079e8:	1dbb      	adds	r3, r7, #6
 80079ea:	801a      	strh	r2, [r3, #0]
	uint8_t Reg_Data[40];

	switch(Sel_CSN_Pin)
 80079ec:	1dbb      	adds	r3, r7, #6
 80079ee:	881b      	ldrh	r3, [r3, #0]
 80079f0:	2b08      	cmp	r3, #8
 80079f2:	d114      	bne.n	8007a1e <nRF24_Register_Display+0x3e>
	{
	case nRF_CSN_Pin:
		nRF24_ReadAllRegs(nRF_CSN_Pin, Reg_Data);
 80079f4:	2308      	movs	r3, #8
 80079f6:	18fb      	adds	r3, r7, r3
 80079f8:	0019      	movs	r1, r3
 80079fa:	2008      	movs	r0, #8
 80079fc:	f7ff ff3a 	bl	8007874 <nRF24_ReadAllRegs>
		HAL_UART_Transmit(&hlpuart1, (uint8_t*)"Module1 Registers\n",18, HAL_MAX_DELAY);
 8007a00:	2301      	movs	r3, #1
 8007a02:	425b      	negs	r3, r3
 8007a04:	49b6      	ldr	r1, [pc, #728]	; (8007ce0 <nRF24_Register_Display+0x300>)
 8007a06:	48b7      	ldr	r0, [pc, #732]	; (8007ce4 <nRF24_Register_Display+0x304>)
 8007a08:	2212      	movs	r2, #18
 8007a0a:	f7fe fe6d 	bl	80066e8 <HAL_UART_Transmit>
		HAL_UART_Transmit(&hlpuart1, (uint8_t*)"******************\n",19, HAL_MAX_DELAY);
 8007a0e:	2301      	movs	r3, #1
 8007a10:	425b      	negs	r3, r3
 8007a12:	49b5      	ldr	r1, [pc, #724]	; (8007ce8 <nRF24_Register_Display+0x308>)
 8007a14:	48b3      	ldr	r0, [pc, #716]	; (8007ce4 <nRF24_Register_Display+0x304>)
 8007a16:	2213      	movs	r2, #19
 8007a18:	f7fe fe66 	bl	80066e8 <HAL_UART_Transmit>
		break;
 8007a1c:	e000      	b.n	8007a20 <nRF24_Register_Display+0x40>
	default:
		break;
 8007a1e:	46c0      	nop			; (mov r8, r8)
	}

		HAL_UART_Transmit(&hlpuart1, (uint8_t*)"CONFIG:",7, HAL_MAX_DELAY);
 8007a20:	2301      	movs	r3, #1
 8007a22:	425b      	negs	r3, r3
 8007a24:	49b1      	ldr	r1, [pc, #708]	; (8007cec <nRF24_Register_Display+0x30c>)
 8007a26:	48af      	ldr	r0, [pc, #700]	; (8007ce4 <nRF24_Register_Display+0x304>)
 8007a28:	2207      	movs	r2, #7
 8007a2a:	f7fe fe5d 	bl	80066e8 <HAL_UART_Transmit>
		nRF24_sendRegisterValue(Reg_Data[0]);
 8007a2e:	2408      	movs	r4, #8
 8007a30:	193b      	adds	r3, r7, r4
 8007a32:	781b      	ldrb	r3, [r3, #0]
 8007a34:	0018      	movs	r0, r3
 8007a36:	f000 f989 	bl	8007d4c <nRF24_sendRegisterValue>
		HAL_UART_Transmit(&hlpuart1, (uint8_t*)"EN_AA_reg:",10, HAL_MAX_DELAY);
 8007a3a:	2301      	movs	r3, #1
 8007a3c:	425b      	negs	r3, r3
 8007a3e:	49ac      	ldr	r1, [pc, #688]	; (8007cf0 <nRF24_Register_Display+0x310>)
 8007a40:	48a8      	ldr	r0, [pc, #672]	; (8007ce4 <nRF24_Register_Display+0x304>)
 8007a42:	220a      	movs	r2, #10
 8007a44:	f7fe fe50 	bl	80066e8 <HAL_UART_Transmit>
		nRF24_sendRegisterValue(Reg_Data[1]);
 8007a48:	193b      	adds	r3, r7, r4
 8007a4a:	785b      	ldrb	r3, [r3, #1]
 8007a4c:	0018      	movs	r0, r3
 8007a4e:	f000 f97d 	bl	8007d4c <nRF24_sendRegisterValue>
		HAL_UART_Transmit(&hlpuart1, (uint8_t*)"EN_RXADR_reg:",13, HAL_MAX_DELAY);
 8007a52:	2301      	movs	r3, #1
 8007a54:	425b      	negs	r3, r3
 8007a56:	49a7      	ldr	r1, [pc, #668]	; (8007cf4 <nRF24_Register_Display+0x314>)
 8007a58:	48a2      	ldr	r0, [pc, #648]	; (8007ce4 <nRF24_Register_Display+0x304>)
 8007a5a:	220d      	movs	r2, #13
 8007a5c:	f7fe fe44 	bl	80066e8 <HAL_UART_Transmit>
		nRF24_sendRegisterValue(Reg_Data[2]);
 8007a60:	193b      	adds	r3, r7, r4
 8007a62:	789b      	ldrb	r3, [r3, #2]
 8007a64:	0018      	movs	r0, r3
 8007a66:	f000 f971 	bl	8007d4c <nRF24_sendRegisterValue>
		HAL_UART_Transmit(&hlpuart1, (uint8_t*)"SETUP_AW_reg:",13, HAL_MAX_DELAY);
 8007a6a:	2301      	movs	r3, #1
 8007a6c:	425b      	negs	r3, r3
 8007a6e:	49a2      	ldr	r1, [pc, #648]	; (8007cf8 <nRF24_Register_Display+0x318>)
 8007a70:	489c      	ldr	r0, [pc, #624]	; (8007ce4 <nRF24_Register_Display+0x304>)
 8007a72:	220d      	movs	r2, #13
 8007a74:	f7fe fe38 	bl	80066e8 <HAL_UART_Transmit>
		nRF24_sendRegisterValue(Reg_Data[3]);
 8007a78:	193b      	adds	r3, r7, r4
 8007a7a:	78db      	ldrb	r3, [r3, #3]
 8007a7c:	0018      	movs	r0, r3
 8007a7e:	f000 f965 	bl	8007d4c <nRF24_sendRegisterValue>
		HAL_UART_Transmit(&hlpuart1, (uint8_t*)"SETUP_RETR_reg:",15, HAL_MAX_DELAY);
 8007a82:	2301      	movs	r3, #1
 8007a84:	425b      	negs	r3, r3
 8007a86:	499d      	ldr	r1, [pc, #628]	; (8007cfc <nRF24_Register_Display+0x31c>)
 8007a88:	4896      	ldr	r0, [pc, #600]	; (8007ce4 <nRF24_Register_Display+0x304>)
 8007a8a:	220f      	movs	r2, #15
 8007a8c:	f7fe fe2c 	bl	80066e8 <HAL_UART_Transmit>
		nRF24_sendRegisterValue(Reg_Data[4]);
 8007a90:	193b      	adds	r3, r7, r4
 8007a92:	791b      	ldrb	r3, [r3, #4]
 8007a94:	0018      	movs	r0, r3
 8007a96:	f000 f959 	bl	8007d4c <nRF24_sendRegisterValue>
		HAL_UART_Transmit(&hlpuart1, (uint8_t*)"RF_CH_reg:",10, HAL_MAX_DELAY);
 8007a9a:	2301      	movs	r3, #1
 8007a9c:	425b      	negs	r3, r3
 8007a9e:	4998      	ldr	r1, [pc, #608]	; (8007d00 <nRF24_Register_Display+0x320>)
 8007aa0:	4890      	ldr	r0, [pc, #576]	; (8007ce4 <nRF24_Register_Display+0x304>)
 8007aa2:	220a      	movs	r2, #10
 8007aa4:	f7fe fe20 	bl	80066e8 <HAL_UART_Transmit>
		nRF24_sendRegisterValue(Reg_Data[5]);
 8007aa8:	193b      	adds	r3, r7, r4
 8007aaa:	795b      	ldrb	r3, [r3, #5]
 8007aac:	0018      	movs	r0, r3
 8007aae:	f000 f94d 	bl	8007d4c <nRF24_sendRegisterValue>
		HAL_UART_Transmit(&hlpuart1, (uint8_t*)"RF_SETUP_reg:",13, HAL_MAX_DELAY);
 8007ab2:	2301      	movs	r3, #1
 8007ab4:	425b      	negs	r3, r3
 8007ab6:	4993      	ldr	r1, [pc, #588]	; (8007d04 <nRF24_Register_Display+0x324>)
 8007ab8:	488a      	ldr	r0, [pc, #552]	; (8007ce4 <nRF24_Register_Display+0x304>)
 8007aba:	220d      	movs	r2, #13
 8007abc:	f7fe fe14 	bl	80066e8 <HAL_UART_Transmit>
		nRF24_sendRegisterValue(Reg_Data[6]);
 8007ac0:	193b      	adds	r3, r7, r4
 8007ac2:	799b      	ldrb	r3, [r3, #6]
 8007ac4:	0018      	movs	r0, r3
 8007ac6:	f000 f941 	bl	8007d4c <nRF24_sendRegisterValue>
		HAL_UART_Transmit(&hlpuart1, (uint8_t*)"RF_STATUS_reg:",14, HAL_MAX_DELAY);
 8007aca:	2301      	movs	r3, #1
 8007acc:	425b      	negs	r3, r3
 8007ace:	498e      	ldr	r1, [pc, #568]	; (8007d08 <nRF24_Register_Display+0x328>)
 8007ad0:	4884      	ldr	r0, [pc, #528]	; (8007ce4 <nRF24_Register_Display+0x304>)
 8007ad2:	220e      	movs	r2, #14
 8007ad4:	f7fe fe08 	bl	80066e8 <HAL_UART_Transmit>
		nRF24_sendRegisterValue(Reg_Data[7]);
 8007ad8:	193b      	adds	r3, r7, r4
 8007ada:	79db      	ldrb	r3, [r3, #7]
 8007adc:	0018      	movs	r0, r3
 8007ade:	f000 f935 	bl	8007d4c <nRF24_sendRegisterValue>
		HAL_UART_Transmit(&hlpuart1, (uint8_t*)"OBSERVE_TX_reg:",15, HAL_MAX_DELAY);
 8007ae2:	2301      	movs	r3, #1
 8007ae4:	425b      	negs	r3, r3
 8007ae6:	4989      	ldr	r1, [pc, #548]	; (8007d0c <nRF24_Register_Display+0x32c>)
 8007ae8:	487e      	ldr	r0, [pc, #504]	; (8007ce4 <nRF24_Register_Display+0x304>)
 8007aea:	220f      	movs	r2, #15
 8007aec:	f7fe fdfc 	bl	80066e8 <HAL_UART_Transmit>
		nRF24_sendRegisterValue(Reg_Data[8]);
 8007af0:	193b      	adds	r3, r7, r4
 8007af2:	7a1b      	ldrb	r3, [r3, #8]
 8007af4:	0018      	movs	r0, r3
 8007af6:	f000 f929 	bl	8007d4c <nRF24_sendRegisterValue>
		HAL_UART_Transmit(&hlpuart1, (uint8_t*)"RX_ADR_P0_reg:\n",15, HAL_MAX_DELAY);
 8007afa:	2301      	movs	r3, #1
 8007afc:	425b      	negs	r3, r3
 8007afe:	4984      	ldr	r1, [pc, #528]	; (8007d10 <nRF24_Register_Display+0x330>)
 8007b00:	4878      	ldr	r0, [pc, #480]	; (8007ce4 <nRF24_Register_Display+0x304>)
 8007b02:	220f      	movs	r2, #15
 8007b04:	f7fe fdf0 	bl	80066e8 <HAL_UART_Transmit>
		nRF24_sendRegisterValue(Reg_Data[10]);
 8007b08:	193b      	adds	r3, r7, r4
 8007b0a:	7a9b      	ldrb	r3, [r3, #10]
 8007b0c:	0018      	movs	r0, r3
 8007b0e:	f000 f91d 	bl	8007d4c <nRF24_sendRegisterValue>
		nRF24_sendRegisterValue(Reg_Data[11]);
 8007b12:	193b      	adds	r3, r7, r4
 8007b14:	7adb      	ldrb	r3, [r3, #11]
 8007b16:	0018      	movs	r0, r3
 8007b18:	f000 f918 	bl	8007d4c <nRF24_sendRegisterValue>
		nRF24_sendRegisterValue(Reg_Data[12]);
 8007b1c:	193b      	adds	r3, r7, r4
 8007b1e:	7b1b      	ldrb	r3, [r3, #12]
 8007b20:	0018      	movs	r0, r3
 8007b22:	f000 f913 	bl	8007d4c <nRF24_sendRegisterValue>
		nRF24_sendRegisterValue(Reg_Data[13]);
 8007b26:	193b      	adds	r3, r7, r4
 8007b28:	7b5b      	ldrb	r3, [r3, #13]
 8007b2a:	0018      	movs	r0, r3
 8007b2c:	f000 f90e 	bl	8007d4c <nRF24_sendRegisterValue>
		nRF24_sendRegisterValue(Reg_Data[14]);
 8007b30:	193b      	adds	r3, r7, r4
 8007b32:	7b9b      	ldrb	r3, [r3, #14]
 8007b34:	0018      	movs	r0, r3
 8007b36:	f000 f909 	bl	8007d4c <nRF24_sendRegisterValue>
		HAL_UART_Transmit(&hlpuart1, (uint8_t*)"RX_ADR_P1_reg:\n",15, HAL_MAX_DELAY);
 8007b3a:	2301      	movs	r3, #1
 8007b3c:	425b      	negs	r3, r3
 8007b3e:	4975      	ldr	r1, [pc, #468]	; (8007d14 <nRF24_Register_Display+0x334>)
 8007b40:	4868      	ldr	r0, [pc, #416]	; (8007ce4 <nRF24_Register_Display+0x304>)
 8007b42:	220f      	movs	r2, #15
 8007b44:	f7fe fdd0 	bl	80066e8 <HAL_UART_Transmit>
		nRF24_sendRegisterValue(Reg_Data[15]);
 8007b48:	193b      	adds	r3, r7, r4
 8007b4a:	7bdb      	ldrb	r3, [r3, #15]
 8007b4c:	0018      	movs	r0, r3
 8007b4e:	f000 f8fd 	bl	8007d4c <nRF24_sendRegisterValue>
		nRF24_sendRegisterValue(Reg_Data[16]);
 8007b52:	193b      	adds	r3, r7, r4
 8007b54:	7c1b      	ldrb	r3, [r3, #16]
 8007b56:	0018      	movs	r0, r3
 8007b58:	f000 f8f8 	bl	8007d4c <nRF24_sendRegisterValue>
		nRF24_sendRegisterValue(Reg_Data[17]);
 8007b5c:	193b      	adds	r3, r7, r4
 8007b5e:	7c5b      	ldrb	r3, [r3, #17]
 8007b60:	0018      	movs	r0, r3
 8007b62:	f000 f8f3 	bl	8007d4c <nRF24_sendRegisterValue>
		nRF24_sendRegisterValue(Reg_Data[18]);
 8007b66:	193b      	adds	r3, r7, r4
 8007b68:	7c9b      	ldrb	r3, [r3, #18]
 8007b6a:	0018      	movs	r0, r3
 8007b6c:	f000 f8ee 	bl	8007d4c <nRF24_sendRegisterValue>
		nRF24_sendRegisterValue(Reg_Data[19]);
 8007b70:	193b      	adds	r3, r7, r4
 8007b72:	7cdb      	ldrb	r3, [r3, #19]
 8007b74:	0018      	movs	r0, r3
 8007b76:	f000 f8e9 	bl	8007d4c <nRF24_sendRegisterValue>
		HAL_UART_Transmit(&hlpuart1, (uint8_t*)"RX_ADR_P2_reg:",15, HAL_MAX_DELAY);
 8007b7a:	2301      	movs	r3, #1
 8007b7c:	425b      	negs	r3, r3
 8007b7e:	4966      	ldr	r1, [pc, #408]	; (8007d18 <nRF24_Register_Display+0x338>)
 8007b80:	4858      	ldr	r0, [pc, #352]	; (8007ce4 <nRF24_Register_Display+0x304>)
 8007b82:	220f      	movs	r2, #15
 8007b84:	f7fe fdb0 	bl	80066e8 <HAL_UART_Transmit>
		nRF24_sendRegisterValue(Reg_Data[20]);
 8007b88:	193b      	adds	r3, r7, r4
 8007b8a:	7d1b      	ldrb	r3, [r3, #20]
 8007b8c:	0018      	movs	r0, r3
 8007b8e:	f000 f8dd 	bl	8007d4c <nRF24_sendRegisterValue>
		HAL_UART_Transmit(&hlpuart1, (uint8_t*)"RX_ADR_P3_reg:",15, HAL_MAX_DELAY);
 8007b92:	2301      	movs	r3, #1
 8007b94:	425b      	negs	r3, r3
 8007b96:	4961      	ldr	r1, [pc, #388]	; (8007d1c <nRF24_Register_Display+0x33c>)
 8007b98:	4852      	ldr	r0, [pc, #328]	; (8007ce4 <nRF24_Register_Display+0x304>)
 8007b9a:	220f      	movs	r2, #15
 8007b9c:	f7fe fda4 	bl	80066e8 <HAL_UART_Transmit>
		nRF24_sendRegisterValue(Reg_Data[21]);
 8007ba0:	193b      	adds	r3, r7, r4
 8007ba2:	7d5b      	ldrb	r3, [r3, #21]
 8007ba4:	0018      	movs	r0, r3
 8007ba6:	f000 f8d1 	bl	8007d4c <nRF24_sendRegisterValue>
		HAL_UART_Transmit(&hlpuart1, (uint8_t*)"RX_ADR_P4_reg:",15, HAL_MAX_DELAY);
 8007baa:	2301      	movs	r3, #1
 8007bac:	425b      	negs	r3, r3
 8007bae:	495c      	ldr	r1, [pc, #368]	; (8007d20 <nRF24_Register_Display+0x340>)
 8007bb0:	484c      	ldr	r0, [pc, #304]	; (8007ce4 <nRF24_Register_Display+0x304>)
 8007bb2:	220f      	movs	r2, #15
 8007bb4:	f7fe fd98 	bl	80066e8 <HAL_UART_Transmit>
		nRF24_sendRegisterValue(Reg_Data[22]);
 8007bb8:	193b      	adds	r3, r7, r4
 8007bba:	7d9b      	ldrb	r3, [r3, #22]
 8007bbc:	0018      	movs	r0, r3
 8007bbe:	f000 f8c5 	bl	8007d4c <nRF24_sendRegisterValue>
		HAL_UART_Transmit(&hlpuart1, (uint8_t*)"RX_ADR_P5_reg:",15, HAL_MAX_DELAY);
 8007bc2:	2301      	movs	r3, #1
 8007bc4:	425b      	negs	r3, r3
 8007bc6:	4957      	ldr	r1, [pc, #348]	; (8007d24 <nRF24_Register_Display+0x344>)
 8007bc8:	4846      	ldr	r0, [pc, #280]	; (8007ce4 <nRF24_Register_Display+0x304>)
 8007bca:	220f      	movs	r2, #15
 8007bcc:	f7fe fd8c 	bl	80066e8 <HAL_UART_Transmit>
		nRF24_sendRegisterValue(Reg_Data[23]);
 8007bd0:	193b      	adds	r3, r7, r4
 8007bd2:	7ddb      	ldrb	r3, [r3, #23]
 8007bd4:	0018      	movs	r0, r3
 8007bd6:	f000 f8b9 	bl	8007d4c <nRF24_sendRegisterValue>
		HAL_UART_Transmit(&hlpuart1, (uint8_t*)"TX_ADR_reg:\n",12, HAL_MAX_DELAY);
 8007bda:	2301      	movs	r3, #1
 8007bdc:	425b      	negs	r3, r3
 8007bde:	4952      	ldr	r1, [pc, #328]	; (8007d28 <nRF24_Register_Display+0x348>)
 8007be0:	4840      	ldr	r0, [pc, #256]	; (8007ce4 <nRF24_Register_Display+0x304>)
 8007be2:	220c      	movs	r2, #12
 8007be4:	f7fe fd80 	bl	80066e8 <HAL_UART_Transmit>
		nRF24_sendRegisterValue(Reg_Data[24]);
 8007be8:	193b      	adds	r3, r7, r4
 8007bea:	7e1b      	ldrb	r3, [r3, #24]
 8007bec:	0018      	movs	r0, r3
 8007bee:	f000 f8ad 	bl	8007d4c <nRF24_sendRegisterValue>
		nRF24_sendRegisterValue(Reg_Data[25]);
 8007bf2:	193b      	adds	r3, r7, r4
 8007bf4:	7e5b      	ldrb	r3, [r3, #25]
 8007bf6:	0018      	movs	r0, r3
 8007bf8:	f000 f8a8 	bl	8007d4c <nRF24_sendRegisterValue>
		nRF24_sendRegisterValue(Reg_Data[26]);
 8007bfc:	193b      	adds	r3, r7, r4
 8007bfe:	7e9b      	ldrb	r3, [r3, #26]
 8007c00:	0018      	movs	r0, r3
 8007c02:	f000 f8a3 	bl	8007d4c <nRF24_sendRegisterValue>
		nRF24_sendRegisterValue(Reg_Data[27]);
 8007c06:	193b      	adds	r3, r7, r4
 8007c08:	7edb      	ldrb	r3, [r3, #27]
 8007c0a:	0018      	movs	r0, r3
 8007c0c:	f000 f89e 	bl	8007d4c <nRF24_sendRegisterValue>
		nRF24_sendRegisterValue(Reg_Data[28]);
 8007c10:	193b      	adds	r3, r7, r4
 8007c12:	7f1b      	ldrb	r3, [r3, #28]
 8007c14:	0018      	movs	r0, r3
 8007c16:	f000 f899 	bl	8007d4c <nRF24_sendRegisterValue>
		HAL_UART_Transmit(&hlpuart1, (uint8_t*)"RX_PW_P0_reg:",13, HAL_MAX_DELAY);
 8007c1a:	2301      	movs	r3, #1
 8007c1c:	425b      	negs	r3, r3
 8007c1e:	4943      	ldr	r1, [pc, #268]	; (8007d2c <nRF24_Register_Display+0x34c>)
 8007c20:	4830      	ldr	r0, [pc, #192]	; (8007ce4 <nRF24_Register_Display+0x304>)
 8007c22:	220d      	movs	r2, #13
 8007c24:	f7fe fd60 	bl	80066e8 <HAL_UART_Transmit>
		nRF24_sendRegisterValue(Reg_Data[29]);
 8007c28:	193b      	adds	r3, r7, r4
 8007c2a:	7f5b      	ldrb	r3, [r3, #29]
 8007c2c:	0018      	movs	r0, r3
 8007c2e:	f000 f88d 	bl	8007d4c <nRF24_sendRegisterValue>
		HAL_UART_Transmit(&hlpuart1, (uint8_t*)"RX_PW_P1_reg:",13, HAL_MAX_DELAY);
 8007c32:	2301      	movs	r3, #1
 8007c34:	425b      	negs	r3, r3
 8007c36:	493e      	ldr	r1, [pc, #248]	; (8007d30 <nRF24_Register_Display+0x350>)
 8007c38:	482a      	ldr	r0, [pc, #168]	; (8007ce4 <nRF24_Register_Display+0x304>)
 8007c3a:	220d      	movs	r2, #13
 8007c3c:	f7fe fd54 	bl	80066e8 <HAL_UART_Transmit>
		nRF24_sendRegisterValue(Reg_Data[30]);
 8007c40:	193b      	adds	r3, r7, r4
 8007c42:	7f9b      	ldrb	r3, [r3, #30]
 8007c44:	0018      	movs	r0, r3
 8007c46:	f000 f881 	bl	8007d4c <nRF24_sendRegisterValue>
		HAL_UART_Transmit(&hlpuart1, (uint8_t*)"RX_PW_P2_reg:",13, HAL_MAX_DELAY);
 8007c4a:	2301      	movs	r3, #1
 8007c4c:	425b      	negs	r3, r3
 8007c4e:	4939      	ldr	r1, [pc, #228]	; (8007d34 <nRF24_Register_Display+0x354>)
 8007c50:	4824      	ldr	r0, [pc, #144]	; (8007ce4 <nRF24_Register_Display+0x304>)
 8007c52:	220d      	movs	r2, #13
 8007c54:	f7fe fd48 	bl	80066e8 <HAL_UART_Transmit>
		nRF24_sendRegisterValue(Reg_Data[31]);
 8007c58:	193b      	adds	r3, r7, r4
 8007c5a:	7fdb      	ldrb	r3, [r3, #31]
 8007c5c:	0018      	movs	r0, r3
 8007c5e:	f000 f875 	bl	8007d4c <nRF24_sendRegisterValue>
		HAL_UART_Transmit(&hlpuart1, (uint8_t*)"RX_PW_P3_reg:",13, HAL_MAX_DELAY);
 8007c62:	2301      	movs	r3, #1
 8007c64:	425b      	negs	r3, r3
 8007c66:	4934      	ldr	r1, [pc, #208]	; (8007d38 <nRF24_Register_Display+0x358>)
 8007c68:	481e      	ldr	r0, [pc, #120]	; (8007ce4 <nRF24_Register_Display+0x304>)
 8007c6a:	220d      	movs	r2, #13
 8007c6c:	f7fe fd3c 	bl	80066e8 <HAL_UART_Transmit>
		nRF24_sendRegisterValue(Reg_Data[32]);
 8007c70:	193b      	adds	r3, r7, r4
 8007c72:	2220      	movs	r2, #32
 8007c74:	5c9b      	ldrb	r3, [r3, r2]
 8007c76:	0018      	movs	r0, r3
 8007c78:	f000 f868 	bl	8007d4c <nRF24_sendRegisterValue>
		HAL_UART_Transmit(&hlpuart1, (uint8_t*)"RX_PW_P4_reg:",13, HAL_MAX_DELAY);
 8007c7c:	2301      	movs	r3, #1
 8007c7e:	425b      	negs	r3, r3
 8007c80:	492e      	ldr	r1, [pc, #184]	; (8007d3c <nRF24_Register_Display+0x35c>)
 8007c82:	4818      	ldr	r0, [pc, #96]	; (8007ce4 <nRF24_Register_Display+0x304>)
 8007c84:	220d      	movs	r2, #13
 8007c86:	f7fe fd2f 	bl	80066e8 <HAL_UART_Transmit>
		nRF24_sendRegisterValue(Reg_Data[33]);
 8007c8a:	193b      	adds	r3, r7, r4
 8007c8c:	2221      	movs	r2, #33	; 0x21
 8007c8e:	5c9b      	ldrb	r3, [r3, r2]
 8007c90:	0018      	movs	r0, r3
 8007c92:	f000 f85b 	bl	8007d4c <nRF24_sendRegisterValue>
		HAL_UART_Transmit(&hlpuart1, (uint8_t*)"RX_PW_P5_reg:",13, HAL_MAX_DELAY);
 8007c96:	2301      	movs	r3, #1
 8007c98:	425b      	negs	r3, r3
 8007c9a:	4929      	ldr	r1, [pc, #164]	; (8007d40 <nRF24_Register_Display+0x360>)
 8007c9c:	4811      	ldr	r0, [pc, #68]	; (8007ce4 <nRF24_Register_Display+0x304>)
 8007c9e:	220d      	movs	r2, #13
 8007ca0:	f7fe fd22 	bl	80066e8 <HAL_UART_Transmit>
		nRF24_sendRegisterValue(Reg_Data[34]);
 8007ca4:	193b      	adds	r3, r7, r4
 8007ca6:	2222      	movs	r2, #34	; 0x22
 8007ca8:	5c9b      	ldrb	r3, [r3, r2]
 8007caa:	0018      	movs	r0, r3
 8007cac:	f000 f84e 	bl	8007d4c <nRF24_sendRegisterValue>
		HAL_UART_Transmit(&hlpuart1, (uint8_t*)"FIFO_STATUS_reg:",16, HAL_MAX_DELAY);
 8007cb0:	2301      	movs	r3, #1
 8007cb2:	425b      	negs	r3, r3
 8007cb4:	4923      	ldr	r1, [pc, #140]	; (8007d44 <nRF24_Register_Display+0x364>)
 8007cb6:	480b      	ldr	r0, [pc, #44]	; (8007ce4 <nRF24_Register_Display+0x304>)
 8007cb8:	2210      	movs	r2, #16
 8007cba:	f7fe fd15 	bl	80066e8 <HAL_UART_Transmit>
		nRF24_sendRegisterValue(Reg_Data[35]);
 8007cbe:	193b      	adds	r3, r7, r4
 8007cc0:	2223      	movs	r2, #35	; 0x23
 8007cc2:	5c9b      	ldrb	r3, [r3, r2]
 8007cc4:	0018      	movs	r0, r3
 8007cc6:	f000 f841 	bl	8007d4c <nRF24_sendRegisterValue>
		HAL_UART_Transmit(&hlpuart1, (uint8_t*)"******************\n\n",20, HAL_MAX_DELAY);
 8007cca:	2301      	movs	r3, #1
 8007ccc:	425b      	negs	r3, r3
 8007cce:	491e      	ldr	r1, [pc, #120]	; (8007d48 <nRF24_Register_Display+0x368>)
 8007cd0:	4804      	ldr	r0, [pc, #16]	; (8007ce4 <nRF24_Register_Display+0x304>)
 8007cd2:	2214      	movs	r2, #20
 8007cd4:	f7fe fd08 	bl	80066e8 <HAL_UART_Transmit>
}
 8007cd8:	46c0      	nop			; (mov r8, r8)
 8007cda:	46bd      	mov	sp, r7
 8007cdc:	b00d      	add	sp, #52	; 0x34
 8007cde:	bd90      	pop	{r4, r7, pc}
 8007ce0:	0800c9c0 	.word	0x0800c9c0
 8007ce4:	20000268 	.word	0x20000268
 8007ce8:	0800c9d4 	.word	0x0800c9d4
 8007cec:	0800c9e8 	.word	0x0800c9e8
 8007cf0:	0800c9f0 	.word	0x0800c9f0
 8007cf4:	0800c9fc 	.word	0x0800c9fc
 8007cf8:	0800ca0c 	.word	0x0800ca0c
 8007cfc:	0800ca1c 	.word	0x0800ca1c
 8007d00:	0800ca2c 	.word	0x0800ca2c
 8007d04:	0800ca38 	.word	0x0800ca38
 8007d08:	0800ca48 	.word	0x0800ca48
 8007d0c:	0800ca58 	.word	0x0800ca58
 8007d10:	0800ca68 	.word	0x0800ca68
 8007d14:	0800ca78 	.word	0x0800ca78
 8007d18:	0800ca88 	.word	0x0800ca88
 8007d1c:	0800ca98 	.word	0x0800ca98
 8007d20:	0800caa8 	.word	0x0800caa8
 8007d24:	0800cab8 	.word	0x0800cab8
 8007d28:	0800cac8 	.word	0x0800cac8
 8007d2c:	0800cad8 	.word	0x0800cad8
 8007d30:	0800cae8 	.word	0x0800cae8
 8007d34:	0800caf8 	.word	0x0800caf8
 8007d38:	0800cb08 	.word	0x0800cb08
 8007d3c:	0800cb18 	.word	0x0800cb18
 8007d40:	0800cb28 	.word	0x0800cb28
 8007d44:	0800cb38 	.word	0x0800cb38
 8007d48:	0800cb4c 	.word	0x0800cb4c

08007d4c <nRF24_sendRegisterValue>:


void nRF24_sendRegisterValue(uint8_t value)
{
 8007d4c:	b590      	push	{r4, r7, lr}
 8007d4e:	b087      	sub	sp, #28
 8007d50:	af00      	add	r7, sp, #0
 8007d52:	0002      	movs	r2, r0
 8007d54:	1dfb      	adds	r3, r7, #7
 8007d56:	701a      	strb	r2, [r3, #0]
  char buffer[10];
  sprintf(buffer, "0x%02X\r\n", value); // Convert value to hexadecimal string
 8007d58:	1dfb      	adds	r3, r7, #7
 8007d5a:	781a      	ldrb	r2, [r3, #0]
 8007d5c:	490a      	ldr	r1, [pc, #40]	; (8007d88 <nRF24_sendRegisterValue+0x3c>)
 8007d5e:	240c      	movs	r4, #12
 8007d60:	193b      	adds	r3, r7, r4
 8007d62:	0018      	movs	r0, r3
 8007d64:	f000 fec0 	bl	8008ae8 <siprintf>
  HAL_UART_Transmit(&hlpuart1, (uint8_t*)buffer, strlen(buffer), HAL_MAX_DELAY);
 8007d68:	193b      	adds	r3, r7, r4
 8007d6a:	0018      	movs	r0, r3
 8007d6c:	f7f8 f9cc 	bl	8000108 <strlen>
 8007d70:	0003      	movs	r3, r0
 8007d72:	b29a      	uxth	r2, r3
 8007d74:	2301      	movs	r3, #1
 8007d76:	425b      	negs	r3, r3
 8007d78:	1939      	adds	r1, r7, r4
 8007d7a:	4804      	ldr	r0, [pc, #16]	; (8007d8c <nRF24_sendRegisterValue+0x40>)
 8007d7c:	f7fe fcb4 	bl	80066e8 <HAL_UART_Transmit>
}
 8007d80:	46c0      	nop			; (mov r8, r8)
 8007d82:	46bd      	mov	sp, r7
 8007d84:	b007      	add	sp, #28
 8007d86:	bd90      	pop	{r4, r7, pc}
 8007d88:	0800cb64 	.word	0x0800cb64
 8007d8c:	20000268 	.word	0x20000268

08007d90 <__errno>:
 8007d90:	4b01      	ldr	r3, [pc, #4]	; (8007d98 <__errno+0x8>)
 8007d92:	6818      	ldr	r0, [r3, #0]
 8007d94:	4770      	bx	lr
 8007d96:	46c0      	nop			; (mov r8, r8)
 8007d98:	2000001c 	.word	0x2000001c

08007d9c <__libc_init_array>:
 8007d9c:	b570      	push	{r4, r5, r6, lr}
 8007d9e:	2600      	movs	r6, #0
 8007da0:	4d0c      	ldr	r5, [pc, #48]	; (8007dd4 <__libc_init_array+0x38>)
 8007da2:	4c0d      	ldr	r4, [pc, #52]	; (8007dd8 <__libc_init_array+0x3c>)
 8007da4:	1b64      	subs	r4, r4, r5
 8007da6:	10a4      	asrs	r4, r4, #2
 8007da8:	42a6      	cmp	r6, r4
 8007daa:	d109      	bne.n	8007dc0 <__libc_init_array+0x24>
 8007dac:	2600      	movs	r6, #0
 8007dae:	f004 fd47 	bl	800c840 <_init>
 8007db2:	4d0a      	ldr	r5, [pc, #40]	; (8007ddc <__libc_init_array+0x40>)
 8007db4:	4c0a      	ldr	r4, [pc, #40]	; (8007de0 <__libc_init_array+0x44>)
 8007db6:	1b64      	subs	r4, r4, r5
 8007db8:	10a4      	asrs	r4, r4, #2
 8007dba:	42a6      	cmp	r6, r4
 8007dbc:	d105      	bne.n	8007dca <__libc_init_array+0x2e>
 8007dbe:	bd70      	pop	{r4, r5, r6, pc}
 8007dc0:	00b3      	lsls	r3, r6, #2
 8007dc2:	58eb      	ldr	r3, [r5, r3]
 8007dc4:	4798      	blx	r3
 8007dc6:	3601      	adds	r6, #1
 8007dc8:	e7ee      	b.n	8007da8 <__libc_init_array+0xc>
 8007dca:	00b3      	lsls	r3, r6, #2
 8007dcc:	58eb      	ldr	r3, [r5, r3]
 8007dce:	4798      	blx	r3
 8007dd0:	3601      	adds	r6, #1
 8007dd2:	e7f2      	b.n	8007dba <__libc_init_array+0x1e>
 8007dd4:	0800d204 	.word	0x0800d204
 8007dd8:	0800d204 	.word	0x0800d204
 8007ddc:	0800d204 	.word	0x0800d204
 8007de0:	0800d208 	.word	0x0800d208

08007de4 <memset>:
 8007de4:	0003      	movs	r3, r0
 8007de6:	1882      	adds	r2, r0, r2
 8007de8:	4293      	cmp	r3, r2
 8007dea:	d100      	bne.n	8007dee <memset+0xa>
 8007dec:	4770      	bx	lr
 8007dee:	7019      	strb	r1, [r3, #0]
 8007df0:	3301      	adds	r3, #1
 8007df2:	e7f9      	b.n	8007de8 <memset+0x4>

08007df4 <__cvt>:
 8007df4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007df6:	001e      	movs	r6, r3
 8007df8:	2300      	movs	r3, #0
 8007dfa:	0014      	movs	r4, r2
 8007dfc:	b08b      	sub	sp, #44	; 0x2c
 8007dfe:	429e      	cmp	r6, r3
 8007e00:	da04      	bge.n	8007e0c <__cvt+0x18>
 8007e02:	2180      	movs	r1, #128	; 0x80
 8007e04:	0609      	lsls	r1, r1, #24
 8007e06:	1873      	adds	r3, r6, r1
 8007e08:	001e      	movs	r6, r3
 8007e0a:	232d      	movs	r3, #45	; 0x2d
 8007e0c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8007e0e:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8007e10:	7013      	strb	r3, [r2, #0]
 8007e12:	2320      	movs	r3, #32
 8007e14:	2203      	movs	r2, #3
 8007e16:	439f      	bics	r7, r3
 8007e18:	2f46      	cmp	r7, #70	; 0x46
 8007e1a:	d007      	beq.n	8007e2c <__cvt+0x38>
 8007e1c:	003b      	movs	r3, r7
 8007e1e:	3b45      	subs	r3, #69	; 0x45
 8007e20:	4259      	negs	r1, r3
 8007e22:	414b      	adcs	r3, r1
 8007e24:	9910      	ldr	r1, [sp, #64]	; 0x40
 8007e26:	3a01      	subs	r2, #1
 8007e28:	18cb      	adds	r3, r1, r3
 8007e2a:	9310      	str	r3, [sp, #64]	; 0x40
 8007e2c:	ab09      	add	r3, sp, #36	; 0x24
 8007e2e:	9304      	str	r3, [sp, #16]
 8007e30:	ab08      	add	r3, sp, #32
 8007e32:	9303      	str	r3, [sp, #12]
 8007e34:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8007e36:	9200      	str	r2, [sp, #0]
 8007e38:	9302      	str	r3, [sp, #8]
 8007e3a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007e3c:	0022      	movs	r2, r4
 8007e3e:	9301      	str	r3, [sp, #4]
 8007e40:	0033      	movs	r3, r6
 8007e42:	f001 fdc3 	bl	80099cc <_dtoa_r>
 8007e46:	0005      	movs	r5, r0
 8007e48:	2f47      	cmp	r7, #71	; 0x47
 8007e4a:	d102      	bne.n	8007e52 <__cvt+0x5e>
 8007e4c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007e4e:	07db      	lsls	r3, r3, #31
 8007e50:	d528      	bpl.n	8007ea4 <__cvt+0xb0>
 8007e52:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007e54:	18eb      	adds	r3, r5, r3
 8007e56:	9307      	str	r3, [sp, #28]
 8007e58:	2f46      	cmp	r7, #70	; 0x46
 8007e5a:	d114      	bne.n	8007e86 <__cvt+0x92>
 8007e5c:	782b      	ldrb	r3, [r5, #0]
 8007e5e:	2b30      	cmp	r3, #48	; 0x30
 8007e60:	d10c      	bne.n	8007e7c <__cvt+0x88>
 8007e62:	2200      	movs	r2, #0
 8007e64:	2300      	movs	r3, #0
 8007e66:	0020      	movs	r0, r4
 8007e68:	0031      	movs	r1, r6
 8007e6a:	f7f8 faef 	bl	800044c <__aeabi_dcmpeq>
 8007e6e:	2800      	cmp	r0, #0
 8007e70:	d104      	bne.n	8007e7c <__cvt+0x88>
 8007e72:	2301      	movs	r3, #1
 8007e74:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8007e76:	1a9b      	subs	r3, r3, r2
 8007e78:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8007e7a:	6013      	str	r3, [r2, #0]
 8007e7c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8007e7e:	9a07      	ldr	r2, [sp, #28]
 8007e80:	681b      	ldr	r3, [r3, #0]
 8007e82:	18d3      	adds	r3, r2, r3
 8007e84:	9307      	str	r3, [sp, #28]
 8007e86:	2200      	movs	r2, #0
 8007e88:	2300      	movs	r3, #0
 8007e8a:	0020      	movs	r0, r4
 8007e8c:	0031      	movs	r1, r6
 8007e8e:	f7f8 fadd 	bl	800044c <__aeabi_dcmpeq>
 8007e92:	2800      	cmp	r0, #0
 8007e94:	d001      	beq.n	8007e9a <__cvt+0xa6>
 8007e96:	9b07      	ldr	r3, [sp, #28]
 8007e98:	9309      	str	r3, [sp, #36]	; 0x24
 8007e9a:	2230      	movs	r2, #48	; 0x30
 8007e9c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007e9e:	9907      	ldr	r1, [sp, #28]
 8007ea0:	428b      	cmp	r3, r1
 8007ea2:	d306      	bcc.n	8007eb2 <__cvt+0xbe>
 8007ea4:	0028      	movs	r0, r5
 8007ea6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007ea8:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8007eaa:	1b5b      	subs	r3, r3, r5
 8007eac:	6013      	str	r3, [r2, #0]
 8007eae:	b00b      	add	sp, #44	; 0x2c
 8007eb0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007eb2:	1c59      	adds	r1, r3, #1
 8007eb4:	9109      	str	r1, [sp, #36]	; 0x24
 8007eb6:	701a      	strb	r2, [r3, #0]
 8007eb8:	e7f0      	b.n	8007e9c <__cvt+0xa8>

08007eba <__exponent>:
 8007eba:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007ebc:	1c83      	adds	r3, r0, #2
 8007ebe:	b087      	sub	sp, #28
 8007ec0:	9303      	str	r3, [sp, #12]
 8007ec2:	0005      	movs	r5, r0
 8007ec4:	000c      	movs	r4, r1
 8007ec6:	232b      	movs	r3, #43	; 0x2b
 8007ec8:	7002      	strb	r2, [r0, #0]
 8007eca:	2900      	cmp	r1, #0
 8007ecc:	da01      	bge.n	8007ed2 <__exponent+0x18>
 8007ece:	424c      	negs	r4, r1
 8007ed0:	3302      	adds	r3, #2
 8007ed2:	706b      	strb	r3, [r5, #1]
 8007ed4:	2c09      	cmp	r4, #9
 8007ed6:	dd31      	ble.n	8007f3c <__exponent+0x82>
 8007ed8:	270a      	movs	r7, #10
 8007eda:	ab04      	add	r3, sp, #16
 8007edc:	1dde      	adds	r6, r3, #7
 8007ede:	0020      	movs	r0, r4
 8007ee0:	0039      	movs	r1, r7
 8007ee2:	9601      	str	r6, [sp, #4]
 8007ee4:	f7f8 fa9c 	bl	8000420 <__aeabi_idivmod>
 8007ee8:	3e01      	subs	r6, #1
 8007eea:	3130      	adds	r1, #48	; 0x30
 8007eec:	0020      	movs	r0, r4
 8007eee:	7031      	strb	r1, [r6, #0]
 8007ef0:	0039      	movs	r1, r7
 8007ef2:	9402      	str	r4, [sp, #8]
 8007ef4:	f7f8 f9ae 	bl	8000254 <__divsi3>
 8007ef8:	9b02      	ldr	r3, [sp, #8]
 8007efa:	0004      	movs	r4, r0
 8007efc:	2b63      	cmp	r3, #99	; 0x63
 8007efe:	dcee      	bgt.n	8007ede <__exponent+0x24>
 8007f00:	9b01      	ldr	r3, [sp, #4]
 8007f02:	3430      	adds	r4, #48	; 0x30
 8007f04:	1e9a      	subs	r2, r3, #2
 8007f06:	0013      	movs	r3, r2
 8007f08:	9903      	ldr	r1, [sp, #12]
 8007f0a:	7014      	strb	r4, [r2, #0]
 8007f0c:	a804      	add	r0, sp, #16
 8007f0e:	3007      	adds	r0, #7
 8007f10:	4298      	cmp	r0, r3
 8007f12:	d80e      	bhi.n	8007f32 <__exponent+0x78>
 8007f14:	ab04      	add	r3, sp, #16
 8007f16:	3307      	adds	r3, #7
 8007f18:	2000      	movs	r0, #0
 8007f1a:	429a      	cmp	r2, r3
 8007f1c:	d804      	bhi.n	8007f28 <__exponent+0x6e>
 8007f1e:	ab04      	add	r3, sp, #16
 8007f20:	3009      	adds	r0, #9
 8007f22:	18c0      	adds	r0, r0, r3
 8007f24:	9b01      	ldr	r3, [sp, #4]
 8007f26:	1ac0      	subs	r0, r0, r3
 8007f28:	9b03      	ldr	r3, [sp, #12]
 8007f2a:	1818      	adds	r0, r3, r0
 8007f2c:	1b40      	subs	r0, r0, r5
 8007f2e:	b007      	add	sp, #28
 8007f30:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007f32:	7818      	ldrb	r0, [r3, #0]
 8007f34:	3301      	adds	r3, #1
 8007f36:	7008      	strb	r0, [r1, #0]
 8007f38:	3101      	adds	r1, #1
 8007f3a:	e7e7      	b.n	8007f0c <__exponent+0x52>
 8007f3c:	2330      	movs	r3, #48	; 0x30
 8007f3e:	18e4      	adds	r4, r4, r3
 8007f40:	70ab      	strb	r3, [r5, #2]
 8007f42:	1d28      	adds	r0, r5, #4
 8007f44:	70ec      	strb	r4, [r5, #3]
 8007f46:	e7f1      	b.n	8007f2c <__exponent+0x72>

08007f48 <_printf_float>:
 8007f48:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007f4a:	b095      	sub	sp, #84	; 0x54
 8007f4c:	000c      	movs	r4, r1
 8007f4e:	9209      	str	r2, [sp, #36]	; 0x24
 8007f50:	001e      	movs	r6, r3
 8007f52:	9d1a      	ldr	r5, [sp, #104]	; 0x68
 8007f54:	0007      	movs	r7, r0
 8007f56:	f002 fec7 	bl	800ace8 <_localeconv_r>
 8007f5a:	6803      	ldr	r3, [r0, #0]
 8007f5c:	0018      	movs	r0, r3
 8007f5e:	930c      	str	r3, [sp, #48]	; 0x30
 8007f60:	f7f8 f8d2 	bl	8000108 <strlen>
 8007f64:	2300      	movs	r3, #0
 8007f66:	9312      	str	r3, [sp, #72]	; 0x48
 8007f68:	7e23      	ldrb	r3, [r4, #24]
 8007f6a:	2207      	movs	r2, #7
 8007f6c:	930a      	str	r3, [sp, #40]	; 0x28
 8007f6e:	6823      	ldr	r3, [r4, #0]
 8007f70:	900e      	str	r0, [sp, #56]	; 0x38
 8007f72:	930d      	str	r3, [sp, #52]	; 0x34
 8007f74:	990d      	ldr	r1, [sp, #52]	; 0x34
 8007f76:	682b      	ldr	r3, [r5, #0]
 8007f78:	05c9      	lsls	r1, r1, #23
 8007f7a:	d547      	bpl.n	800800c <_printf_float+0xc4>
 8007f7c:	189b      	adds	r3, r3, r2
 8007f7e:	4393      	bics	r3, r2
 8007f80:	001a      	movs	r2, r3
 8007f82:	3208      	adds	r2, #8
 8007f84:	602a      	str	r2, [r5, #0]
 8007f86:	681a      	ldr	r2, [r3, #0]
 8007f88:	685b      	ldr	r3, [r3, #4]
 8007f8a:	64a2      	str	r2, [r4, #72]	; 0x48
 8007f8c:	64e3      	str	r3, [r4, #76]	; 0x4c
 8007f8e:	2201      	movs	r2, #1
 8007f90:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8007f92:	6ce5      	ldr	r5, [r4, #76]	; 0x4c
 8007f94:	930b      	str	r3, [sp, #44]	; 0x2c
 8007f96:	006b      	lsls	r3, r5, #1
 8007f98:	085b      	lsrs	r3, r3, #1
 8007f9a:	930f      	str	r3, [sp, #60]	; 0x3c
 8007f9c:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8007f9e:	4ba7      	ldr	r3, [pc, #668]	; (800823c <_printf_float+0x2f4>)
 8007fa0:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8007fa2:	4252      	negs	r2, r2
 8007fa4:	f7fa fcb0 	bl	8002908 <__aeabi_dcmpun>
 8007fa8:	2800      	cmp	r0, #0
 8007faa:	d131      	bne.n	8008010 <_printf_float+0xc8>
 8007fac:	2201      	movs	r2, #1
 8007fae:	4ba3      	ldr	r3, [pc, #652]	; (800823c <_printf_float+0x2f4>)
 8007fb0:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8007fb2:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8007fb4:	4252      	negs	r2, r2
 8007fb6:	f7f8 fa59 	bl	800046c <__aeabi_dcmple>
 8007fba:	2800      	cmp	r0, #0
 8007fbc:	d128      	bne.n	8008010 <_printf_float+0xc8>
 8007fbe:	2200      	movs	r2, #0
 8007fc0:	2300      	movs	r3, #0
 8007fc2:	0029      	movs	r1, r5
 8007fc4:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8007fc6:	f7f8 fa47 	bl	8000458 <__aeabi_dcmplt>
 8007fca:	2800      	cmp	r0, #0
 8007fcc:	d003      	beq.n	8007fd6 <_printf_float+0x8e>
 8007fce:	0023      	movs	r3, r4
 8007fd0:	222d      	movs	r2, #45	; 0x2d
 8007fd2:	3343      	adds	r3, #67	; 0x43
 8007fd4:	701a      	strb	r2, [r3, #0]
 8007fd6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007fd8:	4d99      	ldr	r5, [pc, #612]	; (8008240 <_printf_float+0x2f8>)
 8007fda:	2b47      	cmp	r3, #71	; 0x47
 8007fdc:	d900      	bls.n	8007fe0 <_printf_float+0x98>
 8007fde:	4d99      	ldr	r5, [pc, #612]	; (8008244 <_printf_float+0x2fc>)
 8007fe0:	2303      	movs	r3, #3
 8007fe2:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8007fe4:	6123      	str	r3, [r4, #16]
 8007fe6:	3301      	adds	r3, #1
 8007fe8:	439a      	bics	r2, r3
 8007fea:	2300      	movs	r3, #0
 8007fec:	6022      	str	r2, [r4, #0]
 8007fee:	930b      	str	r3, [sp, #44]	; 0x2c
 8007ff0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007ff2:	0021      	movs	r1, r4
 8007ff4:	0038      	movs	r0, r7
 8007ff6:	9600      	str	r6, [sp, #0]
 8007ff8:	aa13      	add	r2, sp, #76	; 0x4c
 8007ffa:	f000 f9e7 	bl	80083cc <_printf_common>
 8007ffe:	1c43      	adds	r3, r0, #1
 8008000:	d000      	beq.n	8008004 <_printf_float+0xbc>
 8008002:	e0a2      	b.n	800814a <_printf_float+0x202>
 8008004:	2001      	movs	r0, #1
 8008006:	4240      	negs	r0, r0
 8008008:	b015      	add	sp, #84	; 0x54
 800800a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800800c:	3307      	adds	r3, #7
 800800e:	e7b6      	b.n	8007f7e <_printf_float+0x36>
 8008010:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8008012:	002b      	movs	r3, r5
 8008014:	0010      	movs	r0, r2
 8008016:	0029      	movs	r1, r5
 8008018:	f7fa fc76 	bl	8002908 <__aeabi_dcmpun>
 800801c:	2800      	cmp	r0, #0
 800801e:	d00b      	beq.n	8008038 <_printf_float+0xf0>
 8008020:	2d00      	cmp	r5, #0
 8008022:	da03      	bge.n	800802c <_printf_float+0xe4>
 8008024:	0023      	movs	r3, r4
 8008026:	222d      	movs	r2, #45	; 0x2d
 8008028:	3343      	adds	r3, #67	; 0x43
 800802a:	701a      	strb	r2, [r3, #0]
 800802c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800802e:	4d86      	ldr	r5, [pc, #536]	; (8008248 <_printf_float+0x300>)
 8008030:	2b47      	cmp	r3, #71	; 0x47
 8008032:	d9d5      	bls.n	8007fe0 <_printf_float+0x98>
 8008034:	4d85      	ldr	r5, [pc, #532]	; (800824c <_printf_float+0x304>)
 8008036:	e7d3      	b.n	8007fe0 <_printf_float+0x98>
 8008038:	2220      	movs	r2, #32
 800803a:	990a      	ldr	r1, [sp, #40]	; 0x28
 800803c:	6863      	ldr	r3, [r4, #4]
 800803e:	4391      	bics	r1, r2
 8008040:	910f      	str	r1, [sp, #60]	; 0x3c
 8008042:	1c5a      	adds	r2, r3, #1
 8008044:	d149      	bne.n	80080da <_printf_float+0x192>
 8008046:	3307      	adds	r3, #7
 8008048:	6063      	str	r3, [r4, #4]
 800804a:	2380      	movs	r3, #128	; 0x80
 800804c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800804e:	00db      	lsls	r3, r3, #3
 8008050:	4313      	orrs	r3, r2
 8008052:	2200      	movs	r2, #0
 8008054:	9206      	str	r2, [sp, #24]
 8008056:	aa12      	add	r2, sp, #72	; 0x48
 8008058:	9205      	str	r2, [sp, #20]
 800805a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800805c:	a908      	add	r1, sp, #32
 800805e:	9204      	str	r2, [sp, #16]
 8008060:	aa11      	add	r2, sp, #68	; 0x44
 8008062:	9203      	str	r2, [sp, #12]
 8008064:	2223      	movs	r2, #35	; 0x23
 8008066:	6023      	str	r3, [r4, #0]
 8008068:	9301      	str	r3, [sp, #4]
 800806a:	6863      	ldr	r3, [r4, #4]
 800806c:	1852      	adds	r2, r2, r1
 800806e:	9202      	str	r2, [sp, #8]
 8008070:	9300      	str	r3, [sp, #0]
 8008072:	0038      	movs	r0, r7
 8008074:	002b      	movs	r3, r5
 8008076:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8008078:	f7ff febc 	bl	8007df4 <__cvt>
 800807c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800807e:	0005      	movs	r5, r0
 8008080:	9911      	ldr	r1, [sp, #68]	; 0x44
 8008082:	2b47      	cmp	r3, #71	; 0x47
 8008084:	d108      	bne.n	8008098 <_printf_float+0x150>
 8008086:	1ccb      	adds	r3, r1, #3
 8008088:	db02      	blt.n	8008090 <_printf_float+0x148>
 800808a:	6863      	ldr	r3, [r4, #4]
 800808c:	4299      	cmp	r1, r3
 800808e:	dd48      	ble.n	8008122 <_printf_float+0x1da>
 8008090:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008092:	3b02      	subs	r3, #2
 8008094:	b2db      	uxtb	r3, r3
 8008096:	930a      	str	r3, [sp, #40]	; 0x28
 8008098:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800809a:	2b65      	cmp	r3, #101	; 0x65
 800809c:	d824      	bhi.n	80080e8 <_printf_float+0x1a0>
 800809e:	0020      	movs	r0, r4
 80080a0:	001a      	movs	r2, r3
 80080a2:	3901      	subs	r1, #1
 80080a4:	3050      	adds	r0, #80	; 0x50
 80080a6:	9111      	str	r1, [sp, #68]	; 0x44
 80080a8:	f7ff ff07 	bl	8007eba <__exponent>
 80080ac:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80080ae:	900b      	str	r0, [sp, #44]	; 0x2c
 80080b0:	1813      	adds	r3, r2, r0
 80080b2:	6123      	str	r3, [r4, #16]
 80080b4:	2a01      	cmp	r2, #1
 80080b6:	dc02      	bgt.n	80080be <_printf_float+0x176>
 80080b8:	6822      	ldr	r2, [r4, #0]
 80080ba:	07d2      	lsls	r2, r2, #31
 80080bc:	d501      	bpl.n	80080c2 <_printf_float+0x17a>
 80080be:	3301      	adds	r3, #1
 80080c0:	6123      	str	r3, [r4, #16]
 80080c2:	2323      	movs	r3, #35	; 0x23
 80080c4:	aa08      	add	r2, sp, #32
 80080c6:	189b      	adds	r3, r3, r2
 80080c8:	781b      	ldrb	r3, [r3, #0]
 80080ca:	2b00      	cmp	r3, #0
 80080cc:	d100      	bne.n	80080d0 <_printf_float+0x188>
 80080ce:	e78f      	b.n	8007ff0 <_printf_float+0xa8>
 80080d0:	0023      	movs	r3, r4
 80080d2:	222d      	movs	r2, #45	; 0x2d
 80080d4:	3343      	adds	r3, #67	; 0x43
 80080d6:	701a      	strb	r2, [r3, #0]
 80080d8:	e78a      	b.n	8007ff0 <_printf_float+0xa8>
 80080da:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80080dc:	2a47      	cmp	r2, #71	; 0x47
 80080de:	d1b4      	bne.n	800804a <_printf_float+0x102>
 80080e0:	2b00      	cmp	r3, #0
 80080e2:	d1b2      	bne.n	800804a <_printf_float+0x102>
 80080e4:	3301      	adds	r3, #1
 80080e6:	e7af      	b.n	8008048 <_printf_float+0x100>
 80080e8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80080ea:	2b66      	cmp	r3, #102	; 0x66
 80080ec:	d11b      	bne.n	8008126 <_printf_float+0x1de>
 80080ee:	6863      	ldr	r3, [r4, #4]
 80080f0:	2900      	cmp	r1, #0
 80080f2:	dd0d      	ble.n	8008110 <_printf_float+0x1c8>
 80080f4:	6121      	str	r1, [r4, #16]
 80080f6:	2b00      	cmp	r3, #0
 80080f8:	d102      	bne.n	8008100 <_printf_float+0x1b8>
 80080fa:	6822      	ldr	r2, [r4, #0]
 80080fc:	07d2      	lsls	r2, r2, #31
 80080fe:	d502      	bpl.n	8008106 <_printf_float+0x1be>
 8008100:	3301      	adds	r3, #1
 8008102:	1859      	adds	r1, r3, r1
 8008104:	6121      	str	r1, [r4, #16]
 8008106:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008108:	65a3      	str	r3, [r4, #88]	; 0x58
 800810a:	2300      	movs	r3, #0
 800810c:	930b      	str	r3, [sp, #44]	; 0x2c
 800810e:	e7d8      	b.n	80080c2 <_printf_float+0x17a>
 8008110:	2b00      	cmp	r3, #0
 8008112:	d103      	bne.n	800811c <_printf_float+0x1d4>
 8008114:	2201      	movs	r2, #1
 8008116:	6821      	ldr	r1, [r4, #0]
 8008118:	4211      	tst	r1, r2
 800811a:	d000      	beq.n	800811e <_printf_float+0x1d6>
 800811c:	1c9a      	adds	r2, r3, #2
 800811e:	6122      	str	r2, [r4, #16]
 8008120:	e7f1      	b.n	8008106 <_printf_float+0x1be>
 8008122:	2367      	movs	r3, #103	; 0x67
 8008124:	930a      	str	r3, [sp, #40]	; 0x28
 8008126:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008128:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800812a:	4293      	cmp	r3, r2
 800812c:	db06      	blt.n	800813c <_printf_float+0x1f4>
 800812e:	6822      	ldr	r2, [r4, #0]
 8008130:	6123      	str	r3, [r4, #16]
 8008132:	07d2      	lsls	r2, r2, #31
 8008134:	d5e7      	bpl.n	8008106 <_printf_float+0x1be>
 8008136:	3301      	adds	r3, #1
 8008138:	6123      	str	r3, [r4, #16]
 800813a:	e7e4      	b.n	8008106 <_printf_float+0x1be>
 800813c:	2101      	movs	r1, #1
 800813e:	2b00      	cmp	r3, #0
 8008140:	dc01      	bgt.n	8008146 <_printf_float+0x1fe>
 8008142:	1849      	adds	r1, r1, r1
 8008144:	1ac9      	subs	r1, r1, r3
 8008146:	1852      	adds	r2, r2, r1
 8008148:	e7e9      	b.n	800811e <_printf_float+0x1d6>
 800814a:	6822      	ldr	r2, [r4, #0]
 800814c:	0553      	lsls	r3, r2, #21
 800814e:	d407      	bmi.n	8008160 <_printf_float+0x218>
 8008150:	6923      	ldr	r3, [r4, #16]
 8008152:	002a      	movs	r2, r5
 8008154:	0038      	movs	r0, r7
 8008156:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008158:	47b0      	blx	r6
 800815a:	1c43      	adds	r3, r0, #1
 800815c:	d128      	bne.n	80081b0 <_printf_float+0x268>
 800815e:	e751      	b.n	8008004 <_printf_float+0xbc>
 8008160:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008162:	2b65      	cmp	r3, #101	; 0x65
 8008164:	d800      	bhi.n	8008168 <_printf_float+0x220>
 8008166:	e0e1      	b.n	800832c <_printf_float+0x3e4>
 8008168:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 800816a:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 800816c:	2200      	movs	r2, #0
 800816e:	2300      	movs	r3, #0
 8008170:	f7f8 f96c 	bl	800044c <__aeabi_dcmpeq>
 8008174:	2800      	cmp	r0, #0
 8008176:	d031      	beq.n	80081dc <_printf_float+0x294>
 8008178:	2301      	movs	r3, #1
 800817a:	0038      	movs	r0, r7
 800817c:	4a34      	ldr	r2, [pc, #208]	; (8008250 <_printf_float+0x308>)
 800817e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008180:	47b0      	blx	r6
 8008182:	1c43      	adds	r3, r0, #1
 8008184:	d100      	bne.n	8008188 <_printf_float+0x240>
 8008186:	e73d      	b.n	8008004 <_printf_float+0xbc>
 8008188:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800818a:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800818c:	4293      	cmp	r3, r2
 800818e:	db02      	blt.n	8008196 <_printf_float+0x24e>
 8008190:	6823      	ldr	r3, [r4, #0]
 8008192:	07db      	lsls	r3, r3, #31
 8008194:	d50c      	bpl.n	80081b0 <_printf_float+0x268>
 8008196:	0038      	movs	r0, r7
 8008198:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800819a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800819c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800819e:	47b0      	blx	r6
 80081a0:	2500      	movs	r5, #0
 80081a2:	1c43      	adds	r3, r0, #1
 80081a4:	d100      	bne.n	80081a8 <_printf_float+0x260>
 80081a6:	e72d      	b.n	8008004 <_printf_float+0xbc>
 80081a8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80081aa:	3b01      	subs	r3, #1
 80081ac:	42ab      	cmp	r3, r5
 80081ae:	dc0a      	bgt.n	80081c6 <_printf_float+0x27e>
 80081b0:	6823      	ldr	r3, [r4, #0]
 80081b2:	079b      	lsls	r3, r3, #30
 80081b4:	d500      	bpl.n	80081b8 <_printf_float+0x270>
 80081b6:	e106      	b.n	80083c6 <_printf_float+0x47e>
 80081b8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80081ba:	68e0      	ldr	r0, [r4, #12]
 80081bc:	4298      	cmp	r0, r3
 80081be:	db00      	blt.n	80081c2 <_printf_float+0x27a>
 80081c0:	e722      	b.n	8008008 <_printf_float+0xc0>
 80081c2:	0018      	movs	r0, r3
 80081c4:	e720      	b.n	8008008 <_printf_float+0xc0>
 80081c6:	0022      	movs	r2, r4
 80081c8:	2301      	movs	r3, #1
 80081ca:	0038      	movs	r0, r7
 80081cc:	9909      	ldr	r1, [sp, #36]	; 0x24
 80081ce:	321a      	adds	r2, #26
 80081d0:	47b0      	blx	r6
 80081d2:	1c43      	adds	r3, r0, #1
 80081d4:	d100      	bne.n	80081d8 <_printf_float+0x290>
 80081d6:	e715      	b.n	8008004 <_printf_float+0xbc>
 80081d8:	3501      	adds	r5, #1
 80081da:	e7e5      	b.n	80081a8 <_printf_float+0x260>
 80081dc:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80081de:	2b00      	cmp	r3, #0
 80081e0:	dc38      	bgt.n	8008254 <_printf_float+0x30c>
 80081e2:	2301      	movs	r3, #1
 80081e4:	0038      	movs	r0, r7
 80081e6:	4a1a      	ldr	r2, [pc, #104]	; (8008250 <_printf_float+0x308>)
 80081e8:	9909      	ldr	r1, [sp, #36]	; 0x24
 80081ea:	47b0      	blx	r6
 80081ec:	1c43      	adds	r3, r0, #1
 80081ee:	d100      	bne.n	80081f2 <_printf_float+0x2aa>
 80081f0:	e708      	b.n	8008004 <_printf_float+0xbc>
 80081f2:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80081f4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80081f6:	4313      	orrs	r3, r2
 80081f8:	d102      	bne.n	8008200 <_printf_float+0x2b8>
 80081fa:	6823      	ldr	r3, [r4, #0]
 80081fc:	07db      	lsls	r3, r3, #31
 80081fe:	d5d7      	bpl.n	80081b0 <_printf_float+0x268>
 8008200:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008202:	0038      	movs	r0, r7
 8008204:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008206:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008208:	47b0      	blx	r6
 800820a:	1c43      	adds	r3, r0, #1
 800820c:	d100      	bne.n	8008210 <_printf_float+0x2c8>
 800820e:	e6f9      	b.n	8008004 <_printf_float+0xbc>
 8008210:	2300      	movs	r3, #0
 8008212:	930a      	str	r3, [sp, #40]	; 0x28
 8008214:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008216:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008218:	425b      	negs	r3, r3
 800821a:	4293      	cmp	r3, r2
 800821c:	dc01      	bgt.n	8008222 <_printf_float+0x2da>
 800821e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008220:	e797      	b.n	8008152 <_printf_float+0x20a>
 8008222:	0022      	movs	r2, r4
 8008224:	2301      	movs	r3, #1
 8008226:	0038      	movs	r0, r7
 8008228:	9909      	ldr	r1, [sp, #36]	; 0x24
 800822a:	321a      	adds	r2, #26
 800822c:	47b0      	blx	r6
 800822e:	1c43      	adds	r3, r0, #1
 8008230:	d100      	bne.n	8008234 <_printf_float+0x2ec>
 8008232:	e6e7      	b.n	8008004 <_printf_float+0xbc>
 8008234:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008236:	3301      	adds	r3, #1
 8008238:	e7eb      	b.n	8008212 <_printf_float+0x2ca>
 800823a:	46c0      	nop			; (mov r8, r8)
 800823c:	7fefffff 	.word	0x7fefffff
 8008240:	0800cd58 	.word	0x0800cd58
 8008244:	0800cd5c 	.word	0x0800cd5c
 8008248:	0800cd60 	.word	0x0800cd60
 800824c:	0800cd64 	.word	0x0800cd64
 8008250:	0800cd68 	.word	0x0800cd68
 8008254:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8008256:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008258:	920a      	str	r2, [sp, #40]	; 0x28
 800825a:	429a      	cmp	r2, r3
 800825c:	dd00      	ble.n	8008260 <_printf_float+0x318>
 800825e:	930a      	str	r3, [sp, #40]	; 0x28
 8008260:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008262:	2b00      	cmp	r3, #0
 8008264:	dc3c      	bgt.n	80082e0 <_printf_float+0x398>
 8008266:	2300      	movs	r3, #0
 8008268:	930d      	str	r3, [sp, #52]	; 0x34
 800826a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800826c:	43db      	mvns	r3, r3
 800826e:	17db      	asrs	r3, r3, #31
 8008270:	930f      	str	r3, [sp, #60]	; 0x3c
 8008272:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008274:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8008276:	930b      	str	r3, [sp, #44]	; 0x2c
 8008278:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800827a:	4013      	ands	r3, r2
 800827c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800827e:	1ad3      	subs	r3, r2, r3
 8008280:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008282:	4293      	cmp	r3, r2
 8008284:	dc34      	bgt.n	80082f0 <_printf_float+0x3a8>
 8008286:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008288:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800828a:	4293      	cmp	r3, r2
 800828c:	db3d      	blt.n	800830a <_printf_float+0x3c2>
 800828e:	6823      	ldr	r3, [r4, #0]
 8008290:	07db      	lsls	r3, r3, #31
 8008292:	d43a      	bmi.n	800830a <_printf_float+0x3c2>
 8008294:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8008296:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008298:	9911      	ldr	r1, [sp, #68]	; 0x44
 800829a:	1ad3      	subs	r3, r2, r3
 800829c:	1a52      	subs	r2, r2, r1
 800829e:	920a      	str	r2, [sp, #40]	; 0x28
 80082a0:	429a      	cmp	r2, r3
 80082a2:	dd00      	ble.n	80082a6 <_printf_float+0x35e>
 80082a4:	930a      	str	r3, [sp, #40]	; 0x28
 80082a6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80082a8:	2b00      	cmp	r3, #0
 80082aa:	dc36      	bgt.n	800831a <_printf_float+0x3d2>
 80082ac:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80082ae:	2500      	movs	r5, #0
 80082b0:	43db      	mvns	r3, r3
 80082b2:	17db      	asrs	r3, r3, #31
 80082b4:	930b      	str	r3, [sp, #44]	; 0x2c
 80082b6:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80082b8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80082ba:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80082bc:	1a9b      	subs	r3, r3, r2
 80082be:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80082c0:	400a      	ands	r2, r1
 80082c2:	1a9b      	subs	r3, r3, r2
 80082c4:	42ab      	cmp	r3, r5
 80082c6:	dc00      	bgt.n	80082ca <_printf_float+0x382>
 80082c8:	e772      	b.n	80081b0 <_printf_float+0x268>
 80082ca:	0022      	movs	r2, r4
 80082cc:	2301      	movs	r3, #1
 80082ce:	0038      	movs	r0, r7
 80082d0:	9909      	ldr	r1, [sp, #36]	; 0x24
 80082d2:	321a      	adds	r2, #26
 80082d4:	47b0      	blx	r6
 80082d6:	1c43      	adds	r3, r0, #1
 80082d8:	d100      	bne.n	80082dc <_printf_float+0x394>
 80082da:	e693      	b.n	8008004 <_printf_float+0xbc>
 80082dc:	3501      	adds	r5, #1
 80082de:	e7ea      	b.n	80082b6 <_printf_float+0x36e>
 80082e0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80082e2:	002a      	movs	r2, r5
 80082e4:	0038      	movs	r0, r7
 80082e6:	9909      	ldr	r1, [sp, #36]	; 0x24
 80082e8:	47b0      	blx	r6
 80082ea:	1c43      	adds	r3, r0, #1
 80082ec:	d1bb      	bne.n	8008266 <_printf_float+0x31e>
 80082ee:	e689      	b.n	8008004 <_printf_float+0xbc>
 80082f0:	0022      	movs	r2, r4
 80082f2:	2301      	movs	r3, #1
 80082f4:	0038      	movs	r0, r7
 80082f6:	9909      	ldr	r1, [sp, #36]	; 0x24
 80082f8:	321a      	adds	r2, #26
 80082fa:	47b0      	blx	r6
 80082fc:	1c43      	adds	r3, r0, #1
 80082fe:	d100      	bne.n	8008302 <_printf_float+0x3ba>
 8008300:	e680      	b.n	8008004 <_printf_float+0xbc>
 8008302:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008304:	3301      	adds	r3, #1
 8008306:	930d      	str	r3, [sp, #52]	; 0x34
 8008308:	e7b3      	b.n	8008272 <_printf_float+0x32a>
 800830a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800830c:	0038      	movs	r0, r7
 800830e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008310:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008312:	47b0      	blx	r6
 8008314:	1c43      	adds	r3, r0, #1
 8008316:	d1bd      	bne.n	8008294 <_printf_float+0x34c>
 8008318:	e674      	b.n	8008004 <_printf_float+0xbc>
 800831a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800831c:	0038      	movs	r0, r7
 800831e:	18ea      	adds	r2, r5, r3
 8008320:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008322:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008324:	47b0      	blx	r6
 8008326:	1c43      	adds	r3, r0, #1
 8008328:	d1c0      	bne.n	80082ac <_printf_float+0x364>
 800832a:	e66b      	b.n	8008004 <_printf_float+0xbc>
 800832c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800832e:	2b01      	cmp	r3, #1
 8008330:	dc02      	bgt.n	8008338 <_printf_float+0x3f0>
 8008332:	2301      	movs	r3, #1
 8008334:	421a      	tst	r2, r3
 8008336:	d034      	beq.n	80083a2 <_printf_float+0x45a>
 8008338:	2301      	movs	r3, #1
 800833a:	002a      	movs	r2, r5
 800833c:	0038      	movs	r0, r7
 800833e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008340:	47b0      	blx	r6
 8008342:	1c43      	adds	r3, r0, #1
 8008344:	d100      	bne.n	8008348 <_printf_float+0x400>
 8008346:	e65d      	b.n	8008004 <_printf_float+0xbc>
 8008348:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800834a:	0038      	movs	r0, r7
 800834c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800834e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008350:	47b0      	blx	r6
 8008352:	1c43      	adds	r3, r0, #1
 8008354:	d100      	bne.n	8008358 <_printf_float+0x410>
 8008356:	e655      	b.n	8008004 <_printf_float+0xbc>
 8008358:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 800835a:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 800835c:	2200      	movs	r2, #0
 800835e:	2300      	movs	r3, #0
 8008360:	f7f8 f874 	bl	800044c <__aeabi_dcmpeq>
 8008364:	2800      	cmp	r0, #0
 8008366:	d11a      	bne.n	800839e <_printf_float+0x456>
 8008368:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800836a:	1c6a      	adds	r2, r5, #1
 800836c:	3b01      	subs	r3, #1
 800836e:	0038      	movs	r0, r7
 8008370:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008372:	47b0      	blx	r6
 8008374:	1c43      	adds	r3, r0, #1
 8008376:	d10e      	bne.n	8008396 <_printf_float+0x44e>
 8008378:	e644      	b.n	8008004 <_printf_float+0xbc>
 800837a:	0022      	movs	r2, r4
 800837c:	2301      	movs	r3, #1
 800837e:	0038      	movs	r0, r7
 8008380:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008382:	321a      	adds	r2, #26
 8008384:	47b0      	blx	r6
 8008386:	1c43      	adds	r3, r0, #1
 8008388:	d100      	bne.n	800838c <_printf_float+0x444>
 800838a:	e63b      	b.n	8008004 <_printf_float+0xbc>
 800838c:	3501      	adds	r5, #1
 800838e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008390:	3b01      	subs	r3, #1
 8008392:	42ab      	cmp	r3, r5
 8008394:	dcf1      	bgt.n	800837a <_printf_float+0x432>
 8008396:	0022      	movs	r2, r4
 8008398:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800839a:	3250      	adds	r2, #80	; 0x50
 800839c:	e6da      	b.n	8008154 <_printf_float+0x20c>
 800839e:	2500      	movs	r5, #0
 80083a0:	e7f5      	b.n	800838e <_printf_float+0x446>
 80083a2:	002a      	movs	r2, r5
 80083a4:	e7e3      	b.n	800836e <_printf_float+0x426>
 80083a6:	0022      	movs	r2, r4
 80083a8:	2301      	movs	r3, #1
 80083aa:	0038      	movs	r0, r7
 80083ac:	9909      	ldr	r1, [sp, #36]	; 0x24
 80083ae:	3219      	adds	r2, #25
 80083b0:	47b0      	blx	r6
 80083b2:	1c43      	adds	r3, r0, #1
 80083b4:	d100      	bne.n	80083b8 <_printf_float+0x470>
 80083b6:	e625      	b.n	8008004 <_printf_float+0xbc>
 80083b8:	3501      	adds	r5, #1
 80083ba:	68e3      	ldr	r3, [r4, #12]
 80083bc:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80083be:	1a9b      	subs	r3, r3, r2
 80083c0:	42ab      	cmp	r3, r5
 80083c2:	dcf0      	bgt.n	80083a6 <_printf_float+0x45e>
 80083c4:	e6f8      	b.n	80081b8 <_printf_float+0x270>
 80083c6:	2500      	movs	r5, #0
 80083c8:	e7f7      	b.n	80083ba <_printf_float+0x472>
 80083ca:	46c0      	nop			; (mov r8, r8)

080083cc <_printf_common>:
 80083cc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80083ce:	0015      	movs	r5, r2
 80083d0:	9301      	str	r3, [sp, #4]
 80083d2:	688a      	ldr	r2, [r1, #8]
 80083d4:	690b      	ldr	r3, [r1, #16]
 80083d6:	000c      	movs	r4, r1
 80083d8:	9000      	str	r0, [sp, #0]
 80083da:	4293      	cmp	r3, r2
 80083dc:	da00      	bge.n	80083e0 <_printf_common+0x14>
 80083de:	0013      	movs	r3, r2
 80083e0:	0022      	movs	r2, r4
 80083e2:	602b      	str	r3, [r5, #0]
 80083e4:	3243      	adds	r2, #67	; 0x43
 80083e6:	7812      	ldrb	r2, [r2, #0]
 80083e8:	2a00      	cmp	r2, #0
 80083ea:	d001      	beq.n	80083f0 <_printf_common+0x24>
 80083ec:	3301      	adds	r3, #1
 80083ee:	602b      	str	r3, [r5, #0]
 80083f0:	6823      	ldr	r3, [r4, #0]
 80083f2:	069b      	lsls	r3, r3, #26
 80083f4:	d502      	bpl.n	80083fc <_printf_common+0x30>
 80083f6:	682b      	ldr	r3, [r5, #0]
 80083f8:	3302      	adds	r3, #2
 80083fa:	602b      	str	r3, [r5, #0]
 80083fc:	6822      	ldr	r2, [r4, #0]
 80083fe:	2306      	movs	r3, #6
 8008400:	0017      	movs	r7, r2
 8008402:	401f      	ands	r7, r3
 8008404:	421a      	tst	r2, r3
 8008406:	d027      	beq.n	8008458 <_printf_common+0x8c>
 8008408:	0023      	movs	r3, r4
 800840a:	3343      	adds	r3, #67	; 0x43
 800840c:	781b      	ldrb	r3, [r3, #0]
 800840e:	1e5a      	subs	r2, r3, #1
 8008410:	4193      	sbcs	r3, r2
 8008412:	6822      	ldr	r2, [r4, #0]
 8008414:	0692      	lsls	r2, r2, #26
 8008416:	d430      	bmi.n	800847a <_printf_common+0xae>
 8008418:	0022      	movs	r2, r4
 800841a:	9901      	ldr	r1, [sp, #4]
 800841c:	9800      	ldr	r0, [sp, #0]
 800841e:	9e08      	ldr	r6, [sp, #32]
 8008420:	3243      	adds	r2, #67	; 0x43
 8008422:	47b0      	blx	r6
 8008424:	1c43      	adds	r3, r0, #1
 8008426:	d025      	beq.n	8008474 <_printf_common+0xa8>
 8008428:	2306      	movs	r3, #6
 800842a:	6820      	ldr	r0, [r4, #0]
 800842c:	682a      	ldr	r2, [r5, #0]
 800842e:	68e1      	ldr	r1, [r4, #12]
 8008430:	2500      	movs	r5, #0
 8008432:	4003      	ands	r3, r0
 8008434:	2b04      	cmp	r3, #4
 8008436:	d103      	bne.n	8008440 <_printf_common+0x74>
 8008438:	1a8d      	subs	r5, r1, r2
 800843a:	43eb      	mvns	r3, r5
 800843c:	17db      	asrs	r3, r3, #31
 800843e:	401d      	ands	r5, r3
 8008440:	68a3      	ldr	r3, [r4, #8]
 8008442:	6922      	ldr	r2, [r4, #16]
 8008444:	4293      	cmp	r3, r2
 8008446:	dd01      	ble.n	800844c <_printf_common+0x80>
 8008448:	1a9b      	subs	r3, r3, r2
 800844a:	18ed      	adds	r5, r5, r3
 800844c:	2700      	movs	r7, #0
 800844e:	42bd      	cmp	r5, r7
 8008450:	d120      	bne.n	8008494 <_printf_common+0xc8>
 8008452:	2000      	movs	r0, #0
 8008454:	e010      	b.n	8008478 <_printf_common+0xac>
 8008456:	3701      	adds	r7, #1
 8008458:	68e3      	ldr	r3, [r4, #12]
 800845a:	682a      	ldr	r2, [r5, #0]
 800845c:	1a9b      	subs	r3, r3, r2
 800845e:	42bb      	cmp	r3, r7
 8008460:	ddd2      	ble.n	8008408 <_printf_common+0x3c>
 8008462:	0022      	movs	r2, r4
 8008464:	2301      	movs	r3, #1
 8008466:	9901      	ldr	r1, [sp, #4]
 8008468:	9800      	ldr	r0, [sp, #0]
 800846a:	9e08      	ldr	r6, [sp, #32]
 800846c:	3219      	adds	r2, #25
 800846e:	47b0      	blx	r6
 8008470:	1c43      	adds	r3, r0, #1
 8008472:	d1f0      	bne.n	8008456 <_printf_common+0x8a>
 8008474:	2001      	movs	r0, #1
 8008476:	4240      	negs	r0, r0
 8008478:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800847a:	2030      	movs	r0, #48	; 0x30
 800847c:	18e1      	adds	r1, r4, r3
 800847e:	3143      	adds	r1, #67	; 0x43
 8008480:	7008      	strb	r0, [r1, #0]
 8008482:	0021      	movs	r1, r4
 8008484:	1c5a      	adds	r2, r3, #1
 8008486:	3145      	adds	r1, #69	; 0x45
 8008488:	7809      	ldrb	r1, [r1, #0]
 800848a:	18a2      	adds	r2, r4, r2
 800848c:	3243      	adds	r2, #67	; 0x43
 800848e:	3302      	adds	r3, #2
 8008490:	7011      	strb	r1, [r2, #0]
 8008492:	e7c1      	b.n	8008418 <_printf_common+0x4c>
 8008494:	0022      	movs	r2, r4
 8008496:	2301      	movs	r3, #1
 8008498:	9901      	ldr	r1, [sp, #4]
 800849a:	9800      	ldr	r0, [sp, #0]
 800849c:	9e08      	ldr	r6, [sp, #32]
 800849e:	321a      	adds	r2, #26
 80084a0:	47b0      	blx	r6
 80084a2:	1c43      	adds	r3, r0, #1
 80084a4:	d0e6      	beq.n	8008474 <_printf_common+0xa8>
 80084a6:	3701      	adds	r7, #1
 80084a8:	e7d1      	b.n	800844e <_printf_common+0x82>
	...

080084ac <_printf_i>:
 80084ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 80084ae:	b08b      	sub	sp, #44	; 0x2c
 80084b0:	9206      	str	r2, [sp, #24]
 80084b2:	000a      	movs	r2, r1
 80084b4:	3243      	adds	r2, #67	; 0x43
 80084b6:	9307      	str	r3, [sp, #28]
 80084b8:	9005      	str	r0, [sp, #20]
 80084ba:	9204      	str	r2, [sp, #16]
 80084bc:	7e0a      	ldrb	r2, [r1, #24]
 80084be:	000c      	movs	r4, r1
 80084c0:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80084c2:	2a78      	cmp	r2, #120	; 0x78
 80084c4:	d807      	bhi.n	80084d6 <_printf_i+0x2a>
 80084c6:	2a62      	cmp	r2, #98	; 0x62
 80084c8:	d809      	bhi.n	80084de <_printf_i+0x32>
 80084ca:	2a00      	cmp	r2, #0
 80084cc:	d100      	bne.n	80084d0 <_printf_i+0x24>
 80084ce:	e0c1      	b.n	8008654 <_printf_i+0x1a8>
 80084d0:	2a58      	cmp	r2, #88	; 0x58
 80084d2:	d100      	bne.n	80084d6 <_printf_i+0x2a>
 80084d4:	e08c      	b.n	80085f0 <_printf_i+0x144>
 80084d6:	0026      	movs	r6, r4
 80084d8:	3642      	adds	r6, #66	; 0x42
 80084da:	7032      	strb	r2, [r6, #0]
 80084dc:	e022      	b.n	8008524 <_printf_i+0x78>
 80084de:	0010      	movs	r0, r2
 80084e0:	3863      	subs	r0, #99	; 0x63
 80084e2:	2815      	cmp	r0, #21
 80084e4:	d8f7      	bhi.n	80084d6 <_printf_i+0x2a>
 80084e6:	f7f7 fe21 	bl	800012c <__gnu_thumb1_case_shi>
 80084ea:	0016      	.short	0x0016
 80084ec:	fff6001f 	.word	0xfff6001f
 80084f0:	fff6fff6 	.word	0xfff6fff6
 80084f4:	001ffff6 	.word	0x001ffff6
 80084f8:	fff6fff6 	.word	0xfff6fff6
 80084fc:	fff6fff6 	.word	0xfff6fff6
 8008500:	003600a8 	.word	0x003600a8
 8008504:	fff6009a 	.word	0xfff6009a
 8008508:	00b9fff6 	.word	0x00b9fff6
 800850c:	0036fff6 	.word	0x0036fff6
 8008510:	fff6fff6 	.word	0xfff6fff6
 8008514:	009e      	.short	0x009e
 8008516:	0026      	movs	r6, r4
 8008518:	681a      	ldr	r2, [r3, #0]
 800851a:	3642      	adds	r6, #66	; 0x42
 800851c:	1d11      	adds	r1, r2, #4
 800851e:	6019      	str	r1, [r3, #0]
 8008520:	6813      	ldr	r3, [r2, #0]
 8008522:	7033      	strb	r3, [r6, #0]
 8008524:	2301      	movs	r3, #1
 8008526:	e0a7      	b.n	8008678 <_printf_i+0x1cc>
 8008528:	6808      	ldr	r0, [r1, #0]
 800852a:	6819      	ldr	r1, [r3, #0]
 800852c:	1d0a      	adds	r2, r1, #4
 800852e:	0605      	lsls	r5, r0, #24
 8008530:	d50b      	bpl.n	800854a <_printf_i+0x9e>
 8008532:	680d      	ldr	r5, [r1, #0]
 8008534:	601a      	str	r2, [r3, #0]
 8008536:	2d00      	cmp	r5, #0
 8008538:	da03      	bge.n	8008542 <_printf_i+0x96>
 800853a:	232d      	movs	r3, #45	; 0x2d
 800853c:	9a04      	ldr	r2, [sp, #16]
 800853e:	426d      	negs	r5, r5
 8008540:	7013      	strb	r3, [r2, #0]
 8008542:	4b61      	ldr	r3, [pc, #388]	; (80086c8 <_printf_i+0x21c>)
 8008544:	270a      	movs	r7, #10
 8008546:	9303      	str	r3, [sp, #12]
 8008548:	e01b      	b.n	8008582 <_printf_i+0xd6>
 800854a:	680d      	ldr	r5, [r1, #0]
 800854c:	601a      	str	r2, [r3, #0]
 800854e:	0641      	lsls	r1, r0, #25
 8008550:	d5f1      	bpl.n	8008536 <_printf_i+0x8a>
 8008552:	b22d      	sxth	r5, r5
 8008554:	e7ef      	b.n	8008536 <_printf_i+0x8a>
 8008556:	680d      	ldr	r5, [r1, #0]
 8008558:	6819      	ldr	r1, [r3, #0]
 800855a:	1d08      	adds	r0, r1, #4
 800855c:	6018      	str	r0, [r3, #0]
 800855e:	062e      	lsls	r6, r5, #24
 8008560:	d501      	bpl.n	8008566 <_printf_i+0xba>
 8008562:	680d      	ldr	r5, [r1, #0]
 8008564:	e003      	b.n	800856e <_printf_i+0xc2>
 8008566:	066d      	lsls	r5, r5, #25
 8008568:	d5fb      	bpl.n	8008562 <_printf_i+0xb6>
 800856a:	680d      	ldr	r5, [r1, #0]
 800856c:	b2ad      	uxth	r5, r5
 800856e:	4b56      	ldr	r3, [pc, #344]	; (80086c8 <_printf_i+0x21c>)
 8008570:	2708      	movs	r7, #8
 8008572:	9303      	str	r3, [sp, #12]
 8008574:	2a6f      	cmp	r2, #111	; 0x6f
 8008576:	d000      	beq.n	800857a <_printf_i+0xce>
 8008578:	3702      	adds	r7, #2
 800857a:	0023      	movs	r3, r4
 800857c:	2200      	movs	r2, #0
 800857e:	3343      	adds	r3, #67	; 0x43
 8008580:	701a      	strb	r2, [r3, #0]
 8008582:	6863      	ldr	r3, [r4, #4]
 8008584:	60a3      	str	r3, [r4, #8]
 8008586:	2b00      	cmp	r3, #0
 8008588:	db03      	blt.n	8008592 <_printf_i+0xe6>
 800858a:	2204      	movs	r2, #4
 800858c:	6821      	ldr	r1, [r4, #0]
 800858e:	4391      	bics	r1, r2
 8008590:	6021      	str	r1, [r4, #0]
 8008592:	2d00      	cmp	r5, #0
 8008594:	d102      	bne.n	800859c <_printf_i+0xf0>
 8008596:	9e04      	ldr	r6, [sp, #16]
 8008598:	2b00      	cmp	r3, #0
 800859a:	d00c      	beq.n	80085b6 <_printf_i+0x10a>
 800859c:	9e04      	ldr	r6, [sp, #16]
 800859e:	0028      	movs	r0, r5
 80085a0:	0039      	movs	r1, r7
 80085a2:	f7f7 fe53 	bl	800024c <__aeabi_uidivmod>
 80085a6:	9b03      	ldr	r3, [sp, #12]
 80085a8:	3e01      	subs	r6, #1
 80085aa:	5c5b      	ldrb	r3, [r3, r1]
 80085ac:	7033      	strb	r3, [r6, #0]
 80085ae:	002b      	movs	r3, r5
 80085b0:	0005      	movs	r5, r0
 80085b2:	429f      	cmp	r7, r3
 80085b4:	d9f3      	bls.n	800859e <_printf_i+0xf2>
 80085b6:	2f08      	cmp	r7, #8
 80085b8:	d109      	bne.n	80085ce <_printf_i+0x122>
 80085ba:	6823      	ldr	r3, [r4, #0]
 80085bc:	07db      	lsls	r3, r3, #31
 80085be:	d506      	bpl.n	80085ce <_printf_i+0x122>
 80085c0:	6863      	ldr	r3, [r4, #4]
 80085c2:	6922      	ldr	r2, [r4, #16]
 80085c4:	4293      	cmp	r3, r2
 80085c6:	dc02      	bgt.n	80085ce <_printf_i+0x122>
 80085c8:	2330      	movs	r3, #48	; 0x30
 80085ca:	3e01      	subs	r6, #1
 80085cc:	7033      	strb	r3, [r6, #0]
 80085ce:	9b04      	ldr	r3, [sp, #16]
 80085d0:	1b9b      	subs	r3, r3, r6
 80085d2:	6123      	str	r3, [r4, #16]
 80085d4:	9b07      	ldr	r3, [sp, #28]
 80085d6:	0021      	movs	r1, r4
 80085d8:	9300      	str	r3, [sp, #0]
 80085da:	9805      	ldr	r0, [sp, #20]
 80085dc:	9b06      	ldr	r3, [sp, #24]
 80085de:	aa09      	add	r2, sp, #36	; 0x24
 80085e0:	f7ff fef4 	bl	80083cc <_printf_common>
 80085e4:	1c43      	adds	r3, r0, #1
 80085e6:	d14c      	bne.n	8008682 <_printf_i+0x1d6>
 80085e8:	2001      	movs	r0, #1
 80085ea:	4240      	negs	r0, r0
 80085ec:	b00b      	add	sp, #44	; 0x2c
 80085ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80085f0:	3145      	adds	r1, #69	; 0x45
 80085f2:	700a      	strb	r2, [r1, #0]
 80085f4:	4a34      	ldr	r2, [pc, #208]	; (80086c8 <_printf_i+0x21c>)
 80085f6:	9203      	str	r2, [sp, #12]
 80085f8:	681a      	ldr	r2, [r3, #0]
 80085fa:	6821      	ldr	r1, [r4, #0]
 80085fc:	ca20      	ldmia	r2!, {r5}
 80085fe:	601a      	str	r2, [r3, #0]
 8008600:	0608      	lsls	r0, r1, #24
 8008602:	d516      	bpl.n	8008632 <_printf_i+0x186>
 8008604:	07cb      	lsls	r3, r1, #31
 8008606:	d502      	bpl.n	800860e <_printf_i+0x162>
 8008608:	2320      	movs	r3, #32
 800860a:	4319      	orrs	r1, r3
 800860c:	6021      	str	r1, [r4, #0]
 800860e:	2710      	movs	r7, #16
 8008610:	2d00      	cmp	r5, #0
 8008612:	d1b2      	bne.n	800857a <_printf_i+0xce>
 8008614:	2320      	movs	r3, #32
 8008616:	6822      	ldr	r2, [r4, #0]
 8008618:	439a      	bics	r2, r3
 800861a:	6022      	str	r2, [r4, #0]
 800861c:	e7ad      	b.n	800857a <_printf_i+0xce>
 800861e:	2220      	movs	r2, #32
 8008620:	6809      	ldr	r1, [r1, #0]
 8008622:	430a      	orrs	r2, r1
 8008624:	6022      	str	r2, [r4, #0]
 8008626:	0022      	movs	r2, r4
 8008628:	2178      	movs	r1, #120	; 0x78
 800862a:	3245      	adds	r2, #69	; 0x45
 800862c:	7011      	strb	r1, [r2, #0]
 800862e:	4a27      	ldr	r2, [pc, #156]	; (80086cc <_printf_i+0x220>)
 8008630:	e7e1      	b.n	80085f6 <_printf_i+0x14a>
 8008632:	0648      	lsls	r0, r1, #25
 8008634:	d5e6      	bpl.n	8008604 <_printf_i+0x158>
 8008636:	b2ad      	uxth	r5, r5
 8008638:	e7e4      	b.n	8008604 <_printf_i+0x158>
 800863a:	681a      	ldr	r2, [r3, #0]
 800863c:	680d      	ldr	r5, [r1, #0]
 800863e:	1d10      	adds	r0, r2, #4
 8008640:	6949      	ldr	r1, [r1, #20]
 8008642:	6018      	str	r0, [r3, #0]
 8008644:	6813      	ldr	r3, [r2, #0]
 8008646:	062e      	lsls	r6, r5, #24
 8008648:	d501      	bpl.n	800864e <_printf_i+0x1a2>
 800864a:	6019      	str	r1, [r3, #0]
 800864c:	e002      	b.n	8008654 <_printf_i+0x1a8>
 800864e:	066d      	lsls	r5, r5, #25
 8008650:	d5fb      	bpl.n	800864a <_printf_i+0x19e>
 8008652:	8019      	strh	r1, [r3, #0]
 8008654:	2300      	movs	r3, #0
 8008656:	9e04      	ldr	r6, [sp, #16]
 8008658:	6123      	str	r3, [r4, #16]
 800865a:	e7bb      	b.n	80085d4 <_printf_i+0x128>
 800865c:	681a      	ldr	r2, [r3, #0]
 800865e:	1d11      	adds	r1, r2, #4
 8008660:	6019      	str	r1, [r3, #0]
 8008662:	6816      	ldr	r6, [r2, #0]
 8008664:	2100      	movs	r1, #0
 8008666:	0030      	movs	r0, r6
 8008668:	6862      	ldr	r2, [r4, #4]
 800866a:	f002 fb5d 	bl	800ad28 <memchr>
 800866e:	2800      	cmp	r0, #0
 8008670:	d001      	beq.n	8008676 <_printf_i+0x1ca>
 8008672:	1b80      	subs	r0, r0, r6
 8008674:	6060      	str	r0, [r4, #4]
 8008676:	6863      	ldr	r3, [r4, #4]
 8008678:	6123      	str	r3, [r4, #16]
 800867a:	2300      	movs	r3, #0
 800867c:	9a04      	ldr	r2, [sp, #16]
 800867e:	7013      	strb	r3, [r2, #0]
 8008680:	e7a8      	b.n	80085d4 <_printf_i+0x128>
 8008682:	6923      	ldr	r3, [r4, #16]
 8008684:	0032      	movs	r2, r6
 8008686:	9906      	ldr	r1, [sp, #24]
 8008688:	9805      	ldr	r0, [sp, #20]
 800868a:	9d07      	ldr	r5, [sp, #28]
 800868c:	47a8      	blx	r5
 800868e:	1c43      	adds	r3, r0, #1
 8008690:	d0aa      	beq.n	80085e8 <_printf_i+0x13c>
 8008692:	6823      	ldr	r3, [r4, #0]
 8008694:	079b      	lsls	r3, r3, #30
 8008696:	d415      	bmi.n	80086c4 <_printf_i+0x218>
 8008698:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800869a:	68e0      	ldr	r0, [r4, #12]
 800869c:	4298      	cmp	r0, r3
 800869e:	daa5      	bge.n	80085ec <_printf_i+0x140>
 80086a0:	0018      	movs	r0, r3
 80086a2:	e7a3      	b.n	80085ec <_printf_i+0x140>
 80086a4:	0022      	movs	r2, r4
 80086a6:	2301      	movs	r3, #1
 80086a8:	9906      	ldr	r1, [sp, #24]
 80086aa:	9805      	ldr	r0, [sp, #20]
 80086ac:	9e07      	ldr	r6, [sp, #28]
 80086ae:	3219      	adds	r2, #25
 80086b0:	47b0      	blx	r6
 80086b2:	1c43      	adds	r3, r0, #1
 80086b4:	d098      	beq.n	80085e8 <_printf_i+0x13c>
 80086b6:	3501      	adds	r5, #1
 80086b8:	68e3      	ldr	r3, [r4, #12]
 80086ba:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80086bc:	1a9b      	subs	r3, r3, r2
 80086be:	42ab      	cmp	r3, r5
 80086c0:	dcf0      	bgt.n	80086a4 <_printf_i+0x1f8>
 80086c2:	e7e9      	b.n	8008698 <_printf_i+0x1ec>
 80086c4:	2500      	movs	r5, #0
 80086c6:	e7f7      	b.n	80086b8 <_printf_i+0x20c>
 80086c8:	0800cd6a 	.word	0x0800cd6a
 80086cc:	0800cd7b 	.word	0x0800cd7b

080086d0 <_scanf_float>:
 80086d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80086d2:	b08b      	sub	sp, #44	; 0x2c
 80086d4:	0015      	movs	r5, r2
 80086d6:	9001      	str	r0, [sp, #4]
 80086d8:	22ae      	movs	r2, #174	; 0xae
 80086da:	2000      	movs	r0, #0
 80086dc:	9306      	str	r3, [sp, #24]
 80086de:	688b      	ldr	r3, [r1, #8]
 80086e0:	000e      	movs	r6, r1
 80086e2:	1e59      	subs	r1, r3, #1
 80086e4:	0052      	lsls	r2, r2, #1
 80086e6:	9005      	str	r0, [sp, #20]
 80086e8:	4291      	cmp	r1, r2
 80086ea:	d905      	bls.n	80086f8 <_scanf_float+0x28>
 80086ec:	3b5e      	subs	r3, #94	; 0x5e
 80086ee:	3bff      	subs	r3, #255	; 0xff
 80086f0:	9305      	str	r3, [sp, #20]
 80086f2:	235e      	movs	r3, #94	; 0x5e
 80086f4:	33ff      	adds	r3, #255	; 0xff
 80086f6:	60b3      	str	r3, [r6, #8]
 80086f8:	23f0      	movs	r3, #240	; 0xf0
 80086fa:	6832      	ldr	r2, [r6, #0]
 80086fc:	00db      	lsls	r3, r3, #3
 80086fe:	4313      	orrs	r3, r2
 8008700:	6033      	str	r3, [r6, #0]
 8008702:	0033      	movs	r3, r6
 8008704:	2400      	movs	r4, #0
 8008706:	331c      	adds	r3, #28
 8008708:	001f      	movs	r7, r3
 800870a:	9303      	str	r3, [sp, #12]
 800870c:	9402      	str	r4, [sp, #8]
 800870e:	9408      	str	r4, [sp, #32]
 8008710:	9407      	str	r4, [sp, #28]
 8008712:	9400      	str	r4, [sp, #0]
 8008714:	9404      	str	r4, [sp, #16]
 8008716:	68b2      	ldr	r2, [r6, #8]
 8008718:	2a00      	cmp	r2, #0
 800871a:	d00a      	beq.n	8008732 <_scanf_float+0x62>
 800871c:	682b      	ldr	r3, [r5, #0]
 800871e:	781b      	ldrb	r3, [r3, #0]
 8008720:	2b4e      	cmp	r3, #78	; 0x4e
 8008722:	d844      	bhi.n	80087ae <_scanf_float+0xde>
 8008724:	0018      	movs	r0, r3
 8008726:	2b40      	cmp	r3, #64	; 0x40
 8008728:	d82c      	bhi.n	8008784 <_scanf_float+0xb4>
 800872a:	382b      	subs	r0, #43	; 0x2b
 800872c:	b2c1      	uxtb	r1, r0
 800872e:	290e      	cmp	r1, #14
 8008730:	d92a      	bls.n	8008788 <_scanf_float+0xb8>
 8008732:	9b00      	ldr	r3, [sp, #0]
 8008734:	2b00      	cmp	r3, #0
 8008736:	d003      	beq.n	8008740 <_scanf_float+0x70>
 8008738:	6832      	ldr	r2, [r6, #0]
 800873a:	4ba4      	ldr	r3, [pc, #656]	; (80089cc <_scanf_float+0x2fc>)
 800873c:	4013      	ands	r3, r2
 800873e:	6033      	str	r3, [r6, #0]
 8008740:	9b02      	ldr	r3, [sp, #8]
 8008742:	3b01      	subs	r3, #1
 8008744:	2b01      	cmp	r3, #1
 8008746:	d900      	bls.n	800874a <_scanf_float+0x7a>
 8008748:	e0f9      	b.n	800893e <_scanf_float+0x26e>
 800874a:	24be      	movs	r4, #190	; 0xbe
 800874c:	0064      	lsls	r4, r4, #1
 800874e:	9b03      	ldr	r3, [sp, #12]
 8008750:	429f      	cmp	r7, r3
 8008752:	d900      	bls.n	8008756 <_scanf_float+0x86>
 8008754:	e0e9      	b.n	800892a <_scanf_float+0x25a>
 8008756:	2301      	movs	r3, #1
 8008758:	9302      	str	r3, [sp, #8]
 800875a:	e185      	b.n	8008a68 <_scanf_float+0x398>
 800875c:	0018      	movs	r0, r3
 800875e:	3861      	subs	r0, #97	; 0x61
 8008760:	280d      	cmp	r0, #13
 8008762:	d8e6      	bhi.n	8008732 <_scanf_float+0x62>
 8008764:	f7f7 fce2 	bl	800012c <__gnu_thumb1_case_shi>
 8008768:	ffe50083 	.word	0xffe50083
 800876c:	ffe5ffe5 	.word	0xffe5ffe5
 8008770:	00a200b6 	.word	0x00a200b6
 8008774:	ffe5ffe5 	.word	0xffe5ffe5
 8008778:	ffe50089 	.word	0xffe50089
 800877c:	ffe5ffe5 	.word	0xffe5ffe5
 8008780:	0065ffe5 	.word	0x0065ffe5
 8008784:	3841      	subs	r0, #65	; 0x41
 8008786:	e7eb      	b.n	8008760 <_scanf_float+0x90>
 8008788:	280e      	cmp	r0, #14
 800878a:	d8d2      	bhi.n	8008732 <_scanf_float+0x62>
 800878c:	f7f7 fcce 	bl	800012c <__gnu_thumb1_case_shi>
 8008790:	ffd1004b 	.word	0xffd1004b
 8008794:	0098004b 	.word	0x0098004b
 8008798:	0020ffd1 	.word	0x0020ffd1
 800879c:	00400040 	.word	0x00400040
 80087a0:	00400040 	.word	0x00400040
 80087a4:	00400040 	.word	0x00400040
 80087a8:	00400040 	.word	0x00400040
 80087ac:	0040      	.short	0x0040
 80087ae:	2b6e      	cmp	r3, #110	; 0x6e
 80087b0:	d809      	bhi.n	80087c6 <_scanf_float+0xf6>
 80087b2:	2b60      	cmp	r3, #96	; 0x60
 80087b4:	d8d2      	bhi.n	800875c <_scanf_float+0x8c>
 80087b6:	2b54      	cmp	r3, #84	; 0x54
 80087b8:	d07d      	beq.n	80088b6 <_scanf_float+0x1e6>
 80087ba:	2b59      	cmp	r3, #89	; 0x59
 80087bc:	d1b9      	bne.n	8008732 <_scanf_float+0x62>
 80087be:	2c07      	cmp	r4, #7
 80087c0:	d1b7      	bne.n	8008732 <_scanf_float+0x62>
 80087c2:	2408      	movs	r4, #8
 80087c4:	e02c      	b.n	8008820 <_scanf_float+0x150>
 80087c6:	2b74      	cmp	r3, #116	; 0x74
 80087c8:	d075      	beq.n	80088b6 <_scanf_float+0x1e6>
 80087ca:	2b79      	cmp	r3, #121	; 0x79
 80087cc:	d0f7      	beq.n	80087be <_scanf_float+0xee>
 80087ce:	e7b0      	b.n	8008732 <_scanf_float+0x62>
 80087d0:	6831      	ldr	r1, [r6, #0]
 80087d2:	05c8      	lsls	r0, r1, #23
 80087d4:	d51c      	bpl.n	8008810 <_scanf_float+0x140>
 80087d6:	2380      	movs	r3, #128	; 0x80
 80087d8:	4399      	bics	r1, r3
 80087da:	9b00      	ldr	r3, [sp, #0]
 80087dc:	6031      	str	r1, [r6, #0]
 80087de:	3301      	adds	r3, #1
 80087e0:	9300      	str	r3, [sp, #0]
 80087e2:	9b05      	ldr	r3, [sp, #20]
 80087e4:	2b00      	cmp	r3, #0
 80087e6:	d003      	beq.n	80087f0 <_scanf_float+0x120>
 80087e8:	3b01      	subs	r3, #1
 80087ea:	3201      	adds	r2, #1
 80087ec:	9305      	str	r3, [sp, #20]
 80087ee:	60b2      	str	r2, [r6, #8]
 80087f0:	68b3      	ldr	r3, [r6, #8]
 80087f2:	3b01      	subs	r3, #1
 80087f4:	60b3      	str	r3, [r6, #8]
 80087f6:	6933      	ldr	r3, [r6, #16]
 80087f8:	3301      	adds	r3, #1
 80087fa:	6133      	str	r3, [r6, #16]
 80087fc:	686b      	ldr	r3, [r5, #4]
 80087fe:	3b01      	subs	r3, #1
 8008800:	606b      	str	r3, [r5, #4]
 8008802:	2b00      	cmp	r3, #0
 8008804:	dc00      	bgt.n	8008808 <_scanf_float+0x138>
 8008806:	e086      	b.n	8008916 <_scanf_float+0x246>
 8008808:	682b      	ldr	r3, [r5, #0]
 800880a:	3301      	adds	r3, #1
 800880c:	602b      	str	r3, [r5, #0]
 800880e:	e782      	b.n	8008716 <_scanf_float+0x46>
 8008810:	9a02      	ldr	r2, [sp, #8]
 8008812:	1912      	adds	r2, r2, r4
 8008814:	2a00      	cmp	r2, #0
 8008816:	d18c      	bne.n	8008732 <_scanf_float+0x62>
 8008818:	4a6d      	ldr	r2, [pc, #436]	; (80089d0 <_scanf_float+0x300>)
 800881a:	6831      	ldr	r1, [r6, #0]
 800881c:	400a      	ands	r2, r1
 800881e:	6032      	str	r2, [r6, #0]
 8008820:	703b      	strb	r3, [r7, #0]
 8008822:	3701      	adds	r7, #1
 8008824:	e7e4      	b.n	80087f0 <_scanf_float+0x120>
 8008826:	2180      	movs	r1, #128	; 0x80
 8008828:	6832      	ldr	r2, [r6, #0]
 800882a:	420a      	tst	r2, r1
 800882c:	d081      	beq.n	8008732 <_scanf_float+0x62>
 800882e:	438a      	bics	r2, r1
 8008830:	e7f5      	b.n	800881e <_scanf_float+0x14e>
 8008832:	9a02      	ldr	r2, [sp, #8]
 8008834:	2a00      	cmp	r2, #0
 8008836:	d10f      	bne.n	8008858 <_scanf_float+0x188>
 8008838:	9a00      	ldr	r2, [sp, #0]
 800883a:	2a00      	cmp	r2, #0
 800883c:	d10f      	bne.n	800885e <_scanf_float+0x18e>
 800883e:	6832      	ldr	r2, [r6, #0]
 8008840:	21e0      	movs	r1, #224	; 0xe0
 8008842:	0010      	movs	r0, r2
 8008844:	00c9      	lsls	r1, r1, #3
 8008846:	4008      	ands	r0, r1
 8008848:	4288      	cmp	r0, r1
 800884a:	d108      	bne.n	800885e <_scanf_float+0x18e>
 800884c:	4961      	ldr	r1, [pc, #388]	; (80089d4 <_scanf_float+0x304>)
 800884e:	400a      	ands	r2, r1
 8008850:	6032      	str	r2, [r6, #0]
 8008852:	2201      	movs	r2, #1
 8008854:	9202      	str	r2, [sp, #8]
 8008856:	e7e3      	b.n	8008820 <_scanf_float+0x150>
 8008858:	9a02      	ldr	r2, [sp, #8]
 800885a:	2a02      	cmp	r2, #2
 800885c:	d059      	beq.n	8008912 <_scanf_float+0x242>
 800885e:	2c01      	cmp	r4, #1
 8008860:	d002      	beq.n	8008868 <_scanf_float+0x198>
 8008862:	2c04      	cmp	r4, #4
 8008864:	d000      	beq.n	8008868 <_scanf_float+0x198>
 8008866:	e764      	b.n	8008732 <_scanf_float+0x62>
 8008868:	3401      	adds	r4, #1
 800886a:	b2e4      	uxtb	r4, r4
 800886c:	e7d8      	b.n	8008820 <_scanf_float+0x150>
 800886e:	9a02      	ldr	r2, [sp, #8]
 8008870:	2a01      	cmp	r2, #1
 8008872:	d000      	beq.n	8008876 <_scanf_float+0x1a6>
 8008874:	e75d      	b.n	8008732 <_scanf_float+0x62>
 8008876:	2202      	movs	r2, #2
 8008878:	e7ec      	b.n	8008854 <_scanf_float+0x184>
 800887a:	2c00      	cmp	r4, #0
 800887c:	d110      	bne.n	80088a0 <_scanf_float+0x1d0>
 800887e:	9a00      	ldr	r2, [sp, #0]
 8008880:	2a00      	cmp	r2, #0
 8008882:	d000      	beq.n	8008886 <_scanf_float+0x1b6>
 8008884:	e758      	b.n	8008738 <_scanf_float+0x68>
 8008886:	6832      	ldr	r2, [r6, #0]
 8008888:	21e0      	movs	r1, #224	; 0xe0
 800888a:	0010      	movs	r0, r2
 800888c:	00c9      	lsls	r1, r1, #3
 800888e:	4008      	ands	r0, r1
 8008890:	4288      	cmp	r0, r1
 8008892:	d000      	beq.n	8008896 <_scanf_float+0x1c6>
 8008894:	e754      	b.n	8008740 <_scanf_float+0x70>
 8008896:	494f      	ldr	r1, [pc, #316]	; (80089d4 <_scanf_float+0x304>)
 8008898:	3401      	adds	r4, #1
 800889a:	400a      	ands	r2, r1
 800889c:	6032      	str	r2, [r6, #0]
 800889e:	e7bf      	b.n	8008820 <_scanf_float+0x150>
 80088a0:	21fd      	movs	r1, #253	; 0xfd
 80088a2:	1ee2      	subs	r2, r4, #3
 80088a4:	420a      	tst	r2, r1
 80088a6:	d000      	beq.n	80088aa <_scanf_float+0x1da>
 80088a8:	e743      	b.n	8008732 <_scanf_float+0x62>
 80088aa:	e7dd      	b.n	8008868 <_scanf_float+0x198>
 80088ac:	2c02      	cmp	r4, #2
 80088ae:	d000      	beq.n	80088b2 <_scanf_float+0x1e2>
 80088b0:	e73f      	b.n	8008732 <_scanf_float+0x62>
 80088b2:	2403      	movs	r4, #3
 80088b4:	e7b4      	b.n	8008820 <_scanf_float+0x150>
 80088b6:	2c06      	cmp	r4, #6
 80088b8:	d000      	beq.n	80088bc <_scanf_float+0x1ec>
 80088ba:	e73a      	b.n	8008732 <_scanf_float+0x62>
 80088bc:	2407      	movs	r4, #7
 80088be:	e7af      	b.n	8008820 <_scanf_float+0x150>
 80088c0:	6832      	ldr	r2, [r6, #0]
 80088c2:	0591      	lsls	r1, r2, #22
 80088c4:	d400      	bmi.n	80088c8 <_scanf_float+0x1f8>
 80088c6:	e734      	b.n	8008732 <_scanf_float+0x62>
 80088c8:	4943      	ldr	r1, [pc, #268]	; (80089d8 <_scanf_float+0x308>)
 80088ca:	400a      	ands	r2, r1
 80088cc:	6032      	str	r2, [r6, #0]
 80088ce:	9a00      	ldr	r2, [sp, #0]
 80088d0:	9204      	str	r2, [sp, #16]
 80088d2:	e7a5      	b.n	8008820 <_scanf_float+0x150>
 80088d4:	21a0      	movs	r1, #160	; 0xa0
 80088d6:	2080      	movs	r0, #128	; 0x80
 80088d8:	6832      	ldr	r2, [r6, #0]
 80088da:	00c9      	lsls	r1, r1, #3
 80088dc:	4011      	ands	r1, r2
 80088de:	00c0      	lsls	r0, r0, #3
 80088e0:	4281      	cmp	r1, r0
 80088e2:	d006      	beq.n	80088f2 <_scanf_float+0x222>
 80088e4:	4202      	tst	r2, r0
 80088e6:	d100      	bne.n	80088ea <_scanf_float+0x21a>
 80088e8:	e723      	b.n	8008732 <_scanf_float+0x62>
 80088ea:	9900      	ldr	r1, [sp, #0]
 80088ec:	2900      	cmp	r1, #0
 80088ee:	d100      	bne.n	80088f2 <_scanf_float+0x222>
 80088f0:	e726      	b.n	8008740 <_scanf_float+0x70>
 80088f2:	0591      	lsls	r1, r2, #22
 80088f4:	d404      	bmi.n	8008900 <_scanf_float+0x230>
 80088f6:	9900      	ldr	r1, [sp, #0]
 80088f8:	9804      	ldr	r0, [sp, #16]
 80088fa:	9708      	str	r7, [sp, #32]
 80088fc:	1a09      	subs	r1, r1, r0
 80088fe:	9107      	str	r1, [sp, #28]
 8008900:	4934      	ldr	r1, [pc, #208]	; (80089d4 <_scanf_float+0x304>)
 8008902:	400a      	ands	r2, r1
 8008904:	21c0      	movs	r1, #192	; 0xc0
 8008906:	0049      	lsls	r1, r1, #1
 8008908:	430a      	orrs	r2, r1
 800890a:	6032      	str	r2, [r6, #0]
 800890c:	2200      	movs	r2, #0
 800890e:	9200      	str	r2, [sp, #0]
 8008910:	e786      	b.n	8008820 <_scanf_float+0x150>
 8008912:	2203      	movs	r2, #3
 8008914:	e79e      	b.n	8008854 <_scanf_float+0x184>
 8008916:	23c0      	movs	r3, #192	; 0xc0
 8008918:	005b      	lsls	r3, r3, #1
 800891a:	0029      	movs	r1, r5
 800891c:	58f3      	ldr	r3, [r6, r3]
 800891e:	9801      	ldr	r0, [sp, #4]
 8008920:	4798      	blx	r3
 8008922:	2800      	cmp	r0, #0
 8008924:	d100      	bne.n	8008928 <_scanf_float+0x258>
 8008926:	e6f6      	b.n	8008716 <_scanf_float+0x46>
 8008928:	e703      	b.n	8008732 <_scanf_float+0x62>
 800892a:	3f01      	subs	r7, #1
 800892c:	5933      	ldr	r3, [r6, r4]
 800892e:	002a      	movs	r2, r5
 8008930:	7839      	ldrb	r1, [r7, #0]
 8008932:	9801      	ldr	r0, [sp, #4]
 8008934:	4798      	blx	r3
 8008936:	6933      	ldr	r3, [r6, #16]
 8008938:	3b01      	subs	r3, #1
 800893a:	6133      	str	r3, [r6, #16]
 800893c:	e707      	b.n	800874e <_scanf_float+0x7e>
 800893e:	1e63      	subs	r3, r4, #1
 8008940:	2b06      	cmp	r3, #6
 8008942:	d80e      	bhi.n	8008962 <_scanf_float+0x292>
 8008944:	9702      	str	r7, [sp, #8]
 8008946:	2c02      	cmp	r4, #2
 8008948:	d920      	bls.n	800898c <_scanf_float+0x2bc>
 800894a:	1be3      	subs	r3, r4, r7
 800894c:	b2db      	uxtb	r3, r3
 800894e:	9305      	str	r3, [sp, #20]
 8008950:	9b02      	ldr	r3, [sp, #8]
 8008952:	9a05      	ldr	r2, [sp, #20]
 8008954:	189b      	adds	r3, r3, r2
 8008956:	b2db      	uxtb	r3, r3
 8008958:	2b03      	cmp	r3, #3
 800895a:	d827      	bhi.n	80089ac <_scanf_float+0x2dc>
 800895c:	3c03      	subs	r4, #3
 800895e:	b2e4      	uxtb	r4, r4
 8008960:	1b3f      	subs	r7, r7, r4
 8008962:	6833      	ldr	r3, [r6, #0]
 8008964:	05da      	lsls	r2, r3, #23
 8008966:	d554      	bpl.n	8008a12 <_scanf_float+0x342>
 8008968:	055b      	lsls	r3, r3, #21
 800896a:	d537      	bpl.n	80089dc <_scanf_float+0x30c>
 800896c:	24be      	movs	r4, #190	; 0xbe
 800896e:	0064      	lsls	r4, r4, #1
 8008970:	9b03      	ldr	r3, [sp, #12]
 8008972:	429f      	cmp	r7, r3
 8008974:	d800      	bhi.n	8008978 <_scanf_float+0x2a8>
 8008976:	e6ee      	b.n	8008756 <_scanf_float+0x86>
 8008978:	3f01      	subs	r7, #1
 800897a:	5933      	ldr	r3, [r6, r4]
 800897c:	002a      	movs	r2, r5
 800897e:	7839      	ldrb	r1, [r7, #0]
 8008980:	9801      	ldr	r0, [sp, #4]
 8008982:	4798      	blx	r3
 8008984:	6933      	ldr	r3, [r6, #16]
 8008986:	3b01      	subs	r3, #1
 8008988:	6133      	str	r3, [r6, #16]
 800898a:	e7f1      	b.n	8008970 <_scanf_float+0x2a0>
 800898c:	24be      	movs	r4, #190	; 0xbe
 800898e:	0064      	lsls	r4, r4, #1
 8008990:	9b03      	ldr	r3, [sp, #12]
 8008992:	429f      	cmp	r7, r3
 8008994:	d800      	bhi.n	8008998 <_scanf_float+0x2c8>
 8008996:	e6de      	b.n	8008756 <_scanf_float+0x86>
 8008998:	3f01      	subs	r7, #1
 800899a:	5933      	ldr	r3, [r6, r4]
 800899c:	002a      	movs	r2, r5
 800899e:	7839      	ldrb	r1, [r7, #0]
 80089a0:	9801      	ldr	r0, [sp, #4]
 80089a2:	4798      	blx	r3
 80089a4:	6933      	ldr	r3, [r6, #16]
 80089a6:	3b01      	subs	r3, #1
 80089a8:	6133      	str	r3, [r6, #16]
 80089aa:	e7f1      	b.n	8008990 <_scanf_float+0x2c0>
 80089ac:	9b02      	ldr	r3, [sp, #8]
 80089ae:	002a      	movs	r2, r5
 80089b0:	3b01      	subs	r3, #1
 80089b2:	7819      	ldrb	r1, [r3, #0]
 80089b4:	9302      	str	r3, [sp, #8]
 80089b6:	23be      	movs	r3, #190	; 0xbe
 80089b8:	005b      	lsls	r3, r3, #1
 80089ba:	58f3      	ldr	r3, [r6, r3]
 80089bc:	9801      	ldr	r0, [sp, #4]
 80089be:	9309      	str	r3, [sp, #36]	; 0x24
 80089c0:	4798      	blx	r3
 80089c2:	6933      	ldr	r3, [r6, #16]
 80089c4:	3b01      	subs	r3, #1
 80089c6:	6133      	str	r3, [r6, #16]
 80089c8:	e7c2      	b.n	8008950 <_scanf_float+0x280>
 80089ca:	46c0      	nop			; (mov r8, r8)
 80089cc:	fffffeff 	.word	0xfffffeff
 80089d0:	fffffe7f 	.word	0xfffffe7f
 80089d4:	fffff87f 	.word	0xfffff87f
 80089d8:	fffffd7f 	.word	0xfffffd7f
 80089dc:	6933      	ldr	r3, [r6, #16]
 80089de:	1e7c      	subs	r4, r7, #1
 80089e0:	7821      	ldrb	r1, [r4, #0]
 80089e2:	3b01      	subs	r3, #1
 80089e4:	6133      	str	r3, [r6, #16]
 80089e6:	2965      	cmp	r1, #101	; 0x65
 80089e8:	d00c      	beq.n	8008a04 <_scanf_float+0x334>
 80089ea:	2945      	cmp	r1, #69	; 0x45
 80089ec:	d00a      	beq.n	8008a04 <_scanf_float+0x334>
 80089ee:	23be      	movs	r3, #190	; 0xbe
 80089f0:	005b      	lsls	r3, r3, #1
 80089f2:	58f3      	ldr	r3, [r6, r3]
 80089f4:	002a      	movs	r2, r5
 80089f6:	9801      	ldr	r0, [sp, #4]
 80089f8:	4798      	blx	r3
 80089fa:	6933      	ldr	r3, [r6, #16]
 80089fc:	1ebc      	subs	r4, r7, #2
 80089fe:	3b01      	subs	r3, #1
 8008a00:	7821      	ldrb	r1, [r4, #0]
 8008a02:	6133      	str	r3, [r6, #16]
 8008a04:	23be      	movs	r3, #190	; 0xbe
 8008a06:	005b      	lsls	r3, r3, #1
 8008a08:	002a      	movs	r2, r5
 8008a0a:	58f3      	ldr	r3, [r6, r3]
 8008a0c:	9801      	ldr	r0, [sp, #4]
 8008a0e:	4798      	blx	r3
 8008a10:	0027      	movs	r7, r4
 8008a12:	6832      	ldr	r2, [r6, #0]
 8008a14:	2310      	movs	r3, #16
 8008a16:	0011      	movs	r1, r2
 8008a18:	4019      	ands	r1, r3
 8008a1a:	9102      	str	r1, [sp, #8]
 8008a1c:	421a      	tst	r2, r3
 8008a1e:	d158      	bne.n	8008ad2 <_scanf_float+0x402>
 8008a20:	23c0      	movs	r3, #192	; 0xc0
 8008a22:	7039      	strb	r1, [r7, #0]
 8008a24:	6832      	ldr	r2, [r6, #0]
 8008a26:	00db      	lsls	r3, r3, #3
 8008a28:	4013      	ands	r3, r2
 8008a2a:	2280      	movs	r2, #128	; 0x80
 8008a2c:	00d2      	lsls	r2, r2, #3
 8008a2e:	4293      	cmp	r3, r2
 8008a30:	d11d      	bne.n	8008a6e <_scanf_float+0x39e>
 8008a32:	9b04      	ldr	r3, [sp, #16]
 8008a34:	9a00      	ldr	r2, [sp, #0]
 8008a36:	9900      	ldr	r1, [sp, #0]
 8008a38:	1a9a      	subs	r2, r3, r2
 8008a3a:	428b      	cmp	r3, r1
 8008a3c:	d124      	bne.n	8008a88 <_scanf_float+0x3b8>
 8008a3e:	2200      	movs	r2, #0
 8008a40:	9903      	ldr	r1, [sp, #12]
 8008a42:	9801      	ldr	r0, [sp, #4]
 8008a44:	f000 fe9c 	bl	8009780 <_strtod_r>
 8008a48:	9b06      	ldr	r3, [sp, #24]
 8008a4a:	000d      	movs	r5, r1
 8008a4c:	6831      	ldr	r1, [r6, #0]
 8008a4e:	0004      	movs	r4, r0
 8008a50:	681b      	ldr	r3, [r3, #0]
 8008a52:	078a      	lsls	r2, r1, #30
 8008a54:	d525      	bpl.n	8008aa2 <_scanf_float+0x3d2>
 8008a56:	1d1a      	adds	r2, r3, #4
 8008a58:	9906      	ldr	r1, [sp, #24]
 8008a5a:	600a      	str	r2, [r1, #0]
 8008a5c:	681b      	ldr	r3, [r3, #0]
 8008a5e:	601c      	str	r4, [r3, #0]
 8008a60:	605d      	str	r5, [r3, #4]
 8008a62:	68f3      	ldr	r3, [r6, #12]
 8008a64:	3301      	adds	r3, #1
 8008a66:	60f3      	str	r3, [r6, #12]
 8008a68:	9802      	ldr	r0, [sp, #8]
 8008a6a:	b00b      	add	sp, #44	; 0x2c
 8008a6c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008a6e:	9b07      	ldr	r3, [sp, #28]
 8008a70:	2b00      	cmp	r3, #0
 8008a72:	d0e4      	beq.n	8008a3e <_scanf_float+0x36e>
 8008a74:	9b08      	ldr	r3, [sp, #32]
 8008a76:	9a02      	ldr	r2, [sp, #8]
 8008a78:	1c59      	adds	r1, r3, #1
 8008a7a:	9801      	ldr	r0, [sp, #4]
 8008a7c:	230a      	movs	r3, #10
 8008a7e:	f000 ff15 	bl	80098ac <_strtol_r>
 8008a82:	9b07      	ldr	r3, [sp, #28]
 8008a84:	9f08      	ldr	r7, [sp, #32]
 8008a86:	1ac2      	subs	r2, r0, r3
 8008a88:	0033      	movs	r3, r6
 8008a8a:	3370      	adds	r3, #112	; 0x70
 8008a8c:	33ff      	adds	r3, #255	; 0xff
 8008a8e:	429f      	cmp	r7, r3
 8008a90:	d302      	bcc.n	8008a98 <_scanf_float+0x3c8>
 8008a92:	0037      	movs	r7, r6
 8008a94:	376f      	adds	r7, #111	; 0x6f
 8008a96:	37ff      	adds	r7, #255	; 0xff
 8008a98:	0038      	movs	r0, r7
 8008a9a:	490f      	ldr	r1, [pc, #60]	; (8008ad8 <_scanf_float+0x408>)
 8008a9c:	f000 f824 	bl	8008ae8 <siprintf>
 8008aa0:	e7cd      	b.n	8008a3e <_scanf_float+0x36e>
 8008aa2:	1d1a      	adds	r2, r3, #4
 8008aa4:	0749      	lsls	r1, r1, #29
 8008aa6:	d4d7      	bmi.n	8008a58 <_scanf_float+0x388>
 8008aa8:	9906      	ldr	r1, [sp, #24]
 8008aaa:	0020      	movs	r0, r4
 8008aac:	600a      	str	r2, [r1, #0]
 8008aae:	681f      	ldr	r7, [r3, #0]
 8008ab0:	0022      	movs	r2, r4
 8008ab2:	002b      	movs	r3, r5
 8008ab4:	0029      	movs	r1, r5
 8008ab6:	f7f9 ff27 	bl	8002908 <__aeabi_dcmpun>
 8008aba:	2800      	cmp	r0, #0
 8008abc:	d004      	beq.n	8008ac8 <_scanf_float+0x3f8>
 8008abe:	4807      	ldr	r0, [pc, #28]	; (8008adc <_scanf_float+0x40c>)
 8008ac0:	f000 f80e 	bl	8008ae0 <nanf>
 8008ac4:	6038      	str	r0, [r7, #0]
 8008ac6:	e7cc      	b.n	8008a62 <_scanf_float+0x392>
 8008ac8:	0020      	movs	r0, r4
 8008aca:	0029      	movs	r1, r5
 8008acc:	f7fa f80e 	bl	8002aec <__aeabi_d2f>
 8008ad0:	e7f8      	b.n	8008ac4 <_scanf_float+0x3f4>
 8008ad2:	2300      	movs	r3, #0
 8008ad4:	e640      	b.n	8008758 <_scanf_float+0x88>
 8008ad6:	46c0      	nop			; (mov r8, r8)
 8008ad8:	0800cd8c 	.word	0x0800cd8c
 8008adc:	0800d198 	.word	0x0800d198

08008ae0 <nanf>:
 8008ae0:	4800      	ldr	r0, [pc, #0]	; (8008ae4 <nanf+0x4>)
 8008ae2:	4770      	bx	lr
 8008ae4:	7fc00000 	.word	0x7fc00000

08008ae8 <siprintf>:
 8008ae8:	b40e      	push	{r1, r2, r3}
 8008aea:	b500      	push	{lr}
 8008aec:	490b      	ldr	r1, [pc, #44]	; (8008b1c <siprintf+0x34>)
 8008aee:	b09c      	sub	sp, #112	; 0x70
 8008af0:	ab1d      	add	r3, sp, #116	; 0x74
 8008af2:	9002      	str	r0, [sp, #8]
 8008af4:	9006      	str	r0, [sp, #24]
 8008af6:	9107      	str	r1, [sp, #28]
 8008af8:	9104      	str	r1, [sp, #16]
 8008afa:	4809      	ldr	r0, [pc, #36]	; (8008b20 <siprintf+0x38>)
 8008afc:	4909      	ldr	r1, [pc, #36]	; (8008b24 <siprintf+0x3c>)
 8008afe:	cb04      	ldmia	r3!, {r2}
 8008b00:	9105      	str	r1, [sp, #20]
 8008b02:	6800      	ldr	r0, [r0, #0]
 8008b04:	a902      	add	r1, sp, #8
 8008b06:	9301      	str	r3, [sp, #4]
 8008b08:	f002 ff5c 	bl	800b9c4 <_svfiprintf_r>
 8008b0c:	2300      	movs	r3, #0
 8008b0e:	9a02      	ldr	r2, [sp, #8]
 8008b10:	7013      	strb	r3, [r2, #0]
 8008b12:	b01c      	add	sp, #112	; 0x70
 8008b14:	bc08      	pop	{r3}
 8008b16:	b003      	add	sp, #12
 8008b18:	4718      	bx	r3
 8008b1a:	46c0      	nop			; (mov r8, r8)
 8008b1c:	7fffffff 	.word	0x7fffffff
 8008b20:	2000001c 	.word	0x2000001c
 8008b24:	ffff0208 	.word	0xffff0208

08008b28 <sulp>:
 8008b28:	b570      	push	{r4, r5, r6, lr}
 8008b2a:	0016      	movs	r6, r2
 8008b2c:	000d      	movs	r5, r1
 8008b2e:	f002 fc93 	bl	800b458 <__ulp>
 8008b32:	2e00      	cmp	r6, #0
 8008b34:	d00d      	beq.n	8008b52 <sulp+0x2a>
 8008b36:	236b      	movs	r3, #107	; 0x6b
 8008b38:	006a      	lsls	r2, r5, #1
 8008b3a:	0d52      	lsrs	r2, r2, #21
 8008b3c:	1a9b      	subs	r3, r3, r2
 8008b3e:	2b00      	cmp	r3, #0
 8008b40:	dd07      	ble.n	8008b52 <sulp+0x2a>
 8008b42:	2400      	movs	r4, #0
 8008b44:	4a03      	ldr	r2, [pc, #12]	; (8008b54 <sulp+0x2c>)
 8008b46:	051b      	lsls	r3, r3, #20
 8008b48:	189d      	adds	r5, r3, r2
 8008b4a:	002b      	movs	r3, r5
 8008b4c:	0022      	movs	r2, r4
 8008b4e:	f7f9 f8dd 	bl	8001d0c <__aeabi_dmul>
 8008b52:	bd70      	pop	{r4, r5, r6, pc}
 8008b54:	3ff00000 	.word	0x3ff00000

08008b58 <_strtod_l>:
 8008b58:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008b5a:	001d      	movs	r5, r3
 8008b5c:	2300      	movs	r3, #0
 8008b5e:	b0a5      	sub	sp, #148	; 0x94
 8008b60:	9320      	str	r3, [sp, #128]	; 0x80
 8008b62:	4bac      	ldr	r3, [pc, #688]	; (8008e14 <_strtod_l+0x2bc>)
 8008b64:	9005      	str	r0, [sp, #20]
 8008b66:	681b      	ldr	r3, [r3, #0]
 8008b68:	9108      	str	r1, [sp, #32]
 8008b6a:	0018      	movs	r0, r3
 8008b6c:	9307      	str	r3, [sp, #28]
 8008b6e:	921b      	str	r2, [sp, #108]	; 0x6c
 8008b70:	f7f7 faca 	bl	8000108 <strlen>
 8008b74:	2600      	movs	r6, #0
 8008b76:	0004      	movs	r4, r0
 8008b78:	2700      	movs	r7, #0
 8008b7a:	9b08      	ldr	r3, [sp, #32]
 8008b7c:	931f      	str	r3, [sp, #124]	; 0x7c
 8008b7e:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8008b80:	7813      	ldrb	r3, [r2, #0]
 8008b82:	2b2b      	cmp	r3, #43	; 0x2b
 8008b84:	d058      	beq.n	8008c38 <_strtod_l+0xe0>
 8008b86:	d844      	bhi.n	8008c12 <_strtod_l+0xba>
 8008b88:	2b0d      	cmp	r3, #13
 8008b8a:	d83d      	bhi.n	8008c08 <_strtod_l+0xb0>
 8008b8c:	2b08      	cmp	r3, #8
 8008b8e:	d83d      	bhi.n	8008c0c <_strtod_l+0xb4>
 8008b90:	2b00      	cmp	r3, #0
 8008b92:	d047      	beq.n	8008c24 <_strtod_l+0xcc>
 8008b94:	2300      	movs	r3, #0
 8008b96:	930e      	str	r3, [sp, #56]	; 0x38
 8008b98:	2200      	movs	r2, #0
 8008b9a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8008b9c:	920a      	str	r2, [sp, #40]	; 0x28
 8008b9e:	9306      	str	r3, [sp, #24]
 8008ba0:	781b      	ldrb	r3, [r3, #0]
 8008ba2:	2b30      	cmp	r3, #48	; 0x30
 8008ba4:	d000      	beq.n	8008ba8 <_strtod_l+0x50>
 8008ba6:	e07f      	b.n	8008ca8 <_strtod_l+0x150>
 8008ba8:	9b06      	ldr	r3, [sp, #24]
 8008baa:	3220      	adds	r2, #32
 8008bac:	785b      	ldrb	r3, [r3, #1]
 8008bae:	4393      	bics	r3, r2
 8008bb0:	2b58      	cmp	r3, #88	; 0x58
 8008bb2:	d000      	beq.n	8008bb6 <_strtod_l+0x5e>
 8008bb4:	e06e      	b.n	8008c94 <_strtod_l+0x13c>
 8008bb6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008bb8:	9502      	str	r5, [sp, #8]
 8008bba:	9301      	str	r3, [sp, #4]
 8008bbc:	ab20      	add	r3, sp, #128	; 0x80
 8008bbe:	9300      	str	r3, [sp, #0]
 8008bc0:	4a95      	ldr	r2, [pc, #596]	; (8008e18 <_strtod_l+0x2c0>)
 8008bc2:	ab21      	add	r3, sp, #132	; 0x84
 8008bc4:	9805      	ldr	r0, [sp, #20]
 8008bc6:	a91f      	add	r1, sp, #124	; 0x7c
 8008bc8:	f001 fd84 	bl	800a6d4 <__gethex>
 8008bcc:	2307      	movs	r3, #7
 8008bce:	0005      	movs	r5, r0
 8008bd0:	0004      	movs	r4, r0
 8008bd2:	401d      	ands	r5, r3
 8008bd4:	4218      	tst	r0, r3
 8008bd6:	d006      	beq.n	8008be6 <_strtod_l+0x8e>
 8008bd8:	2d06      	cmp	r5, #6
 8008bda:	d12f      	bne.n	8008c3c <_strtod_l+0xe4>
 8008bdc:	9b06      	ldr	r3, [sp, #24]
 8008bde:	3301      	adds	r3, #1
 8008be0:	931f      	str	r3, [sp, #124]	; 0x7c
 8008be2:	2300      	movs	r3, #0
 8008be4:	930e      	str	r3, [sp, #56]	; 0x38
 8008be6:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8008be8:	2b00      	cmp	r3, #0
 8008bea:	d002      	beq.n	8008bf2 <_strtod_l+0x9a>
 8008bec:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8008bee:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8008bf0:	601a      	str	r2, [r3, #0]
 8008bf2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008bf4:	2b00      	cmp	r3, #0
 8008bf6:	d01c      	beq.n	8008c32 <_strtod_l+0xda>
 8008bf8:	2380      	movs	r3, #128	; 0x80
 8008bfa:	0032      	movs	r2, r6
 8008bfc:	061b      	lsls	r3, r3, #24
 8008bfe:	18fb      	adds	r3, r7, r3
 8008c00:	0010      	movs	r0, r2
 8008c02:	0019      	movs	r1, r3
 8008c04:	b025      	add	sp, #148	; 0x94
 8008c06:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008c08:	2b20      	cmp	r3, #32
 8008c0a:	d1c3      	bne.n	8008b94 <_strtod_l+0x3c>
 8008c0c:	3201      	adds	r2, #1
 8008c0e:	921f      	str	r2, [sp, #124]	; 0x7c
 8008c10:	e7b5      	b.n	8008b7e <_strtod_l+0x26>
 8008c12:	2b2d      	cmp	r3, #45	; 0x2d
 8008c14:	d1be      	bne.n	8008b94 <_strtod_l+0x3c>
 8008c16:	3b2c      	subs	r3, #44	; 0x2c
 8008c18:	930e      	str	r3, [sp, #56]	; 0x38
 8008c1a:	1c53      	adds	r3, r2, #1
 8008c1c:	931f      	str	r3, [sp, #124]	; 0x7c
 8008c1e:	7853      	ldrb	r3, [r2, #1]
 8008c20:	2b00      	cmp	r3, #0
 8008c22:	d1b9      	bne.n	8008b98 <_strtod_l+0x40>
 8008c24:	9b08      	ldr	r3, [sp, #32]
 8008c26:	931f      	str	r3, [sp, #124]	; 0x7c
 8008c28:	2300      	movs	r3, #0
 8008c2a:	930e      	str	r3, [sp, #56]	; 0x38
 8008c2c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8008c2e:	2b00      	cmp	r3, #0
 8008c30:	d1dc      	bne.n	8008bec <_strtod_l+0x94>
 8008c32:	0032      	movs	r2, r6
 8008c34:	003b      	movs	r3, r7
 8008c36:	e7e3      	b.n	8008c00 <_strtod_l+0xa8>
 8008c38:	2300      	movs	r3, #0
 8008c3a:	e7ed      	b.n	8008c18 <_strtod_l+0xc0>
 8008c3c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8008c3e:	2a00      	cmp	r2, #0
 8008c40:	d007      	beq.n	8008c52 <_strtod_l+0xfa>
 8008c42:	2135      	movs	r1, #53	; 0x35
 8008c44:	a822      	add	r0, sp, #136	; 0x88
 8008c46:	f002 fd08 	bl	800b65a <__copybits>
 8008c4a:	9920      	ldr	r1, [sp, #128]	; 0x80
 8008c4c:	9805      	ldr	r0, [sp, #20]
 8008c4e:	f002 f8c3 	bl	800add8 <_Bfree>
 8008c52:	1e68      	subs	r0, r5, #1
 8008c54:	2804      	cmp	r0, #4
 8008c56:	d806      	bhi.n	8008c66 <_strtod_l+0x10e>
 8008c58:	f7f7 fa5e 	bl	8000118 <__gnu_thumb1_case_uqi>
 8008c5c:	1816030b 	.word	0x1816030b
 8008c60:	0b          	.byte	0x0b
 8008c61:	00          	.byte	0x00
 8008c62:	9e22      	ldr	r6, [sp, #136]	; 0x88
 8008c64:	9f23      	ldr	r7, [sp, #140]	; 0x8c
 8008c66:	0723      	lsls	r3, r4, #28
 8008c68:	d5bd      	bpl.n	8008be6 <_strtod_l+0x8e>
 8008c6a:	2380      	movs	r3, #128	; 0x80
 8008c6c:	061b      	lsls	r3, r3, #24
 8008c6e:	431f      	orrs	r7, r3
 8008c70:	e7b9      	b.n	8008be6 <_strtod_l+0x8e>
 8008c72:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8008c74:	4a69      	ldr	r2, [pc, #420]	; (8008e1c <_strtod_l+0x2c4>)
 8008c76:	496a      	ldr	r1, [pc, #424]	; (8008e20 <_strtod_l+0x2c8>)
 8008c78:	401a      	ands	r2, r3
 8008c7a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008c7c:	9e22      	ldr	r6, [sp, #136]	; 0x88
 8008c7e:	185b      	adds	r3, r3, r1
 8008c80:	051b      	lsls	r3, r3, #20
 8008c82:	431a      	orrs	r2, r3
 8008c84:	0017      	movs	r7, r2
 8008c86:	e7ee      	b.n	8008c66 <_strtod_l+0x10e>
 8008c88:	4f66      	ldr	r7, [pc, #408]	; (8008e24 <_strtod_l+0x2cc>)
 8008c8a:	e7ec      	b.n	8008c66 <_strtod_l+0x10e>
 8008c8c:	2601      	movs	r6, #1
 8008c8e:	4f66      	ldr	r7, [pc, #408]	; (8008e28 <_strtod_l+0x2d0>)
 8008c90:	4276      	negs	r6, r6
 8008c92:	e7e8      	b.n	8008c66 <_strtod_l+0x10e>
 8008c94:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8008c96:	1c5a      	adds	r2, r3, #1
 8008c98:	921f      	str	r2, [sp, #124]	; 0x7c
 8008c9a:	785b      	ldrb	r3, [r3, #1]
 8008c9c:	2b30      	cmp	r3, #48	; 0x30
 8008c9e:	d0f9      	beq.n	8008c94 <_strtod_l+0x13c>
 8008ca0:	2b00      	cmp	r3, #0
 8008ca2:	d0a0      	beq.n	8008be6 <_strtod_l+0x8e>
 8008ca4:	2301      	movs	r3, #1
 8008ca6:	930a      	str	r3, [sp, #40]	; 0x28
 8008ca8:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8008caa:	220a      	movs	r2, #10
 8008cac:	9310      	str	r3, [sp, #64]	; 0x40
 8008cae:	2300      	movs	r3, #0
 8008cb0:	930f      	str	r3, [sp, #60]	; 0x3c
 8008cb2:	930b      	str	r3, [sp, #44]	; 0x2c
 8008cb4:	9309      	str	r3, [sp, #36]	; 0x24
 8008cb6:	981f      	ldr	r0, [sp, #124]	; 0x7c
 8008cb8:	7805      	ldrb	r5, [r0, #0]
 8008cba:	002b      	movs	r3, r5
 8008cbc:	3b30      	subs	r3, #48	; 0x30
 8008cbe:	b2d9      	uxtb	r1, r3
 8008cc0:	2909      	cmp	r1, #9
 8008cc2:	d927      	bls.n	8008d14 <_strtod_l+0x1bc>
 8008cc4:	0022      	movs	r2, r4
 8008cc6:	9907      	ldr	r1, [sp, #28]
 8008cc8:	f002 ff94 	bl	800bbf4 <strncmp>
 8008ccc:	2800      	cmp	r0, #0
 8008cce:	d033      	beq.n	8008d38 <_strtod_l+0x1e0>
 8008cd0:	2000      	movs	r0, #0
 8008cd2:	002b      	movs	r3, r5
 8008cd4:	4684      	mov	ip, r0
 8008cd6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008cd8:	900c      	str	r0, [sp, #48]	; 0x30
 8008cda:	9206      	str	r2, [sp, #24]
 8008cdc:	2220      	movs	r2, #32
 8008cde:	0019      	movs	r1, r3
 8008ce0:	4391      	bics	r1, r2
 8008ce2:	000a      	movs	r2, r1
 8008ce4:	2100      	movs	r1, #0
 8008ce6:	9107      	str	r1, [sp, #28]
 8008ce8:	2a45      	cmp	r2, #69	; 0x45
 8008cea:	d000      	beq.n	8008cee <_strtod_l+0x196>
 8008cec:	e0c5      	b.n	8008e7a <_strtod_l+0x322>
 8008cee:	9b06      	ldr	r3, [sp, #24]
 8008cf0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008cf2:	4303      	orrs	r3, r0
 8008cf4:	4313      	orrs	r3, r2
 8008cf6:	428b      	cmp	r3, r1
 8008cf8:	d094      	beq.n	8008c24 <_strtod_l+0xcc>
 8008cfa:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8008cfc:	9308      	str	r3, [sp, #32]
 8008cfe:	3301      	adds	r3, #1
 8008d00:	931f      	str	r3, [sp, #124]	; 0x7c
 8008d02:	9b08      	ldr	r3, [sp, #32]
 8008d04:	785b      	ldrb	r3, [r3, #1]
 8008d06:	2b2b      	cmp	r3, #43	; 0x2b
 8008d08:	d076      	beq.n	8008df8 <_strtod_l+0x2a0>
 8008d0a:	000c      	movs	r4, r1
 8008d0c:	2b2d      	cmp	r3, #45	; 0x2d
 8008d0e:	d179      	bne.n	8008e04 <_strtod_l+0x2ac>
 8008d10:	2401      	movs	r4, #1
 8008d12:	e072      	b.n	8008dfa <_strtod_l+0x2a2>
 8008d14:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008d16:	2908      	cmp	r1, #8
 8008d18:	dc09      	bgt.n	8008d2e <_strtod_l+0x1d6>
 8008d1a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8008d1c:	4351      	muls	r1, r2
 8008d1e:	185b      	adds	r3, r3, r1
 8008d20:	930b      	str	r3, [sp, #44]	; 0x2c
 8008d22:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008d24:	3001      	adds	r0, #1
 8008d26:	3301      	adds	r3, #1
 8008d28:	9309      	str	r3, [sp, #36]	; 0x24
 8008d2a:	901f      	str	r0, [sp, #124]	; 0x7c
 8008d2c:	e7c3      	b.n	8008cb6 <_strtod_l+0x15e>
 8008d2e:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8008d30:	4351      	muls	r1, r2
 8008d32:	185b      	adds	r3, r3, r1
 8008d34:	930f      	str	r3, [sp, #60]	; 0x3c
 8008d36:	e7f4      	b.n	8008d22 <_strtod_l+0x1ca>
 8008d38:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8008d3a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008d3c:	191c      	adds	r4, r3, r4
 8008d3e:	941f      	str	r4, [sp, #124]	; 0x7c
 8008d40:	7823      	ldrb	r3, [r4, #0]
 8008d42:	2a00      	cmp	r2, #0
 8008d44:	d039      	beq.n	8008dba <_strtod_l+0x262>
 8008d46:	900c      	str	r0, [sp, #48]	; 0x30
 8008d48:	9206      	str	r2, [sp, #24]
 8008d4a:	001a      	movs	r2, r3
 8008d4c:	3a30      	subs	r2, #48	; 0x30
 8008d4e:	2a09      	cmp	r2, #9
 8008d50:	d912      	bls.n	8008d78 <_strtod_l+0x220>
 8008d52:	2201      	movs	r2, #1
 8008d54:	4694      	mov	ip, r2
 8008d56:	e7c1      	b.n	8008cdc <_strtod_l+0x184>
 8008d58:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8008d5a:	3001      	adds	r0, #1
 8008d5c:	1c5a      	adds	r2, r3, #1
 8008d5e:	921f      	str	r2, [sp, #124]	; 0x7c
 8008d60:	785b      	ldrb	r3, [r3, #1]
 8008d62:	2b30      	cmp	r3, #48	; 0x30
 8008d64:	d0f8      	beq.n	8008d58 <_strtod_l+0x200>
 8008d66:	001a      	movs	r2, r3
 8008d68:	3a31      	subs	r2, #49	; 0x31
 8008d6a:	2a08      	cmp	r2, #8
 8008d6c:	d83f      	bhi.n	8008dee <_strtod_l+0x296>
 8008d6e:	900c      	str	r0, [sp, #48]	; 0x30
 8008d70:	2000      	movs	r0, #0
 8008d72:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8008d74:	9006      	str	r0, [sp, #24]
 8008d76:	9210      	str	r2, [sp, #64]	; 0x40
 8008d78:	001a      	movs	r2, r3
 8008d7a:	1c41      	adds	r1, r0, #1
 8008d7c:	3a30      	subs	r2, #48	; 0x30
 8008d7e:	2b30      	cmp	r3, #48	; 0x30
 8008d80:	d015      	beq.n	8008dae <_strtod_l+0x256>
 8008d82:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008d84:	185b      	adds	r3, r3, r1
 8008d86:	210a      	movs	r1, #10
 8008d88:	930c      	str	r3, [sp, #48]	; 0x30
 8008d8a:	9b06      	ldr	r3, [sp, #24]
 8008d8c:	18c4      	adds	r4, r0, r3
 8008d8e:	42a3      	cmp	r3, r4
 8008d90:	d115      	bne.n	8008dbe <_strtod_l+0x266>
 8008d92:	9906      	ldr	r1, [sp, #24]
 8008d94:	9b06      	ldr	r3, [sp, #24]
 8008d96:	3101      	adds	r1, #1
 8008d98:	1809      	adds	r1, r1, r0
 8008d9a:	181b      	adds	r3, r3, r0
 8008d9c:	9106      	str	r1, [sp, #24]
 8008d9e:	2b08      	cmp	r3, #8
 8008da0:	dc1b      	bgt.n	8008dda <_strtod_l+0x282>
 8008da2:	230a      	movs	r3, #10
 8008da4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8008da6:	434b      	muls	r3, r1
 8008da8:	2100      	movs	r1, #0
 8008daa:	18d3      	adds	r3, r2, r3
 8008dac:	930b      	str	r3, [sp, #44]	; 0x2c
 8008dae:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8008db0:	0008      	movs	r0, r1
 8008db2:	1c5a      	adds	r2, r3, #1
 8008db4:	921f      	str	r2, [sp, #124]	; 0x7c
 8008db6:	785b      	ldrb	r3, [r3, #1]
 8008db8:	e7c7      	b.n	8008d4a <_strtod_l+0x1f2>
 8008dba:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008dbc:	e7d1      	b.n	8008d62 <_strtod_l+0x20a>
 8008dbe:	2b08      	cmp	r3, #8
 8008dc0:	dc04      	bgt.n	8008dcc <_strtod_l+0x274>
 8008dc2:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8008dc4:	434d      	muls	r5, r1
 8008dc6:	950b      	str	r5, [sp, #44]	; 0x2c
 8008dc8:	3301      	adds	r3, #1
 8008dca:	e7e0      	b.n	8008d8e <_strtod_l+0x236>
 8008dcc:	1c5d      	adds	r5, r3, #1
 8008dce:	2d10      	cmp	r5, #16
 8008dd0:	dcfa      	bgt.n	8008dc8 <_strtod_l+0x270>
 8008dd2:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8008dd4:	434d      	muls	r5, r1
 8008dd6:	950f      	str	r5, [sp, #60]	; 0x3c
 8008dd8:	e7f6      	b.n	8008dc8 <_strtod_l+0x270>
 8008dda:	9b06      	ldr	r3, [sp, #24]
 8008ddc:	2100      	movs	r1, #0
 8008dde:	2b10      	cmp	r3, #16
 8008de0:	dce5      	bgt.n	8008dae <_strtod_l+0x256>
 8008de2:	230a      	movs	r3, #10
 8008de4:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8008de6:	4343      	muls	r3, r0
 8008de8:	18d3      	adds	r3, r2, r3
 8008dea:	930f      	str	r3, [sp, #60]	; 0x3c
 8008dec:	e7df      	b.n	8008dae <_strtod_l+0x256>
 8008dee:	2200      	movs	r2, #0
 8008df0:	920c      	str	r2, [sp, #48]	; 0x30
 8008df2:	9206      	str	r2, [sp, #24]
 8008df4:	3201      	adds	r2, #1
 8008df6:	e7ad      	b.n	8008d54 <_strtod_l+0x1fc>
 8008df8:	2400      	movs	r4, #0
 8008dfa:	9b08      	ldr	r3, [sp, #32]
 8008dfc:	3302      	adds	r3, #2
 8008dfe:	931f      	str	r3, [sp, #124]	; 0x7c
 8008e00:	9b08      	ldr	r3, [sp, #32]
 8008e02:	789b      	ldrb	r3, [r3, #2]
 8008e04:	001a      	movs	r2, r3
 8008e06:	3a30      	subs	r2, #48	; 0x30
 8008e08:	2a09      	cmp	r2, #9
 8008e0a:	d913      	bls.n	8008e34 <_strtod_l+0x2dc>
 8008e0c:	9a08      	ldr	r2, [sp, #32]
 8008e0e:	921f      	str	r2, [sp, #124]	; 0x7c
 8008e10:	2200      	movs	r2, #0
 8008e12:	e031      	b.n	8008e78 <_strtod_l+0x320>
 8008e14:	0800cfe0 	.word	0x0800cfe0
 8008e18:	0800cd94 	.word	0x0800cd94
 8008e1c:	ffefffff 	.word	0xffefffff
 8008e20:	00000433 	.word	0x00000433
 8008e24:	7ff00000 	.word	0x7ff00000
 8008e28:	7fffffff 	.word	0x7fffffff
 8008e2c:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8008e2e:	1c5a      	adds	r2, r3, #1
 8008e30:	921f      	str	r2, [sp, #124]	; 0x7c
 8008e32:	785b      	ldrb	r3, [r3, #1]
 8008e34:	2b30      	cmp	r3, #48	; 0x30
 8008e36:	d0f9      	beq.n	8008e2c <_strtod_l+0x2d4>
 8008e38:	2200      	movs	r2, #0
 8008e3a:	9207      	str	r2, [sp, #28]
 8008e3c:	001a      	movs	r2, r3
 8008e3e:	3a31      	subs	r2, #49	; 0x31
 8008e40:	2a08      	cmp	r2, #8
 8008e42:	d81a      	bhi.n	8008e7a <_strtod_l+0x322>
 8008e44:	3b30      	subs	r3, #48	; 0x30
 8008e46:	001a      	movs	r2, r3
 8008e48:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8008e4a:	9307      	str	r3, [sp, #28]
 8008e4c:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8008e4e:	1c59      	adds	r1, r3, #1
 8008e50:	911f      	str	r1, [sp, #124]	; 0x7c
 8008e52:	785b      	ldrb	r3, [r3, #1]
 8008e54:	001d      	movs	r5, r3
 8008e56:	3d30      	subs	r5, #48	; 0x30
 8008e58:	2d09      	cmp	r5, #9
 8008e5a:	d939      	bls.n	8008ed0 <_strtod_l+0x378>
 8008e5c:	9d07      	ldr	r5, [sp, #28]
 8008e5e:	1b49      	subs	r1, r1, r5
 8008e60:	4db0      	ldr	r5, [pc, #704]	; (8009124 <_strtod_l+0x5cc>)
 8008e62:	9507      	str	r5, [sp, #28]
 8008e64:	2908      	cmp	r1, #8
 8008e66:	dc03      	bgt.n	8008e70 <_strtod_l+0x318>
 8008e68:	9207      	str	r2, [sp, #28]
 8008e6a:	42aa      	cmp	r2, r5
 8008e6c:	dd00      	ble.n	8008e70 <_strtod_l+0x318>
 8008e6e:	9507      	str	r5, [sp, #28]
 8008e70:	2c00      	cmp	r4, #0
 8008e72:	d002      	beq.n	8008e7a <_strtod_l+0x322>
 8008e74:	9a07      	ldr	r2, [sp, #28]
 8008e76:	4252      	negs	r2, r2
 8008e78:	9207      	str	r2, [sp, #28]
 8008e7a:	9a06      	ldr	r2, [sp, #24]
 8008e7c:	2a00      	cmp	r2, #0
 8008e7e:	d14b      	bne.n	8008f18 <_strtod_l+0x3c0>
 8008e80:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008e82:	4310      	orrs	r0, r2
 8008e84:	d000      	beq.n	8008e88 <_strtod_l+0x330>
 8008e86:	e6ae      	b.n	8008be6 <_strtod_l+0x8e>
 8008e88:	4662      	mov	r2, ip
 8008e8a:	2a00      	cmp	r2, #0
 8008e8c:	d000      	beq.n	8008e90 <_strtod_l+0x338>
 8008e8e:	e6c9      	b.n	8008c24 <_strtod_l+0xcc>
 8008e90:	2b69      	cmp	r3, #105	; 0x69
 8008e92:	d025      	beq.n	8008ee0 <_strtod_l+0x388>
 8008e94:	dc21      	bgt.n	8008eda <_strtod_l+0x382>
 8008e96:	2b49      	cmp	r3, #73	; 0x49
 8008e98:	d022      	beq.n	8008ee0 <_strtod_l+0x388>
 8008e9a:	2b4e      	cmp	r3, #78	; 0x4e
 8008e9c:	d000      	beq.n	8008ea0 <_strtod_l+0x348>
 8008e9e:	e6c1      	b.n	8008c24 <_strtod_l+0xcc>
 8008ea0:	49a1      	ldr	r1, [pc, #644]	; (8009128 <_strtod_l+0x5d0>)
 8008ea2:	a81f      	add	r0, sp, #124	; 0x7c
 8008ea4:	f001 fe64 	bl	800ab70 <__match>
 8008ea8:	2800      	cmp	r0, #0
 8008eaa:	d100      	bne.n	8008eae <_strtod_l+0x356>
 8008eac:	e6ba      	b.n	8008c24 <_strtod_l+0xcc>
 8008eae:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8008eb0:	781b      	ldrb	r3, [r3, #0]
 8008eb2:	2b28      	cmp	r3, #40	; 0x28
 8008eb4:	d12a      	bne.n	8008f0c <_strtod_l+0x3b4>
 8008eb6:	499d      	ldr	r1, [pc, #628]	; (800912c <_strtod_l+0x5d4>)
 8008eb8:	aa22      	add	r2, sp, #136	; 0x88
 8008eba:	a81f      	add	r0, sp, #124	; 0x7c
 8008ebc:	f001 fe6c 	bl	800ab98 <__hexnan>
 8008ec0:	2805      	cmp	r0, #5
 8008ec2:	d123      	bne.n	8008f0c <_strtod_l+0x3b4>
 8008ec4:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8008ec6:	4a9a      	ldr	r2, [pc, #616]	; (8009130 <_strtod_l+0x5d8>)
 8008ec8:	9e22      	ldr	r6, [sp, #136]	; 0x88
 8008eca:	431a      	orrs	r2, r3
 8008ecc:	0017      	movs	r7, r2
 8008ece:	e68a      	b.n	8008be6 <_strtod_l+0x8e>
 8008ed0:	210a      	movs	r1, #10
 8008ed2:	434a      	muls	r2, r1
 8008ed4:	18d2      	adds	r2, r2, r3
 8008ed6:	3a30      	subs	r2, #48	; 0x30
 8008ed8:	e7b8      	b.n	8008e4c <_strtod_l+0x2f4>
 8008eda:	2b6e      	cmp	r3, #110	; 0x6e
 8008edc:	d0e0      	beq.n	8008ea0 <_strtod_l+0x348>
 8008ede:	e6a1      	b.n	8008c24 <_strtod_l+0xcc>
 8008ee0:	4994      	ldr	r1, [pc, #592]	; (8009134 <_strtod_l+0x5dc>)
 8008ee2:	a81f      	add	r0, sp, #124	; 0x7c
 8008ee4:	f001 fe44 	bl	800ab70 <__match>
 8008ee8:	2800      	cmp	r0, #0
 8008eea:	d100      	bne.n	8008eee <_strtod_l+0x396>
 8008eec:	e69a      	b.n	8008c24 <_strtod_l+0xcc>
 8008eee:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8008ef0:	4991      	ldr	r1, [pc, #580]	; (8009138 <_strtod_l+0x5e0>)
 8008ef2:	3b01      	subs	r3, #1
 8008ef4:	a81f      	add	r0, sp, #124	; 0x7c
 8008ef6:	931f      	str	r3, [sp, #124]	; 0x7c
 8008ef8:	f001 fe3a 	bl	800ab70 <__match>
 8008efc:	2800      	cmp	r0, #0
 8008efe:	d102      	bne.n	8008f06 <_strtod_l+0x3ae>
 8008f00:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8008f02:	3301      	adds	r3, #1
 8008f04:	931f      	str	r3, [sp, #124]	; 0x7c
 8008f06:	2600      	movs	r6, #0
 8008f08:	4f89      	ldr	r7, [pc, #548]	; (8009130 <_strtod_l+0x5d8>)
 8008f0a:	e66c      	b.n	8008be6 <_strtod_l+0x8e>
 8008f0c:	488b      	ldr	r0, [pc, #556]	; (800913c <_strtod_l+0x5e4>)
 8008f0e:	f002 fe59 	bl	800bbc4 <nan>
 8008f12:	0006      	movs	r6, r0
 8008f14:	000f      	movs	r7, r1
 8008f16:	e666      	b.n	8008be6 <_strtod_l+0x8e>
 8008f18:	9b07      	ldr	r3, [sp, #28]
 8008f1a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008f1c:	1a9b      	subs	r3, r3, r2
 8008f1e:	930a      	str	r3, [sp, #40]	; 0x28
 8008f20:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008f22:	2b00      	cmp	r3, #0
 8008f24:	d101      	bne.n	8008f2a <_strtod_l+0x3d2>
 8008f26:	9b06      	ldr	r3, [sp, #24]
 8008f28:	9309      	str	r3, [sp, #36]	; 0x24
 8008f2a:	9c06      	ldr	r4, [sp, #24]
 8008f2c:	2c10      	cmp	r4, #16
 8008f2e:	dd00      	ble.n	8008f32 <_strtod_l+0x3da>
 8008f30:	2410      	movs	r4, #16
 8008f32:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8008f34:	f7f9 fd6c 	bl	8002a10 <__aeabi_ui2d>
 8008f38:	9b06      	ldr	r3, [sp, #24]
 8008f3a:	0006      	movs	r6, r0
 8008f3c:	000f      	movs	r7, r1
 8008f3e:	2b09      	cmp	r3, #9
 8008f40:	dd15      	ble.n	8008f6e <_strtod_l+0x416>
 8008f42:	0022      	movs	r2, r4
 8008f44:	4b7e      	ldr	r3, [pc, #504]	; (8009140 <_strtod_l+0x5e8>)
 8008f46:	3a09      	subs	r2, #9
 8008f48:	00d2      	lsls	r2, r2, #3
 8008f4a:	189b      	adds	r3, r3, r2
 8008f4c:	681a      	ldr	r2, [r3, #0]
 8008f4e:	685b      	ldr	r3, [r3, #4]
 8008f50:	f7f8 fedc 	bl	8001d0c <__aeabi_dmul>
 8008f54:	0006      	movs	r6, r0
 8008f56:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8008f58:	000f      	movs	r7, r1
 8008f5a:	f7f9 fd59 	bl	8002a10 <__aeabi_ui2d>
 8008f5e:	0002      	movs	r2, r0
 8008f60:	000b      	movs	r3, r1
 8008f62:	0030      	movs	r0, r6
 8008f64:	0039      	movs	r1, r7
 8008f66:	f7f7 ff93 	bl	8000e90 <__aeabi_dadd>
 8008f6a:	0006      	movs	r6, r0
 8008f6c:	000f      	movs	r7, r1
 8008f6e:	9b06      	ldr	r3, [sp, #24]
 8008f70:	2b0f      	cmp	r3, #15
 8008f72:	dc39      	bgt.n	8008fe8 <_strtod_l+0x490>
 8008f74:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008f76:	2b00      	cmp	r3, #0
 8008f78:	d100      	bne.n	8008f7c <_strtod_l+0x424>
 8008f7a:	e634      	b.n	8008be6 <_strtod_l+0x8e>
 8008f7c:	dd24      	ble.n	8008fc8 <_strtod_l+0x470>
 8008f7e:	2b16      	cmp	r3, #22
 8008f80:	dc09      	bgt.n	8008f96 <_strtod_l+0x43e>
 8008f82:	496f      	ldr	r1, [pc, #444]	; (8009140 <_strtod_l+0x5e8>)
 8008f84:	00db      	lsls	r3, r3, #3
 8008f86:	18c9      	adds	r1, r1, r3
 8008f88:	0032      	movs	r2, r6
 8008f8a:	6808      	ldr	r0, [r1, #0]
 8008f8c:	6849      	ldr	r1, [r1, #4]
 8008f8e:	003b      	movs	r3, r7
 8008f90:	f7f8 febc 	bl	8001d0c <__aeabi_dmul>
 8008f94:	e7bd      	b.n	8008f12 <_strtod_l+0x3ba>
 8008f96:	2325      	movs	r3, #37	; 0x25
 8008f98:	9a06      	ldr	r2, [sp, #24]
 8008f9a:	1a9b      	subs	r3, r3, r2
 8008f9c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008f9e:	4293      	cmp	r3, r2
 8008fa0:	db22      	blt.n	8008fe8 <_strtod_l+0x490>
 8008fa2:	240f      	movs	r4, #15
 8008fa4:	9b06      	ldr	r3, [sp, #24]
 8008fa6:	4d66      	ldr	r5, [pc, #408]	; (8009140 <_strtod_l+0x5e8>)
 8008fa8:	1ae4      	subs	r4, r4, r3
 8008faa:	00e1      	lsls	r1, r4, #3
 8008fac:	1869      	adds	r1, r5, r1
 8008fae:	0032      	movs	r2, r6
 8008fb0:	6808      	ldr	r0, [r1, #0]
 8008fb2:	6849      	ldr	r1, [r1, #4]
 8008fb4:	003b      	movs	r3, r7
 8008fb6:	f7f8 fea9 	bl	8001d0c <__aeabi_dmul>
 8008fba:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008fbc:	1b1c      	subs	r4, r3, r4
 8008fbe:	00e4      	lsls	r4, r4, #3
 8008fc0:	192c      	adds	r4, r5, r4
 8008fc2:	6822      	ldr	r2, [r4, #0]
 8008fc4:	6863      	ldr	r3, [r4, #4]
 8008fc6:	e7e3      	b.n	8008f90 <_strtod_l+0x438>
 8008fc8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008fca:	3316      	adds	r3, #22
 8008fcc:	db0c      	blt.n	8008fe8 <_strtod_l+0x490>
 8008fce:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008fd0:	9a07      	ldr	r2, [sp, #28]
 8008fd2:	0030      	movs	r0, r6
 8008fd4:	1a9a      	subs	r2, r3, r2
 8008fd6:	4b5a      	ldr	r3, [pc, #360]	; (8009140 <_strtod_l+0x5e8>)
 8008fd8:	00d2      	lsls	r2, r2, #3
 8008fda:	189b      	adds	r3, r3, r2
 8008fdc:	0039      	movs	r1, r7
 8008fde:	681a      	ldr	r2, [r3, #0]
 8008fe0:	685b      	ldr	r3, [r3, #4]
 8008fe2:	f7f8 fa91 	bl	8001508 <__aeabi_ddiv>
 8008fe6:	e794      	b.n	8008f12 <_strtod_l+0x3ba>
 8008fe8:	9b06      	ldr	r3, [sp, #24]
 8008fea:	1b1c      	subs	r4, r3, r4
 8008fec:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008fee:	18e4      	adds	r4, r4, r3
 8008ff0:	2c00      	cmp	r4, #0
 8008ff2:	dd72      	ble.n	80090da <_strtod_l+0x582>
 8008ff4:	230f      	movs	r3, #15
 8008ff6:	0021      	movs	r1, r4
 8008ff8:	4019      	ands	r1, r3
 8008ffa:	421c      	tst	r4, r3
 8008ffc:	d00a      	beq.n	8009014 <_strtod_l+0x4bc>
 8008ffe:	00cb      	lsls	r3, r1, #3
 8009000:	494f      	ldr	r1, [pc, #316]	; (8009140 <_strtod_l+0x5e8>)
 8009002:	0032      	movs	r2, r6
 8009004:	18c9      	adds	r1, r1, r3
 8009006:	6808      	ldr	r0, [r1, #0]
 8009008:	6849      	ldr	r1, [r1, #4]
 800900a:	003b      	movs	r3, r7
 800900c:	f7f8 fe7e 	bl	8001d0c <__aeabi_dmul>
 8009010:	0006      	movs	r6, r0
 8009012:	000f      	movs	r7, r1
 8009014:	230f      	movs	r3, #15
 8009016:	439c      	bics	r4, r3
 8009018:	d04a      	beq.n	80090b0 <_strtod_l+0x558>
 800901a:	3326      	adds	r3, #38	; 0x26
 800901c:	33ff      	adds	r3, #255	; 0xff
 800901e:	429c      	cmp	r4, r3
 8009020:	dd22      	ble.n	8009068 <_strtod_l+0x510>
 8009022:	2300      	movs	r3, #0
 8009024:	9306      	str	r3, [sp, #24]
 8009026:	9307      	str	r3, [sp, #28]
 8009028:	930b      	str	r3, [sp, #44]	; 0x2c
 800902a:	9309      	str	r3, [sp, #36]	; 0x24
 800902c:	2322      	movs	r3, #34	; 0x22
 800902e:	2600      	movs	r6, #0
 8009030:	9a05      	ldr	r2, [sp, #20]
 8009032:	4f3f      	ldr	r7, [pc, #252]	; (8009130 <_strtod_l+0x5d8>)
 8009034:	6013      	str	r3, [r2, #0]
 8009036:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009038:	42b3      	cmp	r3, r6
 800903a:	d100      	bne.n	800903e <_strtod_l+0x4e6>
 800903c:	e5d3      	b.n	8008be6 <_strtod_l+0x8e>
 800903e:	9920      	ldr	r1, [sp, #128]	; 0x80
 8009040:	9805      	ldr	r0, [sp, #20]
 8009042:	f001 fec9 	bl	800add8 <_Bfree>
 8009046:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009048:	9805      	ldr	r0, [sp, #20]
 800904a:	f001 fec5 	bl	800add8 <_Bfree>
 800904e:	9907      	ldr	r1, [sp, #28]
 8009050:	9805      	ldr	r0, [sp, #20]
 8009052:	f001 fec1 	bl	800add8 <_Bfree>
 8009056:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8009058:	9805      	ldr	r0, [sp, #20]
 800905a:	f001 febd 	bl	800add8 <_Bfree>
 800905e:	9906      	ldr	r1, [sp, #24]
 8009060:	9805      	ldr	r0, [sp, #20]
 8009062:	f001 feb9 	bl	800add8 <_Bfree>
 8009066:	e5be      	b.n	8008be6 <_strtod_l+0x8e>
 8009068:	2300      	movs	r3, #0
 800906a:	0030      	movs	r0, r6
 800906c:	0039      	movs	r1, r7
 800906e:	4d35      	ldr	r5, [pc, #212]	; (8009144 <_strtod_l+0x5ec>)
 8009070:	1124      	asrs	r4, r4, #4
 8009072:	9308      	str	r3, [sp, #32]
 8009074:	2c01      	cmp	r4, #1
 8009076:	dc1e      	bgt.n	80090b6 <_strtod_l+0x55e>
 8009078:	2b00      	cmp	r3, #0
 800907a:	d001      	beq.n	8009080 <_strtod_l+0x528>
 800907c:	0006      	movs	r6, r0
 800907e:	000f      	movs	r7, r1
 8009080:	4b31      	ldr	r3, [pc, #196]	; (8009148 <_strtod_l+0x5f0>)
 8009082:	0032      	movs	r2, r6
 8009084:	18ff      	adds	r7, r7, r3
 8009086:	9b08      	ldr	r3, [sp, #32]
 8009088:	00dd      	lsls	r5, r3, #3
 800908a:	4b2e      	ldr	r3, [pc, #184]	; (8009144 <_strtod_l+0x5ec>)
 800908c:	195d      	adds	r5, r3, r5
 800908e:	6828      	ldr	r0, [r5, #0]
 8009090:	6869      	ldr	r1, [r5, #4]
 8009092:	003b      	movs	r3, r7
 8009094:	f7f8 fe3a 	bl	8001d0c <__aeabi_dmul>
 8009098:	4b25      	ldr	r3, [pc, #148]	; (8009130 <_strtod_l+0x5d8>)
 800909a:	4a2c      	ldr	r2, [pc, #176]	; (800914c <_strtod_l+0x5f4>)
 800909c:	0006      	movs	r6, r0
 800909e:	400b      	ands	r3, r1
 80090a0:	4293      	cmp	r3, r2
 80090a2:	d8be      	bhi.n	8009022 <_strtod_l+0x4ca>
 80090a4:	4a2a      	ldr	r2, [pc, #168]	; (8009150 <_strtod_l+0x5f8>)
 80090a6:	4293      	cmp	r3, r2
 80090a8:	d913      	bls.n	80090d2 <_strtod_l+0x57a>
 80090aa:	2601      	movs	r6, #1
 80090ac:	4f29      	ldr	r7, [pc, #164]	; (8009154 <_strtod_l+0x5fc>)
 80090ae:	4276      	negs	r6, r6
 80090b0:	2300      	movs	r3, #0
 80090b2:	9308      	str	r3, [sp, #32]
 80090b4:	e087      	b.n	80091c6 <_strtod_l+0x66e>
 80090b6:	2201      	movs	r2, #1
 80090b8:	4214      	tst	r4, r2
 80090ba:	d004      	beq.n	80090c6 <_strtod_l+0x56e>
 80090bc:	682a      	ldr	r2, [r5, #0]
 80090be:	686b      	ldr	r3, [r5, #4]
 80090c0:	f7f8 fe24 	bl	8001d0c <__aeabi_dmul>
 80090c4:	2301      	movs	r3, #1
 80090c6:	9a08      	ldr	r2, [sp, #32]
 80090c8:	1064      	asrs	r4, r4, #1
 80090ca:	3201      	adds	r2, #1
 80090cc:	9208      	str	r2, [sp, #32]
 80090ce:	3508      	adds	r5, #8
 80090d0:	e7d0      	b.n	8009074 <_strtod_l+0x51c>
 80090d2:	23d4      	movs	r3, #212	; 0xd4
 80090d4:	049b      	lsls	r3, r3, #18
 80090d6:	18cf      	adds	r7, r1, r3
 80090d8:	e7ea      	b.n	80090b0 <_strtod_l+0x558>
 80090da:	2c00      	cmp	r4, #0
 80090dc:	d0e8      	beq.n	80090b0 <_strtod_l+0x558>
 80090de:	4264      	negs	r4, r4
 80090e0:	220f      	movs	r2, #15
 80090e2:	0023      	movs	r3, r4
 80090e4:	4013      	ands	r3, r2
 80090e6:	4214      	tst	r4, r2
 80090e8:	d00a      	beq.n	8009100 <_strtod_l+0x5a8>
 80090ea:	00da      	lsls	r2, r3, #3
 80090ec:	4b14      	ldr	r3, [pc, #80]	; (8009140 <_strtod_l+0x5e8>)
 80090ee:	0030      	movs	r0, r6
 80090f0:	189b      	adds	r3, r3, r2
 80090f2:	0039      	movs	r1, r7
 80090f4:	681a      	ldr	r2, [r3, #0]
 80090f6:	685b      	ldr	r3, [r3, #4]
 80090f8:	f7f8 fa06 	bl	8001508 <__aeabi_ddiv>
 80090fc:	0006      	movs	r6, r0
 80090fe:	000f      	movs	r7, r1
 8009100:	1124      	asrs	r4, r4, #4
 8009102:	d0d5      	beq.n	80090b0 <_strtod_l+0x558>
 8009104:	2c1f      	cmp	r4, #31
 8009106:	dd27      	ble.n	8009158 <_strtod_l+0x600>
 8009108:	2300      	movs	r3, #0
 800910a:	9306      	str	r3, [sp, #24]
 800910c:	9307      	str	r3, [sp, #28]
 800910e:	930b      	str	r3, [sp, #44]	; 0x2c
 8009110:	9309      	str	r3, [sp, #36]	; 0x24
 8009112:	2322      	movs	r3, #34	; 0x22
 8009114:	9a05      	ldr	r2, [sp, #20]
 8009116:	2600      	movs	r6, #0
 8009118:	6013      	str	r3, [r2, #0]
 800911a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800911c:	2700      	movs	r7, #0
 800911e:	2b00      	cmp	r3, #0
 8009120:	d18d      	bne.n	800903e <_strtod_l+0x4e6>
 8009122:	e560      	b.n	8008be6 <_strtod_l+0x8e>
 8009124:	00004e1f 	.word	0x00004e1f
 8009128:	0800cd65 	.word	0x0800cd65
 800912c:	0800cda8 	.word	0x0800cda8
 8009130:	7ff00000 	.word	0x7ff00000
 8009134:	0800cd5d 	.word	0x0800cd5d
 8009138:	0800ceec 	.word	0x0800ceec
 800913c:	0800d198 	.word	0x0800d198
 8009140:	0800d078 	.word	0x0800d078
 8009144:	0800d050 	.word	0x0800d050
 8009148:	fcb00000 	.word	0xfcb00000
 800914c:	7ca00000 	.word	0x7ca00000
 8009150:	7c900000 	.word	0x7c900000
 8009154:	7fefffff 	.word	0x7fefffff
 8009158:	2310      	movs	r3, #16
 800915a:	0022      	movs	r2, r4
 800915c:	401a      	ands	r2, r3
 800915e:	9208      	str	r2, [sp, #32]
 8009160:	421c      	tst	r4, r3
 8009162:	d001      	beq.n	8009168 <_strtod_l+0x610>
 8009164:	335a      	adds	r3, #90	; 0x5a
 8009166:	9308      	str	r3, [sp, #32]
 8009168:	0030      	movs	r0, r6
 800916a:	0039      	movs	r1, r7
 800916c:	2300      	movs	r3, #0
 800916e:	4dc5      	ldr	r5, [pc, #788]	; (8009484 <_strtod_l+0x92c>)
 8009170:	2201      	movs	r2, #1
 8009172:	4214      	tst	r4, r2
 8009174:	d004      	beq.n	8009180 <_strtod_l+0x628>
 8009176:	682a      	ldr	r2, [r5, #0]
 8009178:	686b      	ldr	r3, [r5, #4]
 800917a:	f7f8 fdc7 	bl	8001d0c <__aeabi_dmul>
 800917e:	2301      	movs	r3, #1
 8009180:	1064      	asrs	r4, r4, #1
 8009182:	3508      	adds	r5, #8
 8009184:	2c00      	cmp	r4, #0
 8009186:	d1f3      	bne.n	8009170 <_strtod_l+0x618>
 8009188:	2b00      	cmp	r3, #0
 800918a:	d001      	beq.n	8009190 <_strtod_l+0x638>
 800918c:	0006      	movs	r6, r0
 800918e:	000f      	movs	r7, r1
 8009190:	9b08      	ldr	r3, [sp, #32]
 8009192:	2b00      	cmp	r3, #0
 8009194:	d00f      	beq.n	80091b6 <_strtod_l+0x65e>
 8009196:	236b      	movs	r3, #107	; 0x6b
 8009198:	007a      	lsls	r2, r7, #1
 800919a:	0d52      	lsrs	r2, r2, #21
 800919c:	0039      	movs	r1, r7
 800919e:	1a9b      	subs	r3, r3, r2
 80091a0:	2b00      	cmp	r3, #0
 80091a2:	dd08      	ble.n	80091b6 <_strtod_l+0x65e>
 80091a4:	2b1f      	cmp	r3, #31
 80091a6:	dc00      	bgt.n	80091aa <_strtod_l+0x652>
 80091a8:	e124      	b.n	80093f4 <_strtod_l+0x89c>
 80091aa:	2600      	movs	r6, #0
 80091ac:	2b34      	cmp	r3, #52	; 0x34
 80091ae:	dc00      	bgt.n	80091b2 <_strtod_l+0x65a>
 80091b0:	e119      	b.n	80093e6 <_strtod_l+0x88e>
 80091b2:	27dc      	movs	r7, #220	; 0xdc
 80091b4:	04bf      	lsls	r7, r7, #18
 80091b6:	2200      	movs	r2, #0
 80091b8:	2300      	movs	r3, #0
 80091ba:	0030      	movs	r0, r6
 80091bc:	0039      	movs	r1, r7
 80091be:	f7f7 f945 	bl	800044c <__aeabi_dcmpeq>
 80091c2:	2800      	cmp	r0, #0
 80091c4:	d1a0      	bne.n	8009108 <_strtod_l+0x5b0>
 80091c6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80091c8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80091ca:	9300      	str	r3, [sp, #0]
 80091cc:	9910      	ldr	r1, [sp, #64]	; 0x40
 80091ce:	9b06      	ldr	r3, [sp, #24]
 80091d0:	9805      	ldr	r0, [sp, #20]
 80091d2:	f001 fe69 	bl	800aea8 <__s2b>
 80091d6:	900b      	str	r0, [sp, #44]	; 0x2c
 80091d8:	2800      	cmp	r0, #0
 80091da:	d100      	bne.n	80091de <_strtod_l+0x686>
 80091dc:	e721      	b.n	8009022 <_strtod_l+0x4ca>
 80091de:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80091e0:	9907      	ldr	r1, [sp, #28]
 80091e2:	17da      	asrs	r2, r3, #31
 80091e4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80091e6:	1a5b      	subs	r3, r3, r1
 80091e8:	401a      	ands	r2, r3
 80091ea:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80091ec:	9215      	str	r2, [sp, #84]	; 0x54
 80091ee:	43db      	mvns	r3, r3
 80091f0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80091f2:	17db      	asrs	r3, r3, #31
 80091f4:	401a      	ands	r2, r3
 80091f6:	2300      	movs	r3, #0
 80091f8:	921a      	str	r2, [sp, #104]	; 0x68
 80091fa:	9306      	str	r3, [sp, #24]
 80091fc:	9307      	str	r3, [sp, #28]
 80091fe:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009200:	9805      	ldr	r0, [sp, #20]
 8009202:	6859      	ldr	r1, [r3, #4]
 8009204:	f001 fda4 	bl	800ad50 <_Balloc>
 8009208:	9009      	str	r0, [sp, #36]	; 0x24
 800920a:	2800      	cmp	r0, #0
 800920c:	d100      	bne.n	8009210 <_strtod_l+0x6b8>
 800920e:	e70d      	b.n	800902c <_strtod_l+0x4d4>
 8009210:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009212:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8009214:	691b      	ldr	r3, [r3, #16]
 8009216:	310c      	adds	r1, #12
 8009218:	1c9a      	adds	r2, r3, #2
 800921a:	0092      	lsls	r2, r2, #2
 800921c:	300c      	adds	r0, #12
 800921e:	930c      	str	r3, [sp, #48]	; 0x30
 8009220:	f001 fd8d 	bl	800ad3e <memcpy>
 8009224:	ab22      	add	r3, sp, #136	; 0x88
 8009226:	9301      	str	r3, [sp, #4]
 8009228:	ab21      	add	r3, sp, #132	; 0x84
 800922a:	9300      	str	r3, [sp, #0]
 800922c:	0032      	movs	r2, r6
 800922e:	003b      	movs	r3, r7
 8009230:	9805      	ldr	r0, [sp, #20]
 8009232:	9612      	str	r6, [sp, #72]	; 0x48
 8009234:	9713      	str	r7, [sp, #76]	; 0x4c
 8009236:	f002 f983 	bl	800b540 <__d2b>
 800923a:	9020      	str	r0, [sp, #128]	; 0x80
 800923c:	2800      	cmp	r0, #0
 800923e:	d100      	bne.n	8009242 <_strtod_l+0x6ea>
 8009240:	e6f4      	b.n	800902c <_strtod_l+0x4d4>
 8009242:	2101      	movs	r1, #1
 8009244:	9805      	ldr	r0, [sp, #20]
 8009246:	f001 fec3 	bl	800afd0 <__i2b>
 800924a:	9007      	str	r0, [sp, #28]
 800924c:	2800      	cmp	r0, #0
 800924e:	d100      	bne.n	8009252 <_strtod_l+0x6fa>
 8009250:	e6ec      	b.n	800902c <_strtod_l+0x4d4>
 8009252:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009254:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8009256:	9d15      	ldr	r5, [sp, #84]	; 0x54
 8009258:	1ad4      	subs	r4, r2, r3
 800925a:	2b00      	cmp	r3, #0
 800925c:	db01      	blt.n	8009262 <_strtod_l+0x70a>
 800925e:	9c1a      	ldr	r4, [sp, #104]	; 0x68
 8009260:	195d      	adds	r5, r3, r5
 8009262:	9908      	ldr	r1, [sp, #32]
 8009264:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8009266:	1a5b      	subs	r3, r3, r1
 8009268:	2136      	movs	r1, #54	; 0x36
 800926a:	189b      	adds	r3, r3, r2
 800926c:	1a8a      	subs	r2, r1, r2
 800926e:	4986      	ldr	r1, [pc, #536]	; (8009488 <_strtod_l+0x930>)
 8009270:	2001      	movs	r0, #1
 8009272:	468c      	mov	ip, r1
 8009274:	2100      	movs	r1, #0
 8009276:	3b01      	subs	r3, #1
 8009278:	9110      	str	r1, [sp, #64]	; 0x40
 800927a:	9014      	str	r0, [sp, #80]	; 0x50
 800927c:	4563      	cmp	r3, ip
 800927e:	da07      	bge.n	8009290 <_strtod_l+0x738>
 8009280:	4661      	mov	r1, ip
 8009282:	1ac9      	subs	r1, r1, r3
 8009284:	1a52      	subs	r2, r2, r1
 8009286:	291f      	cmp	r1, #31
 8009288:	dd00      	ble.n	800928c <_strtod_l+0x734>
 800928a:	e0b8      	b.n	80093fe <_strtod_l+0x8a6>
 800928c:	4088      	lsls	r0, r1
 800928e:	9014      	str	r0, [sp, #80]	; 0x50
 8009290:	18ab      	adds	r3, r5, r2
 8009292:	930c      	str	r3, [sp, #48]	; 0x30
 8009294:	18a4      	adds	r4, r4, r2
 8009296:	9b08      	ldr	r3, [sp, #32]
 8009298:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800929a:	191c      	adds	r4, r3, r4
 800929c:	002b      	movs	r3, r5
 800929e:	4295      	cmp	r5, r2
 80092a0:	dd00      	ble.n	80092a4 <_strtod_l+0x74c>
 80092a2:	0013      	movs	r3, r2
 80092a4:	42a3      	cmp	r3, r4
 80092a6:	dd00      	ble.n	80092aa <_strtod_l+0x752>
 80092a8:	0023      	movs	r3, r4
 80092aa:	2b00      	cmp	r3, #0
 80092ac:	dd04      	ble.n	80092b8 <_strtod_l+0x760>
 80092ae:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80092b0:	1ae4      	subs	r4, r4, r3
 80092b2:	1ad2      	subs	r2, r2, r3
 80092b4:	920c      	str	r2, [sp, #48]	; 0x30
 80092b6:	1aed      	subs	r5, r5, r3
 80092b8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80092ba:	2b00      	cmp	r3, #0
 80092bc:	dd17      	ble.n	80092ee <_strtod_l+0x796>
 80092be:	001a      	movs	r2, r3
 80092c0:	9907      	ldr	r1, [sp, #28]
 80092c2:	9805      	ldr	r0, [sp, #20]
 80092c4:	f001 ff4a 	bl	800b15c <__pow5mult>
 80092c8:	9007      	str	r0, [sp, #28]
 80092ca:	2800      	cmp	r0, #0
 80092cc:	d100      	bne.n	80092d0 <_strtod_l+0x778>
 80092ce:	e6ad      	b.n	800902c <_strtod_l+0x4d4>
 80092d0:	0001      	movs	r1, r0
 80092d2:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80092d4:	9805      	ldr	r0, [sp, #20]
 80092d6:	f001 fe91 	bl	800affc <__multiply>
 80092da:	900f      	str	r0, [sp, #60]	; 0x3c
 80092dc:	2800      	cmp	r0, #0
 80092de:	d100      	bne.n	80092e2 <_strtod_l+0x78a>
 80092e0:	e6a4      	b.n	800902c <_strtod_l+0x4d4>
 80092e2:	9920      	ldr	r1, [sp, #128]	; 0x80
 80092e4:	9805      	ldr	r0, [sp, #20]
 80092e6:	f001 fd77 	bl	800add8 <_Bfree>
 80092ea:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80092ec:	9320      	str	r3, [sp, #128]	; 0x80
 80092ee:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80092f0:	2b00      	cmp	r3, #0
 80092f2:	dd00      	ble.n	80092f6 <_strtod_l+0x79e>
 80092f4:	e089      	b.n	800940a <_strtod_l+0x8b2>
 80092f6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80092f8:	2b00      	cmp	r3, #0
 80092fa:	dd08      	ble.n	800930e <_strtod_l+0x7b6>
 80092fc:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 80092fe:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009300:	9805      	ldr	r0, [sp, #20]
 8009302:	f001 ff2b 	bl	800b15c <__pow5mult>
 8009306:	9009      	str	r0, [sp, #36]	; 0x24
 8009308:	2800      	cmp	r0, #0
 800930a:	d100      	bne.n	800930e <_strtod_l+0x7b6>
 800930c:	e68e      	b.n	800902c <_strtod_l+0x4d4>
 800930e:	2c00      	cmp	r4, #0
 8009310:	dd08      	ble.n	8009324 <_strtod_l+0x7cc>
 8009312:	0022      	movs	r2, r4
 8009314:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009316:	9805      	ldr	r0, [sp, #20]
 8009318:	f001 ff7c 	bl	800b214 <__lshift>
 800931c:	9009      	str	r0, [sp, #36]	; 0x24
 800931e:	2800      	cmp	r0, #0
 8009320:	d100      	bne.n	8009324 <_strtod_l+0x7cc>
 8009322:	e683      	b.n	800902c <_strtod_l+0x4d4>
 8009324:	2d00      	cmp	r5, #0
 8009326:	dd08      	ble.n	800933a <_strtod_l+0x7e2>
 8009328:	002a      	movs	r2, r5
 800932a:	9907      	ldr	r1, [sp, #28]
 800932c:	9805      	ldr	r0, [sp, #20]
 800932e:	f001 ff71 	bl	800b214 <__lshift>
 8009332:	9007      	str	r0, [sp, #28]
 8009334:	2800      	cmp	r0, #0
 8009336:	d100      	bne.n	800933a <_strtod_l+0x7e2>
 8009338:	e678      	b.n	800902c <_strtod_l+0x4d4>
 800933a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800933c:	9920      	ldr	r1, [sp, #128]	; 0x80
 800933e:	9805      	ldr	r0, [sp, #20]
 8009340:	f001 fff2 	bl	800b328 <__mdiff>
 8009344:	9006      	str	r0, [sp, #24]
 8009346:	2800      	cmp	r0, #0
 8009348:	d100      	bne.n	800934c <_strtod_l+0x7f4>
 800934a:	e66f      	b.n	800902c <_strtod_l+0x4d4>
 800934c:	2200      	movs	r2, #0
 800934e:	68c3      	ldr	r3, [r0, #12]
 8009350:	9907      	ldr	r1, [sp, #28]
 8009352:	60c2      	str	r2, [r0, #12]
 8009354:	930f      	str	r3, [sp, #60]	; 0x3c
 8009356:	f001 ffcb 	bl	800b2f0 <__mcmp>
 800935a:	2800      	cmp	r0, #0
 800935c:	da5f      	bge.n	800941e <_strtod_l+0x8c6>
 800935e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009360:	4333      	orrs	r3, r6
 8009362:	d000      	beq.n	8009366 <_strtod_l+0x80e>
 8009364:	e08a      	b.n	800947c <_strtod_l+0x924>
 8009366:	033b      	lsls	r3, r7, #12
 8009368:	d000      	beq.n	800936c <_strtod_l+0x814>
 800936a:	e087      	b.n	800947c <_strtod_l+0x924>
 800936c:	22d6      	movs	r2, #214	; 0xd6
 800936e:	4b47      	ldr	r3, [pc, #284]	; (800948c <_strtod_l+0x934>)
 8009370:	04d2      	lsls	r2, r2, #19
 8009372:	403b      	ands	r3, r7
 8009374:	4293      	cmp	r3, r2
 8009376:	d800      	bhi.n	800937a <_strtod_l+0x822>
 8009378:	e080      	b.n	800947c <_strtod_l+0x924>
 800937a:	9b06      	ldr	r3, [sp, #24]
 800937c:	695b      	ldr	r3, [r3, #20]
 800937e:	930a      	str	r3, [sp, #40]	; 0x28
 8009380:	2b00      	cmp	r3, #0
 8009382:	d104      	bne.n	800938e <_strtod_l+0x836>
 8009384:	9b06      	ldr	r3, [sp, #24]
 8009386:	691b      	ldr	r3, [r3, #16]
 8009388:	930a      	str	r3, [sp, #40]	; 0x28
 800938a:	2b01      	cmp	r3, #1
 800938c:	dd76      	ble.n	800947c <_strtod_l+0x924>
 800938e:	9906      	ldr	r1, [sp, #24]
 8009390:	2201      	movs	r2, #1
 8009392:	9805      	ldr	r0, [sp, #20]
 8009394:	f001 ff3e 	bl	800b214 <__lshift>
 8009398:	9907      	ldr	r1, [sp, #28]
 800939a:	9006      	str	r0, [sp, #24]
 800939c:	f001 ffa8 	bl	800b2f0 <__mcmp>
 80093a0:	2800      	cmp	r0, #0
 80093a2:	dd6b      	ble.n	800947c <_strtod_l+0x924>
 80093a4:	9908      	ldr	r1, [sp, #32]
 80093a6:	003b      	movs	r3, r7
 80093a8:	4a38      	ldr	r2, [pc, #224]	; (800948c <_strtod_l+0x934>)
 80093aa:	2900      	cmp	r1, #0
 80093ac:	d100      	bne.n	80093b0 <_strtod_l+0x858>
 80093ae:	e092      	b.n	80094d6 <_strtod_l+0x97e>
 80093b0:	0011      	movs	r1, r2
 80093b2:	20d6      	movs	r0, #214	; 0xd6
 80093b4:	4039      	ands	r1, r7
 80093b6:	04c0      	lsls	r0, r0, #19
 80093b8:	4281      	cmp	r1, r0
 80093ba:	dd00      	ble.n	80093be <_strtod_l+0x866>
 80093bc:	e08b      	b.n	80094d6 <_strtod_l+0x97e>
 80093be:	23dc      	movs	r3, #220	; 0xdc
 80093c0:	049b      	lsls	r3, r3, #18
 80093c2:	4299      	cmp	r1, r3
 80093c4:	dc00      	bgt.n	80093c8 <_strtod_l+0x870>
 80093c6:	e6a4      	b.n	8009112 <_strtod_l+0x5ba>
 80093c8:	0030      	movs	r0, r6
 80093ca:	0039      	movs	r1, r7
 80093cc:	2200      	movs	r2, #0
 80093ce:	4b30      	ldr	r3, [pc, #192]	; (8009490 <_strtod_l+0x938>)
 80093d0:	f7f8 fc9c 	bl	8001d0c <__aeabi_dmul>
 80093d4:	0006      	movs	r6, r0
 80093d6:	000f      	movs	r7, r1
 80093d8:	4308      	orrs	r0, r1
 80093da:	d000      	beq.n	80093de <_strtod_l+0x886>
 80093dc:	e62f      	b.n	800903e <_strtod_l+0x4e6>
 80093de:	2322      	movs	r3, #34	; 0x22
 80093e0:	9a05      	ldr	r2, [sp, #20]
 80093e2:	6013      	str	r3, [r2, #0]
 80093e4:	e62b      	b.n	800903e <_strtod_l+0x4e6>
 80093e6:	234b      	movs	r3, #75	; 0x4b
 80093e8:	1a9a      	subs	r2, r3, r2
 80093ea:	3b4c      	subs	r3, #76	; 0x4c
 80093ec:	4093      	lsls	r3, r2
 80093ee:	4019      	ands	r1, r3
 80093f0:	000f      	movs	r7, r1
 80093f2:	e6e0      	b.n	80091b6 <_strtod_l+0x65e>
 80093f4:	2201      	movs	r2, #1
 80093f6:	4252      	negs	r2, r2
 80093f8:	409a      	lsls	r2, r3
 80093fa:	4016      	ands	r6, r2
 80093fc:	e6db      	b.n	80091b6 <_strtod_l+0x65e>
 80093fe:	4925      	ldr	r1, [pc, #148]	; (8009494 <_strtod_l+0x93c>)
 8009400:	1acb      	subs	r3, r1, r3
 8009402:	0001      	movs	r1, r0
 8009404:	4099      	lsls	r1, r3
 8009406:	9110      	str	r1, [sp, #64]	; 0x40
 8009408:	e741      	b.n	800928e <_strtod_l+0x736>
 800940a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800940c:	9920      	ldr	r1, [sp, #128]	; 0x80
 800940e:	9805      	ldr	r0, [sp, #20]
 8009410:	f001 ff00 	bl	800b214 <__lshift>
 8009414:	9020      	str	r0, [sp, #128]	; 0x80
 8009416:	2800      	cmp	r0, #0
 8009418:	d000      	beq.n	800941c <_strtod_l+0x8c4>
 800941a:	e76c      	b.n	80092f6 <_strtod_l+0x79e>
 800941c:	e606      	b.n	800902c <_strtod_l+0x4d4>
 800941e:	970c      	str	r7, [sp, #48]	; 0x30
 8009420:	2800      	cmp	r0, #0
 8009422:	d176      	bne.n	8009512 <_strtod_l+0x9ba>
 8009424:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8009426:	033b      	lsls	r3, r7, #12
 8009428:	0b1b      	lsrs	r3, r3, #12
 800942a:	2a00      	cmp	r2, #0
 800942c:	d038      	beq.n	80094a0 <_strtod_l+0x948>
 800942e:	4a1a      	ldr	r2, [pc, #104]	; (8009498 <_strtod_l+0x940>)
 8009430:	4293      	cmp	r3, r2
 8009432:	d138      	bne.n	80094a6 <_strtod_l+0x94e>
 8009434:	2201      	movs	r2, #1
 8009436:	9b08      	ldr	r3, [sp, #32]
 8009438:	4252      	negs	r2, r2
 800943a:	0031      	movs	r1, r6
 800943c:	0010      	movs	r0, r2
 800943e:	2b00      	cmp	r3, #0
 8009440:	d00b      	beq.n	800945a <_strtod_l+0x902>
 8009442:	24d4      	movs	r4, #212	; 0xd4
 8009444:	4b11      	ldr	r3, [pc, #68]	; (800948c <_strtod_l+0x934>)
 8009446:	0010      	movs	r0, r2
 8009448:	403b      	ands	r3, r7
 800944a:	04e4      	lsls	r4, r4, #19
 800944c:	42a3      	cmp	r3, r4
 800944e:	d804      	bhi.n	800945a <_strtod_l+0x902>
 8009450:	306c      	adds	r0, #108	; 0x6c
 8009452:	0d1b      	lsrs	r3, r3, #20
 8009454:	1ac3      	subs	r3, r0, r3
 8009456:	409a      	lsls	r2, r3
 8009458:	0010      	movs	r0, r2
 800945a:	4281      	cmp	r1, r0
 800945c:	d123      	bne.n	80094a6 <_strtod_l+0x94e>
 800945e:	4b0f      	ldr	r3, [pc, #60]	; (800949c <_strtod_l+0x944>)
 8009460:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009462:	429a      	cmp	r2, r3
 8009464:	d102      	bne.n	800946c <_strtod_l+0x914>
 8009466:	1c4b      	adds	r3, r1, #1
 8009468:	d100      	bne.n	800946c <_strtod_l+0x914>
 800946a:	e5df      	b.n	800902c <_strtod_l+0x4d4>
 800946c:	4b07      	ldr	r3, [pc, #28]	; (800948c <_strtod_l+0x934>)
 800946e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009470:	2600      	movs	r6, #0
 8009472:	401a      	ands	r2, r3
 8009474:	0013      	movs	r3, r2
 8009476:	2280      	movs	r2, #128	; 0x80
 8009478:	0352      	lsls	r2, r2, #13
 800947a:	189f      	adds	r7, r3, r2
 800947c:	9b08      	ldr	r3, [sp, #32]
 800947e:	2b00      	cmp	r3, #0
 8009480:	d1a2      	bne.n	80093c8 <_strtod_l+0x870>
 8009482:	e5dc      	b.n	800903e <_strtod_l+0x4e6>
 8009484:	0800cdc0 	.word	0x0800cdc0
 8009488:	fffffc02 	.word	0xfffffc02
 800948c:	7ff00000 	.word	0x7ff00000
 8009490:	39500000 	.word	0x39500000
 8009494:	fffffbe2 	.word	0xfffffbe2
 8009498:	000fffff 	.word	0x000fffff
 800949c:	7fefffff 	.word	0x7fefffff
 80094a0:	4333      	orrs	r3, r6
 80094a2:	d100      	bne.n	80094a6 <_strtod_l+0x94e>
 80094a4:	e77e      	b.n	80093a4 <_strtod_l+0x84c>
 80094a6:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80094a8:	2b00      	cmp	r3, #0
 80094aa:	d01d      	beq.n	80094e8 <_strtod_l+0x990>
 80094ac:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80094ae:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80094b0:	4213      	tst	r3, r2
 80094b2:	d0e3      	beq.n	800947c <_strtod_l+0x924>
 80094b4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80094b6:	0030      	movs	r0, r6
 80094b8:	0039      	movs	r1, r7
 80094ba:	9a08      	ldr	r2, [sp, #32]
 80094bc:	2b00      	cmp	r3, #0
 80094be:	d017      	beq.n	80094f0 <_strtod_l+0x998>
 80094c0:	f7ff fb32 	bl	8008b28 <sulp>
 80094c4:	0002      	movs	r2, r0
 80094c6:	000b      	movs	r3, r1
 80094c8:	9812      	ldr	r0, [sp, #72]	; 0x48
 80094ca:	9913      	ldr	r1, [sp, #76]	; 0x4c
 80094cc:	f7f7 fce0 	bl	8000e90 <__aeabi_dadd>
 80094d0:	0006      	movs	r6, r0
 80094d2:	000f      	movs	r7, r1
 80094d4:	e7d2      	b.n	800947c <_strtod_l+0x924>
 80094d6:	2601      	movs	r6, #1
 80094d8:	4013      	ands	r3, r2
 80094da:	4a99      	ldr	r2, [pc, #612]	; (8009740 <_strtod_l+0xbe8>)
 80094dc:	4276      	negs	r6, r6
 80094de:	189b      	adds	r3, r3, r2
 80094e0:	4a98      	ldr	r2, [pc, #608]	; (8009744 <_strtod_l+0xbec>)
 80094e2:	431a      	orrs	r2, r3
 80094e4:	0017      	movs	r7, r2
 80094e6:	e7c9      	b.n	800947c <_strtod_l+0x924>
 80094e8:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80094ea:	4233      	tst	r3, r6
 80094ec:	d0c6      	beq.n	800947c <_strtod_l+0x924>
 80094ee:	e7e1      	b.n	80094b4 <_strtod_l+0x95c>
 80094f0:	f7ff fb1a 	bl	8008b28 <sulp>
 80094f4:	0002      	movs	r2, r0
 80094f6:	000b      	movs	r3, r1
 80094f8:	9812      	ldr	r0, [sp, #72]	; 0x48
 80094fa:	9913      	ldr	r1, [sp, #76]	; 0x4c
 80094fc:	f7f8 fe72 	bl	80021e4 <__aeabi_dsub>
 8009500:	2200      	movs	r2, #0
 8009502:	2300      	movs	r3, #0
 8009504:	0006      	movs	r6, r0
 8009506:	000f      	movs	r7, r1
 8009508:	f7f6 ffa0 	bl	800044c <__aeabi_dcmpeq>
 800950c:	2800      	cmp	r0, #0
 800950e:	d0b5      	beq.n	800947c <_strtod_l+0x924>
 8009510:	e5ff      	b.n	8009112 <_strtod_l+0x5ba>
 8009512:	9907      	ldr	r1, [sp, #28]
 8009514:	9806      	ldr	r0, [sp, #24]
 8009516:	f002 f877 	bl	800b608 <__ratio>
 800951a:	2380      	movs	r3, #128	; 0x80
 800951c:	2200      	movs	r2, #0
 800951e:	05db      	lsls	r3, r3, #23
 8009520:	0004      	movs	r4, r0
 8009522:	000d      	movs	r5, r1
 8009524:	f7f6 ffa2 	bl	800046c <__aeabi_dcmple>
 8009528:	2800      	cmp	r0, #0
 800952a:	d075      	beq.n	8009618 <_strtod_l+0xac0>
 800952c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800952e:	2b00      	cmp	r3, #0
 8009530:	d047      	beq.n	80095c2 <_strtod_l+0xa6a>
 8009532:	2300      	movs	r3, #0
 8009534:	4c84      	ldr	r4, [pc, #528]	; (8009748 <_strtod_l+0xbf0>)
 8009536:	2500      	movs	r5, #0
 8009538:	9310      	str	r3, [sp, #64]	; 0x40
 800953a:	9411      	str	r4, [sp, #68]	; 0x44
 800953c:	4c82      	ldr	r4, [pc, #520]	; (8009748 <_strtod_l+0xbf0>)
 800953e:	4a83      	ldr	r2, [pc, #524]	; (800974c <_strtod_l+0xbf4>)
 8009540:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009542:	4013      	ands	r3, r2
 8009544:	9314      	str	r3, [sp, #80]	; 0x50
 8009546:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8009548:	4b81      	ldr	r3, [pc, #516]	; (8009750 <_strtod_l+0xbf8>)
 800954a:	429a      	cmp	r2, r3
 800954c:	d000      	beq.n	8009550 <_strtod_l+0x9f8>
 800954e:	e0ac      	b.n	80096aa <_strtod_l+0xb52>
 8009550:	4a80      	ldr	r2, [pc, #512]	; (8009754 <_strtod_l+0xbfc>)
 8009552:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009554:	4694      	mov	ip, r2
 8009556:	4463      	add	r3, ip
 8009558:	001f      	movs	r7, r3
 800955a:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800955c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800955e:	0030      	movs	r0, r6
 8009560:	0039      	movs	r1, r7
 8009562:	920c      	str	r2, [sp, #48]	; 0x30
 8009564:	930d      	str	r3, [sp, #52]	; 0x34
 8009566:	f001 ff77 	bl	800b458 <__ulp>
 800956a:	0002      	movs	r2, r0
 800956c:	000b      	movs	r3, r1
 800956e:	980c      	ldr	r0, [sp, #48]	; 0x30
 8009570:	990d      	ldr	r1, [sp, #52]	; 0x34
 8009572:	f7f8 fbcb 	bl	8001d0c <__aeabi_dmul>
 8009576:	0032      	movs	r2, r6
 8009578:	003b      	movs	r3, r7
 800957a:	f7f7 fc89 	bl	8000e90 <__aeabi_dadd>
 800957e:	4a73      	ldr	r2, [pc, #460]	; (800974c <_strtod_l+0xbf4>)
 8009580:	4b75      	ldr	r3, [pc, #468]	; (8009758 <_strtod_l+0xc00>)
 8009582:	0006      	movs	r6, r0
 8009584:	400a      	ands	r2, r1
 8009586:	429a      	cmp	r2, r3
 8009588:	d95e      	bls.n	8009648 <_strtod_l+0xaf0>
 800958a:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800958c:	4b73      	ldr	r3, [pc, #460]	; (800975c <_strtod_l+0xc04>)
 800958e:	429a      	cmp	r2, r3
 8009590:	d103      	bne.n	800959a <_strtod_l+0xa42>
 8009592:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8009594:	3301      	adds	r3, #1
 8009596:	d100      	bne.n	800959a <_strtod_l+0xa42>
 8009598:	e548      	b.n	800902c <_strtod_l+0x4d4>
 800959a:	2601      	movs	r6, #1
 800959c:	4f6f      	ldr	r7, [pc, #444]	; (800975c <_strtod_l+0xc04>)
 800959e:	4276      	negs	r6, r6
 80095a0:	9920      	ldr	r1, [sp, #128]	; 0x80
 80095a2:	9805      	ldr	r0, [sp, #20]
 80095a4:	f001 fc18 	bl	800add8 <_Bfree>
 80095a8:	9909      	ldr	r1, [sp, #36]	; 0x24
 80095aa:	9805      	ldr	r0, [sp, #20]
 80095ac:	f001 fc14 	bl	800add8 <_Bfree>
 80095b0:	9907      	ldr	r1, [sp, #28]
 80095b2:	9805      	ldr	r0, [sp, #20]
 80095b4:	f001 fc10 	bl	800add8 <_Bfree>
 80095b8:	9906      	ldr	r1, [sp, #24]
 80095ba:	9805      	ldr	r0, [sp, #20]
 80095bc:	f001 fc0c 	bl	800add8 <_Bfree>
 80095c0:	e61d      	b.n	80091fe <_strtod_l+0x6a6>
 80095c2:	2e00      	cmp	r6, #0
 80095c4:	d11c      	bne.n	8009600 <_strtod_l+0xaa8>
 80095c6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80095c8:	031b      	lsls	r3, r3, #12
 80095ca:	d11f      	bne.n	800960c <_strtod_l+0xab4>
 80095cc:	2200      	movs	r2, #0
 80095ce:	0020      	movs	r0, r4
 80095d0:	0029      	movs	r1, r5
 80095d2:	4b5d      	ldr	r3, [pc, #372]	; (8009748 <_strtod_l+0xbf0>)
 80095d4:	f7f6 ff40 	bl	8000458 <__aeabi_dcmplt>
 80095d8:	2800      	cmp	r0, #0
 80095da:	d11a      	bne.n	8009612 <_strtod_l+0xaba>
 80095dc:	0020      	movs	r0, r4
 80095de:	0029      	movs	r1, r5
 80095e0:	2200      	movs	r2, #0
 80095e2:	4b5f      	ldr	r3, [pc, #380]	; (8009760 <_strtod_l+0xc08>)
 80095e4:	f7f8 fb92 	bl	8001d0c <__aeabi_dmul>
 80095e8:	0005      	movs	r5, r0
 80095ea:	000c      	movs	r4, r1
 80095ec:	2380      	movs	r3, #128	; 0x80
 80095ee:	061b      	lsls	r3, r3, #24
 80095f0:	18e3      	adds	r3, r4, r3
 80095f2:	951c      	str	r5, [sp, #112]	; 0x70
 80095f4:	931d      	str	r3, [sp, #116]	; 0x74
 80095f6:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 80095f8:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80095fa:	9210      	str	r2, [sp, #64]	; 0x40
 80095fc:	9311      	str	r3, [sp, #68]	; 0x44
 80095fe:	e79e      	b.n	800953e <_strtod_l+0x9e6>
 8009600:	2e01      	cmp	r6, #1
 8009602:	d103      	bne.n	800960c <_strtod_l+0xab4>
 8009604:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009606:	2b00      	cmp	r3, #0
 8009608:	d100      	bne.n	800960c <_strtod_l+0xab4>
 800960a:	e582      	b.n	8009112 <_strtod_l+0x5ba>
 800960c:	2300      	movs	r3, #0
 800960e:	4c55      	ldr	r4, [pc, #340]	; (8009764 <_strtod_l+0xc0c>)
 8009610:	e791      	b.n	8009536 <_strtod_l+0x9de>
 8009612:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8009614:	4c52      	ldr	r4, [pc, #328]	; (8009760 <_strtod_l+0xc08>)
 8009616:	e7e9      	b.n	80095ec <_strtod_l+0xa94>
 8009618:	2200      	movs	r2, #0
 800961a:	0020      	movs	r0, r4
 800961c:	0029      	movs	r1, r5
 800961e:	4b50      	ldr	r3, [pc, #320]	; (8009760 <_strtod_l+0xc08>)
 8009620:	f7f8 fb74 	bl	8001d0c <__aeabi_dmul>
 8009624:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8009626:	0005      	movs	r5, r0
 8009628:	000b      	movs	r3, r1
 800962a:	000c      	movs	r4, r1
 800962c:	2a00      	cmp	r2, #0
 800962e:	d107      	bne.n	8009640 <_strtod_l+0xae8>
 8009630:	2280      	movs	r2, #128	; 0x80
 8009632:	0612      	lsls	r2, r2, #24
 8009634:	188b      	adds	r3, r1, r2
 8009636:	9016      	str	r0, [sp, #88]	; 0x58
 8009638:	9317      	str	r3, [sp, #92]	; 0x5c
 800963a:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800963c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800963e:	e7dc      	b.n	80095fa <_strtod_l+0xaa2>
 8009640:	0002      	movs	r2, r0
 8009642:	9216      	str	r2, [sp, #88]	; 0x58
 8009644:	9317      	str	r3, [sp, #92]	; 0x5c
 8009646:	e7f8      	b.n	800963a <_strtod_l+0xae2>
 8009648:	23d4      	movs	r3, #212	; 0xd4
 800964a:	049b      	lsls	r3, r3, #18
 800964c:	18cf      	adds	r7, r1, r3
 800964e:	9b08      	ldr	r3, [sp, #32]
 8009650:	2b00      	cmp	r3, #0
 8009652:	d1a5      	bne.n	80095a0 <_strtod_l+0xa48>
 8009654:	4b3d      	ldr	r3, [pc, #244]	; (800974c <_strtod_l+0xbf4>)
 8009656:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8009658:	403b      	ands	r3, r7
 800965a:	429a      	cmp	r2, r3
 800965c:	d1a0      	bne.n	80095a0 <_strtod_l+0xa48>
 800965e:	0028      	movs	r0, r5
 8009660:	0021      	movs	r1, r4
 8009662:	f7f6 ffc7 	bl	80005f4 <__aeabi_d2lz>
 8009666:	f7f7 f801 	bl	800066c <__aeabi_l2d>
 800966a:	0002      	movs	r2, r0
 800966c:	000b      	movs	r3, r1
 800966e:	0028      	movs	r0, r5
 8009670:	0021      	movs	r1, r4
 8009672:	f7f8 fdb7 	bl	80021e4 <__aeabi_dsub>
 8009676:	033b      	lsls	r3, r7, #12
 8009678:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800967a:	0b1b      	lsrs	r3, r3, #12
 800967c:	4333      	orrs	r3, r6
 800967e:	4313      	orrs	r3, r2
 8009680:	0004      	movs	r4, r0
 8009682:	000d      	movs	r5, r1
 8009684:	4a38      	ldr	r2, [pc, #224]	; (8009768 <_strtod_l+0xc10>)
 8009686:	2b00      	cmp	r3, #0
 8009688:	d055      	beq.n	8009736 <_strtod_l+0xbde>
 800968a:	4b38      	ldr	r3, [pc, #224]	; (800976c <_strtod_l+0xc14>)
 800968c:	f7f6 fee4 	bl	8000458 <__aeabi_dcmplt>
 8009690:	2800      	cmp	r0, #0
 8009692:	d000      	beq.n	8009696 <_strtod_l+0xb3e>
 8009694:	e4d3      	b.n	800903e <_strtod_l+0x4e6>
 8009696:	0020      	movs	r0, r4
 8009698:	0029      	movs	r1, r5
 800969a:	4a35      	ldr	r2, [pc, #212]	; (8009770 <_strtod_l+0xc18>)
 800969c:	4b30      	ldr	r3, [pc, #192]	; (8009760 <_strtod_l+0xc08>)
 800969e:	f7f6 feef 	bl	8000480 <__aeabi_dcmpgt>
 80096a2:	2800      	cmp	r0, #0
 80096a4:	d100      	bne.n	80096a8 <_strtod_l+0xb50>
 80096a6:	e77b      	b.n	80095a0 <_strtod_l+0xa48>
 80096a8:	e4c9      	b.n	800903e <_strtod_l+0x4e6>
 80096aa:	9b08      	ldr	r3, [sp, #32]
 80096ac:	2b00      	cmp	r3, #0
 80096ae:	d02b      	beq.n	8009708 <_strtod_l+0xbb0>
 80096b0:	23d4      	movs	r3, #212	; 0xd4
 80096b2:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80096b4:	04db      	lsls	r3, r3, #19
 80096b6:	429a      	cmp	r2, r3
 80096b8:	d826      	bhi.n	8009708 <_strtod_l+0xbb0>
 80096ba:	0028      	movs	r0, r5
 80096bc:	0021      	movs	r1, r4
 80096be:	4a2d      	ldr	r2, [pc, #180]	; (8009774 <_strtod_l+0xc1c>)
 80096c0:	4b2d      	ldr	r3, [pc, #180]	; (8009778 <_strtod_l+0xc20>)
 80096c2:	f7f6 fed3 	bl	800046c <__aeabi_dcmple>
 80096c6:	2800      	cmp	r0, #0
 80096c8:	d017      	beq.n	80096fa <_strtod_l+0xba2>
 80096ca:	0028      	movs	r0, r5
 80096cc:	0021      	movs	r1, r4
 80096ce:	f7f6 ff73 	bl	80005b8 <__aeabi_d2uiz>
 80096d2:	2800      	cmp	r0, #0
 80096d4:	d100      	bne.n	80096d8 <_strtod_l+0xb80>
 80096d6:	3001      	adds	r0, #1
 80096d8:	f7f9 f99a 	bl	8002a10 <__aeabi_ui2d>
 80096dc:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80096de:	0005      	movs	r5, r0
 80096e0:	000b      	movs	r3, r1
 80096e2:	000c      	movs	r4, r1
 80096e4:	2a00      	cmp	r2, #0
 80096e6:	d122      	bne.n	800972e <_strtod_l+0xbd6>
 80096e8:	2280      	movs	r2, #128	; 0x80
 80096ea:	0612      	lsls	r2, r2, #24
 80096ec:	188b      	adds	r3, r1, r2
 80096ee:	9018      	str	r0, [sp, #96]	; 0x60
 80096f0:	9319      	str	r3, [sp, #100]	; 0x64
 80096f2:	9a18      	ldr	r2, [sp, #96]	; 0x60
 80096f4:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80096f6:	9210      	str	r2, [sp, #64]	; 0x40
 80096f8:	9311      	str	r3, [sp, #68]	; 0x44
 80096fa:	22d6      	movs	r2, #214	; 0xd6
 80096fc:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80096fe:	04d2      	lsls	r2, r2, #19
 8009700:	189b      	adds	r3, r3, r2
 8009702:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8009704:	1a9b      	subs	r3, r3, r2
 8009706:	9311      	str	r3, [sp, #68]	; 0x44
 8009708:	9812      	ldr	r0, [sp, #72]	; 0x48
 800970a:	9913      	ldr	r1, [sp, #76]	; 0x4c
 800970c:	9e10      	ldr	r6, [sp, #64]	; 0x40
 800970e:	9f11      	ldr	r7, [sp, #68]	; 0x44
 8009710:	f001 fea2 	bl	800b458 <__ulp>
 8009714:	0002      	movs	r2, r0
 8009716:	000b      	movs	r3, r1
 8009718:	0030      	movs	r0, r6
 800971a:	0039      	movs	r1, r7
 800971c:	f7f8 faf6 	bl	8001d0c <__aeabi_dmul>
 8009720:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8009722:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8009724:	f7f7 fbb4 	bl	8000e90 <__aeabi_dadd>
 8009728:	0006      	movs	r6, r0
 800972a:	000f      	movs	r7, r1
 800972c:	e78f      	b.n	800964e <_strtod_l+0xaf6>
 800972e:	0002      	movs	r2, r0
 8009730:	9218      	str	r2, [sp, #96]	; 0x60
 8009732:	9319      	str	r3, [sp, #100]	; 0x64
 8009734:	e7dd      	b.n	80096f2 <_strtod_l+0xb9a>
 8009736:	4b11      	ldr	r3, [pc, #68]	; (800977c <_strtod_l+0xc24>)
 8009738:	f7f6 fe8e 	bl	8000458 <__aeabi_dcmplt>
 800973c:	e7b1      	b.n	80096a2 <_strtod_l+0xb4a>
 800973e:	46c0      	nop			; (mov r8, r8)
 8009740:	fff00000 	.word	0xfff00000
 8009744:	000fffff 	.word	0x000fffff
 8009748:	3ff00000 	.word	0x3ff00000
 800974c:	7ff00000 	.word	0x7ff00000
 8009750:	7fe00000 	.word	0x7fe00000
 8009754:	fcb00000 	.word	0xfcb00000
 8009758:	7c9fffff 	.word	0x7c9fffff
 800975c:	7fefffff 	.word	0x7fefffff
 8009760:	3fe00000 	.word	0x3fe00000
 8009764:	bff00000 	.word	0xbff00000
 8009768:	94a03595 	.word	0x94a03595
 800976c:	3fdfffff 	.word	0x3fdfffff
 8009770:	35afe535 	.word	0x35afe535
 8009774:	ffc00000 	.word	0xffc00000
 8009778:	41dfffff 	.word	0x41dfffff
 800977c:	3fcfffff 	.word	0x3fcfffff

08009780 <_strtod_r>:
 8009780:	b510      	push	{r4, lr}
 8009782:	4b02      	ldr	r3, [pc, #8]	; (800978c <_strtod_r+0xc>)
 8009784:	f7ff f9e8 	bl	8008b58 <_strtod_l>
 8009788:	bd10      	pop	{r4, pc}
 800978a:	46c0      	nop			; (mov r8, r8)
 800978c:	20000084 	.word	0x20000084

08009790 <_strtol_l.constprop.0>:
 8009790:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009792:	b087      	sub	sp, #28
 8009794:	001e      	movs	r6, r3
 8009796:	9005      	str	r0, [sp, #20]
 8009798:	9101      	str	r1, [sp, #4]
 800979a:	9202      	str	r2, [sp, #8]
 800979c:	2b01      	cmp	r3, #1
 800979e:	d045      	beq.n	800982c <_strtol_l.constprop.0+0x9c>
 80097a0:	000b      	movs	r3, r1
 80097a2:	2e24      	cmp	r6, #36	; 0x24
 80097a4:	d842      	bhi.n	800982c <_strtol_l.constprop.0+0x9c>
 80097a6:	4a3f      	ldr	r2, [pc, #252]	; (80098a4 <_strtol_l.constprop.0+0x114>)
 80097a8:	2108      	movs	r1, #8
 80097aa:	4694      	mov	ip, r2
 80097ac:	001a      	movs	r2, r3
 80097ae:	4660      	mov	r0, ip
 80097b0:	7814      	ldrb	r4, [r2, #0]
 80097b2:	3301      	adds	r3, #1
 80097b4:	5d00      	ldrb	r0, [r0, r4]
 80097b6:	001d      	movs	r5, r3
 80097b8:	0007      	movs	r7, r0
 80097ba:	400f      	ands	r7, r1
 80097bc:	4208      	tst	r0, r1
 80097be:	d1f5      	bne.n	80097ac <_strtol_l.constprop.0+0x1c>
 80097c0:	2c2d      	cmp	r4, #45	; 0x2d
 80097c2:	d13a      	bne.n	800983a <_strtol_l.constprop.0+0xaa>
 80097c4:	2701      	movs	r7, #1
 80097c6:	781c      	ldrb	r4, [r3, #0]
 80097c8:	1c95      	adds	r5, r2, #2
 80097ca:	2e00      	cmp	r6, #0
 80097cc:	d065      	beq.n	800989a <_strtol_l.constprop.0+0x10a>
 80097ce:	2e10      	cmp	r6, #16
 80097d0:	d109      	bne.n	80097e6 <_strtol_l.constprop.0+0x56>
 80097d2:	2c30      	cmp	r4, #48	; 0x30
 80097d4:	d107      	bne.n	80097e6 <_strtol_l.constprop.0+0x56>
 80097d6:	2220      	movs	r2, #32
 80097d8:	782b      	ldrb	r3, [r5, #0]
 80097da:	4393      	bics	r3, r2
 80097dc:	2b58      	cmp	r3, #88	; 0x58
 80097de:	d157      	bne.n	8009890 <_strtol_l.constprop.0+0x100>
 80097e0:	2610      	movs	r6, #16
 80097e2:	786c      	ldrb	r4, [r5, #1]
 80097e4:	3502      	adds	r5, #2
 80097e6:	4b30      	ldr	r3, [pc, #192]	; (80098a8 <_strtol_l.constprop.0+0x118>)
 80097e8:	0031      	movs	r1, r6
 80097ea:	18fb      	adds	r3, r7, r3
 80097ec:	0018      	movs	r0, r3
 80097ee:	9303      	str	r3, [sp, #12]
 80097f0:	f7f6 fd2c 	bl	800024c <__aeabi_uidivmod>
 80097f4:	2300      	movs	r3, #0
 80097f6:	2201      	movs	r2, #1
 80097f8:	4684      	mov	ip, r0
 80097fa:	0018      	movs	r0, r3
 80097fc:	9104      	str	r1, [sp, #16]
 80097fe:	4252      	negs	r2, r2
 8009800:	0021      	movs	r1, r4
 8009802:	3930      	subs	r1, #48	; 0x30
 8009804:	2909      	cmp	r1, #9
 8009806:	d81d      	bhi.n	8009844 <_strtol_l.constprop.0+0xb4>
 8009808:	000c      	movs	r4, r1
 800980a:	42a6      	cmp	r6, r4
 800980c:	dd28      	ble.n	8009860 <_strtol_l.constprop.0+0xd0>
 800980e:	2b00      	cmp	r3, #0
 8009810:	db24      	blt.n	800985c <_strtol_l.constprop.0+0xcc>
 8009812:	0013      	movs	r3, r2
 8009814:	4584      	cmp	ip, r0
 8009816:	d306      	bcc.n	8009826 <_strtol_l.constprop.0+0x96>
 8009818:	d102      	bne.n	8009820 <_strtol_l.constprop.0+0x90>
 800981a:	9904      	ldr	r1, [sp, #16]
 800981c:	42a1      	cmp	r1, r4
 800981e:	db02      	blt.n	8009826 <_strtol_l.constprop.0+0x96>
 8009820:	2301      	movs	r3, #1
 8009822:	4370      	muls	r0, r6
 8009824:	1820      	adds	r0, r4, r0
 8009826:	782c      	ldrb	r4, [r5, #0]
 8009828:	3501      	adds	r5, #1
 800982a:	e7e9      	b.n	8009800 <_strtol_l.constprop.0+0x70>
 800982c:	f7fe fab0 	bl	8007d90 <__errno>
 8009830:	2316      	movs	r3, #22
 8009832:	6003      	str	r3, [r0, #0]
 8009834:	2000      	movs	r0, #0
 8009836:	b007      	add	sp, #28
 8009838:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800983a:	2c2b      	cmp	r4, #43	; 0x2b
 800983c:	d1c5      	bne.n	80097ca <_strtol_l.constprop.0+0x3a>
 800983e:	781c      	ldrb	r4, [r3, #0]
 8009840:	1c95      	adds	r5, r2, #2
 8009842:	e7c2      	b.n	80097ca <_strtol_l.constprop.0+0x3a>
 8009844:	0021      	movs	r1, r4
 8009846:	3941      	subs	r1, #65	; 0x41
 8009848:	2919      	cmp	r1, #25
 800984a:	d801      	bhi.n	8009850 <_strtol_l.constprop.0+0xc0>
 800984c:	3c37      	subs	r4, #55	; 0x37
 800984e:	e7dc      	b.n	800980a <_strtol_l.constprop.0+0x7a>
 8009850:	0021      	movs	r1, r4
 8009852:	3961      	subs	r1, #97	; 0x61
 8009854:	2919      	cmp	r1, #25
 8009856:	d803      	bhi.n	8009860 <_strtol_l.constprop.0+0xd0>
 8009858:	3c57      	subs	r4, #87	; 0x57
 800985a:	e7d6      	b.n	800980a <_strtol_l.constprop.0+0x7a>
 800985c:	0013      	movs	r3, r2
 800985e:	e7e2      	b.n	8009826 <_strtol_l.constprop.0+0x96>
 8009860:	2b00      	cmp	r3, #0
 8009862:	da09      	bge.n	8009878 <_strtol_l.constprop.0+0xe8>
 8009864:	2322      	movs	r3, #34	; 0x22
 8009866:	9a05      	ldr	r2, [sp, #20]
 8009868:	9803      	ldr	r0, [sp, #12]
 800986a:	6013      	str	r3, [r2, #0]
 800986c:	9b02      	ldr	r3, [sp, #8]
 800986e:	2b00      	cmp	r3, #0
 8009870:	d0e1      	beq.n	8009836 <_strtol_l.constprop.0+0xa6>
 8009872:	1e6b      	subs	r3, r5, #1
 8009874:	9301      	str	r3, [sp, #4]
 8009876:	e007      	b.n	8009888 <_strtol_l.constprop.0+0xf8>
 8009878:	2f00      	cmp	r7, #0
 800987a:	d000      	beq.n	800987e <_strtol_l.constprop.0+0xee>
 800987c:	4240      	negs	r0, r0
 800987e:	9a02      	ldr	r2, [sp, #8]
 8009880:	2a00      	cmp	r2, #0
 8009882:	d0d8      	beq.n	8009836 <_strtol_l.constprop.0+0xa6>
 8009884:	2b00      	cmp	r3, #0
 8009886:	d1f4      	bne.n	8009872 <_strtol_l.constprop.0+0xe2>
 8009888:	9b02      	ldr	r3, [sp, #8]
 800988a:	9a01      	ldr	r2, [sp, #4]
 800988c:	601a      	str	r2, [r3, #0]
 800988e:	e7d2      	b.n	8009836 <_strtol_l.constprop.0+0xa6>
 8009890:	2430      	movs	r4, #48	; 0x30
 8009892:	2e00      	cmp	r6, #0
 8009894:	d1a7      	bne.n	80097e6 <_strtol_l.constprop.0+0x56>
 8009896:	3608      	adds	r6, #8
 8009898:	e7a5      	b.n	80097e6 <_strtol_l.constprop.0+0x56>
 800989a:	2c30      	cmp	r4, #48	; 0x30
 800989c:	d09b      	beq.n	80097d6 <_strtol_l.constprop.0+0x46>
 800989e:	260a      	movs	r6, #10
 80098a0:	e7a1      	b.n	80097e6 <_strtol_l.constprop.0+0x56>
 80098a2:	46c0      	nop			; (mov r8, r8)
 80098a4:	0800cde9 	.word	0x0800cde9
 80098a8:	7fffffff 	.word	0x7fffffff

080098ac <_strtol_r>:
 80098ac:	b510      	push	{r4, lr}
 80098ae:	f7ff ff6f 	bl	8009790 <_strtol_l.constprop.0>
 80098b2:	bd10      	pop	{r4, pc}

080098b4 <quorem>:
 80098b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80098b6:	0006      	movs	r6, r0
 80098b8:	690b      	ldr	r3, [r1, #16]
 80098ba:	6932      	ldr	r2, [r6, #16]
 80098bc:	b087      	sub	sp, #28
 80098be:	2000      	movs	r0, #0
 80098c0:	9103      	str	r1, [sp, #12]
 80098c2:	429a      	cmp	r2, r3
 80098c4:	db65      	blt.n	8009992 <quorem+0xde>
 80098c6:	3b01      	subs	r3, #1
 80098c8:	009c      	lsls	r4, r3, #2
 80098ca:	9300      	str	r3, [sp, #0]
 80098cc:	000b      	movs	r3, r1
 80098ce:	3314      	adds	r3, #20
 80098d0:	9305      	str	r3, [sp, #20]
 80098d2:	191b      	adds	r3, r3, r4
 80098d4:	9304      	str	r3, [sp, #16]
 80098d6:	0033      	movs	r3, r6
 80098d8:	3314      	adds	r3, #20
 80098da:	9302      	str	r3, [sp, #8]
 80098dc:	191c      	adds	r4, r3, r4
 80098de:	9b04      	ldr	r3, [sp, #16]
 80098e0:	6827      	ldr	r7, [r4, #0]
 80098e2:	681b      	ldr	r3, [r3, #0]
 80098e4:	0038      	movs	r0, r7
 80098e6:	1c5d      	adds	r5, r3, #1
 80098e8:	0029      	movs	r1, r5
 80098ea:	9301      	str	r3, [sp, #4]
 80098ec:	f7f6 fc28 	bl	8000140 <__udivsi3>
 80098f0:	9001      	str	r0, [sp, #4]
 80098f2:	42af      	cmp	r7, r5
 80098f4:	d324      	bcc.n	8009940 <quorem+0x8c>
 80098f6:	2500      	movs	r5, #0
 80098f8:	46ac      	mov	ip, r5
 80098fa:	9802      	ldr	r0, [sp, #8]
 80098fc:	9f05      	ldr	r7, [sp, #20]
 80098fe:	cf08      	ldmia	r7!, {r3}
 8009900:	9a01      	ldr	r2, [sp, #4]
 8009902:	b299      	uxth	r1, r3
 8009904:	4351      	muls	r1, r2
 8009906:	0c1b      	lsrs	r3, r3, #16
 8009908:	4353      	muls	r3, r2
 800990a:	1949      	adds	r1, r1, r5
 800990c:	0c0a      	lsrs	r2, r1, #16
 800990e:	189b      	adds	r3, r3, r2
 8009910:	6802      	ldr	r2, [r0, #0]
 8009912:	b289      	uxth	r1, r1
 8009914:	b292      	uxth	r2, r2
 8009916:	4462      	add	r2, ip
 8009918:	1a52      	subs	r2, r2, r1
 800991a:	6801      	ldr	r1, [r0, #0]
 800991c:	0c1d      	lsrs	r5, r3, #16
 800991e:	0c09      	lsrs	r1, r1, #16
 8009920:	b29b      	uxth	r3, r3
 8009922:	1acb      	subs	r3, r1, r3
 8009924:	1411      	asrs	r1, r2, #16
 8009926:	185b      	adds	r3, r3, r1
 8009928:	1419      	asrs	r1, r3, #16
 800992a:	b292      	uxth	r2, r2
 800992c:	041b      	lsls	r3, r3, #16
 800992e:	431a      	orrs	r2, r3
 8009930:	9b04      	ldr	r3, [sp, #16]
 8009932:	468c      	mov	ip, r1
 8009934:	c004      	stmia	r0!, {r2}
 8009936:	42bb      	cmp	r3, r7
 8009938:	d2e1      	bcs.n	80098fe <quorem+0x4a>
 800993a:	6823      	ldr	r3, [r4, #0]
 800993c:	2b00      	cmp	r3, #0
 800993e:	d030      	beq.n	80099a2 <quorem+0xee>
 8009940:	0030      	movs	r0, r6
 8009942:	9903      	ldr	r1, [sp, #12]
 8009944:	f001 fcd4 	bl	800b2f0 <__mcmp>
 8009948:	2800      	cmp	r0, #0
 800994a:	db21      	blt.n	8009990 <quorem+0xdc>
 800994c:	0030      	movs	r0, r6
 800994e:	2400      	movs	r4, #0
 8009950:	9b01      	ldr	r3, [sp, #4]
 8009952:	9903      	ldr	r1, [sp, #12]
 8009954:	3301      	adds	r3, #1
 8009956:	9301      	str	r3, [sp, #4]
 8009958:	3014      	adds	r0, #20
 800995a:	3114      	adds	r1, #20
 800995c:	6803      	ldr	r3, [r0, #0]
 800995e:	c920      	ldmia	r1!, {r5}
 8009960:	b29a      	uxth	r2, r3
 8009962:	1914      	adds	r4, r2, r4
 8009964:	b2aa      	uxth	r2, r5
 8009966:	1aa2      	subs	r2, r4, r2
 8009968:	0c1b      	lsrs	r3, r3, #16
 800996a:	0c2d      	lsrs	r5, r5, #16
 800996c:	1414      	asrs	r4, r2, #16
 800996e:	1b5b      	subs	r3, r3, r5
 8009970:	191b      	adds	r3, r3, r4
 8009972:	141c      	asrs	r4, r3, #16
 8009974:	b292      	uxth	r2, r2
 8009976:	041b      	lsls	r3, r3, #16
 8009978:	4313      	orrs	r3, r2
 800997a:	c008      	stmia	r0!, {r3}
 800997c:	9b04      	ldr	r3, [sp, #16]
 800997e:	428b      	cmp	r3, r1
 8009980:	d2ec      	bcs.n	800995c <quorem+0xa8>
 8009982:	9b00      	ldr	r3, [sp, #0]
 8009984:	9a02      	ldr	r2, [sp, #8]
 8009986:	009b      	lsls	r3, r3, #2
 8009988:	18d3      	adds	r3, r2, r3
 800998a:	681a      	ldr	r2, [r3, #0]
 800998c:	2a00      	cmp	r2, #0
 800998e:	d015      	beq.n	80099bc <quorem+0x108>
 8009990:	9801      	ldr	r0, [sp, #4]
 8009992:	b007      	add	sp, #28
 8009994:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009996:	6823      	ldr	r3, [r4, #0]
 8009998:	2b00      	cmp	r3, #0
 800999a:	d106      	bne.n	80099aa <quorem+0xf6>
 800999c:	9b00      	ldr	r3, [sp, #0]
 800999e:	3b01      	subs	r3, #1
 80099a0:	9300      	str	r3, [sp, #0]
 80099a2:	9b02      	ldr	r3, [sp, #8]
 80099a4:	3c04      	subs	r4, #4
 80099a6:	42a3      	cmp	r3, r4
 80099a8:	d3f5      	bcc.n	8009996 <quorem+0xe2>
 80099aa:	9b00      	ldr	r3, [sp, #0]
 80099ac:	6133      	str	r3, [r6, #16]
 80099ae:	e7c7      	b.n	8009940 <quorem+0x8c>
 80099b0:	681a      	ldr	r2, [r3, #0]
 80099b2:	2a00      	cmp	r2, #0
 80099b4:	d106      	bne.n	80099c4 <quorem+0x110>
 80099b6:	9a00      	ldr	r2, [sp, #0]
 80099b8:	3a01      	subs	r2, #1
 80099ba:	9200      	str	r2, [sp, #0]
 80099bc:	9a02      	ldr	r2, [sp, #8]
 80099be:	3b04      	subs	r3, #4
 80099c0:	429a      	cmp	r2, r3
 80099c2:	d3f5      	bcc.n	80099b0 <quorem+0xfc>
 80099c4:	9b00      	ldr	r3, [sp, #0]
 80099c6:	6133      	str	r3, [r6, #16]
 80099c8:	e7e2      	b.n	8009990 <quorem+0xdc>
	...

080099cc <_dtoa_r>:
 80099cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80099ce:	b09d      	sub	sp, #116	; 0x74
 80099d0:	9202      	str	r2, [sp, #8]
 80099d2:	9303      	str	r3, [sp, #12]
 80099d4:	9b02      	ldr	r3, [sp, #8]
 80099d6:	9c03      	ldr	r4, [sp, #12]
 80099d8:	9308      	str	r3, [sp, #32]
 80099da:	9409      	str	r4, [sp, #36]	; 0x24
 80099dc:	6a44      	ldr	r4, [r0, #36]	; 0x24
 80099de:	0007      	movs	r7, r0
 80099e0:	9d25      	ldr	r5, [sp, #148]	; 0x94
 80099e2:	2c00      	cmp	r4, #0
 80099e4:	d10e      	bne.n	8009a04 <_dtoa_r+0x38>
 80099e6:	2010      	movs	r0, #16
 80099e8:	f001 f982 	bl	800acf0 <malloc>
 80099ec:	1e02      	subs	r2, r0, #0
 80099ee:	6278      	str	r0, [r7, #36]	; 0x24
 80099f0:	d104      	bne.n	80099fc <_dtoa_r+0x30>
 80099f2:	21ea      	movs	r1, #234	; 0xea
 80099f4:	4bc7      	ldr	r3, [pc, #796]	; (8009d14 <_dtoa_r+0x348>)
 80099f6:	48c8      	ldr	r0, [pc, #800]	; (8009d18 <_dtoa_r+0x34c>)
 80099f8:	f002 f91c 	bl	800bc34 <__assert_func>
 80099fc:	6044      	str	r4, [r0, #4]
 80099fe:	6084      	str	r4, [r0, #8]
 8009a00:	6004      	str	r4, [r0, #0]
 8009a02:	60c4      	str	r4, [r0, #12]
 8009a04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a06:	6819      	ldr	r1, [r3, #0]
 8009a08:	2900      	cmp	r1, #0
 8009a0a:	d00a      	beq.n	8009a22 <_dtoa_r+0x56>
 8009a0c:	685a      	ldr	r2, [r3, #4]
 8009a0e:	2301      	movs	r3, #1
 8009a10:	4093      	lsls	r3, r2
 8009a12:	604a      	str	r2, [r1, #4]
 8009a14:	608b      	str	r3, [r1, #8]
 8009a16:	0038      	movs	r0, r7
 8009a18:	f001 f9de 	bl	800add8 <_Bfree>
 8009a1c:	2200      	movs	r2, #0
 8009a1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a20:	601a      	str	r2, [r3, #0]
 8009a22:	9b03      	ldr	r3, [sp, #12]
 8009a24:	2b00      	cmp	r3, #0
 8009a26:	da20      	bge.n	8009a6a <_dtoa_r+0x9e>
 8009a28:	2301      	movs	r3, #1
 8009a2a:	602b      	str	r3, [r5, #0]
 8009a2c:	9b03      	ldr	r3, [sp, #12]
 8009a2e:	005b      	lsls	r3, r3, #1
 8009a30:	085b      	lsrs	r3, r3, #1
 8009a32:	9309      	str	r3, [sp, #36]	; 0x24
 8009a34:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8009a36:	4bb9      	ldr	r3, [pc, #740]	; (8009d1c <_dtoa_r+0x350>)
 8009a38:	4ab8      	ldr	r2, [pc, #736]	; (8009d1c <_dtoa_r+0x350>)
 8009a3a:	402b      	ands	r3, r5
 8009a3c:	4293      	cmp	r3, r2
 8009a3e:	d117      	bne.n	8009a70 <_dtoa_r+0xa4>
 8009a40:	4bb7      	ldr	r3, [pc, #732]	; (8009d20 <_dtoa_r+0x354>)
 8009a42:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8009a44:	0328      	lsls	r0, r5, #12
 8009a46:	6013      	str	r3, [r2, #0]
 8009a48:	9b02      	ldr	r3, [sp, #8]
 8009a4a:	0b00      	lsrs	r0, r0, #12
 8009a4c:	4318      	orrs	r0, r3
 8009a4e:	d101      	bne.n	8009a54 <_dtoa_r+0x88>
 8009a50:	f000 fdbf 	bl	800a5d2 <_dtoa_r+0xc06>
 8009a54:	48b3      	ldr	r0, [pc, #716]	; (8009d24 <_dtoa_r+0x358>)
 8009a56:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8009a58:	9006      	str	r0, [sp, #24]
 8009a5a:	2b00      	cmp	r3, #0
 8009a5c:	d002      	beq.n	8009a64 <_dtoa_r+0x98>
 8009a5e:	4bb2      	ldr	r3, [pc, #712]	; (8009d28 <_dtoa_r+0x35c>)
 8009a60:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8009a62:	6013      	str	r3, [r2, #0]
 8009a64:	9806      	ldr	r0, [sp, #24]
 8009a66:	b01d      	add	sp, #116	; 0x74
 8009a68:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009a6a:	2300      	movs	r3, #0
 8009a6c:	602b      	str	r3, [r5, #0]
 8009a6e:	e7e1      	b.n	8009a34 <_dtoa_r+0x68>
 8009a70:	9b08      	ldr	r3, [sp, #32]
 8009a72:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8009a74:	9312      	str	r3, [sp, #72]	; 0x48
 8009a76:	9413      	str	r4, [sp, #76]	; 0x4c
 8009a78:	9812      	ldr	r0, [sp, #72]	; 0x48
 8009a7a:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8009a7c:	2200      	movs	r2, #0
 8009a7e:	2300      	movs	r3, #0
 8009a80:	f7f6 fce4 	bl	800044c <__aeabi_dcmpeq>
 8009a84:	1e04      	subs	r4, r0, #0
 8009a86:	d009      	beq.n	8009a9c <_dtoa_r+0xd0>
 8009a88:	2301      	movs	r3, #1
 8009a8a:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8009a8c:	6013      	str	r3, [r2, #0]
 8009a8e:	4ba7      	ldr	r3, [pc, #668]	; (8009d2c <_dtoa_r+0x360>)
 8009a90:	9306      	str	r3, [sp, #24]
 8009a92:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8009a94:	2b00      	cmp	r3, #0
 8009a96:	d0e5      	beq.n	8009a64 <_dtoa_r+0x98>
 8009a98:	4ba5      	ldr	r3, [pc, #660]	; (8009d30 <_dtoa_r+0x364>)
 8009a9a:	e7e1      	b.n	8009a60 <_dtoa_r+0x94>
 8009a9c:	ab1a      	add	r3, sp, #104	; 0x68
 8009a9e:	9301      	str	r3, [sp, #4]
 8009aa0:	ab1b      	add	r3, sp, #108	; 0x6c
 8009aa2:	9300      	str	r3, [sp, #0]
 8009aa4:	0038      	movs	r0, r7
 8009aa6:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8009aa8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8009aaa:	f001 fd49 	bl	800b540 <__d2b>
 8009aae:	006e      	lsls	r6, r5, #1
 8009ab0:	9005      	str	r0, [sp, #20]
 8009ab2:	0d76      	lsrs	r6, r6, #21
 8009ab4:	d100      	bne.n	8009ab8 <_dtoa_r+0xec>
 8009ab6:	e07c      	b.n	8009bb2 <_dtoa_r+0x1e6>
 8009ab8:	9812      	ldr	r0, [sp, #72]	; 0x48
 8009aba:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8009abc:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8009abe:	4a9d      	ldr	r2, [pc, #628]	; (8009d34 <_dtoa_r+0x368>)
 8009ac0:	031b      	lsls	r3, r3, #12
 8009ac2:	0b1b      	lsrs	r3, r3, #12
 8009ac4:	431a      	orrs	r2, r3
 8009ac6:	0011      	movs	r1, r2
 8009ac8:	4b9b      	ldr	r3, [pc, #620]	; (8009d38 <_dtoa_r+0x36c>)
 8009aca:	9418      	str	r4, [sp, #96]	; 0x60
 8009acc:	18f6      	adds	r6, r6, r3
 8009ace:	2200      	movs	r2, #0
 8009ad0:	4b9a      	ldr	r3, [pc, #616]	; (8009d3c <_dtoa_r+0x370>)
 8009ad2:	f7f8 fb87 	bl	80021e4 <__aeabi_dsub>
 8009ad6:	4a9a      	ldr	r2, [pc, #616]	; (8009d40 <_dtoa_r+0x374>)
 8009ad8:	4b9a      	ldr	r3, [pc, #616]	; (8009d44 <_dtoa_r+0x378>)
 8009ada:	f7f8 f917 	bl	8001d0c <__aeabi_dmul>
 8009ade:	4a9a      	ldr	r2, [pc, #616]	; (8009d48 <_dtoa_r+0x37c>)
 8009ae0:	4b9a      	ldr	r3, [pc, #616]	; (8009d4c <_dtoa_r+0x380>)
 8009ae2:	f7f7 f9d5 	bl	8000e90 <__aeabi_dadd>
 8009ae6:	0004      	movs	r4, r0
 8009ae8:	0030      	movs	r0, r6
 8009aea:	000d      	movs	r5, r1
 8009aec:	f7f8 ff60 	bl	80029b0 <__aeabi_i2d>
 8009af0:	4a97      	ldr	r2, [pc, #604]	; (8009d50 <_dtoa_r+0x384>)
 8009af2:	4b98      	ldr	r3, [pc, #608]	; (8009d54 <_dtoa_r+0x388>)
 8009af4:	f7f8 f90a 	bl	8001d0c <__aeabi_dmul>
 8009af8:	0002      	movs	r2, r0
 8009afa:	000b      	movs	r3, r1
 8009afc:	0020      	movs	r0, r4
 8009afe:	0029      	movs	r1, r5
 8009b00:	f7f7 f9c6 	bl	8000e90 <__aeabi_dadd>
 8009b04:	0004      	movs	r4, r0
 8009b06:	000d      	movs	r5, r1
 8009b08:	f7f8 ff1c 	bl	8002944 <__aeabi_d2iz>
 8009b0c:	2200      	movs	r2, #0
 8009b0e:	9002      	str	r0, [sp, #8]
 8009b10:	2300      	movs	r3, #0
 8009b12:	0020      	movs	r0, r4
 8009b14:	0029      	movs	r1, r5
 8009b16:	f7f6 fc9f 	bl	8000458 <__aeabi_dcmplt>
 8009b1a:	2800      	cmp	r0, #0
 8009b1c:	d00b      	beq.n	8009b36 <_dtoa_r+0x16a>
 8009b1e:	9802      	ldr	r0, [sp, #8]
 8009b20:	f7f8 ff46 	bl	80029b0 <__aeabi_i2d>
 8009b24:	002b      	movs	r3, r5
 8009b26:	0022      	movs	r2, r4
 8009b28:	f7f6 fc90 	bl	800044c <__aeabi_dcmpeq>
 8009b2c:	4243      	negs	r3, r0
 8009b2e:	4158      	adcs	r0, r3
 8009b30:	9b02      	ldr	r3, [sp, #8]
 8009b32:	1a1b      	subs	r3, r3, r0
 8009b34:	9302      	str	r3, [sp, #8]
 8009b36:	2301      	movs	r3, #1
 8009b38:	9316      	str	r3, [sp, #88]	; 0x58
 8009b3a:	9b02      	ldr	r3, [sp, #8]
 8009b3c:	2b16      	cmp	r3, #22
 8009b3e:	d80f      	bhi.n	8009b60 <_dtoa_r+0x194>
 8009b40:	9812      	ldr	r0, [sp, #72]	; 0x48
 8009b42:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8009b44:	00da      	lsls	r2, r3, #3
 8009b46:	4b84      	ldr	r3, [pc, #528]	; (8009d58 <_dtoa_r+0x38c>)
 8009b48:	189b      	adds	r3, r3, r2
 8009b4a:	681a      	ldr	r2, [r3, #0]
 8009b4c:	685b      	ldr	r3, [r3, #4]
 8009b4e:	f7f6 fc83 	bl	8000458 <__aeabi_dcmplt>
 8009b52:	2800      	cmp	r0, #0
 8009b54:	d049      	beq.n	8009bea <_dtoa_r+0x21e>
 8009b56:	9b02      	ldr	r3, [sp, #8]
 8009b58:	3b01      	subs	r3, #1
 8009b5a:	9302      	str	r3, [sp, #8]
 8009b5c:	2300      	movs	r3, #0
 8009b5e:	9316      	str	r3, [sp, #88]	; 0x58
 8009b60:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8009b62:	1b9e      	subs	r6, r3, r6
 8009b64:	2300      	movs	r3, #0
 8009b66:	930a      	str	r3, [sp, #40]	; 0x28
 8009b68:	0033      	movs	r3, r6
 8009b6a:	3b01      	subs	r3, #1
 8009b6c:	930d      	str	r3, [sp, #52]	; 0x34
 8009b6e:	d504      	bpl.n	8009b7a <_dtoa_r+0x1ae>
 8009b70:	2301      	movs	r3, #1
 8009b72:	1b9b      	subs	r3, r3, r6
 8009b74:	930a      	str	r3, [sp, #40]	; 0x28
 8009b76:	2300      	movs	r3, #0
 8009b78:	930d      	str	r3, [sp, #52]	; 0x34
 8009b7a:	9b02      	ldr	r3, [sp, #8]
 8009b7c:	2b00      	cmp	r3, #0
 8009b7e:	db36      	blt.n	8009bee <_dtoa_r+0x222>
 8009b80:	9a02      	ldr	r2, [sp, #8]
 8009b82:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009b84:	4694      	mov	ip, r2
 8009b86:	4463      	add	r3, ip
 8009b88:	930d      	str	r3, [sp, #52]	; 0x34
 8009b8a:	2300      	movs	r3, #0
 8009b8c:	9215      	str	r2, [sp, #84]	; 0x54
 8009b8e:	930e      	str	r3, [sp, #56]	; 0x38
 8009b90:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8009b92:	2401      	movs	r4, #1
 8009b94:	2b09      	cmp	r3, #9
 8009b96:	d864      	bhi.n	8009c62 <_dtoa_r+0x296>
 8009b98:	2b05      	cmp	r3, #5
 8009b9a:	dd02      	ble.n	8009ba2 <_dtoa_r+0x1d6>
 8009b9c:	2400      	movs	r4, #0
 8009b9e:	3b04      	subs	r3, #4
 8009ba0:	9322      	str	r3, [sp, #136]	; 0x88
 8009ba2:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8009ba4:	1e98      	subs	r0, r3, #2
 8009ba6:	2803      	cmp	r0, #3
 8009ba8:	d864      	bhi.n	8009c74 <_dtoa_r+0x2a8>
 8009baa:	f7f6 fab5 	bl	8000118 <__gnu_thumb1_case_uqi>
 8009bae:	3829      	.short	0x3829
 8009bb0:	5836      	.short	0x5836
 8009bb2:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8009bb4:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8009bb6:	189e      	adds	r6, r3, r2
 8009bb8:	4b68      	ldr	r3, [pc, #416]	; (8009d5c <_dtoa_r+0x390>)
 8009bba:	18f2      	adds	r2, r6, r3
 8009bbc:	2a20      	cmp	r2, #32
 8009bbe:	dd0f      	ble.n	8009be0 <_dtoa_r+0x214>
 8009bc0:	2340      	movs	r3, #64	; 0x40
 8009bc2:	1a9b      	subs	r3, r3, r2
 8009bc4:	409d      	lsls	r5, r3
 8009bc6:	4b66      	ldr	r3, [pc, #408]	; (8009d60 <_dtoa_r+0x394>)
 8009bc8:	9802      	ldr	r0, [sp, #8]
 8009bca:	18f3      	adds	r3, r6, r3
 8009bcc:	40d8      	lsrs	r0, r3
 8009bce:	4328      	orrs	r0, r5
 8009bd0:	f7f8 ff1e 	bl	8002a10 <__aeabi_ui2d>
 8009bd4:	2301      	movs	r3, #1
 8009bd6:	4c63      	ldr	r4, [pc, #396]	; (8009d64 <_dtoa_r+0x398>)
 8009bd8:	3e01      	subs	r6, #1
 8009bda:	1909      	adds	r1, r1, r4
 8009bdc:	9318      	str	r3, [sp, #96]	; 0x60
 8009bde:	e776      	b.n	8009ace <_dtoa_r+0x102>
 8009be0:	2320      	movs	r3, #32
 8009be2:	9802      	ldr	r0, [sp, #8]
 8009be4:	1a9b      	subs	r3, r3, r2
 8009be6:	4098      	lsls	r0, r3
 8009be8:	e7f2      	b.n	8009bd0 <_dtoa_r+0x204>
 8009bea:	9016      	str	r0, [sp, #88]	; 0x58
 8009bec:	e7b8      	b.n	8009b60 <_dtoa_r+0x194>
 8009bee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009bf0:	9a02      	ldr	r2, [sp, #8]
 8009bf2:	1a9b      	subs	r3, r3, r2
 8009bf4:	930a      	str	r3, [sp, #40]	; 0x28
 8009bf6:	4253      	negs	r3, r2
 8009bf8:	930e      	str	r3, [sp, #56]	; 0x38
 8009bfa:	2300      	movs	r3, #0
 8009bfc:	9315      	str	r3, [sp, #84]	; 0x54
 8009bfe:	e7c7      	b.n	8009b90 <_dtoa_r+0x1c4>
 8009c00:	2300      	movs	r3, #0
 8009c02:	930f      	str	r3, [sp, #60]	; 0x3c
 8009c04:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8009c06:	930c      	str	r3, [sp, #48]	; 0x30
 8009c08:	9307      	str	r3, [sp, #28]
 8009c0a:	2b00      	cmp	r3, #0
 8009c0c:	dc13      	bgt.n	8009c36 <_dtoa_r+0x26a>
 8009c0e:	2301      	movs	r3, #1
 8009c10:	001a      	movs	r2, r3
 8009c12:	930c      	str	r3, [sp, #48]	; 0x30
 8009c14:	9307      	str	r3, [sp, #28]
 8009c16:	9223      	str	r2, [sp, #140]	; 0x8c
 8009c18:	e00d      	b.n	8009c36 <_dtoa_r+0x26a>
 8009c1a:	2301      	movs	r3, #1
 8009c1c:	e7f1      	b.n	8009c02 <_dtoa_r+0x236>
 8009c1e:	2300      	movs	r3, #0
 8009c20:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 8009c22:	930f      	str	r3, [sp, #60]	; 0x3c
 8009c24:	4694      	mov	ip, r2
 8009c26:	9b02      	ldr	r3, [sp, #8]
 8009c28:	4463      	add	r3, ip
 8009c2a:	930c      	str	r3, [sp, #48]	; 0x30
 8009c2c:	3301      	adds	r3, #1
 8009c2e:	9307      	str	r3, [sp, #28]
 8009c30:	2b00      	cmp	r3, #0
 8009c32:	dc00      	bgt.n	8009c36 <_dtoa_r+0x26a>
 8009c34:	2301      	movs	r3, #1
 8009c36:	2200      	movs	r2, #0
 8009c38:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8009c3a:	6042      	str	r2, [r0, #4]
 8009c3c:	3204      	adds	r2, #4
 8009c3e:	0015      	movs	r5, r2
 8009c40:	3514      	adds	r5, #20
 8009c42:	6841      	ldr	r1, [r0, #4]
 8009c44:	429d      	cmp	r5, r3
 8009c46:	d919      	bls.n	8009c7c <_dtoa_r+0x2b0>
 8009c48:	0038      	movs	r0, r7
 8009c4a:	f001 f881 	bl	800ad50 <_Balloc>
 8009c4e:	9006      	str	r0, [sp, #24]
 8009c50:	2800      	cmp	r0, #0
 8009c52:	d117      	bne.n	8009c84 <_dtoa_r+0x2b8>
 8009c54:	21d5      	movs	r1, #213	; 0xd5
 8009c56:	0002      	movs	r2, r0
 8009c58:	4b43      	ldr	r3, [pc, #268]	; (8009d68 <_dtoa_r+0x39c>)
 8009c5a:	0049      	lsls	r1, r1, #1
 8009c5c:	e6cb      	b.n	80099f6 <_dtoa_r+0x2a>
 8009c5e:	2301      	movs	r3, #1
 8009c60:	e7de      	b.n	8009c20 <_dtoa_r+0x254>
 8009c62:	2300      	movs	r3, #0
 8009c64:	940f      	str	r4, [sp, #60]	; 0x3c
 8009c66:	9322      	str	r3, [sp, #136]	; 0x88
 8009c68:	3b01      	subs	r3, #1
 8009c6a:	930c      	str	r3, [sp, #48]	; 0x30
 8009c6c:	9307      	str	r3, [sp, #28]
 8009c6e:	2200      	movs	r2, #0
 8009c70:	3313      	adds	r3, #19
 8009c72:	e7d0      	b.n	8009c16 <_dtoa_r+0x24a>
 8009c74:	2301      	movs	r3, #1
 8009c76:	930f      	str	r3, [sp, #60]	; 0x3c
 8009c78:	3b02      	subs	r3, #2
 8009c7a:	e7f6      	b.n	8009c6a <_dtoa_r+0x29e>
 8009c7c:	3101      	adds	r1, #1
 8009c7e:	6041      	str	r1, [r0, #4]
 8009c80:	0052      	lsls	r2, r2, #1
 8009c82:	e7dc      	b.n	8009c3e <_dtoa_r+0x272>
 8009c84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c86:	9a06      	ldr	r2, [sp, #24]
 8009c88:	601a      	str	r2, [r3, #0]
 8009c8a:	9b07      	ldr	r3, [sp, #28]
 8009c8c:	2b0e      	cmp	r3, #14
 8009c8e:	d900      	bls.n	8009c92 <_dtoa_r+0x2c6>
 8009c90:	e0eb      	b.n	8009e6a <_dtoa_r+0x49e>
 8009c92:	2c00      	cmp	r4, #0
 8009c94:	d100      	bne.n	8009c98 <_dtoa_r+0x2cc>
 8009c96:	e0e8      	b.n	8009e6a <_dtoa_r+0x49e>
 8009c98:	9b02      	ldr	r3, [sp, #8]
 8009c9a:	2b00      	cmp	r3, #0
 8009c9c:	dd68      	ble.n	8009d70 <_dtoa_r+0x3a4>
 8009c9e:	001a      	movs	r2, r3
 8009ca0:	210f      	movs	r1, #15
 8009ca2:	4b2d      	ldr	r3, [pc, #180]	; (8009d58 <_dtoa_r+0x38c>)
 8009ca4:	400a      	ands	r2, r1
 8009ca6:	00d2      	lsls	r2, r2, #3
 8009ca8:	189b      	adds	r3, r3, r2
 8009caa:	681d      	ldr	r5, [r3, #0]
 8009cac:	685e      	ldr	r6, [r3, #4]
 8009cae:	9b02      	ldr	r3, [sp, #8]
 8009cb0:	111c      	asrs	r4, r3, #4
 8009cb2:	2302      	movs	r3, #2
 8009cb4:	9310      	str	r3, [sp, #64]	; 0x40
 8009cb6:	9b02      	ldr	r3, [sp, #8]
 8009cb8:	05db      	lsls	r3, r3, #23
 8009cba:	d50b      	bpl.n	8009cd4 <_dtoa_r+0x308>
 8009cbc:	4b2b      	ldr	r3, [pc, #172]	; (8009d6c <_dtoa_r+0x3a0>)
 8009cbe:	400c      	ands	r4, r1
 8009cc0:	6a1a      	ldr	r2, [r3, #32]
 8009cc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009cc4:	9812      	ldr	r0, [sp, #72]	; 0x48
 8009cc6:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8009cc8:	f7f7 fc1e 	bl	8001508 <__aeabi_ddiv>
 8009ccc:	2303      	movs	r3, #3
 8009cce:	9008      	str	r0, [sp, #32]
 8009cd0:	9109      	str	r1, [sp, #36]	; 0x24
 8009cd2:	9310      	str	r3, [sp, #64]	; 0x40
 8009cd4:	4b25      	ldr	r3, [pc, #148]	; (8009d6c <_dtoa_r+0x3a0>)
 8009cd6:	9314      	str	r3, [sp, #80]	; 0x50
 8009cd8:	2c00      	cmp	r4, #0
 8009cda:	d108      	bne.n	8009cee <_dtoa_r+0x322>
 8009cdc:	9808      	ldr	r0, [sp, #32]
 8009cde:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009ce0:	002a      	movs	r2, r5
 8009ce2:	0033      	movs	r3, r6
 8009ce4:	f7f7 fc10 	bl	8001508 <__aeabi_ddiv>
 8009ce8:	9008      	str	r0, [sp, #32]
 8009cea:	9109      	str	r1, [sp, #36]	; 0x24
 8009cec:	e05c      	b.n	8009da8 <_dtoa_r+0x3dc>
 8009cee:	2301      	movs	r3, #1
 8009cf0:	421c      	tst	r4, r3
 8009cf2:	d00b      	beq.n	8009d0c <_dtoa_r+0x340>
 8009cf4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8009cf6:	0028      	movs	r0, r5
 8009cf8:	3301      	adds	r3, #1
 8009cfa:	9310      	str	r3, [sp, #64]	; 0x40
 8009cfc:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8009cfe:	0031      	movs	r1, r6
 8009d00:	681a      	ldr	r2, [r3, #0]
 8009d02:	685b      	ldr	r3, [r3, #4]
 8009d04:	f7f8 f802 	bl	8001d0c <__aeabi_dmul>
 8009d08:	0005      	movs	r5, r0
 8009d0a:	000e      	movs	r6, r1
 8009d0c:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8009d0e:	1064      	asrs	r4, r4, #1
 8009d10:	3308      	adds	r3, #8
 8009d12:	e7e0      	b.n	8009cd6 <_dtoa_r+0x30a>
 8009d14:	0800cef6 	.word	0x0800cef6
 8009d18:	0800cf0d 	.word	0x0800cf0d
 8009d1c:	7ff00000 	.word	0x7ff00000
 8009d20:	0000270f 	.word	0x0000270f
 8009d24:	0800cef2 	.word	0x0800cef2
 8009d28:	0800cef5 	.word	0x0800cef5
 8009d2c:	0800cd68 	.word	0x0800cd68
 8009d30:	0800cd69 	.word	0x0800cd69
 8009d34:	3ff00000 	.word	0x3ff00000
 8009d38:	fffffc01 	.word	0xfffffc01
 8009d3c:	3ff80000 	.word	0x3ff80000
 8009d40:	636f4361 	.word	0x636f4361
 8009d44:	3fd287a7 	.word	0x3fd287a7
 8009d48:	8b60c8b3 	.word	0x8b60c8b3
 8009d4c:	3fc68a28 	.word	0x3fc68a28
 8009d50:	509f79fb 	.word	0x509f79fb
 8009d54:	3fd34413 	.word	0x3fd34413
 8009d58:	0800d078 	.word	0x0800d078
 8009d5c:	00000432 	.word	0x00000432
 8009d60:	00000412 	.word	0x00000412
 8009d64:	fe100000 	.word	0xfe100000
 8009d68:	0800cf68 	.word	0x0800cf68
 8009d6c:	0800d050 	.word	0x0800d050
 8009d70:	2302      	movs	r3, #2
 8009d72:	9310      	str	r3, [sp, #64]	; 0x40
 8009d74:	9b02      	ldr	r3, [sp, #8]
 8009d76:	2b00      	cmp	r3, #0
 8009d78:	d016      	beq.n	8009da8 <_dtoa_r+0x3dc>
 8009d7a:	9812      	ldr	r0, [sp, #72]	; 0x48
 8009d7c:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8009d7e:	425c      	negs	r4, r3
 8009d80:	230f      	movs	r3, #15
 8009d82:	4ab6      	ldr	r2, [pc, #728]	; (800a05c <_dtoa_r+0x690>)
 8009d84:	4023      	ands	r3, r4
 8009d86:	00db      	lsls	r3, r3, #3
 8009d88:	18d3      	adds	r3, r2, r3
 8009d8a:	681a      	ldr	r2, [r3, #0]
 8009d8c:	685b      	ldr	r3, [r3, #4]
 8009d8e:	f7f7 ffbd 	bl	8001d0c <__aeabi_dmul>
 8009d92:	2601      	movs	r6, #1
 8009d94:	2300      	movs	r3, #0
 8009d96:	9008      	str	r0, [sp, #32]
 8009d98:	9109      	str	r1, [sp, #36]	; 0x24
 8009d9a:	4db1      	ldr	r5, [pc, #708]	; (800a060 <_dtoa_r+0x694>)
 8009d9c:	1124      	asrs	r4, r4, #4
 8009d9e:	2c00      	cmp	r4, #0
 8009da0:	d000      	beq.n	8009da4 <_dtoa_r+0x3d8>
 8009da2:	e094      	b.n	8009ece <_dtoa_r+0x502>
 8009da4:	2b00      	cmp	r3, #0
 8009da6:	d19f      	bne.n	8009ce8 <_dtoa_r+0x31c>
 8009da8:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8009daa:	2b00      	cmp	r3, #0
 8009dac:	d100      	bne.n	8009db0 <_dtoa_r+0x3e4>
 8009dae:	e09b      	b.n	8009ee8 <_dtoa_r+0x51c>
 8009db0:	9c08      	ldr	r4, [sp, #32]
 8009db2:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8009db4:	2200      	movs	r2, #0
 8009db6:	0020      	movs	r0, r4
 8009db8:	0029      	movs	r1, r5
 8009dba:	4baa      	ldr	r3, [pc, #680]	; (800a064 <_dtoa_r+0x698>)
 8009dbc:	f7f6 fb4c 	bl	8000458 <__aeabi_dcmplt>
 8009dc0:	2800      	cmp	r0, #0
 8009dc2:	d100      	bne.n	8009dc6 <_dtoa_r+0x3fa>
 8009dc4:	e090      	b.n	8009ee8 <_dtoa_r+0x51c>
 8009dc6:	9b07      	ldr	r3, [sp, #28]
 8009dc8:	2b00      	cmp	r3, #0
 8009dca:	d100      	bne.n	8009dce <_dtoa_r+0x402>
 8009dcc:	e08c      	b.n	8009ee8 <_dtoa_r+0x51c>
 8009dce:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009dd0:	2b00      	cmp	r3, #0
 8009dd2:	dd46      	ble.n	8009e62 <_dtoa_r+0x496>
 8009dd4:	9b02      	ldr	r3, [sp, #8]
 8009dd6:	2200      	movs	r2, #0
 8009dd8:	0020      	movs	r0, r4
 8009dda:	0029      	movs	r1, r5
 8009ddc:	1e5e      	subs	r6, r3, #1
 8009dde:	4ba2      	ldr	r3, [pc, #648]	; (800a068 <_dtoa_r+0x69c>)
 8009de0:	f7f7 ff94 	bl	8001d0c <__aeabi_dmul>
 8009de4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8009de6:	9008      	str	r0, [sp, #32]
 8009de8:	9109      	str	r1, [sp, #36]	; 0x24
 8009dea:	3301      	adds	r3, #1
 8009dec:	9310      	str	r3, [sp, #64]	; 0x40
 8009dee:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009df0:	9810      	ldr	r0, [sp, #64]	; 0x40
 8009df2:	9c08      	ldr	r4, [sp, #32]
 8009df4:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8009df6:	9314      	str	r3, [sp, #80]	; 0x50
 8009df8:	f7f8 fdda 	bl	80029b0 <__aeabi_i2d>
 8009dfc:	0022      	movs	r2, r4
 8009dfe:	002b      	movs	r3, r5
 8009e00:	f7f7 ff84 	bl	8001d0c <__aeabi_dmul>
 8009e04:	2200      	movs	r2, #0
 8009e06:	4b99      	ldr	r3, [pc, #612]	; (800a06c <_dtoa_r+0x6a0>)
 8009e08:	f7f7 f842 	bl	8000e90 <__aeabi_dadd>
 8009e0c:	9010      	str	r0, [sp, #64]	; 0x40
 8009e0e:	9111      	str	r1, [sp, #68]	; 0x44
 8009e10:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8009e12:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009e14:	9208      	str	r2, [sp, #32]
 8009e16:	9309      	str	r3, [sp, #36]	; 0x24
 8009e18:	4a95      	ldr	r2, [pc, #596]	; (800a070 <_dtoa_r+0x6a4>)
 8009e1a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009e1c:	4694      	mov	ip, r2
 8009e1e:	4463      	add	r3, ip
 8009e20:	9317      	str	r3, [sp, #92]	; 0x5c
 8009e22:	9309      	str	r3, [sp, #36]	; 0x24
 8009e24:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8009e26:	2b00      	cmp	r3, #0
 8009e28:	d161      	bne.n	8009eee <_dtoa_r+0x522>
 8009e2a:	2200      	movs	r2, #0
 8009e2c:	0020      	movs	r0, r4
 8009e2e:	0029      	movs	r1, r5
 8009e30:	4b90      	ldr	r3, [pc, #576]	; (800a074 <_dtoa_r+0x6a8>)
 8009e32:	f7f8 f9d7 	bl	80021e4 <__aeabi_dsub>
 8009e36:	9a08      	ldr	r2, [sp, #32]
 8009e38:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8009e3a:	0004      	movs	r4, r0
 8009e3c:	000d      	movs	r5, r1
 8009e3e:	f7f6 fb1f 	bl	8000480 <__aeabi_dcmpgt>
 8009e42:	2800      	cmp	r0, #0
 8009e44:	d000      	beq.n	8009e48 <_dtoa_r+0x47c>
 8009e46:	e2af      	b.n	800a3a8 <_dtoa_r+0x9dc>
 8009e48:	488b      	ldr	r0, [pc, #556]	; (800a078 <_dtoa_r+0x6ac>)
 8009e4a:	9911      	ldr	r1, [sp, #68]	; 0x44
 8009e4c:	4684      	mov	ip, r0
 8009e4e:	4461      	add	r1, ip
 8009e50:	000b      	movs	r3, r1
 8009e52:	0020      	movs	r0, r4
 8009e54:	0029      	movs	r1, r5
 8009e56:	9a08      	ldr	r2, [sp, #32]
 8009e58:	f7f6 fafe 	bl	8000458 <__aeabi_dcmplt>
 8009e5c:	2800      	cmp	r0, #0
 8009e5e:	d000      	beq.n	8009e62 <_dtoa_r+0x496>
 8009e60:	e29f      	b.n	800a3a2 <_dtoa_r+0x9d6>
 8009e62:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8009e64:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8009e66:	9308      	str	r3, [sp, #32]
 8009e68:	9409      	str	r4, [sp, #36]	; 0x24
 8009e6a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8009e6c:	2b00      	cmp	r3, #0
 8009e6e:	da00      	bge.n	8009e72 <_dtoa_r+0x4a6>
 8009e70:	e172      	b.n	800a158 <_dtoa_r+0x78c>
 8009e72:	9a02      	ldr	r2, [sp, #8]
 8009e74:	2a0e      	cmp	r2, #14
 8009e76:	dd00      	ble.n	8009e7a <_dtoa_r+0x4ae>
 8009e78:	e16e      	b.n	800a158 <_dtoa_r+0x78c>
 8009e7a:	4b78      	ldr	r3, [pc, #480]	; (800a05c <_dtoa_r+0x690>)
 8009e7c:	00d2      	lsls	r2, r2, #3
 8009e7e:	189b      	adds	r3, r3, r2
 8009e80:	685c      	ldr	r4, [r3, #4]
 8009e82:	681b      	ldr	r3, [r3, #0]
 8009e84:	930a      	str	r3, [sp, #40]	; 0x28
 8009e86:	940b      	str	r4, [sp, #44]	; 0x2c
 8009e88:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8009e8a:	2b00      	cmp	r3, #0
 8009e8c:	db00      	blt.n	8009e90 <_dtoa_r+0x4c4>
 8009e8e:	e0f7      	b.n	800a080 <_dtoa_r+0x6b4>
 8009e90:	9b07      	ldr	r3, [sp, #28]
 8009e92:	2b00      	cmp	r3, #0
 8009e94:	dd00      	ble.n	8009e98 <_dtoa_r+0x4cc>
 8009e96:	e0f3      	b.n	800a080 <_dtoa_r+0x6b4>
 8009e98:	d000      	beq.n	8009e9c <_dtoa_r+0x4d0>
 8009e9a:	e282      	b.n	800a3a2 <_dtoa_r+0x9d6>
 8009e9c:	980a      	ldr	r0, [sp, #40]	; 0x28
 8009e9e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8009ea0:	2200      	movs	r2, #0
 8009ea2:	4b74      	ldr	r3, [pc, #464]	; (800a074 <_dtoa_r+0x6a8>)
 8009ea4:	f7f7 ff32 	bl	8001d0c <__aeabi_dmul>
 8009ea8:	9a08      	ldr	r2, [sp, #32]
 8009eaa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009eac:	f7f6 faf2 	bl	8000494 <__aeabi_dcmpge>
 8009eb0:	9e07      	ldr	r6, [sp, #28]
 8009eb2:	0035      	movs	r5, r6
 8009eb4:	2800      	cmp	r0, #0
 8009eb6:	d000      	beq.n	8009eba <_dtoa_r+0x4ee>
 8009eb8:	e259      	b.n	800a36e <_dtoa_r+0x9a2>
 8009eba:	9b06      	ldr	r3, [sp, #24]
 8009ebc:	9a06      	ldr	r2, [sp, #24]
 8009ebe:	3301      	adds	r3, #1
 8009ec0:	9308      	str	r3, [sp, #32]
 8009ec2:	2331      	movs	r3, #49	; 0x31
 8009ec4:	7013      	strb	r3, [r2, #0]
 8009ec6:	9b02      	ldr	r3, [sp, #8]
 8009ec8:	3301      	adds	r3, #1
 8009eca:	9302      	str	r3, [sp, #8]
 8009ecc:	e254      	b.n	800a378 <_dtoa_r+0x9ac>
 8009ece:	4234      	tst	r4, r6
 8009ed0:	d007      	beq.n	8009ee2 <_dtoa_r+0x516>
 8009ed2:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8009ed4:	3301      	adds	r3, #1
 8009ed6:	9310      	str	r3, [sp, #64]	; 0x40
 8009ed8:	682a      	ldr	r2, [r5, #0]
 8009eda:	686b      	ldr	r3, [r5, #4]
 8009edc:	f7f7 ff16 	bl	8001d0c <__aeabi_dmul>
 8009ee0:	0033      	movs	r3, r6
 8009ee2:	1064      	asrs	r4, r4, #1
 8009ee4:	3508      	adds	r5, #8
 8009ee6:	e75a      	b.n	8009d9e <_dtoa_r+0x3d2>
 8009ee8:	9e02      	ldr	r6, [sp, #8]
 8009eea:	9b07      	ldr	r3, [sp, #28]
 8009eec:	e780      	b.n	8009df0 <_dtoa_r+0x424>
 8009eee:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8009ef0:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8009ef2:	1e5a      	subs	r2, r3, #1
 8009ef4:	4b59      	ldr	r3, [pc, #356]	; (800a05c <_dtoa_r+0x690>)
 8009ef6:	00d2      	lsls	r2, r2, #3
 8009ef8:	189b      	adds	r3, r3, r2
 8009efa:	681a      	ldr	r2, [r3, #0]
 8009efc:	685b      	ldr	r3, [r3, #4]
 8009efe:	2900      	cmp	r1, #0
 8009f00:	d051      	beq.n	8009fa6 <_dtoa_r+0x5da>
 8009f02:	2000      	movs	r0, #0
 8009f04:	495d      	ldr	r1, [pc, #372]	; (800a07c <_dtoa_r+0x6b0>)
 8009f06:	f7f7 faff 	bl	8001508 <__aeabi_ddiv>
 8009f0a:	9a08      	ldr	r2, [sp, #32]
 8009f0c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009f0e:	f7f8 f969 	bl	80021e4 <__aeabi_dsub>
 8009f12:	9a06      	ldr	r2, [sp, #24]
 8009f14:	9b06      	ldr	r3, [sp, #24]
 8009f16:	4694      	mov	ip, r2
 8009f18:	9317      	str	r3, [sp, #92]	; 0x5c
 8009f1a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8009f1c:	9010      	str	r0, [sp, #64]	; 0x40
 8009f1e:	9111      	str	r1, [sp, #68]	; 0x44
 8009f20:	4463      	add	r3, ip
 8009f22:	9319      	str	r3, [sp, #100]	; 0x64
 8009f24:	0029      	movs	r1, r5
 8009f26:	0020      	movs	r0, r4
 8009f28:	f7f8 fd0c 	bl	8002944 <__aeabi_d2iz>
 8009f2c:	9014      	str	r0, [sp, #80]	; 0x50
 8009f2e:	f7f8 fd3f 	bl	80029b0 <__aeabi_i2d>
 8009f32:	0002      	movs	r2, r0
 8009f34:	000b      	movs	r3, r1
 8009f36:	0020      	movs	r0, r4
 8009f38:	0029      	movs	r1, r5
 8009f3a:	f7f8 f953 	bl	80021e4 <__aeabi_dsub>
 8009f3e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8009f40:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8009f42:	3301      	adds	r3, #1
 8009f44:	9308      	str	r3, [sp, #32]
 8009f46:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8009f48:	0004      	movs	r4, r0
 8009f4a:	3330      	adds	r3, #48	; 0x30
 8009f4c:	7013      	strb	r3, [r2, #0]
 8009f4e:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8009f50:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009f52:	000d      	movs	r5, r1
 8009f54:	f7f6 fa80 	bl	8000458 <__aeabi_dcmplt>
 8009f58:	2800      	cmp	r0, #0
 8009f5a:	d175      	bne.n	800a048 <_dtoa_r+0x67c>
 8009f5c:	0022      	movs	r2, r4
 8009f5e:	002b      	movs	r3, r5
 8009f60:	2000      	movs	r0, #0
 8009f62:	4940      	ldr	r1, [pc, #256]	; (800a064 <_dtoa_r+0x698>)
 8009f64:	f7f8 f93e 	bl	80021e4 <__aeabi_dsub>
 8009f68:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8009f6a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009f6c:	f7f6 fa74 	bl	8000458 <__aeabi_dcmplt>
 8009f70:	2800      	cmp	r0, #0
 8009f72:	d000      	beq.n	8009f76 <_dtoa_r+0x5aa>
 8009f74:	e0d2      	b.n	800a11c <_dtoa_r+0x750>
 8009f76:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8009f78:	9a08      	ldr	r2, [sp, #32]
 8009f7a:	4293      	cmp	r3, r2
 8009f7c:	d100      	bne.n	8009f80 <_dtoa_r+0x5b4>
 8009f7e:	e770      	b.n	8009e62 <_dtoa_r+0x496>
 8009f80:	9810      	ldr	r0, [sp, #64]	; 0x40
 8009f82:	9911      	ldr	r1, [sp, #68]	; 0x44
 8009f84:	2200      	movs	r2, #0
 8009f86:	4b38      	ldr	r3, [pc, #224]	; (800a068 <_dtoa_r+0x69c>)
 8009f88:	f7f7 fec0 	bl	8001d0c <__aeabi_dmul>
 8009f8c:	4b36      	ldr	r3, [pc, #216]	; (800a068 <_dtoa_r+0x69c>)
 8009f8e:	9010      	str	r0, [sp, #64]	; 0x40
 8009f90:	9111      	str	r1, [sp, #68]	; 0x44
 8009f92:	2200      	movs	r2, #0
 8009f94:	0020      	movs	r0, r4
 8009f96:	0029      	movs	r1, r5
 8009f98:	f7f7 feb8 	bl	8001d0c <__aeabi_dmul>
 8009f9c:	9b08      	ldr	r3, [sp, #32]
 8009f9e:	0004      	movs	r4, r0
 8009fa0:	000d      	movs	r5, r1
 8009fa2:	9317      	str	r3, [sp, #92]	; 0x5c
 8009fa4:	e7be      	b.n	8009f24 <_dtoa_r+0x558>
 8009fa6:	9808      	ldr	r0, [sp, #32]
 8009fa8:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009faa:	f7f7 feaf 	bl	8001d0c <__aeabi_dmul>
 8009fae:	9a06      	ldr	r2, [sp, #24]
 8009fb0:	9b06      	ldr	r3, [sp, #24]
 8009fb2:	4694      	mov	ip, r2
 8009fb4:	9308      	str	r3, [sp, #32]
 8009fb6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8009fb8:	9010      	str	r0, [sp, #64]	; 0x40
 8009fba:	9111      	str	r1, [sp, #68]	; 0x44
 8009fbc:	4463      	add	r3, ip
 8009fbe:	9319      	str	r3, [sp, #100]	; 0x64
 8009fc0:	0029      	movs	r1, r5
 8009fc2:	0020      	movs	r0, r4
 8009fc4:	f7f8 fcbe 	bl	8002944 <__aeabi_d2iz>
 8009fc8:	9017      	str	r0, [sp, #92]	; 0x5c
 8009fca:	f7f8 fcf1 	bl	80029b0 <__aeabi_i2d>
 8009fce:	0002      	movs	r2, r0
 8009fd0:	000b      	movs	r3, r1
 8009fd2:	0020      	movs	r0, r4
 8009fd4:	0029      	movs	r1, r5
 8009fd6:	f7f8 f905 	bl	80021e4 <__aeabi_dsub>
 8009fda:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8009fdc:	9a08      	ldr	r2, [sp, #32]
 8009fde:	3330      	adds	r3, #48	; 0x30
 8009fe0:	7013      	strb	r3, [r2, #0]
 8009fe2:	0013      	movs	r3, r2
 8009fe4:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8009fe6:	3301      	adds	r3, #1
 8009fe8:	0004      	movs	r4, r0
 8009fea:	000d      	movs	r5, r1
 8009fec:	9308      	str	r3, [sp, #32]
 8009fee:	4293      	cmp	r3, r2
 8009ff0:	d12c      	bne.n	800a04c <_dtoa_r+0x680>
 8009ff2:	9810      	ldr	r0, [sp, #64]	; 0x40
 8009ff4:	9911      	ldr	r1, [sp, #68]	; 0x44
 8009ff6:	9a06      	ldr	r2, [sp, #24]
 8009ff8:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8009ffa:	4694      	mov	ip, r2
 8009ffc:	4463      	add	r3, ip
 8009ffe:	2200      	movs	r2, #0
 800a000:	9308      	str	r3, [sp, #32]
 800a002:	4b1e      	ldr	r3, [pc, #120]	; (800a07c <_dtoa_r+0x6b0>)
 800a004:	f7f6 ff44 	bl	8000e90 <__aeabi_dadd>
 800a008:	0002      	movs	r2, r0
 800a00a:	000b      	movs	r3, r1
 800a00c:	0020      	movs	r0, r4
 800a00e:	0029      	movs	r1, r5
 800a010:	f7f6 fa36 	bl	8000480 <__aeabi_dcmpgt>
 800a014:	2800      	cmp	r0, #0
 800a016:	d000      	beq.n	800a01a <_dtoa_r+0x64e>
 800a018:	e080      	b.n	800a11c <_dtoa_r+0x750>
 800a01a:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800a01c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800a01e:	2000      	movs	r0, #0
 800a020:	4916      	ldr	r1, [pc, #88]	; (800a07c <_dtoa_r+0x6b0>)
 800a022:	f7f8 f8df 	bl	80021e4 <__aeabi_dsub>
 800a026:	0002      	movs	r2, r0
 800a028:	000b      	movs	r3, r1
 800a02a:	0020      	movs	r0, r4
 800a02c:	0029      	movs	r1, r5
 800a02e:	f7f6 fa13 	bl	8000458 <__aeabi_dcmplt>
 800a032:	2800      	cmp	r0, #0
 800a034:	d100      	bne.n	800a038 <_dtoa_r+0x66c>
 800a036:	e714      	b.n	8009e62 <_dtoa_r+0x496>
 800a038:	9b08      	ldr	r3, [sp, #32]
 800a03a:	001a      	movs	r2, r3
 800a03c:	3a01      	subs	r2, #1
 800a03e:	9208      	str	r2, [sp, #32]
 800a040:	7812      	ldrb	r2, [r2, #0]
 800a042:	2a30      	cmp	r2, #48	; 0x30
 800a044:	d0f8      	beq.n	800a038 <_dtoa_r+0x66c>
 800a046:	9308      	str	r3, [sp, #32]
 800a048:	9602      	str	r6, [sp, #8]
 800a04a:	e055      	b.n	800a0f8 <_dtoa_r+0x72c>
 800a04c:	2200      	movs	r2, #0
 800a04e:	4b06      	ldr	r3, [pc, #24]	; (800a068 <_dtoa_r+0x69c>)
 800a050:	f7f7 fe5c 	bl	8001d0c <__aeabi_dmul>
 800a054:	0004      	movs	r4, r0
 800a056:	000d      	movs	r5, r1
 800a058:	e7b2      	b.n	8009fc0 <_dtoa_r+0x5f4>
 800a05a:	46c0      	nop			; (mov r8, r8)
 800a05c:	0800d078 	.word	0x0800d078
 800a060:	0800d050 	.word	0x0800d050
 800a064:	3ff00000 	.word	0x3ff00000
 800a068:	40240000 	.word	0x40240000
 800a06c:	401c0000 	.word	0x401c0000
 800a070:	fcc00000 	.word	0xfcc00000
 800a074:	40140000 	.word	0x40140000
 800a078:	7cc00000 	.word	0x7cc00000
 800a07c:	3fe00000 	.word	0x3fe00000
 800a080:	9b07      	ldr	r3, [sp, #28]
 800a082:	9e06      	ldr	r6, [sp, #24]
 800a084:	3b01      	subs	r3, #1
 800a086:	199b      	adds	r3, r3, r6
 800a088:	930c      	str	r3, [sp, #48]	; 0x30
 800a08a:	9c08      	ldr	r4, [sp, #32]
 800a08c:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800a08e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a090:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a092:	0020      	movs	r0, r4
 800a094:	0029      	movs	r1, r5
 800a096:	f7f7 fa37 	bl	8001508 <__aeabi_ddiv>
 800a09a:	f7f8 fc53 	bl	8002944 <__aeabi_d2iz>
 800a09e:	9007      	str	r0, [sp, #28]
 800a0a0:	f7f8 fc86 	bl	80029b0 <__aeabi_i2d>
 800a0a4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a0a6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a0a8:	f7f7 fe30 	bl	8001d0c <__aeabi_dmul>
 800a0ac:	0002      	movs	r2, r0
 800a0ae:	000b      	movs	r3, r1
 800a0b0:	0020      	movs	r0, r4
 800a0b2:	0029      	movs	r1, r5
 800a0b4:	f7f8 f896 	bl	80021e4 <__aeabi_dsub>
 800a0b8:	0033      	movs	r3, r6
 800a0ba:	9a07      	ldr	r2, [sp, #28]
 800a0bc:	3601      	adds	r6, #1
 800a0be:	3230      	adds	r2, #48	; 0x30
 800a0c0:	701a      	strb	r2, [r3, #0]
 800a0c2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a0c4:	9608      	str	r6, [sp, #32]
 800a0c6:	429a      	cmp	r2, r3
 800a0c8:	d139      	bne.n	800a13e <_dtoa_r+0x772>
 800a0ca:	0002      	movs	r2, r0
 800a0cc:	000b      	movs	r3, r1
 800a0ce:	f7f6 fedf 	bl	8000e90 <__aeabi_dadd>
 800a0d2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a0d4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a0d6:	0004      	movs	r4, r0
 800a0d8:	000d      	movs	r5, r1
 800a0da:	f7f6 f9d1 	bl	8000480 <__aeabi_dcmpgt>
 800a0de:	2800      	cmp	r0, #0
 800a0e0:	d11b      	bne.n	800a11a <_dtoa_r+0x74e>
 800a0e2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a0e4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a0e6:	0020      	movs	r0, r4
 800a0e8:	0029      	movs	r1, r5
 800a0ea:	f7f6 f9af 	bl	800044c <__aeabi_dcmpeq>
 800a0ee:	2800      	cmp	r0, #0
 800a0f0:	d002      	beq.n	800a0f8 <_dtoa_r+0x72c>
 800a0f2:	9b07      	ldr	r3, [sp, #28]
 800a0f4:	07db      	lsls	r3, r3, #31
 800a0f6:	d410      	bmi.n	800a11a <_dtoa_r+0x74e>
 800a0f8:	0038      	movs	r0, r7
 800a0fa:	9905      	ldr	r1, [sp, #20]
 800a0fc:	f000 fe6c 	bl	800add8 <_Bfree>
 800a100:	2300      	movs	r3, #0
 800a102:	9a08      	ldr	r2, [sp, #32]
 800a104:	9802      	ldr	r0, [sp, #8]
 800a106:	7013      	strb	r3, [r2, #0]
 800a108:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800a10a:	3001      	adds	r0, #1
 800a10c:	6018      	str	r0, [r3, #0]
 800a10e:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800a110:	2b00      	cmp	r3, #0
 800a112:	d100      	bne.n	800a116 <_dtoa_r+0x74a>
 800a114:	e4a6      	b.n	8009a64 <_dtoa_r+0x98>
 800a116:	601a      	str	r2, [r3, #0]
 800a118:	e4a4      	b.n	8009a64 <_dtoa_r+0x98>
 800a11a:	9e02      	ldr	r6, [sp, #8]
 800a11c:	9b08      	ldr	r3, [sp, #32]
 800a11e:	9308      	str	r3, [sp, #32]
 800a120:	3b01      	subs	r3, #1
 800a122:	781a      	ldrb	r2, [r3, #0]
 800a124:	2a39      	cmp	r2, #57	; 0x39
 800a126:	d106      	bne.n	800a136 <_dtoa_r+0x76a>
 800a128:	9a06      	ldr	r2, [sp, #24]
 800a12a:	429a      	cmp	r2, r3
 800a12c:	d1f7      	bne.n	800a11e <_dtoa_r+0x752>
 800a12e:	2230      	movs	r2, #48	; 0x30
 800a130:	9906      	ldr	r1, [sp, #24]
 800a132:	3601      	adds	r6, #1
 800a134:	700a      	strb	r2, [r1, #0]
 800a136:	781a      	ldrb	r2, [r3, #0]
 800a138:	3201      	adds	r2, #1
 800a13a:	701a      	strb	r2, [r3, #0]
 800a13c:	e784      	b.n	800a048 <_dtoa_r+0x67c>
 800a13e:	2200      	movs	r2, #0
 800a140:	4baa      	ldr	r3, [pc, #680]	; (800a3ec <_dtoa_r+0xa20>)
 800a142:	f7f7 fde3 	bl	8001d0c <__aeabi_dmul>
 800a146:	2200      	movs	r2, #0
 800a148:	2300      	movs	r3, #0
 800a14a:	0004      	movs	r4, r0
 800a14c:	000d      	movs	r5, r1
 800a14e:	f7f6 f97d 	bl	800044c <__aeabi_dcmpeq>
 800a152:	2800      	cmp	r0, #0
 800a154:	d09b      	beq.n	800a08e <_dtoa_r+0x6c2>
 800a156:	e7cf      	b.n	800a0f8 <_dtoa_r+0x72c>
 800a158:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800a15a:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 800a15c:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800a15e:	2d00      	cmp	r5, #0
 800a160:	d012      	beq.n	800a188 <_dtoa_r+0x7bc>
 800a162:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800a164:	2a01      	cmp	r2, #1
 800a166:	dc66      	bgt.n	800a236 <_dtoa_r+0x86a>
 800a168:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800a16a:	2a00      	cmp	r2, #0
 800a16c:	d05d      	beq.n	800a22a <_dtoa_r+0x85e>
 800a16e:	4aa0      	ldr	r2, [pc, #640]	; (800a3f0 <_dtoa_r+0xa24>)
 800a170:	189b      	adds	r3, r3, r2
 800a172:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a174:	2101      	movs	r1, #1
 800a176:	18d2      	adds	r2, r2, r3
 800a178:	920a      	str	r2, [sp, #40]	; 0x28
 800a17a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800a17c:	0038      	movs	r0, r7
 800a17e:	18d3      	adds	r3, r2, r3
 800a180:	930d      	str	r3, [sp, #52]	; 0x34
 800a182:	f000 ff25 	bl	800afd0 <__i2b>
 800a186:	0005      	movs	r5, r0
 800a188:	2c00      	cmp	r4, #0
 800a18a:	dd0e      	ble.n	800a1aa <_dtoa_r+0x7de>
 800a18c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a18e:	2b00      	cmp	r3, #0
 800a190:	dd0b      	ble.n	800a1aa <_dtoa_r+0x7de>
 800a192:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800a194:	0023      	movs	r3, r4
 800a196:	4294      	cmp	r4, r2
 800a198:	dd00      	ble.n	800a19c <_dtoa_r+0x7d0>
 800a19a:	0013      	movs	r3, r2
 800a19c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a19e:	1ae4      	subs	r4, r4, r3
 800a1a0:	1ad2      	subs	r2, r2, r3
 800a1a2:	920a      	str	r2, [sp, #40]	; 0x28
 800a1a4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800a1a6:	1ad3      	subs	r3, r2, r3
 800a1a8:	930d      	str	r3, [sp, #52]	; 0x34
 800a1aa:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a1ac:	2b00      	cmp	r3, #0
 800a1ae:	d01f      	beq.n	800a1f0 <_dtoa_r+0x824>
 800a1b0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a1b2:	2b00      	cmp	r3, #0
 800a1b4:	d054      	beq.n	800a260 <_dtoa_r+0x894>
 800a1b6:	2e00      	cmp	r6, #0
 800a1b8:	dd11      	ble.n	800a1de <_dtoa_r+0x812>
 800a1ba:	0029      	movs	r1, r5
 800a1bc:	0032      	movs	r2, r6
 800a1be:	0038      	movs	r0, r7
 800a1c0:	f000 ffcc 	bl	800b15c <__pow5mult>
 800a1c4:	9a05      	ldr	r2, [sp, #20]
 800a1c6:	0001      	movs	r1, r0
 800a1c8:	0005      	movs	r5, r0
 800a1ca:	0038      	movs	r0, r7
 800a1cc:	f000 ff16 	bl	800affc <__multiply>
 800a1d0:	9905      	ldr	r1, [sp, #20]
 800a1d2:	9014      	str	r0, [sp, #80]	; 0x50
 800a1d4:	0038      	movs	r0, r7
 800a1d6:	f000 fdff 	bl	800add8 <_Bfree>
 800a1da:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800a1dc:	9305      	str	r3, [sp, #20]
 800a1de:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a1e0:	1b9a      	subs	r2, r3, r6
 800a1e2:	42b3      	cmp	r3, r6
 800a1e4:	d004      	beq.n	800a1f0 <_dtoa_r+0x824>
 800a1e6:	0038      	movs	r0, r7
 800a1e8:	9905      	ldr	r1, [sp, #20]
 800a1ea:	f000 ffb7 	bl	800b15c <__pow5mult>
 800a1ee:	9005      	str	r0, [sp, #20]
 800a1f0:	2101      	movs	r1, #1
 800a1f2:	0038      	movs	r0, r7
 800a1f4:	f000 feec 	bl	800afd0 <__i2b>
 800a1f8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a1fa:	0006      	movs	r6, r0
 800a1fc:	2b00      	cmp	r3, #0
 800a1fe:	dd31      	ble.n	800a264 <_dtoa_r+0x898>
 800a200:	001a      	movs	r2, r3
 800a202:	0001      	movs	r1, r0
 800a204:	0038      	movs	r0, r7
 800a206:	f000 ffa9 	bl	800b15c <__pow5mult>
 800a20a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800a20c:	0006      	movs	r6, r0
 800a20e:	2b01      	cmp	r3, #1
 800a210:	dd2d      	ble.n	800a26e <_dtoa_r+0x8a2>
 800a212:	2300      	movs	r3, #0
 800a214:	930e      	str	r3, [sp, #56]	; 0x38
 800a216:	6933      	ldr	r3, [r6, #16]
 800a218:	3303      	adds	r3, #3
 800a21a:	009b      	lsls	r3, r3, #2
 800a21c:	18f3      	adds	r3, r6, r3
 800a21e:	6858      	ldr	r0, [r3, #4]
 800a220:	f000 fe8e 	bl	800af40 <__hi0bits>
 800a224:	2320      	movs	r3, #32
 800a226:	1a18      	subs	r0, r3, r0
 800a228:	e039      	b.n	800a29e <_dtoa_r+0x8d2>
 800a22a:	2336      	movs	r3, #54	; 0x36
 800a22c:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800a22e:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 800a230:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800a232:	1a9b      	subs	r3, r3, r2
 800a234:	e79d      	b.n	800a172 <_dtoa_r+0x7a6>
 800a236:	9b07      	ldr	r3, [sp, #28]
 800a238:	1e5e      	subs	r6, r3, #1
 800a23a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a23c:	42b3      	cmp	r3, r6
 800a23e:	db07      	blt.n	800a250 <_dtoa_r+0x884>
 800a240:	1b9e      	subs	r6, r3, r6
 800a242:	9b07      	ldr	r3, [sp, #28]
 800a244:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800a246:	2b00      	cmp	r3, #0
 800a248:	da93      	bge.n	800a172 <_dtoa_r+0x7a6>
 800a24a:	1ae4      	subs	r4, r4, r3
 800a24c:	2300      	movs	r3, #0
 800a24e:	e790      	b.n	800a172 <_dtoa_r+0x7a6>
 800a250:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a252:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800a254:	1af3      	subs	r3, r6, r3
 800a256:	18d3      	adds	r3, r2, r3
 800a258:	960e      	str	r6, [sp, #56]	; 0x38
 800a25a:	9315      	str	r3, [sp, #84]	; 0x54
 800a25c:	2600      	movs	r6, #0
 800a25e:	e7f0      	b.n	800a242 <_dtoa_r+0x876>
 800a260:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a262:	e7c0      	b.n	800a1e6 <_dtoa_r+0x81a>
 800a264:	2300      	movs	r3, #0
 800a266:	930e      	str	r3, [sp, #56]	; 0x38
 800a268:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800a26a:	2b01      	cmp	r3, #1
 800a26c:	dc13      	bgt.n	800a296 <_dtoa_r+0x8ca>
 800a26e:	2300      	movs	r3, #0
 800a270:	930e      	str	r3, [sp, #56]	; 0x38
 800a272:	9b08      	ldr	r3, [sp, #32]
 800a274:	2b00      	cmp	r3, #0
 800a276:	d10e      	bne.n	800a296 <_dtoa_r+0x8ca>
 800a278:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a27a:	031b      	lsls	r3, r3, #12
 800a27c:	d10b      	bne.n	800a296 <_dtoa_r+0x8ca>
 800a27e:	4b5d      	ldr	r3, [pc, #372]	; (800a3f4 <_dtoa_r+0xa28>)
 800a280:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a282:	4213      	tst	r3, r2
 800a284:	d007      	beq.n	800a296 <_dtoa_r+0x8ca>
 800a286:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a288:	3301      	adds	r3, #1
 800a28a:	930a      	str	r3, [sp, #40]	; 0x28
 800a28c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a28e:	3301      	adds	r3, #1
 800a290:	930d      	str	r3, [sp, #52]	; 0x34
 800a292:	2301      	movs	r3, #1
 800a294:	930e      	str	r3, [sp, #56]	; 0x38
 800a296:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a298:	2001      	movs	r0, #1
 800a29a:	2b00      	cmp	r3, #0
 800a29c:	d1bb      	bne.n	800a216 <_dtoa_r+0x84a>
 800a29e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a2a0:	221f      	movs	r2, #31
 800a2a2:	1818      	adds	r0, r3, r0
 800a2a4:	0003      	movs	r3, r0
 800a2a6:	4013      	ands	r3, r2
 800a2a8:	4210      	tst	r0, r2
 800a2aa:	d046      	beq.n	800a33a <_dtoa_r+0x96e>
 800a2ac:	3201      	adds	r2, #1
 800a2ae:	1ad2      	subs	r2, r2, r3
 800a2b0:	2a04      	cmp	r2, #4
 800a2b2:	dd3f      	ble.n	800a334 <_dtoa_r+0x968>
 800a2b4:	221c      	movs	r2, #28
 800a2b6:	1ad3      	subs	r3, r2, r3
 800a2b8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a2ba:	18e4      	adds	r4, r4, r3
 800a2bc:	18d2      	adds	r2, r2, r3
 800a2be:	920a      	str	r2, [sp, #40]	; 0x28
 800a2c0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800a2c2:	18d3      	adds	r3, r2, r3
 800a2c4:	930d      	str	r3, [sp, #52]	; 0x34
 800a2c6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a2c8:	2b00      	cmp	r3, #0
 800a2ca:	dd05      	ble.n	800a2d8 <_dtoa_r+0x90c>
 800a2cc:	001a      	movs	r2, r3
 800a2ce:	0038      	movs	r0, r7
 800a2d0:	9905      	ldr	r1, [sp, #20]
 800a2d2:	f000 ff9f 	bl	800b214 <__lshift>
 800a2d6:	9005      	str	r0, [sp, #20]
 800a2d8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a2da:	2b00      	cmp	r3, #0
 800a2dc:	dd05      	ble.n	800a2ea <_dtoa_r+0x91e>
 800a2de:	0031      	movs	r1, r6
 800a2e0:	001a      	movs	r2, r3
 800a2e2:	0038      	movs	r0, r7
 800a2e4:	f000 ff96 	bl	800b214 <__lshift>
 800a2e8:	0006      	movs	r6, r0
 800a2ea:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800a2ec:	2b00      	cmp	r3, #0
 800a2ee:	d026      	beq.n	800a33e <_dtoa_r+0x972>
 800a2f0:	0031      	movs	r1, r6
 800a2f2:	9805      	ldr	r0, [sp, #20]
 800a2f4:	f000 fffc 	bl	800b2f0 <__mcmp>
 800a2f8:	2800      	cmp	r0, #0
 800a2fa:	da20      	bge.n	800a33e <_dtoa_r+0x972>
 800a2fc:	9b02      	ldr	r3, [sp, #8]
 800a2fe:	220a      	movs	r2, #10
 800a300:	3b01      	subs	r3, #1
 800a302:	9302      	str	r3, [sp, #8]
 800a304:	0038      	movs	r0, r7
 800a306:	2300      	movs	r3, #0
 800a308:	9905      	ldr	r1, [sp, #20]
 800a30a:	f000 fd89 	bl	800ae20 <__multadd>
 800a30e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a310:	9005      	str	r0, [sp, #20]
 800a312:	2b00      	cmp	r3, #0
 800a314:	d100      	bne.n	800a318 <_dtoa_r+0x94c>
 800a316:	e166      	b.n	800a5e6 <_dtoa_r+0xc1a>
 800a318:	2300      	movs	r3, #0
 800a31a:	0029      	movs	r1, r5
 800a31c:	220a      	movs	r2, #10
 800a31e:	0038      	movs	r0, r7
 800a320:	f000 fd7e 	bl	800ae20 <__multadd>
 800a324:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a326:	0005      	movs	r5, r0
 800a328:	2b00      	cmp	r3, #0
 800a32a:	dc47      	bgt.n	800a3bc <_dtoa_r+0x9f0>
 800a32c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800a32e:	2b02      	cmp	r3, #2
 800a330:	dc0d      	bgt.n	800a34e <_dtoa_r+0x982>
 800a332:	e043      	b.n	800a3bc <_dtoa_r+0x9f0>
 800a334:	2a04      	cmp	r2, #4
 800a336:	d0c6      	beq.n	800a2c6 <_dtoa_r+0x8fa>
 800a338:	0013      	movs	r3, r2
 800a33a:	331c      	adds	r3, #28
 800a33c:	e7bc      	b.n	800a2b8 <_dtoa_r+0x8ec>
 800a33e:	9b07      	ldr	r3, [sp, #28]
 800a340:	2b00      	cmp	r3, #0
 800a342:	dc35      	bgt.n	800a3b0 <_dtoa_r+0x9e4>
 800a344:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800a346:	2b02      	cmp	r3, #2
 800a348:	dd32      	ble.n	800a3b0 <_dtoa_r+0x9e4>
 800a34a:	9b07      	ldr	r3, [sp, #28]
 800a34c:	930c      	str	r3, [sp, #48]	; 0x30
 800a34e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a350:	2b00      	cmp	r3, #0
 800a352:	d10c      	bne.n	800a36e <_dtoa_r+0x9a2>
 800a354:	0031      	movs	r1, r6
 800a356:	2205      	movs	r2, #5
 800a358:	0038      	movs	r0, r7
 800a35a:	f000 fd61 	bl	800ae20 <__multadd>
 800a35e:	0006      	movs	r6, r0
 800a360:	0001      	movs	r1, r0
 800a362:	9805      	ldr	r0, [sp, #20]
 800a364:	f000 ffc4 	bl	800b2f0 <__mcmp>
 800a368:	2800      	cmp	r0, #0
 800a36a:	dd00      	ble.n	800a36e <_dtoa_r+0x9a2>
 800a36c:	e5a5      	b.n	8009eba <_dtoa_r+0x4ee>
 800a36e:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800a370:	43db      	mvns	r3, r3
 800a372:	9302      	str	r3, [sp, #8]
 800a374:	9b06      	ldr	r3, [sp, #24]
 800a376:	9308      	str	r3, [sp, #32]
 800a378:	2400      	movs	r4, #0
 800a37a:	0031      	movs	r1, r6
 800a37c:	0038      	movs	r0, r7
 800a37e:	f000 fd2b 	bl	800add8 <_Bfree>
 800a382:	2d00      	cmp	r5, #0
 800a384:	d100      	bne.n	800a388 <_dtoa_r+0x9bc>
 800a386:	e6b7      	b.n	800a0f8 <_dtoa_r+0x72c>
 800a388:	2c00      	cmp	r4, #0
 800a38a:	d005      	beq.n	800a398 <_dtoa_r+0x9cc>
 800a38c:	42ac      	cmp	r4, r5
 800a38e:	d003      	beq.n	800a398 <_dtoa_r+0x9cc>
 800a390:	0021      	movs	r1, r4
 800a392:	0038      	movs	r0, r7
 800a394:	f000 fd20 	bl	800add8 <_Bfree>
 800a398:	0029      	movs	r1, r5
 800a39a:	0038      	movs	r0, r7
 800a39c:	f000 fd1c 	bl	800add8 <_Bfree>
 800a3a0:	e6aa      	b.n	800a0f8 <_dtoa_r+0x72c>
 800a3a2:	2600      	movs	r6, #0
 800a3a4:	0035      	movs	r5, r6
 800a3a6:	e7e2      	b.n	800a36e <_dtoa_r+0x9a2>
 800a3a8:	9602      	str	r6, [sp, #8]
 800a3aa:	9e14      	ldr	r6, [sp, #80]	; 0x50
 800a3ac:	0035      	movs	r5, r6
 800a3ae:	e584      	b.n	8009eba <_dtoa_r+0x4ee>
 800a3b0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a3b2:	2b00      	cmp	r3, #0
 800a3b4:	d100      	bne.n	800a3b8 <_dtoa_r+0x9ec>
 800a3b6:	e0ce      	b.n	800a556 <_dtoa_r+0xb8a>
 800a3b8:	9b07      	ldr	r3, [sp, #28]
 800a3ba:	930c      	str	r3, [sp, #48]	; 0x30
 800a3bc:	2c00      	cmp	r4, #0
 800a3be:	dd05      	ble.n	800a3cc <_dtoa_r+0xa00>
 800a3c0:	0029      	movs	r1, r5
 800a3c2:	0022      	movs	r2, r4
 800a3c4:	0038      	movs	r0, r7
 800a3c6:	f000 ff25 	bl	800b214 <__lshift>
 800a3ca:	0005      	movs	r5, r0
 800a3cc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a3ce:	0028      	movs	r0, r5
 800a3d0:	2b00      	cmp	r3, #0
 800a3d2:	d022      	beq.n	800a41a <_dtoa_r+0xa4e>
 800a3d4:	0038      	movs	r0, r7
 800a3d6:	6869      	ldr	r1, [r5, #4]
 800a3d8:	f000 fcba 	bl	800ad50 <_Balloc>
 800a3dc:	1e04      	subs	r4, r0, #0
 800a3de:	d10f      	bne.n	800a400 <_dtoa_r+0xa34>
 800a3e0:	0002      	movs	r2, r0
 800a3e2:	4b05      	ldr	r3, [pc, #20]	; (800a3f8 <_dtoa_r+0xa2c>)
 800a3e4:	4905      	ldr	r1, [pc, #20]	; (800a3fc <_dtoa_r+0xa30>)
 800a3e6:	f7ff fb06 	bl	80099f6 <_dtoa_r+0x2a>
 800a3ea:	46c0      	nop			; (mov r8, r8)
 800a3ec:	40240000 	.word	0x40240000
 800a3f0:	00000433 	.word	0x00000433
 800a3f4:	7ff00000 	.word	0x7ff00000
 800a3f8:	0800cf68 	.word	0x0800cf68
 800a3fc:	000002ea 	.word	0x000002ea
 800a400:	0029      	movs	r1, r5
 800a402:	692b      	ldr	r3, [r5, #16]
 800a404:	310c      	adds	r1, #12
 800a406:	1c9a      	adds	r2, r3, #2
 800a408:	0092      	lsls	r2, r2, #2
 800a40a:	300c      	adds	r0, #12
 800a40c:	f000 fc97 	bl	800ad3e <memcpy>
 800a410:	2201      	movs	r2, #1
 800a412:	0021      	movs	r1, r4
 800a414:	0038      	movs	r0, r7
 800a416:	f000 fefd 	bl	800b214 <__lshift>
 800a41a:	9b06      	ldr	r3, [sp, #24]
 800a41c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a41e:	930a      	str	r3, [sp, #40]	; 0x28
 800a420:	3b01      	subs	r3, #1
 800a422:	189b      	adds	r3, r3, r2
 800a424:	2201      	movs	r2, #1
 800a426:	002c      	movs	r4, r5
 800a428:	0005      	movs	r5, r0
 800a42a:	9314      	str	r3, [sp, #80]	; 0x50
 800a42c:	9b08      	ldr	r3, [sp, #32]
 800a42e:	4013      	ands	r3, r2
 800a430:	930f      	str	r3, [sp, #60]	; 0x3c
 800a432:	0031      	movs	r1, r6
 800a434:	9805      	ldr	r0, [sp, #20]
 800a436:	f7ff fa3d 	bl	80098b4 <quorem>
 800a43a:	0003      	movs	r3, r0
 800a43c:	0021      	movs	r1, r4
 800a43e:	3330      	adds	r3, #48	; 0x30
 800a440:	900d      	str	r0, [sp, #52]	; 0x34
 800a442:	9805      	ldr	r0, [sp, #20]
 800a444:	9307      	str	r3, [sp, #28]
 800a446:	f000 ff53 	bl	800b2f0 <__mcmp>
 800a44a:	002a      	movs	r2, r5
 800a44c:	900e      	str	r0, [sp, #56]	; 0x38
 800a44e:	0031      	movs	r1, r6
 800a450:	0038      	movs	r0, r7
 800a452:	f000 ff69 	bl	800b328 <__mdiff>
 800a456:	68c3      	ldr	r3, [r0, #12]
 800a458:	9008      	str	r0, [sp, #32]
 800a45a:	9310      	str	r3, [sp, #64]	; 0x40
 800a45c:	2301      	movs	r3, #1
 800a45e:	930c      	str	r3, [sp, #48]	; 0x30
 800a460:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800a462:	2b00      	cmp	r3, #0
 800a464:	d104      	bne.n	800a470 <_dtoa_r+0xaa4>
 800a466:	0001      	movs	r1, r0
 800a468:	9805      	ldr	r0, [sp, #20]
 800a46a:	f000 ff41 	bl	800b2f0 <__mcmp>
 800a46e:	900c      	str	r0, [sp, #48]	; 0x30
 800a470:	0038      	movs	r0, r7
 800a472:	9908      	ldr	r1, [sp, #32]
 800a474:	f000 fcb0 	bl	800add8 <_Bfree>
 800a478:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a47a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a47c:	3301      	adds	r3, #1
 800a47e:	9308      	str	r3, [sp, #32]
 800a480:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800a482:	4313      	orrs	r3, r2
 800a484:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800a486:	4313      	orrs	r3, r2
 800a488:	d10c      	bne.n	800a4a4 <_dtoa_r+0xad8>
 800a48a:	9b07      	ldr	r3, [sp, #28]
 800a48c:	2b39      	cmp	r3, #57	; 0x39
 800a48e:	d026      	beq.n	800a4de <_dtoa_r+0xb12>
 800a490:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a492:	2b00      	cmp	r3, #0
 800a494:	dd02      	ble.n	800a49c <_dtoa_r+0xad0>
 800a496:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a498:	3331      	adds	r3, #49	; 0x31
 800a49a:	9307      	str	r3, [sp, #28]
 800a49c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a49e:	9a07      	ldr	r2, [sp, #28]
 800a4a0:	701a      	strb	r2, [r3, #0]
 800a4a2:	e76a      	b.n	800a37a <_dtoa_r+0x9ae>
 800a4a4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a4a6:	2b00      	cmp	r3, #0
 800a4a8:	db04      	blt.n	800a4b4 <_dtoa_r+0xae8>
 800a4aa:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800a4ac:	4313      	orrs	r3, r2
 800a4ae:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800a4b0:	4313      	orrs	r3, r2
 800a4b2:	d11f      	bne.n	800a4f4 <_dtoa_r+0xb28>
 800a4b4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a4b6:	2b00      	cmp	r3, #0
 800a4b8:	ddf0      	ble.n	800a49c <_dtoa_r+0xad0>
 800a4ba:	9905      	ldr	r1, [sp, #20]
 800a4bc:	2201      	movs	r2, #1
 800a4be:	0038      	movs	r0, r7
 800a4c0:	f000 fea8 	bl	800b214 <__lshift>
 800a4c4:	0031      	movs	r1, r6
 800a4c6:	9005      	str	r0, [sp, #20]
 800a4c8:	f000 ff12 	bl	800b2f0 <__mcmp>
 800a4cc:	2800      	cmp	r0, #0
 800a4ce:	dc03      	bgt.n	800a4d8 <_dtoa_r+0xb0c>
 800a4d0:	d1e4      	bne.n	800a49c <_dtoa_r+0xad0>
 800a4d2:	9b07      	ldr	r3, [sp, #28]
 800a4d4:	07db      	lsls	r3, r3, #31
 800a4d6:	d5e1      	bpl.n	800a49c <_dtoa_r+0xad0>
 800a4d8:	9b07      	ldr	r3, [sp, #28]
 800a4da:	2b39      	cmp	r3, #57	; 0x39
 800a4dc:	d1db      	bne.n	800a496 <_dtoa_r+0xaca>
 800a4de:	2339      	movs	r3, #57	; 0x39
 800a4e0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a4e2:	7013      	strb	r3, [r2, #0]
 800a4e4:	9b08      	ldr	r3, [sp, #32]
 800a4e6:	9308      	str	r3, [sp, #32]
 800a4e8:	3b01      	subs	r3, #1
 800a4ea:	781a      	ldrb	r2, [r3, #0]
 800a4ec:	2a39      	cmp	r2, #57	; 0x39
 800a4ee:	d068      	beq.n	800a5c2 <_dtoa_r+0xbf6>
 800a4f0:	3201      	adds	r2, #1
 800a4f2:	e7d5      	b.n	800a4a0 <_dtoa_r+0xad4>
 800a4f4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a4f6:	2b00      	cmp	r3, #0
 800a4f8:	dd07      	ble.n	800a50a <_dtoa_r+0xb3e>
 800a4fa:	9b07      	ldr	r3, [sp, #28]
 800a4fc:	2b39      	cmp	r3, #57	; 0x39
 800a4fe:	d0ee      	beq.n	800a4de <_dtoa_r+0xb12>
 800a500:	9b07      	ldr	r3, [sp, #28]
 800a502:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a504:	3301      	adds	r3, #1
 800a506:	7013      	strb	r3, [r2, #0]
 800a508:	e737      	b.n	800a37a <_dtoa_r+0x9ae>
 800a50a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a50c:	9a07      	ldr	r2, [sp, #28]
 800a50e:	701a      	strb	r2, [r3, #0]
 800a510:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800a512:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a514:	4293      	cmp	r3, r2
 800a516:	d03e      	beq.n	800a596 <_dtoa_r+0xbca>
 800a518:	2300      	movs	r3, #0
 800a51a:	220a      	movs	r2, #10
 800a51c:	9905      	ldr	r1, [sp, #20]
 800a51e:	0038      	movs	r0, r7
 800a520:	f000 fc7e 	bl	800ae20 <__multadd>
 800a524:	2300      	movs	r3, #0
 800a526:	9005      	str	r0, [sp, #20]
 800a528:	220a      	movs	r2, #10
 800a52a:	0021      	movs	r1, r4
 800a52c:	0038      	movs	r0, r7
 800a52e:	42ac      	cmp	r4, r5
 800a530:	d106      	bne.n	800a540 <_dtoa_r+0xb74>
 800a532:	f000 fc75 	bl	800ae20 <__multadd>
 800a536:	0004      	movs	r4, r0
 800a538:	0005      	movs	r5, r0
 800a53a:	9b08      	ldr	r3, [sp, #32]
 800a53c:	930a      	str	r3, [sp, #40]	; 0x28
 800a53e:	e778      	b.n	800a432 <_dtoa_r+0xa66>
 800a540:	f000 fc6e 	bl	800ae20 <__multadd>
 800a544:	0029      	movs	r1, r5
 800a546:	0004      	movs	r4, r0
 800a548:	2300      	movs	r3, #0
 800a54a:	220a      	movs	r2, #10
 800a54c:	0038      	movs	r0, r7
 800a54e:	f000 fc67 	bl	800ae20 <__multadd>
 800a552:	0005      	movs	r5, r0
 800a554:	e7f1      	b.n	800a53a <_dtoa_r+0xb6e>
 800a556:	9b07      	ldr	r3, [sp, #28]
 800a558:	930c      	str	r3, [sp, #48]	; 0x30
 800a55a:	2400      	movs	r4, #0
 800a55c:	0031      	movs	r1, r6
 800a55e:	9805      	ldr	r0, [sp, #20]
 800a560:	f7ff f9a8 	bl	80098b4 <quorem>
 800a564:	9b06      	ldr	r3, [sp, #24]
 800a566:	3030      	adds	r0, #48	; 0x30
 800a568:	5518      	strb	r0, [r3, r4]
 800a56a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a56c:	3401      	adds	r4, #1
 800a56e:	9007      	str	r0, [sp, #28]
 800a570:	42a3      	cmp	r3, r4
 800a572:	dd07      	ble.n	800a584 <_dtoa_r+0xbb8>
 800a574:	2300      	movs	r3, #0
 800a576:	220a      	movs	r2, #10
 800a578:	0038      	movs	r0, r7
 800a57a:	9905      	ldr	r1, [sp, #20]
 800a57c:	f000 fc50 	bl	800ae20 <__multadd>
 800a580:	9005      	str	r0, [sp, #20]
 800a582:	e7eb      	b.n	800a55c <_dtoa_r+0xb90>
 800a584:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a586:	2001      	movs	r0, #1
 800a588:	2b00      	cmp	r3, #0
 800a58a:	dd00      	ble.n	800a58e <_dtoa_r+0xbc2>
 800a58c:	0018      	movs	r0, r3
 800a58e:	2400      	movs	r4, #0
 800a590:	9b06      	ldr	r3, [sp, #24]
 800a592:	181b      	adds	r3, r3, r0
 800a594:	9308      	str	r3, [sp, #32]
 800a596:	9905      	ldr	r1, [sp, #20]
 800a598:	2201      	movs	r2, #1
 800a59a:	0038      	movs	r0, r7
 800a59c:	f000 fe3a 	bl	800b214 <__lshift>
 800a5a0:	0031      	movs	r1, r6
 800a5a2:	9005      	str	r0, [sp, #20]
 800a5a4:	f000 fea4 	bl	800b2f0 <__mcmp>
 800a5a8:	2800      	cmp	r0, #0
 800a5aa:	dc9b      	bgt.n	800a4e4 <_dtoa_r+0xb18>
 800a5ac:	d102      	bne.n	800a5b4 <_dtoa_r+0xbe8>
 800a5ae:	9b07      	ldr	r3, [sp, #28]
 800a5b0:	07db      	lsls	r3, r3, #31
 800a5b2:	d497      	bmi.n	800a4e4 <_dtoa_r+0xb18>
 800a5b4:	9b08      	ldr	r3, [sp, #32]
 800a5b6:	9308      	str	r3, [sp, #32]
 800a5b8:	3b01      	subs	r3, #1
 800a5ba:	781a      	ldrb	r2, [r3, #0]
 800a5bc:	2a30      	cmp	r2, #48	; 0x30
 800a5be:	d0fa      	beq.n	800a5b6 <_dtoa_r+0xbea>
 800a5c0:	e6db      	b.n	800a37a <_dtoa_r+0x9ae>
 800a5c2:	9a06      	ldr	r2, [sp, #24]
 800a5c4:	429a      	cmp	r2, r3
 800a5c6:	d18e      	bne.n	800a4e6 <_dtoa_r+0xb1a>
 800a5c8:	9b02      	ldr	r3, [sp, #8]
 800a5ca:	3301      	adds	r3, #1
 800a5cc:	9302      	str	r3, [sp, #8]
 800a5ce:	2331      	movs	r3, #49	; 0x31
 800a5d0:	e799      	b.n	800a506 <_dtoa_r+0xb3a>
 800a5d2:	4b09      	ldr	r3, [pc, #36]	; (800a5f8 <_dtoa_r+0xc2c>)
 800a5d4:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800a5d6:	9306      	str	r3, [sp, #24]
 800a5d8:	4b08      	ldr	r3, [pc, #32]	; (800a5fc <_dtoa_r+0xc30>)
 800a5da:	2a00      	cmp	r2, #0
 800a5dc:	d001      	beq.n	800a5e2 <_dtoa_r+0xc16>
 800a5de:	f7ff fa3f 	bl	8009a60 <_dtoa_r+0x94>
 800a5e2:	f7ff fa3f 	bl	8009a64 <_dtoa_r+0x98>
 800a5e6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a5e8:	2b00      	cmp	r3, #0
 800a5ea:	dcb6      	bgt.n	800a55a <_dtoa_r+0xb8e>
 800a5ec:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800a5ee:	2b02      	cmp	r3, #2
 800a5f0:	dd00      	ble.n	800a5f4 <_dtoa_r+0xc28>
 800a5f2:	e6ac      	b.n	800a34e <_dtoa_r+0x982>
 800a5f4:	e7b1      	b.n	800a55a <_dtoa_r+0xb8e>
 800a5f6:	46c0      	nop			; (mov r8, r8)
 800a5f8:	0800cee9 	.word	0x0800cee9
 800a5fc:	0800cef1 	.word	0x0800cef1

0800a600 <rshift>:
 800a600:	0002      	movs	r2, r0
 800a602:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a604:	6904      	ldr	r4, [r0, #16]
 800a606:	3214      	adds	r2, #20
 800a608:	0013      	movs	r3, r2
 800a60a:	b085      	sub	sp, #20
 800a60c:	114f      	asrs	r7, r1, #5
 800a60e:	42bc      	cmp	r4, r7
 800a610:	dd31      	ble.n	800a676 <rshift+0x76>
 800a612:	00bb      	lsls	r3, r7, #2
 800a614:	18d3      	adds	r3, r2, r3
 800a616:	261f      	movs	r6, #31
 800a618:	9301      	str	r3, [sp, #4]
 800a61a:	000b      	movs	r3, r1
 800a61c:	00a5      	lsls	r5, r4, #2
 800a61e:	4033      	ands	r3, r6
 800a620:	1955      	adds	r5, r2, r5
 800a622:	9302      	str	r3, [sp, #8]
 800a624:	4231      	tst	r1, r6
 800a626:	d10c      	bne.n	800a642 <rshift+0x42>
 800a628:	0016      	movs	r6, r2
 800a62a:	9901      	ldr	r1, [sp, #4]
 800a62c:	428d      	cmp	r5, r1
 800a62e:	d838      	bhi.n	800a6a2 <rshift+0xa2>
 800a630:	9901      	ldr	r1, [sp, #4]
 800a632:	2300      	movs	r3, #0
 800a634:	3903      	subs	r1, #3
 800a636:	428d      	cmp	r5, r1
 800a638:	d301      	bcc.n	800a63e <rshift+0x3e>
 800a63a:	1be3      	subs	r3, r4, r7
 800a63c:	009b      	lsls	r3, r3, #2
 800a63e:	18d3      	adds	r3, r2, r3
 800a640:	e019      	b.n	800a676 <rshift+0x76>
 800a642:	2120      	movs	r1, #32
 800a644:	9b02      	ldr	r3, [sp, #8]
 800a646:	9e01      	ldr	r6, [sp, #4]
 800a648:	1acb      	subs	r3, r1, r3
 800a64a:	9303      	str	r3, [sp, #12]
 800a64c:	ce02      	ldmia	r6!, {r1}
 800a64e:	9b02      	ldr	r3, [sp, #8]
 800a650:	4694      	mov	ip, r2
 800a652:	40d9      	lsrs	r1, r3
 800a654:	9100      	str	r1, [sp, #0]
 800a656:	42b5      	cmp	r5, r6
 800a658:	d816      	bhi.n	800a688 <rshift+0x88>
 800a65a:	9e01      	ldr	r6, [sp, #4]
 800a65c:	2300      	movs	r3, #0
 800a65e:	3601      	adds	r6, #1
 800a660:	42b5      	cmp	r5, r6
 800a662:	d302      	bcc.n	800a66a <rshift+0x6a>
 800a664:	1be3      	subs	r3, r4, r7
 800a666:	009b      	lsls	r3, r3, #2
 800a668:	3b04      	subs	r3, #4
 800a66a:	9900      	ldr	r1, [sp, #0]
 800a66c:	18d3      	adds	r3, r2, r3
 800a66e:	6019      	str	r1, [r3, #0]
 800a670:	2900      	cmp	r1, #0
 800a672:	d000      	beq.n	800a676 <rshift+0x76>
 800a674:	3304      	adds	r3, #4
 800a676:	1a99      	subs	r1, r3, r2
 800a678:	1089      	asrs	r1, r1, #2
 800a67a:	6101      	str	r1, [r0, #16]
 800a67c:	4293      	cmp	r3, r2
 800a67e:	d101      	bne.n	800a684 <rshift+0x84>
 800a680:	2300      	movs	r3, #0
 800a682:	6143      	str	r3, [r0, #20]
 800a684:	b005      	add	sp, #20
 800a686:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a688:	6833      	ldr	r3, [r6, #0]
 800a68a:	9903      	ldr	r1, [sp, #12]
 800a68c:	408b      	lsls	r3, r1
 800a68e:	9900      	ldr	r1, [sp, #0]
 800a690:	4319      	orrs	r1, r3
 800a692:	4663      	mov	r3, ip
 800a694:	c302      	stmia	r3!, {r1}
 800a696:	469c      	mov	ip, r3
 800a698:	ce02      	ldmia	r6!, {r1}
 800a69a:	9b02      	ldr	r3, [sp, #8]
 800a69c:	40d9      	lsrs	r1, r3
 800a69e:	9100      	str	r1, [sp, #0]
 800a6a0:	e7d9      	b.n	800a656 <rshift+0x56>
 800a6a2:	c908      	ldmia	r1!, {r3}
 800a6a4:	c608      	stmia	r6!, {r3}
 800a6a6:	e7c1      	b.n	800a62c <rshift+0x2c>

0800a6a8 <__hexdig_fun>:
 800a6a8:	0002      	movs	r2, r0
 800a6aa:	3a30      	subs	r2, #48	; 0x30
 800a6ac:	0003      	movs	r3, r0
 800a6ae:	2a09      	cmp	r2, #9
 800a6b0:	d802      	bhi.n	800a6b8 <__hexdig_fun+0x10>
 800a6b2:	3b20      	subs	r3, #32
 800a6b4:	b2d8      	uxtb	r0, r3
 800a6b6:	4770      	bx	lr
 800a6b8:	0002      	movs	r2, r0
 800a6ba:	3a61      	subs	r2, #97	; 0x61
 800a6bc:	2a05      	cmp	r2, #5
 800a6be:	d801      	bhi.n	800a6c4 <__hexdig_fun+0x1c>
 800a6c0:	3b47      	subs	r3, #71	; 0x47
 800a6c2:	e7f7      	b.n	800a6b4 <__hexdig_fun+0xc>
 800a6c4:	001a      	movs	r2, r3
 800a6c6:	3a41      	subs	r2, #65	; 0x41
 800a6c8:	2000      	movs	r0, #0
 800a6ca:	2a05      	cmp	r2, #5
 800a6cc:	d8f3      	bhi.n	800a6b6 <__hexdig_fun+0xe>
 800a6ce:	3b27      	subs	r3, #39	; 0x27
 800a6d0:	e7f0      	b.n	800a6b4 <__hexdig_fun+0xc>
	...

0800a6d4 <__gethex>:
 800a6d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a6d6:	b08d      	sub	sp, #52	; 0x34
 800a6d8:	930a      	str	r3, [sp, #40]	; 0x28
 800a6da:	4bbf      	ldr	r3, [pc, #764]	; (800a9d8 <__gethex+0x304>)
 800a6dc:	9005      	str	r0, [sp, #20]
 800a6de:	681b      	ldr	r3, [r3, #0]
 800a6e0:	9109      	str	r1, [sp, #36]	; 0x24
 800a6e2:	0018      	movs	r0, r3
 800a6e4:	9202      	str	r2, [sp, #8]
 800a6e6:	9307      	str	r3, [sp, #28]
 800a6e8:	f7f5 fd0e 	bl	8000108 <strlen>
 800a6ec:	2202      	movs	r2, #2
 800a6ee:	9b07      	ldr	r3, [sp, #28]
 800a6f0:	4252      	negs	r2, r2
 800a6f2:	181b      	adds	r3, r3, r0
 800a6f4:	3b01      	subs	r3, #1
 800a6f6:	781b      	ldrb	r3, [r3, #0]
 800a6f8:	9003      	str	r0, [sp, #12]
 800a6fa:	930b      	str	r3, [sp, #44]	; 0x2c
 800a6fc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a6fe:	6819      	ldr	r1, [r3, #0]
 800a700:	1c8b      	adds	r3, r1, #2
 800a702:	1a52      	subs	r2, r2, r1
 800a704:	18d1      	adds	r1, r2, r3
 800a706:	9301      	str	r3, [sp, #4]
 800a708:	9108      	str	r1, [sp, #32]
 800a70a:	9901      	ldr	r1, [sp, #4]
 800a70c:	3301      	adds	r3, #1
 800a70e:	7808      	ldrb	r0, [r1, #0]
 800a710:	2830      	cmp	r0, #48	; 0x30
 800a712:	d0f7      	beq.n	800a704 <__gethex+0x30>
 800a714:	f7ff ffc8 	bl	800a6a8 <__hexdig_fun>
 800a718:	2300      	movs	r3, #0
 800a71a:	001c      	movs	r4, r3
 800a71c:	9304      	str	r3, [sp, #16]
 800a71e:	4298      	cmp	r0, r3
 800a720:	d11f      	bne.n	800a762 <__gethex+0x8e>
 800a722:	9a03      	ldr	r2, [sp, #12]
 800a724:	9907      	ldr	r1, [sp, #28]
 800a726:	9801      	ldr	r0, [sp, #4]
 800a728:	f001 fa64 	bl	800bbf4 <strncmp>
 800a72c:	0007      	movs	r7, r0
 800a72e:	42a0      	cmp	r0, r4
 800a730:	d000      	beq.n	800a734 <__gethex+0x60>
 800a732:	e06b      	b.n	800a80c <__gethex+0x138>
 800a734:	9b01      	ldr	r3, [sp, #4]
 800a736:	9a03      	ldr	r2, [sp, #12]
 800a738:	5c98      	ldrb	r0, [r3, r2]
 800a73a:	189d      	adds	r5, r3, r2
 800a73c:	f7ff ffb4 	bl	800a6a8 <__hexdig_fun>
 800a740:	2301      	movs	r3, #1
 800a742:	9304      	str	r3, [sp, #16]
 800a744:	42a0      	cmp	r0, r4
 800a746:	d030      	beq.n	800a7aa <__gethex+0xd6>
 800a748:	9501      	str	r5, [sp, #4]
 800a74a:	9b01      	ldr	r3, [sp, #4]
 800a74c:	7818      	ldrb	r0, [r3, #0]
 800a74e:	2830      	cmp	r0, #48	; 0x30
 800a750:	d009      	beq.n	800a766 <__gethex+0x92>
 800a752:	f7ff ffa9 	bl	800a6a8 <__hexdig_fun>
 800a756:	4242      	negs	r2, r0
 800a758:	4142      	adcs	r2, r0
 800a75a:	2301      	movs	r3, #1
 800a75c:	002c      	movs	r4, r5
 800a75e:	9204      	str	r2, [sp, #16]
 800a760:	9308      	str	r3, [sp, #32]
 800a762:	9d01      	ldr	r5, [sp, #4]
 800a764:	e004      	b.n	800a770 <__gethex+0x9c>
 800a766:	9b01      	ldr	r3, [sp, #4]
 800a768:	3301      	adds	r3, #1
 800a76a:	9301      	str	r3, [sp, #4]
 800a76c:	e7ed      	b.n	800a74a <__gethex+0x76>
 800a76e:	3501      	adds	r5, #1
 800a770:	7828      	ldrb	r0, [r5, #0]
 800a772:	f7ff ff99 	bl	800a6a8 <__hexdig_fun>
 800a776:	1e07      	subs	r7, r0, #0
 800a778:	d1f9      	bne.n	800a76e <__gethex+0x9a>
 800a77a:	0028      	movs	r0, r5
 800a77c:	9a03      	ldr	r2, [sp, #12]
 800a77e:	9907      	ldr	r1, [sp, #28]
 800a780:	f001 fa38 	bl	800bbf4 <strncmp>
 800a784:	2800      	cmp	r0, #0
 800a786:	d10e      	bne.n	800a7a6 <__gethex+0xd2>
 800a788:	2c00      	cmp	r4, #0
 800a78a:	d107      	bne.n	800a79c <__gethex+0xc8>
 800a78c:	9b03      	ldr	r3, [sp, #12]
 800a78e:	18ed      	adds	r5, r5, r3
 800a790:	002c      	movs	r4, r5
 800a792:	7828      	ldrb	r0, [r5, #0]
 800a794:	f7ff ff88 	bl	800a6a8 <__hexdig_fun>
 800a798:	2800      	cmp	r0, #0
 800a79a:	d102      	bne.n	800a7a2 <__gethex+0xce>
 800a79c:	1b64      	subs	r4, r4, r5
 800a79e:	00a7      	lsls	r7, r4, #2
 800a7a0:	e003      	b.n	800a7aa <__gethex+0xd6>
 800a7a2:	3501      	adds	r5, #1
 800a7a4:	e7f5      	b.n	800a792 <__gethex+0xbe>
 800a7a6:	2c00      	cmp	r4, #0
 800a7a8:	d1f8      	bne.n	800a79c <__gethex+0xc8>
 800a7aa:	2220      	movs	r2, #32
 800a7ac:	782b      	ldrb	r3, [r5, #0]
 800a7ae:	002e      	movs	r6, r5
 800a7b0:	4393      	bics	r3, r2
 800a7b2:	2b50      	cmp	r3, #80	; 0x50
 800a7b4:	d11d      	bne.n	800a7f2 <__gethex+0x11e>
 800a7b6:	786b      	ldrb	r3, [r5, #1]
 800a7b8:	2b2b      	cmp	r3, #43	; 0x2b
 800a7ba:	d02c      	beq.n	800a816 <__gethex+0x142>
 800a7bc:	2b2d      	cmp	r3, #45	; 0x2d
 800a7be:	d02e      	beq.n	800a81e <__gethex+0x14a>
 800a7c0:	2300      	movs	r3, #0
 800a7c2:	1c6e      	adds	r6, r5, #1
 800a7c4:	9306      	str	r3, [sp, #24]
 800a7c6:	7830      	ldrb	r0, [r6, #0]
 800a7c8:	f7ff ff6e 	bl	800a6a8 <__hexdig_fun>
 800a7cc:	1e43      	subs	r3, r0, #1
 800a7ce:	b2db      	uxtb	r3, r3
 800a7d0:	2b18      	cmp	r3, #24
 800a7d2:	d82b      	bhi.n	800a82c <__gethex+0x158>
 800a7d4:	3810      	subs	r0, #16
 800a7d6:	0004      	movs	r4, r0
 800a7d8:	7870      	ldrb	r0, [r6, #1]
 800a7da:	f7ff ff65 	bl	800a6a8 <__hexdig_fun>
 800a7de:	1e43      	subs	r3, r0, #1
 800a7e0:	b2db      	uxtb	r3, r3
 800a7e2:	3601      	adds	r6, #1
 800a7e4:	2b18      	cmp	r3, #24
 800a7e6:	d91c      	bls.n	800a822 <__gethex+0x14e>
 800a7e8:	9b06      	ldr	r3, [sp, #24]
 800a7ea:	2b00      	cmp	r3, #0
 800a7ec:	d000      	beq.n	800a7f0 <__gethex+0x11c>
 800a7ee:	4264      	negs	r4, r4
 800a7f0:	193f      	adds	r7, r7, r4
 800a7f2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a7f4:	601e      	str	r6, [r3, #0]
 800a7f6:	9b04      	ldr	r3, [sp, #16]
 800a7f8:	2b00      	cmp	r3, #0
 800a7fa:	d019      	beq.n	800a830 <__gethex+0x15c>
 800a7fc:	2600      	movs	r6, #0
 800a7fe:	9b08      	ldr	r3, [sp, #32]
 800a800:	42b3      	cmp	r3, r6
 800a802:	d100      	bne.n	800a806 <__gethex+0x132>
 800a804:	3606      	adds	r6, #6
 800a806:	0030      	movs	r0, r6
 800a808:	b00d      	add	sp, #52	; 0x34
 800a80a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a80c:	2301      	movs	r3, #1
 800a80e:	2700      	movs	r7, #0
 800a810:	9d01      	ldr	r5, [sp, #4]
 800a812:	9304      	str	r3, [sp, #16]
 800a814:	e7c9      	b.n	800a7aa <__gethex+0xd6>
 800a816:	2300      	movs	r3, #0
 800a818:	9306      	str	r3, [sp, #24]
 800a81a:	1cae      	adds	r6, r5, #2
 800a81c:	e7d3      	b.n	800a7c6 <__gethex+0xf2>
 800a81e:	2301      	movs	r3, #1
 800a820:	e7fa      	b.n	800a818 <__gethex+0x144>
 800a822:	230a      	movs	r3, #10
 800a824:	435c      	muls	r4, r3
 800a826:	1824      	adds	r4, r4, r0
 800a828:	3c10      	subs	r4, #16
 800a82a:	e7d5      	b.n	800a7d8 <__gethex+0x104>
 800a82c:	002e      	movs	r6, r5
 800a82e:	e7e0      	b.n	800a7f2 <__gethex+0x11e>
 800a830:	9b01      	ldr	r3, [sp, #4]
 800a832:	9904      	ldr	r1, [sp, #16]
 800a834:	1aeb      	subs	r3, r5, r3
 800a836:	3b01      	subs	r3, #1
 800a838:	2b07      	cmp	r3, #7
 800a83a:	dc0a      	bgt.n	800a852 <__gethex+0x17e>
 800a83c:	9805      	ldr	r0, [sp, #20]
 800a83e:	f000 fa87 	bl	800ad50 <_Balloc>
 800a842:	1e04      	subs	r4, r0, #0
 800a844:	d108      	bne.n	800a858 <__gethex+0x184>
 800a846:	0002      	movs	r2, r0
 800a848:	21de      	movs	r1, #222	; 0xde
 800a84a:	4b64      	ldr	r3, [pc, #400]	; (800a9dc <__gethex+0x308>)
 800a84c:	4864      	ldr	r0, [pc, #400]	; (800a9e0 <__gethex+0x30c>)
 800a84e:	f001 f9f1 	bl	800bc34 <__assert_func>
 800a852:	3101      	adds	r1, #1
 800a854:	105b      	asrs	r3, r3, #1
 800a856:	e7ef      	b.n	800a838 <__gethex+0x164>
 800a858:	0003      	movs	r3, r0
 800a85a:	3314      	adds	r3, #20
 800a85c:	9304      	str	r3, [sp, #16]
 800a85e:	9309      	str	r3, [sp, #36]	; 0x24
 800a860:	2300      	movs	r3, #0
 800a862:	001e      	movs	r6, r3
 800a864:	9306      	str	r3, [sp, #24]
 800a866:	9b01      	ldr	r3, [sp, #4]
 800a868:	42ab      	cmp	r3, r5
 800a86a:	d340      	bcc.n	800a8ee <__gethex+0x21a>
 800a86c:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800a86e:	9b04      	ldr	r3, [sp, #16]
 800a870:	c540      	stmia	r5!, {r6}
 800a872:	1aed      	subs	r5, r5, r3
 800a874:	10ad      	asrs	r5, r5, #2
 800a876:	0030      	movs	r0, r6
 800a878:	6125      	str	r5, [r4, #16]
 800a87a:	f000 fb61 	bl	800af40 <__hi0bits>
 800a87e:	9b02      	ldr	r3, [sp, #8]
 800a880:	016d      	lsls	r5, r5, #5
 800a882:	681b      	ldr	r3, [r3, #0]
 800a884:	1a2e      	subs	r6, r5, r0
 800a886:	9301      	str	r3, [sp, #4]
 800a888:	429e      	cmp	r6, r3
 800a88a:	dd5a      	ble.n	800a942 <__gethex+0x26e>
 800a88c:	1af6      	subs	r6, r6, r3
 800a88e:	0031      	movs	r1, r6
 800a890:	0020      	movs	r0, r4
 800a892:	f000 ff03 	bl	800b69c <__any_on>
 800a896:	1e05      	subs	r5, r0, #0
 800a898:	d016      	beq.n	800a8c8 <__gethex+0x1f4>
 800a89a:	2501      	movs	r5, #1
 800a89c:	211f      	movs	r1, #31
 800a89e:	0028      	movs	r0, r5
 800a8a0:	1e73      	subs	r3, r6, #1
 800a8a2:	4019      	ands	r1, r3
 800a8a4:	4088      	lsls	r0, r1
 800a8a6:	0001      	movs	r1, r0
 800a8a8:	115a      	asrs	r2, r3, #5
 800a8aa:	9804      	ldr	r0, [sp, #16]
 800a8ac:	0092      	lsls	r2, r2, #2
 800a8ae:	5812      	ldr	r2, [r2, r0]
 800a8b0:	420a      	tst	r2, r1
 800a8b2:	d009      	beq.n	800a8c8 <__gethex+0x1f4>
 800a8b4:	42ab      	cmp	r3, r5
 800a8b6:	dd06      	ble.n	800a8c6 <__gethex+0x1f2>
 800a8b8:	0020      	movs	r0, r4
 800a8ba:	1eb1      	subs	r1, r6, #2
 800a8bc:	f000 feee 	bl	800b69c <__any_on>
 800a8c0:	3502      	adds	r5, #2
 800a8c2:	2800      	cmp	r0, #0
 800a8c4:	d100      	bne.n	800a8c8 <__gethex+0x1f4>
 800a8c6:	2502      	movs	r5, #2
 800a8c8:	0031      	movs	r1, r6
 800a8ca:	0020      	movs	r0, r4
 800a8cc:	f7ff fe98 	bl	800a600 <rshift>
 800a8d0:	19bf      	adds	r7, r7, r6
 800a8d2:	9b02      	ldr	r3, [sp, #8]
 800a8d4:	689b      	ldr	r3, [r3, #8]
 800a8d6:	9303      	str	r3, [sp, #12]
 800a8d8:	42bb      	cmp	r3, r7
 800a8da:	da42      	bge.n	800a962 <__gethex+0x28e>
 800a8dc:	0021      	movs	r1, r4
 800a8de:	9805      	ldr	r0, [sp, #20]
 800a8e0:	f000 fa7a 	bl	800add8 <_Bfree>
 800a8e4:	2300      	movs	r3, #0
 800a8e6:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800a8e8:	26a3      	movs	r6, #163	; 0xa3
 800a8ea:	6013      	str	r3, [r2, #0]
 800a8ec:	e78b      	b.n	800a806 <__gethex+0x132>
 800a8ee:	1e6b      	subs	r3, r5, #1
 800a8f0:	9308      	str	r3, [sp, #32]
 800a8f2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800a8f4:	781b      	ldrb	r3, [r3, #0]
 800a8f6:	4293      	cmp	r3, r2
 800a8f8:	d014      	beq.n	800a924 <__gethex+0x250>
 800a8fa:	9b06      	ldr	r3, [sp, #24]
 800a8fc:	2b20      	cmp	r3, #32
 800a8fe:	d104      	bne.n	800a90a <__gethex+0x236>
 800a900:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a902:	c340      	stmia	r3!, {r6}
 800a904:	2600      	movs	r6, #0
 800a906:	9309      	str	r3, [sp, #36]	; 0x24
 800a908:	9606      	str	r6, [sp, #24]
 800a90a:	9b08      	ldr	r3, [sp, #32]
 800a90c:	7818      	ldrb	r0, [r3, #0]
 800a90e:	f7ff fecb 	bl	800a6a8 <__hexdig_fun>
 800a912:	230f      	movs	r3, #15
 800a914:	4018      	ands	r0, r3
 800a916:	9b06      	ldr	r3, [sp, #24]
 800a918:	9d08      	ldr	r5, [sp, #32]
 800a91a:	4098      	lsls	r0, r3
 800a91c:	3304      	adds	r3, #4
 800a91e:	4306      	orrs	r6, r0
 800a920:	9306      	str	r3, [sp, #24]
 800a922:	e7a0      	b.n	800a866 <__gethex+0x192>
 800a924:	2301      	movs	r3, #1
 800a926:	9a03      	ldr	r2, [sp, #12]
 800a928:	1a9d      	subs	r5, r3, r2
 800a92a:	9b08      	ldr	r3, [sp, #32]
 800a92c:	195d      	adds	r5, r3, r5
 800a92e:	9b01      	ldr	r3, [sp, #4]
 800a930:	429d      	cmp	r5, r3
 800a932:	d3e2      	bcc.n	800a8fa <__gethex+0x226>
 800a934:	0028      	movs	r0, r5
 800a936:	9907      	ldr	r1, [sp, #28]
 800a938:	f001 f95c 	bl	800bbf4 <strncmp>
 800a93c:	2800      	cmp	r0, #0
 800a93e:	d1dc      	bne.n	800a8fa <__gethex+0x226>
 800a940:	e791      	b.n	800a866 <__gethex+0x192>
 800a942:	9b01      	ldr	r3, [sp, #4]
 800a944:	2500      	movs	r5, #0
 800a946:	429e      	cmp	r6, r3
 800a948:	dac3      	bge.n	800a8d2 <__gethex+0x1fe>
 800a94a:	1b9e      	subs	r6, r3, r6
 800a94c:	0021      	movs	r1, r4
 800a94e:	0032      	movs	r2, r6
 800a950:	9805      	ldr	r0, [sp, #20]
 800a952:	f000 fc5f 	bl	800b214 <__lshift>
 800a956:	0003      	movs	r3, r0
 800a958:	3314      	adds	r3, #20
 800a95a:	0004      	movs	r4, r0
 800a95c:	1bbf      	subs	r7, r7, r6
 800a95e:	9304      	str	r3, [sp, #16]
 800a960:	e7b7      	b.n	800a8d2 <__gethex+0x1fe>
 800a962:	9b02      	ldr	r3, [sp, #8]
 800a964:	685e      	ldr	r6, [r3, #4]
 800a966:	42be      	cmp	r6, r7
 800a968:	dd71      	ble.n	800aa4e <__gethex+0x37a>
 800a96a:	9b01      	ldr	r3, [sp, #4]
 800a96c:	1bf6      	subs	r6, r6, r7
 800a96e:	42b3      	cmp	r3, r6
 800a970:	dc38      	bgt.n	800a9e4 <__gethex+0x310>
 800a972:	9b02      	ldr	r3, [sp, #8]
 800a974:	68db      	ldr	r3, [r3, #12]
 800a976:	2b02      	cmp	r3, #2
 800a978:	d026      	beq.n	800a9c8 <__gethex+0x2f4>
 800a97a:	2b03      	cmp	r3, #3
 800a97c:	d028      	beq.n	800a9d0 <__gethex+0x2fc>
 800a97e:	2b01      	cmp	r3, #1
 800a980:	d119      	bne.n	800a9b6 <__gethex+0x2e2>
 800a982:	9b01      	ldr	r3, [sp, #4]
 800a984:	42b3      	cmp	r3, r6
 800a986:	d116      	bne.n	800a9b6 <__gethex+0x2e2>
 800a988:	2b01      	cmp	r3, #1
 800a98a:	d10d      	bne.n	800a9a8 <__gethex+0x2d4>
 800a98c:	9b02      	ldr	r3, [sp, #8]
 800a98e:	2662      	movs	r6, #98	; 0x62
 800a990:	685b      	ldr	r3, [r3, #4]
 800a992:	9301      	str	r3, [sp, #4]
 800a994:	9a01      	ldr	r2, [sp, #4]
 800a996:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a998:	601a      	str	r2, [r3, #0]
 800a99a:	2301      	movs	r3, #1
 800a99c:	9a04      	ldr	r2, [sp, #16]
 800a99e:	6123      	str	r3, [r4, #16]
 800a9a0:	6013      	str	r3, [r2, #0]
 800a9a2:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800a9a4:	601c      	str	r4, [r3, #0]
 800a9a6:	e72e      	b.n	800a806 <__gethex+0x132>
 800a9a8:	9901      	ldr	r1, [sp, #4]
 800a9aa:	0020      	movs	r0, r4
 800a9ac:	3901      	subs	r1, #1
 800a9ae:	f000 fe75 	bl	800b69c <__any_on>
 800a9b2:	2800      	cmp	r0, #0
 800a9b4:	d1ea      	bne.n	800a98c <__gethex+0x2b8>
 800a9b6:	0021      	movs	r1, r4
 800a9b8:	9805      	ldr	r0, [sp, #20]
 800a9ba:	f000 fa0d 	bl	800add8 <_Bfree>
 800a9be:	2300      	movs	r3, #0
 800a9c0:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800a9c2:	2650      	movs	r6, #80	; 0x50
 800a9c4:	6013      	str	r3, [r2, #0]
 800a9c6:	e71e      	b.n	800a806 <__gethex+0x132>
 800a9c8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800a9ca:	2b00      	cmp	r3, #0
 800a9cc:	d1f3      	bne.n	800a9b6 <__gethex+0x2e2>
 800a9ce:	e7dd      	b.n	800a98c <__gethex+0x2b8>
 800a9d0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800a9d2:	2b00      	cmp	r3, #0
 800a9d4:	d1da      	bne.n	800a98c <__gethex+0x2b8>
 800a9d6:	e7ee      	b.n	800a9b6 <__gethex+0x2e2>
 800a9d8:	0800cfe0 	.word	0x0800cfe0
 800a9dc:	0800cf68 	.word	0x0800cf68
 800a9e0:	0800cf79 	.word	0x0800cf79
 800a9e4:	1e77      	subs	r7, r6, #1
 800a9e6:	2d00      	cmp	r5, #0
 800a9e8:	d12f      	bne.n	800aa4a <__gethex+0x376>
 800a9ea:	2f00      	cmp	r7, #0
 800a9ec:	d004      	beq.n	800a9f8 <__gethex+0x324>
 800a9ee:	0039      	movs	r1, r7
 800a9f0:	0020      	movs	r0, r4
 800a9f2:	f000 fe53 	bl	800b69c <__any_on>
 800a9f6:	0005      	movs	r5, r0
 800a9f8:	231f      	movs	r3, #31
 800a9fa:	117a      	asrs	r2, r7, #5
 800a9fc:	401f      	ands	r7, r3
 800a9fe:	3b1e      	subs	r3, #30
 800aa00:	40bb      	lsls	r3, r7
 800aa02:	9904      	ldr	r1, [sp, #16]
 800aa04:	0092      	lsls	r2, r2, #2
 800aa06:	5852      	ldr	r2, [r2, r1]
 800aa08:	421a      	tst	r2, r3
 800aa0a:	d001      	beq.n	800aa10 <__gethex+0x33c>
 800aa0c:	2302      	movs	r3, #2
 800aa0e:	431d      	orrs	r5, r3
 800aa10:	9b01      	ldr	r3, [sp, #4]
 800aa12:	0031      	movs	r1, r6
 800aa14:	1b9b      	subs	r3, r3, r6
 800aa16:	2602      	movs	r6, #2
 800aa18:	0020      	movs	r0, r4
 800aa1a:	9301      	str	r3, [sp, #4]
 800aa1c:	f7ff fdf0 	bl	800a600 <rshift>
 800aa20:	9b02      	ldr	r3, [sp, #8]
 800aa22:	685f      	ldr	r7, [r3, #4]
 800aa24:	2d00      	cmp	r5, #0
 800aa26:	d041      	beq.n	800aaac <__gethex+0x3d8>
 800aa28:	9b02      	ldr	r3, [sp, #8]
 800aa2a:	68db      	ldr	r3, [r3, #12]
 800aa2c:	2b02      	cmp	r3, #2
 800aa2e:	d010      	beq.n	800aa52 <__gethex+0x37e>
 800aa30:	2b03      	cmp	r3, #3
 800aa32:	d012      	beq.n	800aa5a <__gethex+0x386>
 800aa34:	2b01      	cmp	r3, #1
 800aa36:	d106      	bne.n	800aa46 <__gethex+0x372>
 800aa38:	07aa      	lsls	r2, r5, #30
 800aa3a:	d504      	bpl.n	800aa46 <__gethex+0x372>
 800aa3c:	9a04      	ldr	r2, [sp, #16]
 800aa3e:	6810      	ldr	r0, [r2, #0]
 800aa40:	4305      	orrs	r5, r0
 800aa42:	421d      	tst	r5, r3
 800aa44:	d10c      	bne.n	800aa60 <__gethex+0x38c>
 800aa46:	2310      	movs	r3, #16
 800aa48:	e02f      	b.n	800aaaa <__gethex+0x3d6>
 800aa4a:	2501      	movs	r5, #1
 800aa4c:	e7d4      	b.n	800a9f8 <__gethex+0x324>
 800aa4e:	2601      	movs	r6, #1
 800aa50:	e7e8      	b.n	800aa24 <__gethex+0x350>
 800aa52:	2301      	movs	r3, #1
 800aa54:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800aa56:	1a9b      	subs	r3, r3, r2
 800aa58:	9313      	str	r3, [sp, #76]	; 0x4c
 800aa5a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800aa5c:	2b00      	cmp	r3, #0
 800aa5e:	d0f2      	beq.n	800aa46 <__gethex+0x372>
 800aa60:	6923      	ldr	r3, [r4, #16]
 800aa62:	2000      	movs	r0, #0
 800aa64:	9303      	str	r3, [sp, #12]
 800aa66:	009b      	lsls	r3, r3, #2
 800aa68:	9304      	str	r3, [sp, #16]
 800aa6a:	0023      	movs	r3, r4
 800aa6c:	9a04      	ldr	r2, [sp, #16]
 800aa6e:	3314      	adds	r3, #20
 800aa70:	1899      	adds	r1, r3, r2
 800aa72:	681a      	ldr	r2, [r3, #0]
 800aa74:	1c55      	adds	r5, r2, #1
 800aa76:	d01e      	beq.n	800aab6 <__gethex+0x3e2>
 800aa78:	3201      	adds	r2, #1
 800aa7a:	601a      	str	r2, [r3, #0]
 800aa7c:	0023      	movs	r3, r4
 800aa7e:	3314      	adds	r3, #20
 800aa80:	2e02      	cmp	r6, #2
 800aa82:	d140      	bne.n	800ab06 <__gethex+0x432>
 800aa84:	9a02      	ldr	r2, [sp, #8]
 800aa86:	9901      	ldr	r1, [sp, #4]
 800aa88:	6812      	ldr	r2, [r2, #0]
 800aa8a:	3a01      	subs	r2, #1
 800aa8c:	428a      	cmp	r2, r1
 800aa8e:	d10b      	bne.n	800aaa8 <__gethex+0x3d4>
 800aa90:	114a      	asrs	r2, r1, #5
 800aa92:	211f      	movs	r1, #31
 800aa94:	9801      	ldr	r0, [sp, #4]
 800aa96:	0092      	lsls	r2, r2, #2
 800aa98:	4001      	ands	r1, r0
 800aa9a:	2001      	movs	r0, #1
 800aa9c:	0005      	movs	r5, r0
 800aa9e:	408d      	lsls	r5, r1
 800aaa0:	58d3      	ldr	r3, [r2, r3]
 800aaa2:	422b      	tst	r3, r5
 800aaa4:	d000      	beq.n	800aaa8 <__gethex+0x3d4>
 800aaa6:	2601      	movs	r6, #1
 800aaa8:	2320      	movs	r3, #32
 800aaaa:	431e      	orrs	r6, r3
 800aaac:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800aaae:	601c      	str	r4, [r3, #0]
 800aab0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800aab2:	601f      	str	r7, [r3, #0]
 800aab4:	e6a7      	b.n	800a806 <__gethex+0x132>
 800aab6:	c301      	stmia	r3!, {r0}
 800aab8:	4299      	cmp	r1, r3
 800aaba:	d8da      	bhi.n	800aa72 <__gethex+0x39e>
 800aabc:	9b03      	ldr	r3, [sp, #12]
 800aabe:	68a2      	ldr	r2, [r4, #8]
 800aac0:	4293      	cmp	r3, r2
 800aac2:	db17      	blt.n	800aaf4 <__gethex+0x420>
 800aac4:	6863      	ldr	r3, [r4, #4]
 800aac6:	9805      	ldr	r0, [sp, #20]
 800aac8:	1c59      	adds	r1, r3, #1
 800aaca:	f000 f941 	bl	800ad50 <_Balloc>
 800aace:	1e05      	subs	r5, r0, #0
 800aad0:	d103      	bne.n	800aada <__gethex+0x406>
 800aad2:	0002      	movs	r2, r0
 800aad4:	2184      	movs	r1, #132	; 0x84
 800aad6:	4b1c      	ldr	r3, [pc, #112]	; (800ab48 <__gethex+0x474>)
 800aad8:	e6b8      	b.n	800a84c <__gethex+0x178>
 800aada:	0021      	movs	r1, r4
 800aadc:	6923      	ldr	r3, [r4, #16]
 800aade:	310c      	adds	r1, #12
 800aae0:	1c9a      	adds	r2, r3, #2
 800aae2:	0092      	lsls	r2, r2, #2
 800aae4:	300c      	adds	r0, #12
 800aae6:	f000 f92a 	bl	800ad3e <memcpy>
 800aaea:	0021      	movs	r1, r4
 800aaec:	9805      	ldr	r0, [sp, #20]
 800aaee:	f000 f973 	bl	800add8 <_Bfree>
 800aaf2:	002c      	movs	r4, r5
 800aaf4:	6923      	ldr	r3, [r4, #16]
 800aaf6:	1c5a      	adds	r2, r3, #1
 800aaf8:	6122      	str	r2, [r4, #16]
 800aafa:	2201      	movs	r2, #1
 800aafc:	3304      	adds	r3, #4
 800aafe:	009b      	lsls	r3, r3, #2
 800ab00:	18e3      	adds	r3, r4, r3
 800ab02:	605a      	str	r2, [r3, #4]
 800ab04:	e7ba      	b.n	800aa7c <__gethex+0x3a8>
 800ab06:	6922      	ldr	r2, [r4, #16]
 800ab08:	9903      	ldr	r1, [sp, #12]
 800ab0a:	428a      	cmp	r2, r1
 800ab0c:	dd09      	ble.n	800ab22 <__gethex+0x44e>
 800ab0e:	2101      	movs	r1, #1
 800ab10:	0020      	movs	r0, r4
 800ab12:	f7ff fd75 	bl	800a600 <rshift>
 800ab16:	9b02      	ldr	r3, [sp, #8]
 800ab18:	3701      	adds	r7, #1
 800ab1a:	689b      	ldr	r3, [r3, #8]
 800ab1c:	42bb      	cmp	r3, r7
 800ab1e:	dac2      	bge.n	800aaa6 <__gethex+0x3d2>
 800ab20:	e6dc      	b.n	800a8dc <__gethex+0x208>
 800ab22:	221f      	movs	r2, #31
 800ab24:	9d01      	ldr	r5, [sp, #4]
 800ab26:	9901      	ldr	r1, [sp, #4]
 800ab28:	2601      	movs	r6, #1
 800ab2a:	4015      	ands	r5, r2
 800ab2c:	4211      	tst	r1, r2
 800ab2e:	d0bb      	beq.n	800aaa8 <__gethex+0x3d4>
 800ab30:	9a04      	ldr	r2, [sp, #16]
 800ab32:	189b      	adds	r3, r3, r2
 800ab34:	3b04      	subs	r3, #4
 800ab36:	6818      	ldr	r0, [r3, #0]
 800ab38:	f000 fa02 	bl	800af40 <__hi0bits>
 800ab3c:	2320      	movs	r3, #32
 800ab3e:	1b5d      	subs	r5, r3, r5
 800ab40:	42a8      	cmp	r0, r5
 800ab42:	dbe4      	blt.n	800ab0e <__gethex+0x43a>
 800ab44:	e7b0      	b.n	800aaa8 <__gethex+0x3d4>
 800ab46:	46c0      	nop			; (mov r8, r8)
 800ab48:	0800cf68 	.word	0x0800cf68

0800ab4c <L_shift>:
 800ab4c:	2308      	movs	r3, #8
 800ab4e:	b570      	push	{r4, r5, r6, lr}
 800ab50:	2520      	movs	r5, #32
 800ab52:	1a9a      	subs	r2, r3, r2
 800ab54:	0092      	lsls	r2, r2, #2
 800ab56:	1aad      	subs	r5, r5, r2
 800ab58:	6843      	ldr	r3, [r0, #4]
 800ab5a:	6806      	ldr	r6, [r0, #0]
 800ab5c:	001c      	movs	r4, r3
 800ab5e:	40ac      	lsls	r4, r5
 800ab60:	40d3      	lsrs	r3, r2
 800ab62:	4334      	orrs	r4, r6
 800ab64:	6004      	str	r4, [r0, #0]
 800ab66:	6043      	str	r3, [r0, #4]
 800ab68:	3004      	adds	r0, #4
 800ab6a:	4288      	cmp	r0, r1
 800ab6c:	d3f4      	bcc.n	800ab58 <L_shift+0xc>
 800ab6e:	bd70      	pop	{r4, r5, r6, pc}

0800ab70 <__match>:
 800ab70:	b530      	push	{r4, r5, lr}
 800ab72:	6803      	ldr	r3, [r0, #0]
 800ab74:	780c      	ldrb	r4, [r1, #0]
 800ab76:	3301      	adds	r3, #1
 800ab78:	2c00      	cmp	r4, #0
 800ab7a:	d102      	bne.n	800ab82 <__match+0x12>
 800ab7c:	6003      	str	r3, [r0, #0]
 800ab7e:	2001      	movs	r0, #1
 800ab80:	bd30      	pop	{r4, r5, pc}
 800ab82:	781a      	ldrb	r2, [r3, #0]
 800ab84:	0015      	movs	r5, r2
 800ab86:	3d41      	subs	r5, #65	; 0x41
 800ab88:	2d19      	cmp	r5, #25
 800ab8a:	d800      	bhi.n	800ab8e <__match+0x1e>
 800ab8c:	3220      	adds	r2, #32
 800ab8e:	3101      	adds	r1, #1
 800ab90:	42a2      	cmp	r2, r4
 800ab92:	d0ef      	beq.n	800ab74 <__match+0x4>
 800ab94:	2000      	movs	r0, #0
 800ab96:	e7f3      	b.n	800ab80 <__match+0x10>

0800ab98 <__hexnan>:
 800ab98:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ab9a:	680b      	ldr	r3, [r1, #0]
 800ab9c:	b08b      	sub	sp, #44	; 0x2c
 800ab9e:	9201      	str	r2, [sp, #4]
 800aba0:	9901      	ldr	r1, [sp, #4]
 800aba2:	115a      	asrs	r2, r3, #5
 800aba4:	0092      	lsls	r2, r2, #2
 800aba6:	188a      	adds	r2, r1, r2
 800aba8:	9202      	str	r2, [sp, #8]
 800abaa:	0019      	movs	r1, r3
 800abac:	221f      	movs	r2, #31
 800abae:	4011      	ands	r1, r2
 800abb0:	9008      	str	r0, [sp, #32]
 800abb2:	9106      	str	r1, [sp, #24]
 800abb4:	4213      	tst	r3, r2
 800abb6:	d002      	beq.n	800abbe <__hexnan+0x26>
 800abb8:	9b02      	ldr	r3, [sp, #8]
 800abba:	3304      	adds	r3, #4
 800abbc:	9302      	str	r3, [sp, #8]
 800abbe:	9b02      	ldr	r3, [sp, #8]
 800abc0:	2500      	movs	r5, #0
 800abc2:	1f1e      	subs	r6, r3, #4
 800abc4:	0037      	movs	r7, r6
 800abc6:	0034      	movs	r4, r6
 800abc8:	9b08      	ldr	r3, [sp, #32]
 800abca:	6035      	str	r5, [r6, #0]
 800abcc:	681b      	ldr	r3, [r3, #0]
 800abce:	9507      	str	r5, [sp, #28]
 800abd0:	9305      	str	r3, [sp, #20]
 800abd2:	9503      	str	r5, [sp, #12]
 800abd4:	9b05      	ldr	r3, [sp, #20]
 800abd6:	3301      	adds	r3, #1
 800abd8:	9309      	str	r3, [sp, #36]	; 0x24
 800abda:	9b05      	ldr	r3, [sp, #20]
 800abdc:	785b      	ldrb	r3, [r3, #1]
 800abde:	9304      	str	r3, [sp, #16]
 800abe0:	2b00      	cmp	r3, #0
 800abe2:	d028      	beq.n	800ac36 <__hexnan+0x9e>
 800abe4:	9804      	ldr	r0, [sp, #16]
 800abe6:	f7ff fd5f 	bl	800a6a8 <__hexdig_fun>
 800abea:	2800      	cmp	r0, #0
 800abec:	d154      	bne.n	800ac98 <__hexnan+0x100>
 800abee:	9b04      	ldr	r3, [sp, #16]
 800abf0:	2b20      	cmp	r3, #32
 800abf2:	d819      	bhi.n	800ac28 <__hexnan+0x90>
 800abf4:	9b03      	ldr	r3, [sp, #12]
 800abf6:	9a07      	ldr	r2, [sp, #28]
 800abf8:	4293      	cmp	r3, r2
 800abfa:	dd12      	ble.n	800ac22 <__hexnan+0x8a>
 800abfc:	42bc      	cmp	r4, r7
 800abfe:	d206      	bcs.n	800ac0e <__hexnan+0x76>
 800ac00:	2d07      	cmp	r5, #7
 800ac02:	dc04      	bgt.n	800ac0e <__hexnan+0x76>
 800ac04:	002a      	movs	r2, r5
 800ac06:	0039      	movs	r1, r7
 800ac08:	0020      	movs	r0, r4
 800ac0a:	f7ff ff9f 	bl	800ab4c <L_shift>
 800ac0e:	9b01      	ldr	r3, [sp, #4]
 800ac10:	2508      	movs	r5, #8
 800ac12:	429c      	cmp	r4, r3
 800ac14:	d905      	bls.n	800ac22 <__hexnan+0x8a>
 800ac16:	1f27      	subs	r7, r4, #4
 800ac18:	2500      	movs	r5, #0
 800ac1a:	003c      	movs	r4, r7
 800ac1c:	9b03      	ldr	r3, [sp, #12]
 800ac1e:	603d      	str	r5, [r7, #0]
 800ac20:	9307      	str	r3, [sp, #28]
 800ac22:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ac24:	9305      	str	r3, [sp, #20]
 800ac26:	e7d5      	b.n	800abd4 <__hexnan+0x3c>
 800ac28:	9b04      	ldr	r3, [sp, #16]
 800ac2a:	2b29      	cmp	r3, #41	; 0x29
 800ac2c:	d159      	bne.n	800ace2 <__hexnan+0x14a>
 800ac2e:	9b05      	ldr	r3, [sp, #20]
 800ac30:	9a08      	ldr	r2, [sp, #32]
 800ac32:	3302      	adds	r3, #2
 800ac34:	6013      	str	r3, [r2, #0]
 800ac36:	9b03      	ldr	r3, [sp, #12]
 800ac38:	2b00      	cmp	r3, #0
 800ac3a:	d052      	beq.n	800ace2 <__hexnan+0x14a>
 800ac3c:	42bc      	cmp	r4, r7
 800ac3e:	d206      	bcs.n	800ac4e <__hexnan+0xb6>
 800ac40:	2d07      	cmp	r5, #7
 800ac42:	dc04      	bgt.n	800ac4e <__hexnan+0xb6>
 800ac44:	002a      	movs	r2, r5
 800ac46:	0039      	movs	r1, r7
 800ac48:	0020      	movs	r0, r4
 800ac4a:	f7ff ff7f 	bl	800ab4c <L_shift>
 800ac4e:	9b01      	ldr	r3, [sp, #4]
 800ac50:	429c      	cmp	r4, r3
 800ac52:	d935      	bls.n	800acc0 <__hexnan+0x128>
 800ac54:	001a      	movs	r2, r3
 800ac56:	0023      	movs	r3, r4
 800ac58:	cb02      	ldmia	r3!, {r1}
 800ac5a:	c202      	stmia	r2!, {r1}
 800ac5c:	429e      	cmp	r6, r3
 800ac5e:	d2fb      	bcs.n	800ac58 <__hexnan+0xc0>
 800ac60:	9b02      	ldr	r3, [sp, #8]
 800ac62:	1c61      	adds	r1, r4, #1
 800ac64:	1eda      	subs	r2, r3, #3
 800ac66:	2304      	movs	r3, #4
 800ac68:	4291      	cmp	r1, r2
 800ac6a:	d805      	bhi.n	800ac78 <__hexnan+0xe0>
 800ac6c:	9b02      	ldr	r3, [sp, #8]
 800ac6e:	3b04      	subs	r3, #4
 800ac70:	1b1b      	subs	r3, r3, r4
 800ac72:	089b      	lsrs	r3, r3, #2
 800ac74:	3301      	adds	r3, #1
 800ac76:	009b      	lsls	r3, r3, #2
 800ac78:	9a01      	ldr	r2, [sp, #4]
 800ac7a:	18d3      	adds	r3, r2, r3
 800ac7c:	2200      	movs	r2, #0
 800ac7e:	c304      	stmia	r3!, {r2}
 800ac80:	429e      	cmp	r6, r3
 800ac82:	d2fc      	bcs.n	800ac7e <__hexnan+0xe6>
 800ac84:	6833      	ldr	r3, [r6, #0]
 800ac86:	2b00      	cmp	r3, #0
 800ac88:	d104      	bne.n	800ac94 <__hexnan+0xfc>
 800ac8a:	9b01      	ldr	r3, [sp, #4]
 800ac8c:	429e      	cmp	r6, r3
 800ac8e:	d126      	bne.n	800acde <__hexnan+0x146>
 800ac90:	2301      	movs	r3, #1
 800ac92:	6033      	str	r3, [r6, #0]
 800ac94:	2005      	movs	r0, #5
 800ac96:	e025      	b.n	800ace4 <__hexnan+0x14c>
 800ac98:	9b03      	ldr	r3, [sp, #12]
 800ac9a:	3501      	adds	r5, #1
 800ac9c:	3301      	adds	r3, #1
 800ac9e:	9303      	str	r3, [sp, #12]
 800aca0:	2d08      	cmp	r5, #8
 800aca2:	dd06      	ble.n	800acb2 <__hexnan+0x11a>
 800aca4:	9b01      	ldr	r3, [sp, #4]
 800aca6:	429c      	cmp	r4, r3
 800aca8:	d9bb      	bls.n	800ac22 <__hexnan+0x8a>
 800acaa:	2300      	movs	r3, #0
 800acac:	2501      	movs	r5, #1
 800acae:	3c04      	subs	r4, #4
 800acb0:	6023      	str	r3, [r4, #0]
 800acb2:	220f      	movs	r2, #15
 800acb4:	6823      	ldr	r3, [r4, #0]
 800acb6:	4010      	ands	r0, r2
 800acb8:	011b      	lsls	r3, r3, #4
 800acba:	4318      	orrs	r0, r3
 800acbc:	6020      	str	r0, [r4, #0]
 800acbe:	e7b0      	b.n	800ac22 <__hexnan+0x8a>
 800acc0:	9b06      	ldr	r3, [sp, #24]
 800acc2:	2b00      	cmp	r3, #0
 800acc4:	d0de      	beq.n	800ac84 <__hexnan+0xec>
 800acc6:	2120      	movs	r1, #32
 800acc8:	9a06      	ldr	r2, [sp, #24]
 800acca:	9b02      	ldr	r3, [sp, #8]
 800accc:	1a89      	subs	r1, r1, r2
 800acce:	2201      	movs	r2, #1
 800acd0:	4252      	negs	r2, r2
 800acd2:	40ca      	lsrs	r2, r1
 800acd4:	3b04      	subs	r3, #4
 800acd6:	6819      	ldr	r1, [r3, #0]
 800acd8:	400a      	ands	r2, r1
 800acda:	601a      	str	r2, [r3, #0]
 800acdc:	e7d2      	b.n	800ac84 <__hexnan+0xec>
 800acde:	3e04      	subs	r6, #4
 800ace0:	e7d0      	b.n	800ac84 <__hexnan+0xec>
 800ace2:	2004      	movs	r0, #4
 800ace4:	b00b      	add	sp, #44	; 0x2c
 800ace6:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800ace8 <_localeconv_r>:
 800ace8:	4800      	ldr	r0, [pc, #0]	; (800acec <_localeconv_r+0x4>)
 800acea:	4770      	bx	lr
 800acec:	20000174 	.word	0x20000174

0800acf0 <malloc>:
 800acf0:	b510      	push	{r4, lr}
 800acf2:	4b03      	ldr	r3, [pc, #12]	; (800ad00 <malloc+0x10>)
 800acf4:	0001      	movs	r1, r0
 800acf6:	6818      	ldr	r0, [r3, #0]
 800acf8:	f000 fd8c 	bl	800b814 <_malloc_r>
 800acfc:	bd10      	pop	{r4, pc}
 800acfe:	46c0      	nop			; (mov r8, r8)
 800ad00:	2000001c 	.word	0x2000001c

0800ad04 <__ascii_mbtowc>:
 800ad04:	b082      	sub	sp, #8
 800ad06:	2900      	cmp	r1, #0
 800ad08:	d100      	bne.n	800ad0c <__ascii_mbtowc+0x8>
 800ad0a:	a901      	add	r1, sp, #4
 800ad0c:	1e10      	subs	r0, r2, #0
 800ad0e:	d006      	beq.n	800ad1e <__ascii_mbtowc+0x1a>
 800ad10:	2b00      	cmp	r3, #0
 800ad12:	d006      	beq.n	800ad22 <__ascii_mbtowc+0x1e>
 800ad14:	7813      	ldrb	r3, [r2, #0]
 800ad16:	600b      	str	r3, [r1, #0]
 800ad18:	7810      	ldrb	r0, [r2, #0]
 800ad1a:	1e43      	subs	r3, r0, #1
 800ad1c:	4198      	sbcs	r0, r3
 800ad1e:	b002      	add	sp, #8
 800ad20:	4770      	bx	lr
 800ad22:	2002      	movs	r0, #2
 800ad24:	4240      	negs	r0, r0
 800ad26:	e7fa      	b.n	800ad1e <__ascii_mbtowc+0x1a>

0800ad28 <memchr>:
 800ad28:	b2c9      	uxtb	r1, r1
 800ad2a:	1882      	adds	r2, r0, r2
 800ad2c:	4290      	cmp	r0, r2
 800ad2e:	d101      	bne.n	800ad34 <memchr+0xc>
 800ad30:	2000      	movs	r0, #0
 800ad32:	4770      	bx	lr
 800ad34:	7803      	ldrb	r3, [r0, #0]
 800ad36:	428b      	cmp	r3, r1
 800ad38:	d0fb      	beq.n	800ad32 <memchr+0xa>
 800ad3a:	3001      	adds	r0, #1
 800ad3c:	e7f6      	b.n	800ad2c <memchr+0x4>

0800ad3e <memcpy>:
 800ad3e:	2300      	movs	r3, #0
 800ad40:	b510      	push	{r4, lr}
 800ad42:	429a      	cmp	r2, r3
 800ad44:	d100      	bne.n	800ad48 <memcpy+0xa>
 800ad46:	bd10      	pop	{r4, pc}
 800ad48:	5ccc      	ldrb	r4, [r1, r3]
 800ad4a:	54c4      	strb	r4, [r0, r3]
 800ad4c:	3301      	adds	r3, #1
 800ad4e:	e7f8      	b.n	800ad42 <memcpy+0x4>

0800ad50 <_Balloc>:
 800ad50:	b570      	push	{r4, r5, r6, lr}
 800ad52:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800ad54:	0006      	movs	r6, r0
 800ad56:	000c      	movs	r4, r1
 800ad58:	2d00      	cmp	r5, #0
 800ad5a:	d10e      	bne.n	800ad7a <_Balloc+0x2a>
 800ad5c:	2010      	movs	r0, #16
 800ad5e:	f7ff ffc7 	bl	800acf0 <malloc>
 800ad62:	1e02      	subs	r2, r0, #0
 800ad64:	6270      	str	r0, [r6, #36]	; 0x24
 800ad66:	d104      	bne.n	800ad72 <_Balloc+0x22>
 800ad68:	2166      	movs	r1, #102	; 0x66
 800ad6a:	4b19      	ldr	r3, [pc, #100]	; (800add0 <_Balloc+0x80>)
 800ad6c:	4819      	ldr	r0, [pc, #100]	; (800add4 <_Balloc+0x84>)
 800ad6e:	f000 ff61 	bl	800bc34 <__assert_func>
 800ad72:	6045      	str	r5, [r0, #4]
 800ad74:	6085      	str	r5, [r0, #8]
 800ad76:	6005      	str	r5, [r0, #0]
 800ad78:	60c5      	str	r5, [r0, #12]
 800ad7a:	6a75      	ldr	r5, [r6, #36]	; 0x24
 800ad7c:	68eb      	ldr	r3, [r5, #12]
 800ad7e:	2b00      	cmp	r3, #0
 800ad80:	d013      	beq.n	800adaa <_Balloc+0x5a>
 800ad82:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800ad84:	00a2      	lsls	r2, r4, #2
 800ad86:	68db      	ldr	r3, [r3, #12]
 800ad88:	189b      	adds	r3, r3, r2
 800ad8a:	6818      	ldr	r0, [r3, #0]
 800ad8c:	2800      	cmp	r0, #0
 800ad8e:	d118      	bne.n	800adc2 <_Balloc+0x72>
 800ad90:	2101      	movs	r1, #1
 800ad92:	000d      	movs	r5, r1
 800ad94:	40a5      	lsls	r5, r4
 800ad96:	1d6a      	adds	r2, r5, #5
 800ad98:	0030      	movs	r0, r6
 800ad9a:	0092      	lsls	r2, r2, #2
 800ad9c:	f000 fca1 	bl	800b6e2 <_calloc_r>
 800ada0:	2800      	cmp	r0, #0
 800ada2:	d00c      	beq.n	800adbe <_Balloc+0x6e>
 800ada4:	6044      	str	r4, [r0, #4]
 800ada6:	6085      	str	r5, [r0, #8]
 800ada8:	e00d      	b.n	800adc6 <_Balloc+0x76>
 800adaa:	2221      	movs	r2, #33	; 0x21
 800adac:	2104      	movs	r1, #4
 800adae:	0030      	movs	r0, r6
 800adb0:	f000 fc97 	bl	800b6e2 <_calloc_r>
 800adb4:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800adb6:	60e8      	str	r0, [r5, #12]
 800adb8:	68db      	ldr	r3, [r3, #12]
 800adba:	2b00      	cmp	r3, #0
 800adbc:	d1e1      	bne.n	800ad82 <_Balloc+0x32>
 800adbe:	2000      	movs	r0, #0
 800adc0:	bd70      	pop	{r4, r5, r6, pc}
 800adc2:	6802      	ldr	r2, [r0, #0]
 800adc4:	601a      	str	r2, [r3, #0]
 800adc6:	2300      	movs	r3, #0
 800adc8:	6103      	str	r3, [r0, #16]
 800adca:	60c3      	str	r3, [r0, #12]
 800adcc:	e7f8      	b.n	800adc0 <_Balloc+0x70>
 800adce:	46c0      	nop			; (mov r8, r8)
 800add0:	0800cef6 	.word	0x0800cef6
 800add4:	0800cff4 	.word	0x0800cff4

0800add8 <_Bfree>:
 800add8:	b570      	push	{r4, r5, r6, lr}
 800adda:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800addc:	0005      	movs	r5, r0
 800adde:	000c      	movs	r4, r1
 800ade0:	2e00      	cmp	r6, #0
 800ade2:	d10e      	bne.n	800ae02 <_Bfree+0x2a>
 800ade4:	2010      	movs	r0, #16
 800ade6:	f7ff ff83 	bl	800acf0 <malloc>
 800adea:	1e02      	subs	r2, r0, #0
 800adec:	6268      	str	r0, [r5, #36]	; 0x24
 800adee:	d104      	bne.n	800adfa <_Bfree+0x22>
 800adf0:	218a      	movs	r1, #138	; 0x8a
 800adf2:	4b09      	ldr	r3, [pc, #36]	; (800ae18 <_Bfree+0x40>)
 800adf4:	4809      	ldr	r0, [pc, #36]	; (800ae1c <_Bfree+0x44>)
 800adf6:	f000 ff1d 	bl	800bc34 <__assert_func>
 800adfa:	6046      	str	r6, [r0, #4]
 800adfc:	6086      	str	r6, [r0, #8]
 800adfe:	6006      	str	r6, [r0, #0]
 800ae00:	60c6      	str	r6, [r0, #12]
 800ae02:	2c00      	cmp	r4, #0
 800ae04:	d007      	beq.n	800ae16 <_Bfree+0x3e>
 800ae06:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800ae08:	6862      	ldr	r2, [r4, #4]
 800ae0a:	68db      	ldr	r3, [r3, #12]
 800ae0c:	0092      	lsls	r2, r2, #2
 800ae0e:	189b      	adds	r3, r3, r2
 800ae10:	681a      	ldr	r2, [r3, #0]
 800ae12:	6022      	str	r2, [r4, #0]
 800ae14:	601c      	str	r4, [r3, #0]
 800ae16:	bd70      	pop	{r4, r5, r6, pc}
 800ae18:	0800cef6 	.word	0x0800cef6
 800ae1c:	0800cff4 	.word	0x0800cff4

0800ae20 <__multadd>:
 800ae20:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ae22:	000e      	movs	r6, r1
 800ae24:	9001      	str	r0, [sp, #4]
 800ae26:	000c      	movs	r4, r1
 800ae28:	001d      	movs	r5, r3
 800ae2a:	2000      	movs	r0, #0
 800ae2c:	690f      	ldr	r7, [r1, #16]
 800ae2e:	3614      	adds	r6, #20
 800ae30:	6833      	ldr	r3, [r6, #0]
 800ae32:	3001      	adds	r0, #1
 800ae34:	b299      	uxth	r1, r3
 800ae36:	4351      	muls	r1, r2
 800ae38:	0c1b      	lsrs	r3, r3, #16
 800ae3a:	4353      	muls	r3, r2
 800ae3c:	1949      	adds	r1, r1, r5
 800ae3e:	0c0d      	lsrs	r5, r1, #16
 800ae40:	195b      	adds	r3, r3, r5
 800ae42:	0c1d      	lsrs	r5, r3, #16
 800ae44:	b289      	uxth	r1, r1
 800ae46:	041b      	lsls	r3, r3, #16
 800ae48:	185b      	adds	r3, r3, r1
 800ae4a:	c608      	stmia	r6!, {r3}
 800ae4c:	4287      	cmp	r7, r0
 800ae4e:	dcef      	bgt.n	800ae30 <__multadd+0x10>
 800ae50:	2d00      	cmp	r5, #0
 800ae52:	d022      	beq.n	800ae9a <__multadd+0x7a>
 800ae54:	68a3      	ldr	r3, [r4, #8]
 800ae56:	42bb      	cmp	r3, r7
 800ae58:	dc19      	bgt.n	800ae8e <__multadd+0x6e>
 800ae5a:	6863      	ldr	r3, [r4, #4]
 800ae5c:	9801      	ldr	r0, [sp, #4]
 800ae5e:	1c59      	adds	r1, r3, #1
 800ae60:	f7ff ff76 	bl	800ad50 <_Balloc>
 800ae64:	1e06      	subs	r6, r0, #0
 800ae66:	d105      	bne.n	800ae74 <__multadd+0x54>
 800ae68:	0002      	movs	r2, r0
 800ae6a:	21b5      	movs	r1, #181	; 0xb5
 800ae6c:	4b0c      	ldr	r3, [pc, #48]	; (800aea0 <__multadd+0x80>)
 800ae6e:	480d      	ldr	r0, [pc, #52]	; (800aea4 <__multadd+0x84>)
 800ae70:	f000 fee0 	bl	800bc34 <__assert_func>
 800ae74:	0021      	movs	r1, r4
 800ae76:	6923      	ldr	r3, [r4, #16]
 800ae78:	310c      	adds	r1, #12
 800ae7a:	1c9a      	adds	r2, r3, #2
 800ae7c:	0092      	lsls	r2, r2, #2
 800ae7e:	300c      	adds	r0, #12
 800ae80:	f7ff ff5d 	bl	800ad3e <memcpy>
 800ae84:	0021      	movs	r1, r4
 800ae86:	9801      	ldr	r0, [sp, #4]
 800ae88:	f7ff ffa6 	bl	800add8 <_Bfree>
 800ae8c:	0034      	movs	r4, r6
 800ae8e:	1d3b      	adds	r3, r7, #4
 800ae90:	009b      	lsls	r3, r3, #2
 800ae92:	18e3      	adds	r3, r4, r3
 800ae94:	605d      	str	r5, [r3, #4]
 800ae96:	1c7b      	adds	r3, r7, #1
 800ae98:	6123      	str	r3, [r4, #16]
 800ae9a:	0020      	movs	r0, r4
 800ae9c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800ae9e:	46c0      	nop			; (mov r8, r8)
 800aea0:	0800cf68 	.word	0x0800cf68
 800aea4:	0800cff4 	.word	0x0800cff4

0800aea8 <__s2b>:
 800aea8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800aeaa:	0006      	movs	r6, r0
 800aeac:	0018      	movs	r0, r3
 800aeae:	000c      	movs	r4, r1
 800aeb0:	3008      	adds	r0, #8
 800aeb2:	2109      	movs	r1, #9
 800aeb4:	9301      	str	r3, [sp, #4]
 800aeb6:	0015      	movs	r5, r2
 800aeb8:	f7f5 f9cc 	bl	8000254 <__divsi3>
 800aebc:	2301      	movs	r3, #1
 800aebe:	2100      	movs	r1, #0
 800aec0:	4283      	cmp	r3, r0
 800aec2:	db0a      	blt.n	800aeda <__s2b+0x32>
 800aec4:	0030      	movs	r0, r6
 800aec6:	f7ff ff43 	bl	800ad50 <_Balloc>
 800aeca:	1e01      	subs	r1, r0, #0
 800aecc:	d108      	bne.n	800aee0 <__s2b+0x38>
 800aece:	0002      	movs	r2, r0
 800aed0:	4b19      	ldr	r3, [pc, #100]	; (800af38 <__s2b+0x90>)
 800aed2:	481a      	ldr	r0, [pc, #104]	; (800af3c <__s2b+0x94>)
 800aed4:	31ce      	adds	r1, #206	; 0xce
 800aed6:	f000 fead 	bl	800bc34 <__assert_func>
 800aeda:	005b      	lsls	r3, r3, #1
 800aedc:	3101      	adds	r1, #1
 800aede:	e7ef      	b.n	800aec0 <__s2b+0x18>
 800aee0:	9b08      	ldr	r3, [sp, #32]
 800aee2:	6143      	str	r3, [r0, #20]
 800aee4:	2301      	movs	r3, #1
 800aee6:	6103      	str	r3, [r0, #16]
 800aee8:	2d09      	cmp	r5, #9
 800aeea:	dd18      	ble.n	800af1e <__s2b+0x76>
 800aeec:	0023      	movs	r3, r4
 800aeee:	3309      	adds	r3, #9
 800aef0:	001f      	movs	r7, r3
 800aef2:	9300      	str	r3, [sp, #0]
 800aef4:	1964      	adds	r4, r4, r5
 800aef6:	783b      	ldrb	r3, [r7, #0]
 800aef8:	220a      	movs	r2, #10
 800aefa:	0030      	movs	r0, r6
 800aefc:	3b30      	subs	r3, #48	; 0x30
 800aefe:	f7ff ff8f 	bl	800ae20 <__multadd>
 800af02:	3701      	adds	r7, #1
 800af04:	0001      	movs	r1, r0
 800af06:	42a7      	cmp	r7, r4
 800af08:	d1f5      	bne.n	800aef6 <__s2b+0x4e>
 800af0a:	002c      	movs	r4, r5
 800af0c:	9b00      	ldr	r3, [sp, #0]
 800af0e:	3c08      	subs	r4, #8
 800af10:	191c      	adds	r4, r3, r4
 800af12:	002f      	movs	r7, r5
 800af14:	9b01      	ldr	r3, [sp, #4]
 800af16:	429f      	cmp	r7, r3
 800af18:	db04      	blt.n	800af24 <__s2b+0x7c>
 800af1a:	0008      	movs	r0, r1
 800af1c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800af1e:	2509      	movs	r5, #9
 800af20:	340a      	adds	r4, #10
 800af22:	e7f6      	b.n	800af12 <__s2b+0x6a>
 800af24:	1b63      	subs	r3, r4, r5
 800af26:	5ddb      	ldrb	r3, [r3, r7]
 800af28:	220a      	movs	r2, #10
 800af2a:	0030      	movs	r0, r6
 800af2c:	3b30      	subs	r3, #48	; 0x30
 800af2e:	f7ff ff77 	bl	800ae20 <__multadd>
 800af32:	3701      	adds	r7, #1
 800af34:	0001      	movs	r1, r0
 800af36:	e7ed      	b.n	800af14 <__s2b+0x6c>
 800af38:	0800cf68 	.word	0x0800cf68
 800af3c:	0800cff4 	.word	0x0800cff4

0800af40 <__hi0bits>:
 800af40:	0003      	movs	r3, r0
 800af42:	0c02      	lsrs	r2, r0, #16
 800af44:	2000      	movs	r0, #0
 800af46:	4282      	cmp	r2, r0
 800af48:	d101      	bne.n	800af4e <__hi0bits+0xe>
 800af4a:	041b      	lsls	r3, r3, #16
 800af4c:	3010      	adds	r0, #16
 800af4e:	0e1a      	lsrs	r2, r3, #24
 800af50:	d101      	bne.n	800af56 <__hi0bits+0x16>
 800af52:	3008      	adds	r0, #8
 800af54:	021b      	lsls	r3, r3, #8
 800af56:	0f1a      	lsrs	r2, r3, #28
 800af58:	d101      	bne.n	800af5e <__hi0bits+0x1e>
 800af5a:	3004      	adds	r0, #4
 800af5c:	011b      	lsls	r3, r3, #4
 800af5e:	0f9a      	lsrs	r2, r3, #30
 800af60:	d101      	bne.n	800af66 <__hi0bits+0x26>
 800af62:	3002      	adds	r0, #2
 800af64:	009b      	lsls	r3, r3, #2
 800af66:	2b00      	cmp	r3, #0
 800af68:	db03      	blt.n	800af72 <__hi0bits+0x32>
 800af6a:	3001      	adds	r0, #1
 800af6c:	005b      	lsls	r3, r3, #1
 800af6e:	d400      	bmi.n	800af72 <__hi0bits+0x32>
 800af70:	2020      	movs	r0, #32
 800af72:	4770      	bx	lr

0800af74 <__lo0bits>:
 800af74:	6803      	ldr	r3, [r0, #0]
 800af76:	0002      	movs	r2, r0
 800af78:	2107      	movs	r1, #7
 800af7a:	0018      	movs	r0, r3
 800af7c:	4008      	ands	r0, r1
 800af7e:	420b      	tst	r3, r1
 800af80:	d00d      	beq.n	800af9e <__lo0bits+0x2a>
 800af82:	3906      	subs	r1, #6
 800af84:	2000      	movs	r0, #0
 800af86:	420b      	tst	r3, r1
 800af88:	d105      	bne.n	800af96 <__lo0bits+0x22>
 800af8a:	3002      	adds	r0, #2
 800af8c:	4203      	tst	r3, r0
 800af8e:	d003      	beq.n	800af98 <__lo0bits+0x24>
 800af90:	40cb      	lsrs	r3, r1
 800af92:	0008      	movs	r0, r1
 800af94:	6013      	str	r3, [r2, #0]
 800af96:	4770      	bx	lr
 800af98:	089b      	lsrs	r3, r3, #2
 800af9a:	6013      	str	r3, [r2, #0]
 800af9c:	e7fb      	b.n	800af96 <__lo0bits+0x22>
 800af9e:	b299      	uxth	r1, r3
 800afa0:	2900      	cmp	r1, #0
 800afa2:	d101      	bne.n	800afa8 <__lo0bits+0x34>
 800afa4:	2010      	movs	r0, #16
 800afa6:	0c1b      	lsrs	r3, r3, #16
 800afa8:	b2d9      	uxtb	r1, r3
 800afaa:	2900      	cmp	r1, #0
 800afac:	d101      	bne.n	800afb2 <__lo0bits+0x3e>
 800afae:	3008      	adds	r0, #8
 800afb0:	0a1b      	lsrs	r3, r3, #8
 800afb2:	0719      	lsls	r1, r3, #28
 800afb4:	d101      	bne.n	800afba <__lo0bits+0x46>
 800afb6:	3004      	adds	r0, #4
 800afb8:	091b      	lsrs	r3, r3, #4
 800afba:	0799      	lsls	r1, r3, #30
 800afbc:	d101      	bne.n	800afc2 <__lo0bits+0x4e>
 800afbe:	3002      	adds	r0, #2
 800afc0:	089b      	lsrs	r3, r3, #2
 800afc2:	07d9      	lsls	r1, r3, #31
 800afc4:	d4e9      	bmi.n	800af9a <__lo0bits+0x26>
 800afc6:	3001      	adds	r0, #1
 800afc8:	085b      	lsrs	r3, r3, #1
 800afca:	d1e6      	bne.n	800af9a <__lo0bits+0x26>
 800afcc:	2020      	movs	r0, #32
 800afce:	e7e2      	b.n	800af96 <__lo0bits+0x22>

0800afd0 <__i2b>:
 800afd0:	b510      	push	{r4, lr}
 800afd2:	000c      	movs	r4, r1
 800afd4:	2101      	movs	r1, #1
 800afd6:	f7ff febb 	bl	800ad50 <_Balloc>
 800afda:	2800      	cmp	r0, #0
 800afdc:	d106      	bne.n	800afec <__i2b+0x1c>
 800afde:	21a0      	movs	r1, #160	; 0xa0
 800afe0:	0002      	movs	r2, r0
 800afe2:	4b04      	ldr	r3, [pc, #16]	; (800aff4 <__i2b+0x24>)
 800afe4:	4804      	ldr	r0, [pc, #16]	; (800aff8 <__i2b+0x28>)
 800afe6:	0049      	lsls	r1, r1, #1
 800afe8:	f000 fe24 	bl	800bc34 <__assert_func>
 800afec:	2301      	movs	r3, #1
 800afee:	6144      	str	r4, [r0, #20]
 800aff0:	6103      	str	r3, [r0, #16]
 800aff2:	bd10      	pop	{r4, pc}
 800aff4:	0800cf68 	.word	0x0800cf68
 800aff8:	0800cff4 	.word	0x0800cff4

0800affc <__multiply>:
 800affc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800affe:	690b      	ldr	r3, [r1, #16]
 800b000:	0014      	movs	r4, r2
 800b002:	6912      	ldr	r2, [r2, #16]
 800b004:	000d      	movs	r5, r1
 800b006:	b089      	sub	sp, #36	; 0x24
 800b008:	4293      	cmp	r3, r2
 800b00a:	da01      	bge.n	800b010 <__multiply+0x14>
 800b00c:	0025      	movs	r5, r4
 800b00e:	000c      	movs	r4, r1
 800b010:	692f      	ldr	r7, [r5, #16]
 800b012:	6926      	ldr	r6, [r4, #16]
 800b014:	6869      	ldr	r1, [r5, #4]
 800b016:	19bb      	adds	r3, r7, r6
 800b018:	9302      	str	r3, [sp, #8]
 800b01a:	68ab      	ldr	r3, [r5, #8]
 800b01c:	19ba      	adds	r2, r7, r6
 800b01e:	4293      	cmp	r3, r2
 800b020:	da00      	bge.n	800b024 <__multiply+0x28>
 800b022:	3101      	adds	r1, #1
 800b024:	f7ff fe94 	bl	800ad50 <_Balloc>
 800b028:	9001      	str	r0, [sp, #4]
 800b02a:	2800      	cmp	r0, #0
 800b02c:	d106      	bne.n	800b03c <__multiply+0x40>
 800b02e:	215e      	movs	r1, #94	; 0x5e
 800b030:	0002      	movs	r2, r0
 800b032:	4b48      	ldr	r3, [pc, #288]	; (800b154 <__multiply+0x158>)
 800b034:	4848      	ldr	r0, [pc, #288]	; (800b158 <__multiply+0x15c>)
 800b036:	31ff      	adds	r1, #255	; 0xff
 800b038:	f000 fdfc 	bl	800bc34 <__assert_func>
 800b03c:	9b01      	ldr	r3, [sp, #4]
 800b03e:	2200      	movs	r2, #0
 800b040:	3314      	adds	r3, #20
 800b042:	469c      	mov	ip, r3
 800b044:	19bb      	adds	r3, r7, r6
 800b046:	009b      	lsls	r3, r3, #2
 800b048:	4463      	add	r3, ip
 800b04a:	9303      	str	r3, [sp, #12]
 800b04c:	4663      	mov	r3, ip
 800b04e:	9903      	ldr	r1, [sp, #12]
 800b050:	428b      	cmp	r3, r1
 800b052:	d32c      	bcc.n	800b0ae <__multiply+0xb2>
 800b054:	002b      	movs	r3, r5
 800b056:	0022      	movs	r2, r4
 800b058:	3314      	adds	r3, #20
 800b05a:	00bf      	lsls	r7, r7, #2
 800b05c:	3214      	adds	r2, #20
 800b05e:	9306      	str	r3, [sp, #24]
 800b060:	00b6      	lsls	r6, r6, #2
 800b062:	19db      	adds	r3, r3, r7
 800b064:	9304      	str	r3, [sp, #16]
 800b066:	1993      	adds	r3, r2, r6
 800b068:	9307      	str	r3, [sp, #28]
 800b06a:	2304      	movs	r3, #4
 800b06c:	9305      	str	r3, [sp, #20]
 800b06e:	002b      	movs	r3, r5
 800b070:	9904      	ldr	r1, [sp, #16]
 800b072:	3315      	adds	r3, #21
 800b074:	9200      	str	r2, [sp, #0]
 800b076:	4299      	cmp	r1, r3
 800b078:	d305      	bcc.n	800b086 <__multiply+0x8a>
 800b07a:	1b4b      	subs	r3, r1, r5
 800b07c:	3b15      	subs	r3, #21
 800b07e:	089b      	lsrs	r3, r3, #2
 800b080:	3301      	adds	r3, #1
 800b082:	009b      	lsls	r3, r3, #2
 800b084:	9305      	str	r3, [sp, #20]
 800b086:	9b07      	ldr	r3, [sp, #28]
 800b088:	9a00      	ldr	r2, [sp, #0]
 800b08a:	429a      	cmp	r2, r3
 800b08c:	d311      	bcc.n	800b0b2 <__multiply+0xb6>
 800b08e:	9b02      	ldr	r3, [sp, #8]
 800b090:	2b00      	cmp	r3, #0
 800b092:	dd06      	ble.n	800b0a2 <__multiply+0xa6>
 800b094:	9b03      	ldr	r3, [sp, #12]
 800b096:	3b04      	subs	r3, #4
 800b098:	9303      	str	r3, [sp, #12]
 800b09a:	681b      	ldr	r3, [r3, #0]
 800b09c:	9300      	str	r3, [sp, #0]
 800b09e:	2b00      	cmp	r3, #0
 800b0a0:	d053      	beq.n	800b14a <__multiply+0x14e>
 800b0a2:	9b01      	ldr	r3, [sp, #4]
 800b0a4:	9a02      	ldr	r2, [sp, #8]
 800b0a6:	0018      	movs	r0, r3
 800b0a8:	611a      	str	r2, [r3, #16]
 800b0aa:	b009      	add	sp, #36	; 0x24
 800b0ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b0ae:	c304      	stmia	r3!, {r2}
 800b0b0:	e7cd      	b.n	800b04e <__multiply+0x52>
 800b0b2:	9b00      	ldr	r3, [sp, #0]
 800b0b4:	681b      	ldr	r3, [r3, #0]
 800b0b6:	b298      	uxth	r0, r3
 800b0b8:	2800      	cmp	r0, #0
 800b0ba:	d01b      	beq.n	800b0f4 <__multiply+0xf8>
 800b0bc:	4667      	mov	r7, ip
 800b0be:	2400      	movs	r4, #0
 800b0c0:	9e06      	ldr	r6, [sp, #24]
 800b0c2:	ce02      	ldmia	r6!, {r1}
 800b0c4:	683a      	ldr	r2, [r7, #0]
 800b0c6:	b28b      	uxth	r3, r1
 800b0c8:	4343      	muls	r3, r0
 800b0ca:	b292      	uxth	r2, r2
 800b0cc:	189b      	adds	r3, r3, r2
 800b0ce:	191b      	adds	r3, r3, r4
 800b0d0:	0c0c      	lsrs	r4, r1, #16
 800b0d2:	4344      	muls	r4, r0
 800b0d4:	683a      	ldr	r2, [r7, #0]
 800b0d6:	0c11      	lsrs	r1, r2, #16
 800b0d8:	1861      	adds	r1, r4, r1
 800b0da:	0c1c      	lsrs	r4, r3, #16
 800b0dc:	1909      	adds	r1, r1, r4
 800b0de:	0c0c      	lsrs	r4, r1, #16
 800b0e0:	b29b      	uxth	r3, r3
 800b0e2:	0409      	lsls	r1, r1, #16
 800b0e4:	430b      	orrs	r3, r1
 800b0e6:	c708      	stmia	r7!, {r3}
 800b0e8:	9b04      	ldr	r3, [sp, #16]
 800b0ea:	42b3      	cmp	r3, r6
 800b0ec:	d8e9      	bhi.n	800b0c2 <__multiply+0xc6>
 800b0ee:	4663      	mov	r3, ip
 800b0f0:	9a05      	ldr	r2, [sp, #20]
 800b0f2:	509c      	str	r4, [r3, r2]
 800b0f4:	9b00      	ldr	r3, [sp, #0]
 800b0f6:	681b      	ldr	r3, [r3, #0]
 800b0f8:	0c1e      	lsrs	r6, r3, #16
 800b0fa:	d020      	beq.n	800b13e <__multiply+0x142>
 800b0fc:	4663      	mov	r3, ip
 800b0fe:	002c      	movs	r4, r5
 800b100:	4660      	mov	r0, ip
 800b102:	2700      	movs	r7, #0
 800b104:	681b      	ldr	r3, [r3, #0]
 800b106:	3414      	adds	r4, #20
 800b108:	6822      	ldr	r2, [r4, #0]
 800b10a:	b29b      	uxth	r3, r3
 800b10c:	b291      	uxth	r1, r2
 800b10e:	4371      	muls	r1, r6
 800b110:	6802      	ldr	r2, [r0, #0]
 800b112:	0c12      	lsrs	r2, r2, #16
 800b114:	1889      	adds	r1, r1, r2
 800b116:	19cf      	adds	r7, r1, r7
 800b118:	0439      	lsls	r1, r7, #16
 800b11a:	430b      	orrs	r3, r1
 800b11c:	6003      	str	r3, [r0, #0]
 800b11e:	cc02      	ldmia	r4!, {r1}
 800b120:	6843      	ldr	r3, [r0, #4]
 800b122:	0c09      	lsrs	r1, r1, #16
 800b124:	4371      	muls	r1, r6
 800b126:	b29b      	uxth	r3, r3
 800b128:	0c3f      	lsrs	r7, r7, #16
 800b12a:	18cb      	adds	r3, r1, r3
 800b12c:	9a04      	ldr	r2, [sp, #16]
 800b12e:	19db      	adds	r3, r3, r7
 800b130:	0c1f      	lsrs	r7, r3, #16
 800b132:	3004      	adds	r0, #4
 800b134:	42a2      	cmp	r2, r4
 800b136:	d8e7      	bhi.n	800b108 <__multiply+0x10c>
 800b138:	4662      	mov	r2, ip
 800b13a:	9905      	ldr	r1, [sp, #20]
 800b13c:	5053      	str	r3, [r2, r1]
 800b13e:	9b00      	ldr	r3, [sp, #0]
 800b140:	3304      	adds	r3, #4
 800b142:	9300      	str	r3, [sp, #0]
 800b144:	2304      	movs	r3, #4
 800b146:	449c      	add	ip, r3
 800b148:	e79d      	b.n	800b086 <__multiply+0x8a>
 800b14a:	9b02      	ldr	r3, [sp, #8]
 800b14c:	3b01      	subs	r3, #1
 800b14e:	9302      	str	r3, [sp, #8]
 800b150:	e79d      	b.n	800b08e <__multiply+0x92>
 800b152:	46c0      	nop			; (mov r8, r8)
 800b154:	0800cf68 	.word	0x0800cf68
 800b158:	0800cff4 	.word	0x0800cff4

0800b15c <__pow5mult>:
 800b15c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b15e:	2303      	movs	r3, #3
 800b160:	0015      	movs	r5, r2
 800b162:	0007      	movs	r7, r0
 800b164:	000e      	movs	r6, r1
 800b166:	401a      	ands	r2, r3
 800b168:	421d      	tst	r5, r3
 800b16a:	d008      	beq.n	800b17e <__pow5mult+0x22>
 800b16c:	4925      	ldr	r1, [pc, #148]	; (800b204 <__pow5mult+0xa8>)
 800b16e:	3a01      	subs	r2, #1
 800b170:	0092      	lsls	r2, r2, #2
 800b172:	5852      	ldr	r2, [r2, r1]
 800b174:	2300      	movs	r3, #0
 800b176:	0031      	movs	r1, r6
 800b178:	f7ff fe52 	bl	800ae20 <__multadd>
 800b17c:	0006      	movs	r6, r0
 800b17e:	10ad      	asrs	r5, r5, #2
 800b180:	d03d      	beq.n	800b1fe <__pow5mult+0xa2>
 800b182:	6a7c      	ldr	r4, [r7, #36]	; 0x24
 800b184:	2c00      	cmp	r4, #0
 800b186:	d10f      	bne.n	800b1a8 <__pow5mult+0x4c>
 800b188:	2010      	movs	r0, #16
 800b18a:	f7ff fdb1 	bl	800acf0 <malloc>
 800b18e:	1e02      	subs	r2, r0, #0
 800b190:	6278      	str	r0, [r7, #36]	; 0x24
 800b192:	d105      	bne.n	800b1a0 <__pow5mult+0x44>
 800b194:	21d7      	movs	r1, #215	; 0xd7
 800b196:	4b1c      	ldr	r3, [pc, #112]	; (800b208 <__pow5mult+0xac>)
 800b198:	481c      	ldr	r0, [pc, #112]	; (800b20c <__pow5mult+0xb0>)
 800b19a:	0049      	lsls	r1, r1, #1
 800b19c:	f000 fd4a 	bl	800bc34 <__assert_func>
 800b1a0:	6044      	str	r4, [r0, #4]
 800b1a2:	6084      	str	r4, [r0, #8]
 800b1a4:	6004      	str	r4, [r0, #0]
 800b1a6:	60c4      	str	r4, [r0, #12]
 800b1a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b1aa:	689c      	ldr	r4, [r3, #8]
 800b1ac:	9301      	str	r3, [sp, #4]
 800b1ae:	2c00      	cmp	r4, #0
 800b1b0:	d108      	bne.n	800b1c4 <__pow5mult+0x68>
 800b1b2:	0038      	movs	r0, r7
 800b1b4:	4916      	ldr	r1, [pc, #88]	; (800b210 <__pow5mult+0xb4>)
 800b1b6:	f7ff ff0b 	bl	800afd0 <__i2b>
 800b1ba:	9b01      	ldr	r3, [sp, #4]
 800b1bc:	0004      	movs	r4, r0
 800b1be:	6098      	str	r0, [r3, #8]
 800b1c0:	2300      	movs	r3, #0
 800b1c2:	6003      	str	r3, [r0, #0]
 800b1c4:	2301      	movs	r3, #1
 800b1c6:	421d      	tst	r5, r3
 800b1c8:	d00a      	beq.n	800b1e0 <__pow5mult+0x84>
 800b1ca:	0031      	movs	r1, r6
 800b1cc:	0022      	movs	r2, r4
 800b1ce:	0038      	movs	r0, r7
 800b1d0:	f7ff ff14 	bl	800affc <__multiply>
 800b1d4:	0031      	movs	r1, r6
 800b1d6:	9001      	str	r0, [sp, #4]
 800b1d8:	0038      	movs	r0, r7
 800b1da:	f7ff fdfd 	bl	800add8 <_Bfree>
 800b1de:	9e01      	ldr	r6, [sp, #4]
 800b1e0:	106d      	asrs	r5, r5, #1
 800b1e2:	d00c      	beq.n	800b1fe <__pow5mult+0xa2>
 800b1e4:	6820      	ldr	r0, [r4, #0]
 800b1e6:	2800      	cmp	r0, #0
 800b1e8:	d107      	bne.n	800b1fa <__pow5mult+0x9e>
 800b1ea:	0022      	movs	r2, r4
 800b1ec:	0021      	movs	r1, r4
 800b1ee:	0038      	movs	r0, r7
 800b1f0:	f7ff ff04 	bl	800affc <__multiply>
 800b1f4:	2300      	movs	r3, #0
 800b1f6:	6020      	str	r0, [r4, #0]
 800b1f8:	6003      	str	r3, [r0, #0]
 800b1fa:	0004      	movs	r4, r0
 800b1fc:	e7e2      	b.n	800b1c4 <__pow5mult+0x68>
 800b1fe:	0030      	movs	r0, r6
 800b200:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800b202:	46c0      	nop			; (mov r8, r8)
 800b204:	0800d140 	.word	0x0800d140
 800b208:	0800cef6 	.word	0x0800cef6
 800b20c:	0800cff4 	.word	0x0800cff4
 800b210:	00000271 	.word	0x00000271

0800b214 <__lshift>:
 800b214:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b216:	000c      	movs	r4, r1
 800b218:	0017      	movs	r7, r2
 800b21a:	6923      	ldr	r3, [r4, #16]
 800b21c:	1155      	asrs	r5, r2, #5
 800b21e:	b087      	sub	sp, #28
 800b220:	18eb      	adds	r3, r5, r3
 800b222:	9302      	str	r3, [sp, #8]
 800b224:	3301      	adds	r3, #1
 800b226:	9301      	str	r3, [sp, #4]
 800b228:	6849      	ldr	r1, [r1, #4]
 800b22a:	68a3      	ldr	r3, [r4, #8]
 800b22c:	9004      	str	r0, [sp, #16]
 800b22e:	9a01      	ldr	r2, [sp, #4]
 800b230:	4293      	cmp	r3, r2
 800b232:	db10      	blt.n	800b256 <__lshift+0x42>
 800b234:	9804      	ldr	r0, [sp, #16]
 800b236:	f7ff fd8b 	bl	800ad50 <_Balloc>
 800b23a:	2300      	movs	r3, #0
 800b23c:	0002      	movs	r2, r0
 800b23e:	0006      	movs	r6, r0
 800b240:	0019      	movs	r1, r3
 800b242:	3214      	adds	r2, #20
 800b244:	4298      	cmp	r0, r3
 800b246:	d10c      	bne.n	800b262 <__lshift+0x4e>
 800b248:	21da      	movs	r1, #218	; 0xda
 800b24a:	0002      	movs	r2, r0
 800b24c:	4b26      	ldr	r3, [pc, #152]	; (800b2e8 <__lshift+0xd4>)
 800b24e:	4827      	ldr	r0, [pc, #156]	; (800b2ec <__lshift+0xd8>)
 800b250:	31ff      	adds	r1, #255	; 0xff
 800b252:	f000 fcef 	bl	800bc34 <__assert_func>
 800b256:	3101      	adds	r1, #1
 800b258:	005b      	lsls	r3, r3, #1
 800b25a:	e7e8      	b.n	800b22e <__lshift+0x1a>
 800b25c:	0098      	lsls	r0, r3, #2
 800b25e:	5011      	str	r1, [r2, r0]
 800b260:	3301      	adds	r3, #1
 800b262:	42ab      	cmp	r3, r5
 800b264:	dbfa      	blt.n	800b25c <__lshift+0x48>
 800b266:	43eb      	mvns	r3, r5
 800b268:	17db      	asrs	r3, r3, #31
 800b26a:	401d      	ands	r5, r3
 800b26c:	211f      	movs	r1, #31
 800b26e:	0023      	movs	r3, r4
 800b270:	0038      	movs	r0, r7
 800b272:	00ad      	lsls	r5, r5, #2
 800b274:	1955      	adds	r5, r2, r5
 800b276:	6922      	ldr	r2, [r4, #16]
 800b278:	3314      	adds	r3, #20
 800b27a:	0092      	lsls	r2, r2, #2
 800b27c:	4008      	ands	r0, r1
 800b27e:	4684      	mov	ip, r0
 800b280:	189a      	adds	r2, r3, r2
 800b282:	420f      	tst	r7, r1
 800b284:	d02a      	beq.n	800b2dc <__lshift+0xc8>
 800b286:	3101      	adds	r1, #1
 800b288:	1a09      	subs	r1, r1, r0
 800b28a:	9105      	str	r1, [sp, #20]
 800b28c:	2100      	movs	r1, #0
 800b28e:	9503      	str	r5, [sp, #12]
 800b290:	4667      	mov	r7, ip
 800b292:	6818      	ldr	r0, [r3, #0]
 800b294:	40b8      	lsls	r0, r7
 800b296:	4301      	orrs	r1, r0
 800b298:	9803      	ldr	r0, [sp, #12]
 800b29a:	c002      	stmia	r0!, {r1}
 800b29c:	cb02      	ldmia	r3!, {r1}
 800b29e:	9003      	str	r0, [sp, #12]
 800b2a0:	9805      	ldr	r0, [sp, #20]
 800b2a2:	40c1      	lsrs	r1, r0
 800b2a4:	429a      	cmp	r2, r3
 800b2a6:	d8f3      	bhi.n	800b290 <__lshift+0x7c>
 800b2a8:	0020      	movs	r0, r4
 800b2aa:	3015      	adds	r0, #21
 800b2ac:	2304      	movs	r3, #4
 800b2ae:	4282      	cmp	r2, r0
 800b2b0:	d304      	bcc.n	800b2bc <__lshift+0xa8>
 800b2b2:	1b13      	subs	r3, r2, r4
 800b2b4:	3b15      	subs	r3, #21
 800b2b6:	089b      	lsrs	r3, r3, #2
 800b2b8:	3301      	adds	r3, #1
 800b2ba:	009b      	lsls	r3, r3, #2
 800b2bc:	50e9      	str	r1, [r5, r3]
 800b2be:	2900      	cmp	r1, #0
 800b2c0:	d002      	beq.n	800b2c8 <__lshift+0xb4>
 800b2c2:	9b02      	ldr	r3, [sp, #8]
 800b2c4:	3302      	adds	r3, #2
 800b2c6:	9301      	str	r3, [sp, #4]
 800b2c8:	9b01      	ldr	r3, [sp, #4]
 800b2ca:	9804      	ldr	r0, [sp, #16]
 800b2cc:	3b01      	subs	r3, #1
 800b2ce:	0021      	movs	r1, r4
 800b2d0:	6133      	str	r3, [r6, #16]
 800b2d2:	f7ff fd81 	bl	800add8 <_Bfree>
 800b2d6:	0030      	movs	r0, r6
 800b2d8:	b007      	add	sp, #28
 800b2da:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b2dc:	cb02      	ldmia	r3!, {r1}
 800b2de:	c502      	stmia	r5!, {r1}
 800b2e0:	429a      	cmp	r2, r3
 800b2e2:	d8fb      	bhi.n	800b2dc <__lshift+0xc8>
 800b2e4:	e7f0      	b.n	800b2c8 <__lshift+0xb4>
 800b2e6:	46c0      	nop			; (mov r8, r8)
 800b2e8:	0800cf68 	.word	0x0800cf68
 800b2ec:	0800cff4 	.word	0x0800cff4

0800b2f0 <__mcmp>:
 800b2f0:	6902      	ldr	r2, [r0, #16]
 800b2f2:	690b      	ldr	r3, [r1, #16]
 800b2f4:	b530      	push	{r4, r5, lr}
 800b2f6:	0004      	movs	r4, r0
 800b2f8:	1ad0      	subs	r0, r2, r3
 800b2fa:	429a      	cmp	r2, r3
 800b2fc:	d10d      	bne.n	800b31a <__mcmp+0x2a>
 800b2fe:	009b      	lsls	r3, r3, #2
 800b300:	3414      	adds	r4, #20
 800b302:	3114      	adds	r1, #20
 800b304:	18e2      	adds	r2, r4, r3
 800b306:	18c9      	adds	r1, r1, r3
 800b308:	3a04      	subs	r2, #4
 800b30a:	3904      	subs	r1, #4
 800b30c:	6815      	ldr	r5, [r2, #0]
 800b30e:	680b      	ldr	r3, [r1, #0]
 800b310:	429d      	cmp	r5, r3
 800b312:	d003      	beq.n	800b31c <__mcmp+0x2c>
 800b314:	2001      	movs	r0, #1
 800b316:	429d      	cmp	r5, r3
 800b318:	d303      	bcc.n	800b322 <__mcmp+0x32>
 800b31a:	bd30      	pop	{r4, r5, pc}
 800b31c:	4294      	cmp	r4, r2
 800b31e:	d3f3      	bcc.n	800b308 <__mcmp+0x18>
 800b320:	e7fb      	b.n	800b31a <__mcmp+0x2a>
 800b322:	4240      	negs	r0, r0
 800b324:	e7f9      	b.n	800b31a <__mcmp+0x2a>
	...

0800b328 <__mdiff>:
 800b328:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b32a:	000e      	movs	r6, r1
 800b32c:	0007      	movs	r7, r0
 800b32e:	0011      	movs	r1, r2
 800b330:	0030      	movs	r0, r6
 800b332:	b087      	sub	sp, #28
 800b334:	0014      	movs	r4, r2
 800b336:	f7ff ffdb 	bl	800b2f0 <__mcmp>
 800b33a:	1e05      	subs	r5, r0, #0
 800b33c:	d110      	bne.n	800b360 <__mdiff+0x38>
 800b33e:	0001      	movs	r1, r0
 800b340:	0038      	movs	r0, r7
 800b342:	f7ff fd05 	bl	800ad50 <_Balloc>
 800b346:	1e02      	subs	r2, r0, #0
 800b348:	d104      	bne.n	800b354 <__mdiff+0x2c>
 800b34a:	4b40      	ldr	r3, [pc, #256]	; (800b44c <__mdiff+0x124>)
 800b34c:	4940      	ldr	r1, [pc, #256]	; (800b450 <__mdiff+0x128>)
 800b34e:	4841      	ldr	r0, [pc, #260]	; (800b454 <__mdiff+0x12c>)
 800b350:	f000 fc70 	bl	800bc34 <__assert_func>
 800b354:	2301      	movs	r3, #1
 800b356:	6145      	str	r5, [r0, #20]
 800b358:	6103      	str	r3, [r0, #16]
 800b35a:	0010      	movs	r0, r2
 800b35c:	b007      	add	sp, #28
 800b35e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b360:	2301      	movs	r3, #1
 800b362:	9301      	str	r3, [sp, #4]
 800b364:	2800      	cmp	r0, #0
 800b366:	db04      	blt.n	800b372 <__mdiff+0x4a>
 800b368:	0023      	movs	r3, r4
 800b36a:	0034      	movs	r4, r6
 800b36c:	001e      	movs	r6, r3
 800b36e:	2300      	movs	r3, #0
 800b370:	9301      	str	r3, [sp, #4]
 800b372:	0038      	movs	r0, r7
 800b374:	6861      	ldr	r1, [r4, #4]
 800b376:	f7ff fceb 	bl	800ad50 <_Balloc>
 800b37a:	1e02      	subs	r2, r0, #0
 800b37c:	d103      	bne.n	800b386 <__mdiff+0x5e>
 800b37e:	2190      	movs	r1, #144	; 0x90
 800b380:	4b32      	ldr	r3, [pc, #200]	; (800b44c <__mdiff+0x124>)
 800b382:	0089      	lsls	r1, r1, #2
 800b384:	e7e3      	b.n	800b34e <__mdiff+0x26>
 800b386:	9b01      	ldr	r3, [sp, #4]
 800b388:	2700      	movs	r7, #0
 800b38a:	60c3      	str	r3, [r0, #12]
 800b38c:	6920      	ldr	r0, [r4, #16]
 800b38e:	3414      	adds	r4, #20
 800b390:	9401      	str	r4, [sp, #4]
 800b392:	9b01      	ldr	r3, [sp, #4]
 800b394:	0084      	lsls	r4, r0, #2
 800b396:	191b      	adds	r3, r3, r4
 800b398:	0034      	movs	r4, r6
 800b39a:	9302      	str	r3, [sp, #8]
 800b39c:	6933      	ldr	r3, [r6, #16]
 800b39e:	3414      	adds	r4, #20
 800b3a0:	0099      	lsls	r1, r3, #2
 800b3a2:	1863      	adds	r3, r4, r1
 800b3a4:	9303      	str	r3, [sp, #12]
 800b3a6:	0013      	movs	r3, r2
 800b3a8:	3314      	adds	r3, #20
 800b3aa:	469c      	mov	ip, r3
 800b3ac:	9305      	str	r3, [sp, #20]
 800b3ae:	9b01      	ldr	r3, [sp, #4]
 800b3b0:	9304      	str	r3, [sp, #16]
 800b3b2:	9b04      	ldr	r3, [sp, #16]
 800b3b4:	cc02      	ldmia	r4!, {r1}
 800b3b6:	cb20      	ldmia	r3!, {r5}
 800b3b8:	9304      	str	r3, [sp, #16]
 800b3ba:	b2ab      	uxth	r3, r5
 800b3bc:	19df      	adds	r7, r3, r7
 800b3be:	b28b      	uxth	r3, r1
 800b3c0:	1afb      	subs	r3, r7, r3
 800b3c2:	0c09      	lsrs	r1, r1, #16
 800b3c4:	0c2d      	lsrs	r5, r5, #16
 800b3c6:	1a6d      	subs	r5, r5, r1
 800b3c8:	1419      	asrs	r1, r3, #16
 800b3ca:	186d      	adds	r5, r5, r1
 800b3cc:	4661      	mov	r1, ip
 800b3ce:	142f      	asrs	r7, r5, #16
 800b3d0:	b29b      	uxth	r3, r3
 800b3d2:	042d      	lsls	r5, r5, #16
 800b3d4:	432b      	orrs	r3, r5
 800b3d6:	c108      	stmia	r1!, {r3}
 800b3d8:	9b03      	ldr	r3, [sp, #12]
 800b3da:	468c      	mov	ip, r1
 800b3dc:	42a3      	cmp	r3, r4
 800b3de:	d8e8      	bhi.n	800b3b2 <__mdiff+0x8a>
 800b3e0:	0031      	movs	r1, r6
 800b3e2:	9c03      	ldr	r4, [sp, #12]
 800b3e4:	3115      	adds	r1, #21
 800b3e6:	2304      	movs	r3, #4
 800b3e8:	428c      	cmp	r4, r1
 800b3ea:	d304      	bcc.n	800b3f6 <__mdiff+0xce>
 800b3ec:	1ba3      	subs	r3, r4, r6
 800b3ee:	3b15      	subs	r3, #21
 800b3f0:	089b      	lsrs	r3, r3, #2
 800b3f2:	3301      	adds	r3, #1
 800b3f4:	009b      	lsls	r3, r3, #2
 800b3f6:	9901      	ldr	r1, [sp, #4]
 800b3f8:	18cc      	adds	r4, r1, r3
 800b3fa:	9905      	ldr	r1, [sp, #20]
 800b3fc:	0026      	movs	r6, r4
 800b3fe:	18cb      	adds	r3, r1, r3
 800b400:	469c      	mov	ip, r3
 800b402:	9902      	ldr	r1, [sp, #8]
 800b404:	428e      	cmp	r6, r1
 800b406:	d310      	bcc.n	800b42a <__mdiff+0x102>
 800b408:	9e02      	ldr	r6, [sp, #8]
 800b40a:	1ee1      	subs	r1, r4, #3
 800b40c:	2500      	movs	r5, #0
 800b40e:	428e      	cmp	r6, r1
 800b410:	d304      	bcc.n	800b41c <__mdiff+0xf4>
 800b412:	0031      	movs	r1, r6
 800b414:	3103      	adds	r1, #3
 800b416:	1b0c      	subs	r4, r1, r4
 800b418:	08a4      	lsrs	r4, r4, #2
 800b41a:	00a5      	lsls	r5, r4, #2
 800b41c:	195b      	adds	r3, r3, r5
 800b41e:	3b04      	subs	r3, #4
 800b420:	6819      	ldr	r1, [r3, #0]
 800b422:	2900      	cmp	r1, #0
 800b424:	d00f      	beq.n	800b446 <__mdiff+0x11e>
 800b426:	6110      	str	r0, [r2, #16]
 800b428:	e797      	b.n	800b35a <__mdiff+0x32>
 800b42a:	ce02      	ldmia	r6!, {r1}
 800b42c:	b28d      	uxth	r5, r1
 800b42e:	19ed      	adds	r5, r5, r7
 800b430:	0c0f      	lsrs	r7, r1, #16
 800b432:	1429      	asrs	r1, r5, #16
 800b434:	1879      	adds	r1, r7, r1
 800b436:	140f      	asrs	r7, r1, #16
 800b438:	b2ad      	uxth	r5, r5
 800b43a:	0409      	lsls	r1, r1, #16
 800b43c:	430d      	orrs	r5, r1
 800b43e:	4661      	mov	r1, ip
 800b440:	c120      	stmia	r1!, {r5}
 800b442:	468c      	mov	ip, r1
 800b444:	e7dd      	b.n	800b402 <__mdiff+0xda>
 800b446:	3801      	subs	r0, #1
 800b448:	e7e9      	b.n	800b41e <__mdiff+0xf6>
 800b44a:	46c0      	nop			; (mov r8, r8)
 800b44c:	0800cf68 	.word	0x0800cf68
 800b450:	00000232 	.word	0x00000232
 800b454:	0800cff4 	.word	0x0800cff4

0800b458 <__ulp>:
 800b458:	4b0f      	ldr	r3, [pc, #60]	; (800b498 <__ulp+0x40>)
 800b45a:	4019      	ands	r1, r3
 800b45c:	4b0f      	ldr	r3, [pc, #60]	; (800b49c <__ulp+0x44>)
 800b45e:	18c9      	adds	r1, r1, r3
 800b460:	2900      	cmp	r1, #0
 800b462:	dd04      	ble.n	800b46e <__ulp+0x16>
 800b464:	2200      	movs	r2, #0
 800b466:	000b      	movs	r3, r1
 800b468:	0010      	movs	r0, r2
 800b46a:	0019      	movs	r1, r3
 800b46c:	4770      	bx	lr
 800b46e:	4249      	negs	r1, r1
 800b470:	2200      	movs	r2, #0
 800b472:	2300      	movs	r3, #0
 800b474:	1509      	asrs	r1, r1, #20
 800b476:	2913      	cmp	r1, #19
 800b478:	dc04      	bgt.n	800b484 <__ulp+0x2c>
 800b47a:	2080      	movs	r0, #128	; 0x80
 800b47c:	0300      	lsls	r0, r0, #12
 800b47e:	4108      	asrs	r0, r1
 800b480:	0003      	movs	r3, r0
 800b482:	e7f1      	b.n	800b468 <__ulp+0x10>
 800b484:	3914      	subs	r1, #20
 800b486:	2001      	movs	r0, #1
 800b488:	291e      	cmp	r1, #30
 800b48a:	dc02      	bgt.n	800b492 <__ulp+0x3a>
 800b48c:	2080      	movs	r0, #128	; 0x80
 800b48e:	0600      	lsls	r0, r0, #24
 800b490:	40c8      	lsrs	r0, r1
 800b492:	0002      	movs	r2, r0
 800b494:	e7e8      	b.n	800b468 <__ulp+0x10>
 800b496:	46c0      	nop			; (mov r8, r8)
 800b498:	7ff00000 	.word	0x7ff00000
 800b49c:	fcc00000 	.word	0xfcc00000

0800b4a0 <__b2d>:
 800b4a0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b4a2:	0006      	movs	r6, r0
 800b4a4:	6903      	ldr	r3, [r0, #16]
 800b4a6:	3614      	adds	r6, #20
 800b4a8:	009b      	lsls	r3, r3, #2
 800b4aa:	18f3      	adds	r3, r6, r3
 800b4ac:	1f1d      	subs	r5, r3, #4
 800b4ae:	682c      	ldr	r4, [r5, #0]
 800b4b0:	000f      	movs	r7, r1
 800b4b2:	0020      	movs	r0, r4
 800b4b4:	9301      	str	r3, [sp, #4]
 800b4b6:	f7ff fd43 	bl	800af40 <__hi0bits>
 800b4ba:	2320      	movs	r3, #32
 800b4bc:	1a1b      	subs	r3, r3, r0
 800b4be:	491f      	ldr	r1, [pc, #124]	; (800b53c <__b2d+0x9c>)
 800b4c0:	603b      	str	r3, [r7, #0]
 800b4c2:	280a      	cmp	r0, #10
 800b4c4:	dc16      	bgt.n	800b4f4 <__b2d+0x54>
 800b4c6:	230b      	movs	r3, #11
 800b4c8:	0027      	movs	r7, r4
 800b4ca:	1a1b      	subs	r3, r3, r0
 800b4cc:	40df      	lsrs	r7, r3
 800b4ce:	4339      	orrs	r1, r7
 800b4d0:	469c      	mov	ip, r3
 800b4d2:	000b      	movs	r3, r1
 800b4d4:	2100      	movs	r1, #0
 800b4d6:	42ae      	cmp	r6, r5
 800b4d8:	d202      	bcs.n	800b4e0 <__b2d+0x40>
 800b4da:	9901      	ldr	r1, [sp, #4]
 800b4dc:	3908      	subs	r1, #8
 800b4de:	6809      	ldr	r1, [r1, #0]
 800b4e0:	3015      	adds	r0, #21
 800b4e2:	4084      	lsls	r4, r0
 800b4e4:	4660      	mov	r0, ip
 800b4e6:	40c1      	lsrs	r1, r0
 800b4e8:	430c      	orrs	r4, r1
 800b4ea:	0022      	movs	r2, r4
 800b4ec:	0010      	movs	r0, r2
 800b4ee:	0019      	movs	r1, r3
 800b4f0:	b003      	add	sp, #12
 800b4f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b4f4:	2700      	movs	r7, #0
 800b4f6:	42ae      	cmp	r6, r5
 800b4f8:	d202      	bcs.n	800b500 <__b2d+0x60>
 800b4fa:	9d01      	ldr	r5, [sp, #4]
 800b4fc:	3d08      	subs	r5, #8
 800b4fe:	682f      	ldr	r7, [r5, #0]
 800b500:	230b      	movs	r3, #11
 800b502:	425b      	negs	r3, r3
 800b504:	469c      	mov	ip, r3
 800b506:	4484      	add	ip, r0
 800b508:	280b      	cmp	r0, #11
 800b50a:	d013      	beq.n	800b534 <__b2d+0x94>
 800b50c:	4663      	mov	r3, ip
 800b50e:	2020      	movs	r0, #32
 800b510:	409c      	lsls	r4, r3
 800b512:	1ac0      	subs	r0, r0, r3
 800b514:	003b      	movs	r3, r7
 800b516:	40c3      	lsrs	r3, r0
 800b518:	431c      	orrs	r4, r3
 800b51a:	4321      	orrs	r1, r4
 800b51c:	000b      	movs	r3, r1
 800b51e:	2100      	movs	r1, #0
 800b520:	42b5      	cmp	r5, r6
 800b522:	d901      	bls.n	800b528 <__b2d+0x88>
 800b524:	3d04      	subs	r5, #4
 800b526:	6829      	ldr	r1, [r5, #0]
 800b528:	4664      	mov	r4, ip
 800b52a:	40c1      	lsrs	r1, r0
 800b52c:	40a7      	lsls	r7, r4
 800b52e:	430f      	orrs	r7, r1
 800b530:	003a      	movs	r2, r7
 800b532:	e7db      	b.n	800b4ec <__b2d+0x4c>
 800b534:	4321      	orrs	r1, r4
 800b536:	000b      	movs	r3, r1
 800b538:	e7fa      	b.n	800b530 <__b2d+0x90>
 800b53a:	46c0      	nop			; (mov r8, r8)
 800b53c:	3ff00000 	.word	0x3ff00000

0800b540 <__d2b>:
 800b540:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b542:	2101      	movs	r1, #1
 800b544:	0014      	movs	r4, r2
 800b546:	001e      	movs	r6, r3
 800b548:	9f08      	ldr	r7, [sp, #32]
 800b54a:	f7ff fc01 	bl	800ad50 <_Balloc>
 800b54e:	1e05      	subs	r5, r0, #0
 800b550:	d105      	bne.n	800b55e <__d2b+0x1e>
 800b552:	0002      	movs	r2, r0
 800b554:	4b26      	ldr	r3, [pc, #152]	; (800b5f0 <__d2b+0xb0>)
 800b556:	4927      	ldr	r1, [pc, #156]	; (800b5f4 <__d2b+0xb4>)
 800b558:	4827      	ldr	r0, [pc, #156]	; (800b5f8 <__d2b+0xb8>)
 800b55a:	f000 fb6b 	bl	800bc34 <__assert_func>
 800b55e:	0333      	lsls	r3, r6, #12
 800b560:	0076      	lsls	r6, r6, #1
 800b562:	0b1b      	lsrs	r3, r3, #12
 800b564:	0d76      	lsrs	r6, r6, #21
 800b566:	d124      	bne.n	800b5b2 <__d2b+0x72>
 800b568:	9301      	str	r3, [sp, #4]
 800b56a:	2c00      	cmp	r4, #0
 800b56c:	d027      	beq.n	800b5be <__d2b+0x7e>
 800b56e:	4668      	mov	r0, sp
 800b570:	9400      	str	r4, [sp, #0]
 800b572:	f7ff fcff 	bl	800af74 <__lo0bits>
 800b576:	9c00      	ldr	r4, [sp, #0]
 800b578:	2800      	cmp	r0, #0
 800b57a:	d01e      	beq.n	800b5ba <__d2b+0x7a>
 800b57c:	9b01      	ldr	r3, [sp, #4]
 800b57e:	2120      	movs	r1, #32
 800b580:	001a      	movs	r2, r3
 800b582:	1a09      	subs	r1, r1, r0
 800b584:	408a      	lsls	r2, r1
 800b586:	40c3      	lsrs	r3, r0
 800b588:	4322      	orrs	r2, r4
 800b58a:	616a      	str	r2, [r5, #20]
 800b58c:	9301      	str	r3, [sp, #4]
 800b58e:	9c01      	ldr	r4, [sp, #4]
 800b590:	61ac      	str	r4, [r5, #24]
 800b592:	1e63      	subs	r3, r4, #1
 800b594:	419c      	sbcs	r4, r3
 800b596:	3401      	adds	r4, #1
 800b598:	612c      	str	r4, [r5, #16]
 800b59a:	2e00      	cmp	r6, #0
 800b59c:	d018      	beq.n	800b5d0 <__d2b+0x90>
 800b59e:	4b17      	ldr	r3, [pc, #92]	; (800b5fc <__d2b+0xbc>)
 800b5a0:	18f6      	adds	r6, r6, r3
 800b5a2:	2335      	movs	r3, #53	; 0x35
 800b5a4:	1836      	adds	r6, r6, r0
 800b5a6:	1a18      	subs	r0, r3, r0
 800b5a8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b5aa:	603e      	str	r6, [r7, #0]
 800b5ac:	6018      	str	r0, [r3, #0]
 800b5ae:	0028      	movs	r0, r5
 800b5b0:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800b5b2:	2280      	movs	r2, #128	; 0x80
 800b5b4:	0352      	lsls	r2, r2, #13
 800b5b6:	4313      	orrs	r3, r2
 800b5b8:	e7d6      	b.n	800b568 <__d2b+0x28>
 800b5ba:	616c      	str	r4, [r5, #20]
 800b5bc:	e7e7      	b.n	800b58e <__d2b+0x4e>
 800b5be:	a801      	add	r0, sp, #4
 800b5c0:	f7ff fcd8 	bl	800af74 <__lo0bits>
 800b5c4:	2401      	movs	r4, #1
 800b5c6:	9b01      	ldr	r3, [sp, #4]
 800b5c8:	612c      	str	r4, [r5, #16]
 800b5ca:	616b      	str	r3, [r5, #20]
 800b5cc:	3020      	adds	r0, #32
 800b5ce:	e7e4      	b.n	800b59a <__d2b+0x5a>
 800b5d0:	4b0b      	ldr	r3, [pc, #44]	; (800b600 <__d2b+0xc0>)
 800b5d2:	18c0      	adds	r0, r0, r3
 800b5d4:	4b0b      	ldr	r3, [pc, #44]	; (800b604 <__d2b+0xc4>)
 800b5d6:	6038      	str	r0, [r7, #0]
 800b5d8:	18e3      	adds	r3, r4, r3
 800b5da:	009b      	lsls	r3, r3, #2
 800b5dc:	18eb      	adds	r3, r5, r3
 800b5de:	6958      	ldr	r0, [r3, #20]
 800b5e0:	f7ff fcae 	bl	800af40 <__hi0bits>
 800b5e4:	0164      	lsls	r4, r4, #5
 800b5e6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b5e8:	1a24      	subs	r4, r4, r0
 800b5ea:	601c      	str	r4, [r3, #0]
 800b5ec:	e7df      	b.n	800b5ae <__d2b+0x6e>
 800b5ee:	46c0      	nop			; (mov r8, r8)
 800b5f0:	0800cf68 	.word	0x0800cf68
 800b5f4:	0000030a 	.word	0x0000030a
 800b5f8:	0800cff4 	.word	0x0800cff4
 800b5fc:	fffffbcd 	.word	0xfffffbcd
 800b600:	fffffbce 	.word	0xfffffbce
 800b604:	3fffffff 	.word	0x3fffffff

0800b608 <__ratio>:
 800b608:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b60a:	b087      	sub	sp, #28
 800b60c:	000f      	movs	r7, r1
 800b60e:	a904      	add	r1, sp, #16
 800b610:	0006      	movs	r6, r0
 800b612:	f7ff ff45 	bl	800b4a0 <__b2d>
 800b616:	9000      	str	r0, [sp, #0]
 800b618:	9101      	str	r1, [sp, #4]
 800b61a:	9c00      	ldr	r4, [sp, #0]
 800b61c:	9d01      	ldr	r5, [sp, #4]
 800b61e:	0038      	movs	r0, r7
 800b620:	a905      	add	r1, sp, #20
 800b622:	f7ff ff3d 	bl	800b4a0 <__b2d>
 800b626:	9002      	str	r0, [sp, #8]
 800b628:	9103      	str	r1, [sp, #12]
 800b62a:	9a02      	ldr	r2, [sp, #8]
 800b62c:	9b03      	ldr	r3, [sp, #12]
 800b62e:	6931      	ldr	r1, [r6, #16]
 800b630:	6938      	ldr	r0, [r7, #16]
 800b632:	9e05      	ldr	r6, [sp, #20]
 800b634:	1a08      	subs	r0, r1, r0
 800b636:	9904      	ldr	r1, [sp, #16]
 800b638:	0140      	lsls	r0, r0, #5
 800b63a:	1b89      	subs	r1, r1, r6
 800b63c:	1841      	adds	r1, r0, r1
 800b63e:	0508      	lsls	r0, r1, #20
 800b640:	2900      	cmp	r1, #0
 800b642:	dd07      	ble.n	800b654 <__ratio+0x4c>
 800b644:	9901      	ldr	r1, [sp, #4]
 800b646:	1845      	adds	r5, r0, r1
 800b648:	0020      	movs	r0, r4
 800b64a:	0029      	movs	r1, r5
 800b64c:	f7f5 ff5c 	bl	8001508 <__aeabi_ddiv>
 800b650:	b007      	add	sp, #28
 800b652:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b654:	9903      	ldr	r1, [sp, #12]
 800b656:	1a0b      	subs	r3, r1, r0
 800b658:	e7f6      	b.n	800b648 <__ratio+0x40>

0800b65a <__copybits>:
 800b65a:	b570      	push	{r4, r5, r6, lr}
 800b65c:	0014      	movs	r4, r2
 800b65e:	0005      	movs	r5, r0
 800b660:	3901      	subs	r1, #1
 800b662:	6913      	ldr	r3, [r2, #16]
 800b664:	1149      	asrs	r1, r1, #5
 800b666:	3101      	adds	r1, #1
 800b668:	0089      	lsls	r1, r1, #2
 800b66a:	3414      	adds	r4, #20
 800b66c:	009b      	lsls	r3, r3, #2
 800b66e:	1841      	adds	r1, r0, r1
 800b670:	18e3      	adds	r3, r4, r3
 800b672:	42a3      	cmp	r3, r4
 800b674:	d80d      	bhi.n	800b692 <__copybits+0x38>
 800b676:	0014      	movs	r4, r2
 800b678:	3411      	adds	r4, #17
 800b67a:	2500      	movs	r5, #0
 800b67c:	429c      	cmp	r4, r3
 800b67e:	d803      	bhi.n	800b688 <__copybits+0x2e>
 800b680:	1a9b      	subs	r3, r3, r2
 800b682:	3b11      	subs	r3, #17
 800b684:	089b      	lsrs	r3, r3, #2
 800b686:	009d      	lsls	r5, r3, #2
 800b688:	2300      	movs	r3, #0
 800b68a:	1940      	adds	r0, r0, r5
 800b68c:	4281      	cmp	r1, r0
 800b68e:	d803      	bhi.n	800b698 <__copybits+0x3e>
 800b690:	bd70      	pop	{r4, r5, r6, pc}
 800b692:	cc40      	ldmia	r4!, {r6}
 800b694:	c540      	stmia	r5!, {r6}
 800b696:	e7ec      	b.n	800b672 <__copybits+0x18>
 800b698:	c008      	stmia	r0!, {r3}
 800b69a:	e7f7      	b.n	800b68c <__copybits+0x32>

0800b69c <__any_on>:
 800b69c:	0002      	movs	r2, r0
 800b69e:	6900      	ldr	r0, [r0, #16]
 800b6a0:	b510      	push	{r4, lr}
 800b6a2:	3214      	adds	r2, #20
 800b6a4:	114b      	asrs	r3, r1, #5
 800b6a6:	4298      	cmp	r0, r3
 800b6a8:	db13      	blt.n	800b6d2 <__any_on+0x36>
 800b6aa:	dd0c      	ble.n	800b6c6 <__any_on+0x2a>
 800b6ac:	241f      	movs	r4, #31
 800b6ae:	0008      	movs	r0, r1
 800b6b0:	4020      	ands	r0, r4
 800b6b2:	4221      	tst	r1, r4
 800b6b4:	d007      	beq.n	800b6c6 <__any_on+0x2a>
 800b6b6:	0099      	lsls	r1, r3, #2
 800b6b8:	588c      	ldr	r4, [r1, r2]
 800b6ba:	0021      	movs	r1, r4
 800b6bc:	40c1      	lsrs	r1, r0
 800b6be:	4081      	lsls	r1, r0
 800b6c0:	2001      	movs	r0, #1
 800b6c2:	428c      	cmp	r4, r1
 800b6c4:	d104      	bne.n	800b6d0 <__any_on+0x34>
 800b6c6:	009b      	lsls	r3, r3, #2
 800b6c8:	18d3      	adds	r3, r2, r3
 800b6ca:	4293      	cmp	r3, r2
 800b6cc:	d803      	bhi.n	800b6d6 <__any_on+0x3a>
 800b6ce:	2000      	movs	r0, #0
 800b6d0:	bd10      	pop	{r4, pc}
 800b6d2:	0003      	movs	r3, r0
 800b6d4:	e7f7      	b.n	800b6c6 <__any_on+0x2a>
 800b6d6:	3b04      	subs	r3, #4
 800b6d8:	6819      	ldr	r1, [r3, #0]
 800b6da:	2900      	cmp	r1, #0
 800b6dc:	d0f5      	beq.n	800b6ca <__any_on+0x2e>
 800b6de:	2001      	movs	r0, #1
 800b6e0:	e7f6      	b.n	800b6d0 <__any_on+0x34>

0800b6e2 <_calloc_r>:
 800b6e2:	b570      	push	{r4, r5, r6, lr}
 800b6e4:	0c13      	lsrs	r3, r2, #16
 800b6e6:	0c0d      	lsrs	r5, r1, #16
 800b6e8:	d11e      	bne.n	800b728 <_calloc_r+0x46>
 800b6ea:	2b00      	cmp	r3, #0
 800b6ec:	d10c      	bne.n	800b708 <_calloc_r+0x26>
 800b6ee:	b289      	uxth	r1, r1
 800b6f0:	b294      	uxth	r4, r2
 800b6f2:	434c      	muls	r4, r1
 800b6f4:	0021      	movs	r1, r4
 800b6f6:	f000 f88d 	bl	800b814 <_malloc_r>
 800b6fa:	1e05      	subs	r5, r0, #0
 800b6fc:	d01b      	beq.n	800b736 <_calloc_r+0x54>
 800b6fe:	0022      	movs	r2, r4
 800b700:	2100      	movs	r1, #0
 800b702:	f7fc fb6f 	bl	8007de4 <memset>
 800b706:	e016      	b.n	800b736 <_calloc_r+0x54>
 800b708:	1c1d      	adds	r5, r3, #0
 800b70a:	1c0b      	adds	r3, r1, #0
 800b70c:	b292      	uxth	r2, r2
 800b70e:	b289      	uxth	r1, r1
 800b710:	b29c      	uxth	r4, r3
 800b712:	4351      	muls	r1, r2
 800b714:	b2ab      	uxth	r3, r5
 800b716:	4363      	muls	r3, r4
 800b718:	0c0c      	lsrs	r4, r1, #16
 800b71a:	191c      	adds	r4, r3, r4
 800b71c:	0c22      	lsrs	r2, r4, #16
 800b71e:	d107      	bne.n	800b730 <_calloc_r+0x4e>
 800b720:	0424      	lsls	r4, r4, #16
 800b722:	b289      	uxth	r1, r1
 800b724:	430c      	orrs	r4, r1
 800b726:	e7e5      	b.n	800b6f4 <_calloc_r+0x12>
 800b728:	2b00      	cmp	r3, #0
 800b72a:	d101      	bne.n	800b730 <_calloc_r+0x4e>
 800b72c:	1c13      	adds	r3, r2, #0
 800b72e:	e7ed      	b.n	800b70c <_calloc_r+0x2a>
 800b730:	230c      	movs	r3, #12
 800b732:	2500      	movs	r5, #0
 800b734:	6003      	str	r3, [r0, #0]
 800b736:	0028      	movs	r0, r5
 800b738:	bd70      	pop	{r4, r5, r6, pc}
	...

0800b73c <_free_r>:
 800b73c:	b570      	push	{r4, r5, r6, lr}
 800b73e:	0005      	movs	r5, r0
 800b740:	2900      	cmp	r1, #0
 800b742:	d010      	beq.n	800b766 <_free_r+0x2a>
 800b744:	1f0c      	subs	r4, r1, #4
 800b746:	6823      	ldr	r3, [r4, #0]
 800b748:	2b00      	cmp	r3, #0
 800b74a:	da00      	bge.n	800b74e <_free_r+0x12>
 800b74c:	18e4      	adds	r4, r4, r3
 800b74e:	0028      	movs	r0, r5
 800b750:	f000 fab2 	bl	800bcb8 <__malloc_lock>
 800b754:	4a1d      	ldr	r2, [pc, #116]	; (800b7cc <_free_r+0x90>)
 800b756:	6813      	ldr	r3, [r2, #0]
 800b758:	2b00      	cmp	r3, #0
 800b75a:	d105      	bne.n	800b768 <_free_r+0x2c>
 800b75c:	6063      	str	r3, [r4, #4]
 800b75e:	6014      	str	r4, [r2, #0]
 800b760:	0028      	movs	r0, r5
 800b762:	f000 fab1 	bl	800bcc8 <__malloc_unlock>
 800b766:	bd70      	pop	{r4, r5, r6, pc}
 800b768:	42a3      	cmp	r3, r4
 800b76a:	d908      	bls.n	800b77e <_free_r+0x42>
 800b76c:	6821      	ldr	r1, [r4, #0]
 800b76e:	1860      	adds	r0, r4, r1
 800b770:	4283      	cmp	r3, r0
 800b772:	d1f3      	bne.n	800b75c <_free_r+0x20>
 800b774:	6818      	ldr	r0, [r3, #0]
 800b776:	685b      	ldr	r3, [r3, #4]
 800b778:	1841      	adds	r1, r0, r1
 800b77a:	6021      	str	r1, [r4, #0]
 800b77c:	e7ee      	b.n	800b75c <_free_r+0x20>
 800b77e:	001a      	movs	r2, r3
 800b780:	685b      	ldr	r3, [r3, #4]
 800b782:	2b00      	cmp	r3, #0
 800b784:	d001      	beq.n	800b78a <_free_r+0x4e>
 800b786:	42a3      	cmp	r3, r4
 800b788:	d9f9      	bls.n	800b77e <_free_r+0x42>
 800b78a:	6811      	ldr	r1, [r2, #0]
 800b78c:	1850      	adds	r0, r2, r1
 800b78e:	42a0      	cmp	r0, r4
 800b790:	d10b      	bne.n	800b7aa <_free_r+0x6e>
 800b792:	6820      	ldr	r0, [r4, #0]
 800b794:	1809      	adds	r1, r1, r0
 800b796:	1850      	adds	r0, r2, r1
 800b798:	6011      	str	r1, [r2, #0]
 800b79a:	4283      	cmp	r3, r0
 800b79c:	d1e0      	bne.n	800b760 <_free_r+0x24>
 800b79e:	6818      	ldr	r0, [r3, #0]
 800b7a0:	685b      	ldr	r3, [r3, #4]
 800b7a2:	1841      	adds	r1, r0, r1
 800b7a4:	6011      	str	r1, [r2, #0]
 800b7a6:	6053      	str	r3, [r2, #4]
 800b7a8:	e7da      	b.n	800b760 <_free_r+0x24>
 800b7aa:	42a0      	cmp	r0, r4
 800b7ac:	d902      	bls.n	800b7b4 <_free_r+0x78>
 800b7ae:	230c      	movs	r3, #12
 800b7b0:	602b      	str	r3, [r5, #0]
 800b7b2:	e7d5      	b.n	800b760 <_free_r+0x24>
 800b7b4:	6821      	ldr	r1, [r4, #0]
 800b7b6:	1860      	adds	r0, r4, r1
 800b7b8:	4283      	cmp	r3, r0
 800b7ba:	d103      	bne.n	800b7c4 <_free_r+0x88>
 800b7bc:	6818      	ldr	r0, [r3, #0]
 800b7be:	685b      	ldr	r3, [r3, #4]
 800b7c0:	1841      	adds	r1, r0, r1
 800b7c2:	6021      	str	r1, [r4, #0]
 800b7c4:	6063      	str	r3, [r4, #4]
 800b7c6:	6054      	str	r4, [r2, #4]
 800b7c8:	e7ca      	b.n	800b760 <_free_r+0x24>
 800b7ca:	46c0      	nop			; (mov r8, r8)
 800b7cc:	200003b4 	.word	0x200003b4

0800b7d0 <sbrk_aligned>:
 800b7d0:	b570      	push	{r4, r5, r6, lr}
 800b7d2:	4e0f      	ldr	r6, [pc, #60]	; (800b810 <sbrk_aligned+0x40>)
 800b7d4:	000d      	movs	r5, r1
 800b7d6:	6831      	ldr	r1, [r6, #0]
 800b7d8:	0004      	movs	r4, r0
 800b7da:	2900      	cmp	r1, #0
 800b7dc:	d102      	bne.n	800b7e4 <sbrk_aligned+0x14>
 800b7de:	f000 f9f7 	bl	800bbd0 <_sbrk_r>
 800b7e2:	6030      	str	r0, [r6, #0]
 800b7e4:	0029      	movs	r1, r5
 800b7e6:	0020      	movs	r0, r4
 800b7e8:	f000 f9f2 	bl	800bbd0 <_sbrk_r>
 800b7ec:	1c43      	adds	r3, r0, #1
 800b7ee:	d00a      	beq.n	800b806 <sbrk_aligned+0x36>
 800b7f0:	2303      	movs	r3, #3
 800b7f2:	1cc5      	adds	r5, r0, #3
 800b7f4:	439d      	bics	r5, r3
 800b7f6:	42a8      	cmp	r0, r5
 800b7f8:	d007      	beq.n	800b80a <sbrk_aligned+0x3a>
 800b7fa:	1a29      	subs	r1, r5, r0
 800b7fc:	0020      	movs	r0, r4
 800b7fe:	f000 f9e7 	bl	800bbd0 <_sbrk_r>
 800b802:	1c43      	adds	r3, r0, #1
 800b804:	d101      	bne.n	800b80a <sbrk_aligned+0x3a>
 800b806:	2501      	movs	r5, #1
 800b808:	426d      	negs	r5, r5
 800b80a:	0028      	movs	r0, r5
 800b80c:	bd70      	pop	{r4, r5, r6, pc}
 800b80e:	46c0      	nop			; (mov r8, r8)
 800b810:	200003b8 	.word	0x200003b8

0800b814 <_malloc_r>:
 800b814:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b816:	2203      	movs	r2, #3
 800b818:	1ccb      	adds	r3, r1, #3
 800b81a:	4393      	bics	r3, r2
 800b81c:	3308      	adds	r3, #8
 800b81e:	0006      	movs	r6, r0
 800b820:	001f      	movs	r7, r3
 800b822:	2b0c      	cmp	r3, #12
 800b824:	d232      	bcs.n	800b88c <_malloc_r+0x78>
 800b826:	270c      	movs	r7, #12
 800b828:	42b9      	cmp	r1, r7
 800b82a:	d831      	bhi.n	800b890 <_malloc_r+0x7c>
 800b82c:	0030      	movs	r0, r6
 800b82e:	f000 fa43 	bl	800bcb8 <__malloc_lock>
 800b832:	4d32      	ldr	r5, [pc, #200]	; (800b8fc <_malloc_r+0xe8>)
 800b834:	682b      	ldr	r3, [r5, #0]
 800b836:	001c      	movs	r4, r3
 800b838:	2c00      	cmp	r4, #0
 800b83a:	d12e      	bne.n	800b89a <_malloc_r+0x86>
 800b83c:	0039      	movs	r1, r7
 800b83e:	0030      	movs	r0, r6
 800b840:	f7ff ffc6 	bl	800b7d0 <sbrk_aligned>
 800b844:	0004      	movs	r4, r0
 800b846:	1c43      	adds	r3, r0, #1
 800b848:	d11e      	bne.n	800b888 <_malloc_r+0x74>
 800b84a:	682c      	ldr	r4, [r5, #0]
 800b84c:	0025      	movs	r5, r4
 800b84e:	2d00      	cmp	r5, #0
 800b850:	d14a      	bne.n	800b8e8 <_malloc_r+0xd4>
 800b852:	6823      	ldr	r3, [r4, #0]
 800b854:	0029      	movs	r1, r5
 800b856:	18e3      	adds	r3, r4, r3
 800b858:	0030      	movs	r0, r6
 800b85a:	9301      	str	r3, [sp, #4]
 800b85c:	f000 f9b8 	bl	800bbd0 <_sbrk_r>
 800b860:	9b01      	ldr	r3, [sp, #4]
 800b862:	4283      	cmp	r3, r0
 800b864:	d143      	bne.n	800b8ee <_malloc_r+0xda>
 800b866:	6823      	ldr	r3, [r4, #0]
 800b868:	3703      	adds	r7, #3
 800b86a:	1aff      	subs	r7, r7, r3
 800b86c:	2303      	movs	r3, #3
 800b86e:	439f      	bics	r7, r3
 800b870:	3708      	adds	r7, #8
 800b872:	2f0c      	cmp	r7, #12
 800b874:	d200      	bcs.n	800b878 <_malloc_r+0x64>
 800b876:	270c      	movs	r7, #12
 800b878:	0039      	movs	r1, r7
 800b87a:	0030      	movs	r0, r6
 800b87c:	f7ff ffa8 	bl	800b7d0 <sbrk_aligned>
 800b880:	1c43      	adds	r3, r0, #1
 800b882:	d034      	beq.n	800b8ee <_malloc_r+0xda>
 800b884:	6823      	ldr	r3, [r4, #0]
 800b886:	19df      	adds	r7, r3, r7
 800b888:	6027      	str	r7, [r4, #0]
 800b88a:	e013      	b.n	800b8b4 <_malloc_r+0xa0>
 800b88c:	2b00      	cmp	r3, #0
 800b88e:	dacb      	bge.n	800b828 <_malloc_r+0x14>
 800b890:	230c      	movs	r3, #12
 800b892:	2500      	movs	r5, #0
 800b894:	6033      	str	r3, [r6, #0]
 800b896:	0028      	movs	r0, r5
 800b898:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800b89a:	6822      	ldr	r2, [r4, #0]
 800b89c:	1bd1      	subs	r1, r2, r7
 800b89e:	d420      	bmi.n	800b8e2 <_malloc_r+0xce>
 800b8a0:	290b      	cmp	r1, #11
 800b8a2:	d917      	bls.n	800b8d4 <_malloc_r+0xc0>
 800b8a4:	19e2      	adds	r2, r4, r7
 800b8a6:	6027      	str	r7, [r4, #0]
 800b8a8:	42a3      	cmp	r3, r4
 800b8aa:	d111      	bne.n	800b8d0 <_malloc_r+0xbc>
 800b8ac:	602a      	str	r2, [r5, #0]
 800b8ae:	6863      	ldr	r3, [r4, #4]
 800b8b0:	6011      	str	r1, [r2, #0]
 800b8b2:	6053      	str	r3, [r2, #4]
 800b8b4:	0030      	movs	r0, r6
 800b8b6:	0025      	movs	r5, r4
 800b8b8:	f000 fa06 	bl	800bcc8 <__malloc_unlock>
 800b8bc:	2207      	movs	r2, #7
 800b8be:	350b      	adds	r5, #11
 800b8c0:	1d23      	adds	r3, r4, #4
 800b8c2:	4395      	bics	r5, r2
 800b8c4:	1aea      	subs	r2, r5, r3
 800b8c6:	429d      	cmp	r5, r3
 800b8c8:	d0e5      	beq.n	800b896 <_malloc_r+0x82>
 800b8ca:	1b5b      	subs	r3, r3, r5
 800b8cc:	50a3      	str	r3, [r4, r2]
 800b8ce:	e7e2      	b.n	800b896 <_malloc_r+0x82>
 800b8d0:	605a      	str	r2, [r3, #4]
 800b8d2:	e7ec      	b.n	800b8ae <_malloc_r+0x9a>
 800b8d4:	6862      	ldr	r2, [r4, #4]
 800b8d6:	42a3      	cmp	r3, r4
 800b8d8:	d101      	bne.n	800b8de <_malloc_r+0xca>
 800b8da:	602a      	str	r2, [r5, #0]
 800b8dc:	e7ea      	b.n	800b8b4 <_malloc_r+0xa0>
 800b8de:	605a      	str	r2, [r3, #4]
 800b8e0:	e7e8      	b.n	800b8b4 <_malloc_r+0xa0>
 800b8e2:	0023      	movs	r3, r4
 800b8e4:	6864      	ldr	r4, [r4, #4]
 800b8e6:	e7a7      	b.n	800b838 <_malloc_r+0x24>
 800b8e8:	002c      	movs	r4, r5
 800b8ea:	686d      	ldr	r5, [r5, #4]
 800b8ec:	e7af      	b.n	800b84e <_malloc_r+0x3a>
 800b8ee:	230c      	movs	r3, #12
 800b8f0:	0030      	movs	r0, r6
 800b8f2:	6033      	str	r3, [r6, #0]
 800b8f4:	f000 f9e8 	bl	800bcc8 <__malloc_unlock>
 800b8f8:	e7cd      	b.n	800b896 <_malloc_r+0x82>
 800b8fa:	46c0      	nop			; (mov r8, r8)
 800b8fc:	200003b4 	.word	0x200003b4

0800b900 <__ssputs_r>:
 800b900:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b902:	688e      	ldr	r6, [r1, #8]
 800b904:	b085      	sub	sp, #20
 800b906:	0007      	movs	r7, r0
 800b908:	000c      	movs	r4, r1
 800b90a:	9203      	str	r2, [sp, #12]
 800b90c:	9301      	str	r3, [sp, #4]
 800b90e:	429e      	cmp	r6, r3
 800b910:	d83c      	bhi.n	800b98c <__ssputs_r+0x8c>
 800b912:	2390      	movs	r3, #144	; 0x90
 800b914:	898a      	ldrh	r2, [r1, #12]
 800b916:	00db      	lsls	r3, r3, #3
 800b918:	421a      	tst	r2, r3
 800b91a:	d034      	beq.n	800b986 <__ssputs_r+0x86>
 800b91c:	6909      	ldr	r1, [r1, #16]
 800b91e:	6823      	ldr	r3, [r4, #0]
 800b920:	6960      	ldr	r0, [r4, #20]
 800b922:	1a5b      	subs	r3, r3, r1
 800b924:	9302      	str	r3, [sp, #8]
 800b926:	2303      	movs	r3, #3
 800b928:	4343      	muls	r3, r0
 800b92a:	0fdd      	lsrs	r5, r3, #31
 800b92c:	18ed      	adds	r5, r5, r3
 800b92e:	9b01      	ldr	r3, [sp, #4]
 800b930:	9802      	ldr	r0, [sp, #8]
 800b932:	3301      	adds	r3, #1
 800b934:	181b      	adds	r3, r3, r0
 800b936:	106d      	asrs	r5, r5, #1
 800b938:	42ab      	cmp	r3, r5
 800b93a:	d900      	bls.n	800b93e <__ssputs_r+0x3e>
 800b93c:	001d      	movs	r5, r3
 800b93e:	0553      	lsls	r3, r2, #21
 800b940:	d532      	bpl.n	800b9a8 <__ssputs_r+0xa8>
 800b942:	0029      	movs	r1, r5
 800b944:	0038      	movs	r0, r7
 800b946:	f7ff ff65 	bl	800b814 <_malloc_r>
 800b94a:	1e06      	subs	r6, r0, #0
 800b94c:	d109      	bne.n	800b962 <__ssputs_r+0x62>
 800b94e:	230c      	movs	r3, #12
 800b950:	603b      	str	r3, [r7, #0]
 800b952:	2340      	movs	r3, #64	; 0x40
 800b954:	2001      	movs	r0, #1
 800b956:	89a2      	ldrh	r2, [r4, #12]
 800b958:	4240      	negs	r0, r0
 800b95a:	4313      	orrs	r3, r2
 800b95c:	81a3      	strh	r3, [r4, #12]
 800b95e:	b005      	add	sp, #20
 800b960:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b962:	9a02      	ldr	r2, [sp, #8]
 800b964:	6921      	ldr	r1, [r4, #16]
 800b966:	f7ff f9ea 	bl	800ad3e <memcpy>
 800b96a:	89a3      	ldrh	r3, [r4, #12]
 800b96c:	4a14      	ldr	r2, [pc, #80]	; (800b9c0 <__ssputs_r+0xc0>)
 800b96e:	401a      	ands	r2, r3
 800b970:	2380      	movs	r3, #128	; 0x80
 800b972:	4313      	orrs	r3, r2
 800b974:	81a3      	strh	r3, [r4, #12]
 800b976:	9b02      	ldr	r3, [sp, #8]
 800b978:	6126      	str	r6, [r4, #16]
 800b97a:	18f6      	adds	r6, r6, r3
 800b97c:	6026      	str	r6, [r4, #0]
 800b97e:	6165      	str	r5, [r4, #20]
 800b980:	9e01      	ldr	r6, [sp, #4]
 800b982:	1aed      	subs	r5, r5, r3
 800b984:	60a5      	str	r5, [r4, #8]
 800b986:	9b01      	ldr	r3, [sp, #4]
 800b988:	429e      	cmp	r6, r3
 800b98a:	d900      	bls.n	800b98e <__ssputs_r+0x8e>
 800b98c:	9e01      	ldr	r6, [sp, #4]
 800b98e:	0032      	movs	r2, r6
 800b990:	9903      	ldr	r1, [sp, #12]
 800b992:	6820      	ldr	r0, [r4, #0]
 800b994:	f000 f97c 	bl	800bc90 <memmove>
 800b998:	68a3      	ldr	r3, [r4, #8]
 800b99a:	2000      	movs	r0, #0
 800b99c:	1b9b      	subs	r3, r3, r6
 800b99e:	60a3      	str	r3, [r4, #8]
 800b9a0:	6823      	ldr	r3, [r4, #0]
 800b9a2:	199e      	adds	r6, r3, r6
 800b9a4:	6026      	str	r6, [r4, #0]
 800b9a6:	e7da      	b.n	800b95e <__ssputs_r+0x5e>
 800b9a8:	002a      	movs	r2, r5
 800b9aa:	0038      	movs	r0, r7
 800b9ac:	f000 f994 	bl	800bcd8 <_realloc_r>
 800b9b0:	1e06      	subs	r6, r0, #0
 800b9b2:	d1e0      	bne.n	800b976 <__ssputs_r+0x76>
 800b9b4:	0038      	movs	r0, r7
 800b9b6:	6921      	ldr	r1, [r4, #16]
 800b9b8:	f7ff fec0 	bl	800b73c <_free_r>
 800b9bc:	e7c7      	b.n	800b94e <__ssputs_r+0x4e>
 800b9be:	46c0      	nop			; (mov r8, r8)
 800b9c0:	fffffb7f 	.word	0xfffffb7f

0800b9c4 <_svfiprintf_r>:
 800b9c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b9c6:	b0a1      	sub	sp, #132	; 0x84
 800b9c8:	9003      	str	r0, [sp, #12]
 800b9ca:	001d      	movs	r5, r3
 800b9cc:	898b      	ldrh	r3, [r1, #12]
 800b9ce:	000f      	movs	r7, r1
 800b9d0:	0016      	movs	r6, r2
 800b9d2:	061b      	lsls	r3, r3, #24
 800b9d4:	d511      	bpl.n	800b9fa <_svfiprintf_r+0x36>
 800b9d6:	690b      	ldr	r3, [r1, #16]
 800b9d8:	2b00      	cmp	r3, #0
 800b9da:	d10e      	bne.n	800b9fa <_svfiprintf_r+0x36>
 800b9dc:	2140      	movs	r1, #64	; 0x40
 800b9de:	f7ff ff19 	bl	800b814 <_malloc_r>
 800b9e2:	6038      	str	r0, [r7, #0]
 800b9e4:	6138      	str	r0, [r7, #16]
 800b9e6:	2800      	cmp	r0, #0
 800b9e8:	d105      	bne.n	800b9f6 <_svfiprintf_r+0x32>
 800b9ea:	230c      	movs	r3, #12
 800b9ec:	9a03      	ldr	r2, [sp, #12]
 800b9ee:	3801      	subs	r0, #1
 800b9f0:	6013      	str	r3, [r2, #0]
 800b9f2:	b021      	add	sp, #132	; 0x84
 800b9f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b9f6:	2340      	movs	r3, #64	; 0x40
 800b9f8:	617b      	str	r3, [r7, #20]
 800b9fa:	2300      	movs	r3, #0
 800b9fc:	ac08      	add	r4, sp, #32
 800b9fe:	6163      	str	r3, [r4, #20]
 800ba00:	3320      	adds	r3, #32
 800ba02:	7663      	strb	r3, [r4, #25]
 800ba04:	3310      	adds	r3, #16
 800ba06:	76a3      	strb	r3, [r4, #26]
 800ba08:	9507      	str	r5, [sp, #28]
 800ba0a:	0035      	movs	r5, r6
 800ba0c:	782b      	ldrb	r3, [r5, #0]
 800ba0e:	2b00      	cmp	r3, #0
 800ba10:	d001      	beq.n	800ba16 <_svfiprintf_r+0x52>
 800ba12:	2b25      	cmp	r3, #37	; 0x25
 800ba14:	d147      	bne.n	800baa6 <_svfiprintf_r+0xe2>
 800ba16:	1bab      	subs	r3, r5, r6
 800ba18:	9305      	str	r3, [sp, #20]
 800ba1a:	42b5      	cmp	r5, r6
 800ba1c:	d00c      	beq.n	800ba38 <_svfiprintf_r+0x74>
 800ba1e:	0032      	movs	r2, r6
 800ba20:	0039      	movs	r1, r7
 800ba22:	9803      	ldr	r0, [sp, #12]
 800ba24:	f7ff ff6c 	bl	800b900 <__ssputs_r>
 800ba28:	1c43      	adds	r3, r0, #1
 800ba2a:	d100      	bne.n	800ba2e <_svfiprintf_r+0x6a>
 800ba2c:	e0ae      	b.n	800bb8c <_svfiprintf_r+0x1c8>
 800ba2e:	6962      	ldr	r2, [r4, #20]
 800ba30:	9b05      	ldr	r3, [sp, #20]
 800ba32:	4694      	mov	ip, r2
 800ba34:	4463      	add	r3, ip
 800ba36:	6163      	str	r3, [r4, #20]
 800ba38:	782b      	ldrb	r3, [r5, #0]
 800ba3a:	2b00      	cmp	r3, #0
 800ba3c:	d100      	bne.n	800ba40 <_svfiprintf_r+0x7c>
 800ba3e:	e0a5      	b.n	800bb8c <_svfiprintf_r+0x1c8>
 800ba40:	2201      	movs	r2, #1
 800ba42:	2300      	movs	r3, #0
 800ba44:	4252      	negs	r2, r2
 800ba46:	6062      	str	r2, [r4, #4]
 800ba48:	a904      	add	r1, sp, #16
 800ba4a:	3254      	adds	r2, #84	; 0x54
 800ba4c:	1852      	adds	r2, r2, r1
 800ba4e:	1c6e      	adds	r6, r5, #1
 800ba50:	6023      	str	r3, [r4, #0]
 800ba52:	60e3      	str	r3, [r4, #12]
 800ba54:	60a3      	str	r3, [r4, #8]
 800ba56:	7013      	strb	r3, [r2, #0]
 800ba58:	65a3      	str	r3, [r4, #88]	; 0x58
 800ba5a:	2205      	movs	r2, #5
 800ba5c:	7831      	ldrb	r1, [r6, #0]
 800ba5e:	4854      	ldr	r0, [pc, #336]	; (800bbb0 <_svfiprintf_r+0x1ec>)
 800ba60:	f7ff f962 	bl	800ad28 <memchr>
 800ba64:	1c75      	adds	r5, r6, #1
 800ba66:	2800      	cmp	r0, #0
 800ba68:	d11f      	bne.n	800baaa <_svfiprintf_r+0xe6>
 800ba6a:	6822      	ldr	r2, [r4, #0]
 800ba6c:	06d3      	lsls	r3, r2, #27
 800ba6e:	d504      	bpl.n	800ba7a <_svfiprintf_r+0xb6>
 800ba70:	2353      	movs	r3, #83	; 0x53
 800ba72:	a904      	add	r1, sp, #16
 800ba74:	185b      	adds	r3, r3, r1
 800ba76:	2120      	movs	r1, #32
 800ba78:	7019      	strb	r1, [r3, #0]
 800ba7a:	0713      	lsls	r3, r2, #28
 800ba7c:	d504      	bpl.n	800ba88 <_svfiprintf_r+0xc4>
 800ba7e:	2353      	movs	r3, #83	; 0x53
 800ba80:	a904      	add	r1, sp, #16
 800ba82:	185b      	adds	r3, r3, r1
 800ba84:	212b      	movs	r1, #43	; 0x2b
 800ba86:	7019      	strb	r1, [r3, #0]
 800ba88:	7833      	ldrb	r3, [r6, #0]
 800ba8a:	2b2a      	cmp	r3, #42	; 0x2a
 800ba8c:	d016      	beq.n	800babc <_svfiprintf_r+0xf8>
 800ba8e:	0035      	movs	r5, r6
 800ba90:	2100      	movs	r1, #0
 800ba92:	200a      	movs	r0, #10
 800ba94:	68e3      	ldr	r3, [r4, #12]
 800ba96:	782a      	ldrb	r2, [r5, #0]
 800ba98:	1c6e      	adds	r6, r5, #1
 800ba9a:	3a30      	subs	r2, #48	; 0x30
 800ba9c:	2a09      	cmp	r2, #9
 800ba9e:	d94e      	bls.n	800bb3e <_svfiprintf_r+0x17a>
 800baa0:	2900      	cmp	r1, #0
 800baa2:	d111      	bne.n	800bac8 <_svfiprintf_r+0x104>
 800baa4:	e017      	b.n	800bad6 <_svfiprintf_r+0x112>
 800baa6:	3501      	adds	r5, #1
 800baa8:	e7b0      	b.n	800ba0c <_svfiprintf_r+0x48>
 800baaa:	4b41      	ldr	r3, [pc, #260]	; (800bbb0 <_svfiprintf_r+0x1ec>)
 800baac:	6822      	ldr	r2, [r4, #0]
 800baae:	1ac0      	subs	r0, r0, r3
 800bab0:	2301      	movs	r3, #1
 800bab2:	4083      	lsls	r3, r0
 800bab4:	4313      	orrs	r3, r2
 800bab6:	002e      	movs	r6, r5
 800bab8:	6023      	str	r3, [r4, #0]
 800baba:	e7ce      	b.n	800ba5a <_svfiprintf_r+0x96>
 800babc:	9b07      	ldr	r3, [sp, #28]
 800babe:	1d19      	adds	r1, r3, #4
 800bac0:	681b      	ldr	r3, [r3, #0]
 800bac2:	9107      	str	r1, [sp, #28]
 800bac4:	2b00      	cmp	r3, #0
 800bac6:	db01      	blt.n	800bacc <_svfiprintf_r+0x108>
 800bac8:	930b      	str	r3, [sp, #44]	; 0x2c
 800baca:	e004      	b.n	800bad6 <_svfiprintf_r+0x112>
 800bacc:	425b      	negs	r3, r3
 800bace:	60e3      	str	r3, [r4, #12]
 800bad0:	2302      	movs	r3, #2
 800bad2:	4313      	orrs	r3, r2
 800bad4:	6023      	str	r3, [r4, #0]
 800bad6:	782b      	ldrb	r3, [r5, #0]
 800bad8:	2b2e      	cmp	r3, #46	; 0x2e
 800bada:	d10a      	bne.n	800baf2 <_svfiprintf_r+0x12e>
 800badc:	786b      	ldrb	r3, [r5, #1]
 800bade:	2b2a      	cmp	r3, #42	; 0x2a
 800bae0:	d135      	bne.n	800bb4e <_svfiprintf_r+0x18a>
 800bae2:	9b07      	ldr	r3, [sp, #28]
 800bae4:	3502      	adds	r5, #2
 800bae6:	1d1a      	adds	r2, r3, #4
 800bae8:	681b      	ldr	r3, [r3, #0]
 800baea:	9207      	str	r2, [sp, #28]
 800baec:	2b00      	cmp	r3, #0
 800baee:	db2b      	blt.n	800bb48 <_svfiprintf_r+0x184>
 800baf0:	9309      	str	r3, [sp, #36]	; 0x24
 800baf2:	4e30      	ldr	r6, [pc, #192]	; (800bbb4 <_svfiprintf_r+0x1f0>)
 800baf4:	2203      	movs	r2, #3
 800baf6:	0030      	movs	r0, r6
 800baf8:	7829      	ldrb	r1, [r5, #0]
 800bafa:	f7ff f915 	bl	800ad28 <memchr>
 800bafe:	2800      	cmp	r0, #0
 800bb00:	d006      	beq.n	800bb10 <_svfiprintf_r+0x14c>
 800bb02:	2340      	movs	r3, #64	; 0x40
 800bb04:	1b80      	subs	r0, r0, r6
 800bb06:	4083      	lsls	r3, r0
 800bb08:	6822      	ldr	r2, [r4, #0]
 800bb0a:	3501      	adds	r5, #1
 800bb0c:	4313      	orrs	r3, r2
 800bb0e:	6023      	str	r3, [r4, #0]
 800bb10:	7829      	ldrb	r1, [r5, #0]
 800bb12:	2206      	movs	r2, #6
 800bb14:	4828      	ldr	r0, [pc, #160]	; (800bbb8 <_svfiprintf_r+0x1f4>)
 800bb16:	1c6e      	adds	r6, r5, #1
 800bb18:	7621      	strb	r1, [r4, #24]
 800bb1a:	f7ff f905 	bl	800ad28 <memchr>
 800bb1e:	2800      	cmp	r0, #0
 800bb20:	d03c      	beq.n	800bb9c <_svfiprintf_r+0x1d8>
 800bb22:	4b26      	ldr	r3, [pc, #152]	; (800bbbc <_svfiprintf_r+0x1f8>)
 800bb24:	2b00      	cmp	r3, #0
 800bb26:	d125      	bne.n	800bb74 <_svfiprintf_r+0x1b0>
 800bb28:	2207      	movs	r2, #7
 800bb2a:	9b07      	ldr	r3, [sp, #28]
 800bb2c:	3307      	adds	r3, #7
 800bb2e:	4393      	bics	r3, r2
 800bb30:	3308      	adds	r3, #8
 800bb32:	9307      	str	r3, [sp, #28]
 800bb34:	6963      	ldr	r3, [r4, #20]
 800bb36:	9a04      	ldr	r2, [sp, #16]
 800bb38:	189b      	adds	r3, r3, r2
 800bb3a:	6163      	str	r3, [r4, #20]
 800bb3c:	e765      	b.n	800ba0a <_svfiprintf_r+0x46>
 800bb3e:	4343      	muls	r3, r0
 800bb40:	0035      	movs	r5, r6
 800bb42:	2101      	movs	r1, #1
 800bb44:	189b      	adds	r3, r3, r2
 800bb46:	e7a6      	b.n	800ba96 <_svfiprintf_r+0xd2>
 800bb48:	2301      	movs	r3, #1
 800bb4a:	425b      	negs	r3, r3
 800bb4c:	e7d0      	b.n	800baf0 <_svfiprintf_r+0x12c>
 800bb4e:	2300      	movs	r3, #0
 800bb50:	200a      	movs	r0, #10
 800bb52:	001a      	movs	r2, r3
 800bb54:	3501      	adds	r5, #1
 800bb56:	6063      	str	r3, [r4, #4]
 800bb58:	7829      	ldrb	r1, [r5, #0]
 800bb5a:	1c6e      	adds	r6, r5, #1
 800bb5c:	3930      	subs	r1, #48	; 0x30
 800bb5e:	2909      	cmp	r1, #9
 800bb60:	d903      	bls.n	800bb6a <_svfiprintf_r+0x1a6>
 800bb62:	2b00      	cmp	r3, #0
 800bb64:	d0c5      	beq.n	800baf2 <_svfiprintf_r+0x12e>
 800bb66:	9209      	str	r2, [sp, #36]	; 0x24
 800bb68:	e7c3      	b.n	800baf2 <_svfiprintf_r+0x12e>
 800bb6a:	4342      	muls	r2, r0
 800bb6c:	0035      	movs	r5, r6
 800bb6e:	2301      	movs	r3, #1
 800bb70:	1852      	adds	r2, r2, r1
 800bb72:	e7f1      	b.n	800bb58 <_svfiprintf_r+0x194>
 800bb74:	ab07      	add	r3, sp, #28
 800bb76:	9300      	str	r3, [sp, #0]
 800bb78:	003a      	movs	r2, r7
 800bb7a:	0021      	movs	r1, r4
 800bb7c:	4b10      	ldr	r3, [pc, #64]	; (800bbc0 <_svfiprintf_r+0x1fc>)
 800bb7e:	9803      	ldr	r0, [sp, #12]
 800bb80:	f7fc f9e2 	bl	8007f48 <_printf_float>
 800bb84:	9004      	str	r0, [sp, #16]
 800bb86:	9b04      	ldr	r3, [sp, #16]
 800bb88:	3301      	adds	r3, #1
 800bb8a:	d1d3      	bne.n	800bb34 <_svfiprintf_r+0x170>
 800bb8c:	89bb      	ldrh	r3, [r7, #12]
 800bb8e:	980d      	ldr	r0, [sp, #52]	; 0x34
 800bb90:	065b      	lsls	r3, r3, #25
 800bb92:	d400      	bmi.n	800bb96 <_svfiprintf_r+0x1d2>
 800bb94:	e72d      	b.n	800b9f2 <_svfiprintf_r+0x2e>
 800bb96:	2001      	movs	r0, #1
 800bb98:	4240      	negs	r0, r0
 800bb9a:	e72a      	b.n	800b9f2 <_svfiprintf_r+0x2e>
 800bb9c:	ab07      	add	r3, sp, #28
 800bb9e:	9300      	str	r3, [sp, #0]
 800bba0:	003a      	movs	r2, r7
 800bba2:	0021      	movs	r1, r4
 800bba4:	4b06      	ldr	r3, [pc, #24]	; (800bbc0 <_svfiprintf_r+0x1fc>)
 800bba6:	9803      	ldr	r0, [sp, #12]
 800bba8:	f7fc fc80 	bl	80084ac <_printf_i>
 800bbac:	e7ea      	b.n	800bb84 <_svfiprintf_r+0x1c0>
 800bbae:	46c0      	nop			; (mov r8, r8)
 800bbb0:	0800d14c 	.word	0x0800d14c
 800bbb4:	0800d152 	.word	0x0800d152
 800bbb8:	0800d156 	.word	0x0800d156
 800bbbc:	08007f49 	.word	0x08007f49
 800bbc0:	0800b901 	.word	0x0800b901

0800bbc4 <nan>:
 800bbc4:	2000      	movs	r0, #0
 800bbc6:	4901      	ldr	r1, [pc, #4]	; (800bbcc <nan+0x8>)
 800bbc8:	4770      	bx	lr
 800bbca:	46c0      	nop			; (mov r8, r8)
 800bbcc:	7ff80000 	.word	0x7ff80000

0800bbd0 <_sbrk_r>:
 800bbd0:	2300      	movs	r3, #0
 800bbd2:	b570      	push	{r4, r5, r6, lr}
 800bbd4:	4d06      	ldr	r5, [pc, #24]	; (800bbf0 <_sbrk_r+0x20>)
 800bbd6:	0004      	movs	r4, r0
 800bbd8:	0008      	movs	r0, r1
 800bbda:	602b      	str	r3, [r5, #0]
 800bbdc:	f7f7 ff5a 	bl	8003a94 <_sbrk>
 800bbe0:	1c43      	adds	r3, r0, #1
 800bbe2:	d103      	bne.n	800bbec <_sbrk_r+0x1c>
 800bbe4:	682b      	ldr	r3, [r5, #0]
 800bbe6:	2b00      	cmp	r3, #0
 800bbe8:	d000      	beq.n	800bbec <_sbrk_r+0x1c>
 800bbea:	6023      	str	r3, [r4, #0]
 800bbec:	bd70      	pop	{r4, r5, r6, pc}
 800bbee:	46c0      	nop			; (mov r8, r8)
 800bbf0:	200003bc 	.word	0x200003bc

0800bbf4 <strncmp>:
 800bbf4:	b530      	push	{r4, r5, lr}
 800bbf6:	0005      	movs	r5, r0
 800bbf8:	1e10      	subs	r0, r2, #0
 800bbfa:	d008      	beq.n	800bc0e <strncmp+0x1a>
 800bbfc:	2400      	movs	r4, #0
 800bbfe:	3a01      	subs	r2, #1
 800bc00:	5d2b      	ldrb	r3, [r5, r4]
 800bc02:	5d08      	ldrb	r0, [r1, r4]
 800bc04:	4283      	cmp	r3, r0
 800bc06:	d101      	bne.n	800bc0c <strncmp+0x18>
 800bc08:	4294      	cmp	r4, r2
 800bc0a:	d101      	bne.n	800bc10 <strncmp+0x1c>
 800bc0c:	1a18      	subs	r0, r3, r0
 800bc0e:	bd30      	pop	{r4, r5, pc}
 800bc10:	3401      	adds	r4, #1
 800bc12:	2b00      	cmp	r3, #0
 800bc14:	d1f4      	bne.n	800bc00 <strncmp+0xc>
 800bc16:	e7f9      	b.n	800bc0c <strncmp+0x18>

0800bc18 <__ascii_wctomb>:
 800bc18:	0003      	movs	r3, r0
 800bc1a:	1e08      	subs	r0, r1, #0
 800bc1c:	d005      	beq.n	800bc2a <__ascii_wctomb+0x12>
 800bc1e:	2aff      	cmp	r2, #255	; 0xff
 800bc20:	d904      	bls.n	800bc2c <__ascii_wctomb+0x14>
 800bc22:	228a      	movs	r2, #138	; 0x8a
 800bc24:	2001      	movs	r0, #1
 800bc26:	601a      	str	r2, [r3, #0]
 800bc28:	4240      	negs	r0, r0
 800bc2a:	4770      	bx	lr
 800bc2c:	2001      	movs	r0, #1
 800bc2e:	700a      	strb	r2, [r1, #0]
 800bc30:	e7fb      	b.n	800bc2a <__ascii_wctomb+0x12>
	...

0800bc34 <__assert_func>:
 800bc34:	b530      	push	{r4, r5, lr}
 800bc36:	0014      	movs	r4, r2
 800bc38:	001a      	movs	r2, r3
 800bc3a:	4b09      	ldr	r3, [pc, #36]	; (800bc60 <__assert_func+0x2c>)
 800bc3c:	0005      	movs	r5, r0
 800bc3e:	681b      	ldr	r3, [r3, #0]
 800bc40:	b085      	sub	sp, #20
 800bc42:	68d8      	ldr	r0, [r3, #12]
 800bc44:	4b07      	ldr	r3, [pc, #28]	; (800bc64 <__assert_func+0x30>)
 800bc46:	2c00      	cmp	r4, #0
 800bc48:	d101      	bne.n	800bc4e <__assert_func+0x1a>
 800bc4a:	4b07      	ldr	r3, [pc, #28]	; (800bc68 <__assert_func+0x34>)
 800bc4c:	001c      	movs	r4, r3
 800bc4e:	9301      	str	r3, [sp, #4]
 800bc50:	9100      	str	r1, [sp, #0]
 800bc52:	002b      	movs	r3, r5
 800bc54:	4905      	ldr	r1, [pc, #20]	; (800bc6c <__assert_func+0x38>)
 800bc56:	9402      	str	r4, [sp, #8]
 800bc58:	f000 f80a 	bl	800bc70 <fiprintf>
 800bc5c:	f000 fa9a 	bl	800c194 <abort>
 800bc60:	2000001c 	.word	0x2000001c
 800bc64:	0800d15d 	.word	0x0800d15d
 800bc68:	0800d198 	.word	0x0800d198
 800bc6c:	0800d16a 	.word	0x0800d16a

0800bc70 <fiprintf>:
 800bc70:	b40e      	push	{r1, r2, r3}
 800bc72:	b503      	push	{r0, r1, lr}
 800bc74:	0001      	movs	r1, r0
 800bc76:	ab03      	add	r3, sp, #12
 800bc78:	4804      	ldr	r0, [pc, #16]	; (800bc8c <fiprintf+0x1c>)
 800bc7a:	cb04      	ldmia	r3!, {r2}
 800bc7c:	6800      	ldr	r0, [r0, #0]
 800bc7e:	9301      	str	r3, [sp, #4]
 800bc80:	f000 f880 	bl	800bd84 <_vfiprintf_r>
 800bc84:	b002      	add	sp, #8
 800bc86:	bc08      	pop	{r3}
 800bc88:	b003      	add	sp, #12
 800bc8a:	4718      	bx	r3
 800bc8c:	2000001c 	.word	0x2000001c

0800bc90 <memmove>:
 800bc90:	b510      	push	{r4, lr}
 800bc92:	4288      	cmp	r0, r1
 800bc94:	d902      	bls.n	800bc9c <memmove+0xc>
 800bc96:	188b      	adds	r3, r1, r2
 800bc98:	4298      	cmp	r0, r3
 800bc9a:	d303      	bcc.n	800bca4 <memmove+0x14>
 800bc9c:	2300      	movs	r3, #0
 800bc9e:	e007      	b.n	800bcb0 <memmove+0x20>
 800bca0:	5c8b      	ldrb	r3, [r1, r2]
 800bca2:	5483      	strb	r3, [r0, r2]
 800bca4:	3a01      	subs	r2, #1
 800bca6:	d2fb      	bcs.n	800bca0 <memmove+0x10>
 800bca8:	bd10      	pop	{r4, pc}
 800bcaa:	5ccc      	ldrb	r4, [r1, r3]
 800bcac:	54c4      	strb	r4, [r0, r3]
 800bcae:	3301      	adds	r3, #1
 800bcb0:	429a      	cmp	r2, r3
 800bcb2:	d1fa      	bne.n	800bcaa <memmove+0x1a>
 800bcb4:	e7f8      	b.n	800bca8 <memmove+0x18>
	...

0800bcb8 <__malloc_lock>:
 800bcb8:	b510      	push	{r4, lr}
 800bcba:	4802      	ldr	r0, [pc, #8]	; (800bcc4 <__malloc_lock+0xc>)
 800bcbc:	f000 fc41 	bl	800c542 <__retarget_lock_acquire_recursive>
 800bcc0:	bd10      	pop	{r4, pc}
 800bcc2:	46c0      	nop			; (mov r8, r8)
 800bcc4:	200003c0 	.word	0x200003c0

0800bcc8 <__malloc_unlock>:
 800bcc8:	b510      	push	{r4, lr}
 800bcca:	4802      	ldr	r0, [pc, #8]	; (800bcd4 <__malloc_unlock+0xc>)
 800bccc:	f000 fc3a 	bl	800c544 <__retarget_lock_release_recursive>
 800bcd0:	bd10      	pop	{r4, pc}
 800bcd2:	46c0      	nop			; (mov r8, r8)
 800bcd4:	200003c0 	.word	0x200003c0

0800bcd8 <_realloc_r>:
 800bcd8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800bcda:	0007      	movs	r7, r0
 800bcdc:	000e      	movs	r6, r1
 800bcde:	0014      	movs	r4, r2
 800bce0:	2900      	cmp	r1, #0
 800bce2:	d105      	bne.n	800bcf0 <_realloc_r+0x18>
 800bce4:	0011      	movs	r1, r2
 800bce6:	f7ff fd95 	bl	800b814 <_malloc_r>
 800bcea:	0005      	movs	r5, r0
 800bcec:	0028      	movs	r0, r5
 800bcee:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800bcf0:	2a00      	cmp	r2, #0
 800bcf2:	d103      	bne.n	800bcfc <_realloc_r+0x24>
 800bcf4:	f7ff fd22 	bl	800b73c <_free_r>
 800bcf8:	0025      	movs	r5, r4
 800bcfa:	e7f7      	b.n	800bcec <_realloc_r+0x14>
 800bcfc:	f000 fc90 	bl	800c620 <_malloc_usable_size_r>
 800bd00:	9001      	str	r0, [sp, #4]
 800bd02:	4284      	cmp	r4, r0
 800bd04:	d803      	bhi.n	800bd0e <_realloc_r+0x36>
 800bd06:	0035      	movs	r5, r6
 800bd08:	0843      	lsrs	r3, r0, #1
 800bd0a:	42a3      	cmp	r3, r4
 800bd0c:	d3ee      	bcc.n	800bcec <_realloc_r+0x14>
 800bd0e:	0021      	movs	r1, r4
 800bd10:	0038      	movs	r0, r7
 800bd12:	f7ff fd7f 	bl	800b814 <_malloc_r>
 800bd16:	1e05      	subs	r5, r0, #0
 800bd18:	d0e8      	beq.n	800bcec <_realloc_r+0x14>
 800bd1a:	9b01      	ldr	r3, [sp, #4]
 800bd1c:	0022      	movs	r2, r4
 800bd1e:	429c      	cmp	r4, r3
 800bd20:	d900      	bls.n	800bd24 <_realloc_r+0x4c>
 800bd22:	001a      	movs	r2, r3
 800bd24:	0031      	movs	r1, r6
 800bd26:	0028      	movs	r0, r5
 800bd28:	f7ff f809 	bl	800ad3e <memcpy>
 800bd2c:	0031      	movs	r1, r6
 800bd2e:	0038      	movs	r0, r7
 800bd30:	f7ff fd04 	bl	800b73c <_free_r>
 800bd34:	e7da      	b.n	800bcec <_realloc_r+0x14>

0800bd36 <__sfputc_r>:
 800bd36:	6893      	ldr	r3, [r2, #8]
 800bd38:	b510      	push	{r4, lr}
 800bd3a:	3b01      	subs	r3, #1
 800bd3c:	6093      	str	r3, [r2, #8]
 800bd3e:	2b00      	cmp	r3, #0
 800bd40:	da04      	bge.n	800bd4c <__sfputc_r+0x16>
 800bd42:	6994      	ldr	r4, [r2, #24]
 800bd44:	42a3      	cmp	r3, r4
 800bd46:	db07      	blt.n	800bd58 <__sfputc_r+0x22>
 800bd48:	290a      	cmp	r1, #10
 800bd4a:	d005      	beq.n	800bd58 <__sfputc_r+0x22>
 800bd4c:	6813      	ldr	r3, [r2, #0]
 800bd4e:	1c58      	adds	r0, r3, #1
 800bd50:	6010      	str	r0, [r2, #0]
 800bd52:	7019      	strb	r1, [r3, #0]
 800bd54:	0008      	movs	r0, r1
 800bd56:	bd10      	pop	{r4, pc}
 800bd58:	f000 f94e 	bl	800bff8 <__swbuf_r>
 800bd5c:	0001      	movs	r1, r0
 800bd5e:	e7f9      	b.n	800bd54 <__sfputc_r+0x1e>

0800bd60 <__sfputs_r>:
 800bd60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bd62:	0006      	movs	r6, r0
 800bd64:	000f      	movs	r7, r1
 800bd66:	0014      	movs	r4, r2
 800bd68:	18d5      	adds	r5, r2, r3
 800bd6a:	42ac      	cmp	r4, r5
 800bd6c:	d101      	bne.n	800bd72 <__sfputs_r+0x12>
 800bd6e:	2000      	movs	r0, #0
 800bd70:	e007      	b.n	800bd82 <__sfputs_r+0x22>
 800bd72:	7821      	ldrb	r1, [r4, #0]
 800bd74:	003a      	movs	r2, r7
 800bd76:	0030      	movs	r0, r6
 800bd78:	f7ff ffdd 	bl	800bd36 <__sfputc_r>
 800bd7c:	3401      	adds	r4, #1
 800bd7e:	1c43      	adds	r3, r0, #1
 800bd80:	d1f3      	bne.n	800bd6a <__sfputs_r+0xa>
 800bd82:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800bd84 <_vfiprintf_r>:
 800bd84:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bd86:	b0a1      	sub	sp, #132	; 0x84
 800bd88:	0006      	movs	r6, r0
 800bd8a:	000c      	movs	r4, r1
 800bd8c:	001f      	movs	r7, r3
 800bd8e:	9203      	str	r2, [sp, #12]
 800bd90:	2800      	cmp	r0, #0
 800bd92:	d004      	beq.n	800bd9e <_vfiprintf_r+0x1a>
 800bd94:	6983      	ldr	r3, [r0, #24]
 800bd96:	2b00      	cmp	r3, #0
 800bd98:	d101      	bne.n	800bd9e <_vfiprintf_r+0x1a>
 800bd9a:	f000 fb31 	bl	800c400 <__sinit>
 800bd9e:	4b8e      	ldr	r3, [pc, #568]	; (800bfd8 <_vfiprintf_r+0x254>)
 800bda0:	429c      	cmp	r4, r3
 800bda2:	d11c      	bne.n	800bdde <_vfiprintf_r+0x5a>
 800bda4:	6874      	ldr	r4, [r6, #4]
 800bda6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800bda8:	07db      	lsls	r3, r3, #31
 800bdaa:	d405      	bmi.n	800bdb8 <_vfiprintf_r+0x34>
 800bdac:	89a3      	ldrh	r3, [r4, #12]
 800bdae:	059b      	lsls	r3, r3, #22
 800bdb0:	d402      	bmi.n	800bdb8 <_vfiprintf_r+0x34>
 800bdb2:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800bdb4:	f000 fbc5 	bl	800c542 <__retarget_lock_acquire_recursive>
 800bdb8:	89a3      	ldrh	r3, [r4, #12]
 800bdba:	071b      	lsls	r3, r3, #28
 800bdbc:	d502      	bpl.n	800bdc4 <_vfiprintf_r+0x40>
 800bdbe:	6923      	ldr	r3, [r4, #16]
 800bdc0:	2b00      	cmp	r3, #0
 800bdc2:	d11d      	bne.n	800be00 <_vfiprintf_r+0x7c>
 800bdc4:	0021      	movs	r1, r4
 800bdc6:	0030      	movs	r0, r6
 800bdc8:	f000 f96c 	bl	800c0a4 <__swsetup_r>
 800bdcc:	2800      	cmp	r0, #0
 800bdce:	d017      	beq.n	800be00 <_vfiprintf_r+0x7c>
 800bdd0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800bdd2:	07db      	lsls	r3, r3, #31
 800bdd4:	d50d      	bpl.n	800bdf2 <_vfiprintf_r+0x6e>
 800bdd6:	2001      	movs	r0, #1
 800bdd8:	4240      	negs	r0, r0
 800bdda:	b021      	add	sp, #132	; 0x84
 800bddc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bdde:	4b7f      	ldr	r3, [pc, #508]	; (800bfdc <_vfiprintf_r+0x258>)
 800bde0:	429c      	cmp	r4, r3
 800bde2:	d101      	bne.n	800bde8 <_vfiprintf_r+0x64>
 800bde4:	68b4      	ldr	r4, [r6, #8]
 800bde6:	e7de      	b.n	800bda6 <_vfiprintf_r+0x22>
 800bde8:	4b7d      	ldr	r3, [pc, #500]	; (800bfe0 <_vfiprintf_r+0x25c>)
 800bdea:	429c      	cmp	r4, r3
 800bdec:	d1db      	bne.n	800bda6 <_vfiprintf_r+0x22>
 800bdee:	68f4      	ldr	r4, [r6, #12]
 800bdf0:	e7d9      	b.n	800bda6 <_vfiprintf_r+0x22>
 800bdf2:	89a3      	ldrh	r3, [r4, #12]
 800bdf4:	059b      	lsls	r3, r3, #22
 800bdf6:	d4ee      	bmi.n	800bdd6 <_vfiprintf_r+0x52>
 800bdf8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800bdfa:	f000 fba3 	bl	800c544 <__retarget_lock_release_recursive>
 800bdfe:	e7ea      	b.n	800bdd6 <_vfiprintf_r+0x52>
 800be00:	2300      	movs	r3, #0
 800be02:	ad08      	add	r5, sp, #32
 800be04:	616b      	str	r3, [r5, #20]
 800be06:	3320      	adds	r3, #32
 800be08:	766b      	strb	r3, [r5, #25]
 800be0a:	3310      	adds	r3, #16
 800be0c:	76ab      	strb	r3, [r5, #26]
 800be0e:	9707      	str	r7, [sp, #28]
 800be10:	9f03      	ldr	r7, [sp, #12]
 800be12:	783b      	ldrb	r3, [r7, #0]
 800be14:	2b00      	cmp	r3, #0
 800be16:	d001      	beq.n	800be1c <_vfiprintf_r+0x98>
 800be18:	2b25      	cmp	r3, #37	; 0x25
 800be1a:	d14e      	bne.n	800beba <_vfiprintf_r+0x136>
 800be1c:	9b03      	ldr	r3, [sp, #12]
 800be1e:	1afb      	subs	r3, r7, r3
 800be20:	9305      	str	r3, [sp, #20]
 800be22:	9b03      	ldr	r3, [sp, #12]
 800be24:	429f      	cmp	r7, r3
 800be26:	d00d      	beq.n	800be44 <_vfiprintf_r+0xc0>
 800be28:	9b05      	ldr	r3, [sp, #20]
 800be2a:	0021      	movs	r1, r4
 800be2c:	0030      	movs	r0, r6
 800be2e:	9a03      	ldr	r2, [sp, #12]
 800be30:	f7ff ff96 	bl	800bd60 <__sfputs_r>
 800be34:	1c43      	adds	r3, r0, #1
 800be36:	d100      	bne.n	800be3a <_vfiprintf_r+0xb6>
 800be38:	e0b5      	b.n	800bfa6 <_vfiprintf_r+0x222>
 800be3a:	696a      	ldr	r2, [r5, #20]
 800be3c:	9b05      	ldr	r3, [sp, #20]
 800be3e:	4694      	mov	ip, r2
 800be40:	4463      	add	r3, ip
 800be42:	616b      	str	r3, [r5, #20]
 800be44:	783b      	ldrb	r3, [r7, #0]
 800be46:	2b00      	cmp	r3, #0
 800be48:	d100      	bne.n	800be4c <_vfiprintf_r+0xc8>
 800be4a:	e0ac      	b.n	800bfa6 <_vfiprintf_r+0x222>
 800be4c:	2201      	movs	r2, #1
 800be4e:	1c7b      	adds	r3, r7, #1
 800be50:	9303      	str	r3, [sp, #12]
 800be52:	2300      	movs	r3, #0
 800be54:	4252      	negs	r2, r2
 800be56:	606a      	str	r2, [r5, #4]
 800be58:	a904      	add	r1, sp, #16
 800be5a:	3254      	adds	r2, #84	; 0x54
 800be5c:	1852      	adds	r2, r2, r1
 800be5e:	602b      	str	r3, [r5, #0]
 800be60:	60eb      	str	r3, [r5, #12]
 800be62:	60ab      	str	r3, [r5, #8]
 800be64:	7013      	strb	r3, [r2, #0]
 800be66:	65ab      	str	r3, [r5, #88]	; 0x58
 800be68:	9b03      	ldr	r3, [sp, #12]
 800be6a:	2205      	movs	r2, #5
 800be6c:	7819      	ldrb	r1, [r3, #0]
 800be6e:	485d      	ldr	r0, [pc, #372]	; (800bfe4 <_vfiprintf_r+0x260>)
 800be70:	f7fe ff5a 	bl	800ad28 <memchr>
 800be74:	9b03      	ldr	r3, [sp, #12]
 800be76:	1c5f      	adds	r7, r3, #1
 800be78:	2800      	cmp	r0, #0
 800be7a:	d120      	bne.n	800bebe <_vfiprintf_r+0x13a>
 800be7c:	682a      	ldr	r2, [r5, #0]
 800be7e:	06d3      	lsls	r3, r2, #27
 800be80:	d504      	bpl.n	800be8c <_vfiprintf_r+0x108>
 800be82:	2353      	movs	r3, #83	; 0x53
 800be84:	a904      	add	r1, sp, #16
 800be86:	185b      	adds	r3, r3, r1
 800be88:	2120      	movs	r1, #32
 800be8a:	7019      	strb	r1, [r3, #0]
 800be8c:	0713      	lsls	r3, r2, #28
 800be8e:	d504      	bpl.n	800be9a <_vfiprintf_r+0x116>
 800be90:	2353      	movs	r3, #83	; 0x53
 800be92:	a904      	add	r1, sp, #16
 800be94:	185b      	adds	r3, r3, r1
 800be96:	212b      	movs	r1, #43	; 0x2b
 800be98:	7019      	strb	r1, [r3, #0]
 800be9a:	9b03      	ldr	r3, [sp, #12]
 800be9c:	781b      	ldrb	r3, [r3, #0]
 800be9e:	2b2a      	cmp	r3, #42	; 0x2a
 800bea0:	d016      	beq.n	800bed0 <_vfiprintf_r+0x14c>
 800bea2:	2100      	movs	r1, #0
 800bea4:	68eb      	ldr	r3, [r5, #12]
 800bea6:	9f03      	ldr	r7, [sp, #12]
 800bea8:	783a      	ldrb	r2, [r7, #0]
 800beaa:	1c78      	adds	r0, r7, #1
 800beac:	3a30      	subs	r2, #48	; 0x30
 800beae:	4684      	mov	ip, r0
 800beb0:	2a09      	cmp	r2, #9
 800beb2:	d94f      	bls.n	800bf54 <_vfiprintf_r+0x1d0>
 800beb4:	2900      	cmp	r1, #0
 800beb6:	d111      	bne.n	800bedc <_vfiprintf_r+0x158>
 800beb8:	e017      	b.n	800beea <_vfiprintf_r+0x166>
 800beba:	3701      	adds	r7, #1
 800bebc:	e7a9      	b.n	800be12 <_vfiprintf_r+0x8e>
 800bebe:	4b49      	ldr	r3, [pc, #292]	; (800bfe4 <_vfiprintf_r+0x260>)
 800bec0:	682a      	ldr	r2, [r5, #0]
 800bec2:	1ac0      	subs	r0, r0, r3
 800bec4:	2301      	movs	r3, #1
 800bec6:	4083      	lsls	r3, r0
 800bec8:	4313      	orrs	r3, r2
 800beca:	602b      	str	r3, [r5, #0]
 800becc:	9703      	str	r7, [sp, #12]
 800bece:	e7cb      	b.n	800be68 <_vfiprintf_r+0xe4>
 800bed0:	9b07      	ldr	r3, [sp, #28]
 800bed2:	1d19      	adds	r1, r3, #4
 800bed4:	681b      	ldr	r3, [r3, #0]
 800bed6:	9107      	str	r1, [sp, #28]
 800bed8:	2b00      	cmp	r3, #0
 800beda:	db01      	blt.n	800bee0 <_vfiprintf_r+0x15c>
 800bedc:	930b      	str	r3, [sp, #44]	; 0x2c
 800bede:	e004      	b.n	800beea <_vfiprintf_r+0x166>
 800bee0:	425b      	negs	r3, r3
 800bee2:	60eb      	str	r3, [r5, #12]
 800bee4:	2302      	movs	r3, #2
 800bee6:	4313      	orrs	r3, r2
 800bee8:	602b      	str	r3, [r5, #0]
 800beea:	783b      	ldrb	r3, [r7, #0]
 800beec:	2b2e      	cmp	r3, #46	; 0x2e
 800beee:	d10a      	bne.n	800bf06 <_vfiprintf_r+0x182>
 800bef0:	787b      	ldrb	r3, [r7, #1]
 800bef2:	2b2a      	cmp	r3, #42	; 0x2a
 800bef4:	d137      	bne.n	800bf66 <_vfiprintf_r+0x1e2>
 800bef6:	9b07      	ldr	r3, [sp, #28]
 800bef8:	3702      	adds	r7, #2
 800befa:	1d1a      	adds	r2, r3, #4
 800befc:	681b      	ldr	r3, [r3, #0]
 800befe:	9207      	str	r2, [sp, #28]
 800bf00:	2b00      	cmp	r3, #0
 800bf02:	db2d      	blt.n	800bf60 <_vfiprintf_r+0x1dc>
 800bf04:	9309      	str	r3, [sp, #36]	; 0x24
 800bf06:	2203      	movs	r2, #3
 800bf08:	7839      	ldrb	r1, [r7, #0]
 800bf0a:	4837      	ldr	r0, [pc, #220]	; (800bfe8 <_vfiprintf_r+0x264>)
 800bf0c:	f7fe ff0c 	bl	800ad28 <memchr>
 800bf10:	2800      	cmp	r0, #0
 800bf12:	d007      	beq.n	800bf24 <_vfiprintf_r+0x1a0>
 800bf14:	4b34      	ldr	r3, [pc, #208]	; (800bfe8 <_vfiprintf_r+0x264>)
 800bf16:	682a      	ldr	r2, [r5, #0]
 800bf18:	1ac0      	subs	r0, r0, r3
 800bf1a:	2340      	movs	r3, #64	; 0x40
 800bf1c:	4083      	lsls	r3, r0
 800bf1e:	4313      	orrs	r3, r2
 800bf20:	3701      	adds	r7, #1
 800bf22:	602b      	str	r3, [r5, #0]
 800bf24:	7839      	ldrb	r1, [r7, #0]
 800bf26:	1c7b      	adds	r3, r7, #1
 800bf28:	2206      	movs	r2, #6
 800bf2a:	4830      	ldr	r0, [pc, #192]	; (800bfec <_vfiprintf_r+0x268>)
 800bf2c:	9303      	str	r3, [sp, #12]
 800bf2e:	7629      	strb	r1, [r5, #24]
 800bf30:	f7fe fefa 	bl	800ad28 <memchr>
 800bf34:	2800      	cmp	r0, #0
 800bf36:	d045      	beq.n	800bfc4 <_vfiprintf_r+0x240>
 800bf38:	4b2d      	ldr	r3, [pc, #180]	; (800bff0 <_vfiprintf_r+0x26c>)
 800bf3a:	2b00      	cmp	r3, #0
 800bf3c:	d127      	bne.n	800bf8e <_vfiprintf_r+0x20a>
 800bf3e:	2207      	movs	r2, #7
 800bf40:	9b07      	ldr	r3, [sp, #28]
 800bf42:	3307      	adds	r3, #7
 800bf44:	4393      	bics	r3, r2
 800bf46:	3308      	adds	r3, #8
 800bf48:	9307      	str	r3, [sp, #28]
 800bf4a:	696b      	ldr	r3, [r5, #20]
 800bf4c:	9a04      	ldr	r2, [sp, #16]
 800bf4e:	189b      	adds	r3, r3, r2
 800bf50:	616b      	str	r3, [r5, #20]
 800bf52:	e75d      	b.n	800be10 <_vfiprintf_r+0x8c>
 800bf54:	210a      	movs	r1, #10
 800bf56:	434b      	muls	r3, r1
 800bf58:	4667      	mov	r7, ip
 800bf5a:	189b      	adds	r3, r3, r2
 800bf5c:	3909      	subs	r1, #9
 800bf5e:	e7a3      	b.n	800bea8 <_vfiprintf_r+0x124>
 800bf60:	2301      	movs	r3, #1
 800bf62:	425b      	negs	r3, r3
 800bf64:	e7ce      	b.n	800bf04 <_vfiprintf_r+0x180>
 800bf66:	2300      	movs	r3, #0
 800bf68:	001a      	movs	r2, r3
 800bf6a:	3701      	adds	r7, #1
 800bf6c:	606b      	str	r3, [r5, #4]
 800bf6e:	7839      	ldrb	r1, [r7, #0]
 800bf70:	1c78      	adds	r0, r7, #1
 800bf72:	3930      	subs	r1, #48	; 0x30
 800bf74:	4684      	mov	ip, r0
 800bf76:	2909      	cmp	r1, #9
 800bf78:	d903      	bls.n	800bf82 <_vfiprintf_r+0x1fe>
 800bf7a:	2b00      	cmp	r3, #0
 800bf7c:	d0c3      	beq.n	800bf06 <_vfiprintf_r+0x182>
 800bf7e:	9209      	str	r2, [sp, #36]	; 0x24
 800bf80:	e7c1      	b.n	800bf06 <_vfiprintf_r+0x182>
 800bf82:	230a      	movs	r3, #10
 800bf84:	435a      	muls	r2, r3
 800bf86:	4667      	mov	r7, ip
 800bf88:	1852      	adds	r2, r2, r1
 800bf8a:	3b09      	subs	r3, #9
 800bf8c:	e7ef      	b.n	800bf6e <_vfiprintf_r+0x1ea>
 800bf8e:	ab07      	add	r3, sp, #28
 800bf90:	9300      	str	r3, [sp, #0]
 800bf92:	0022      	movs	r2, r4
 800bf94:	0029      	movs	r1, r5
 800bf96:	0030      	movs	r0, r6
 800bf98:	4b16      	ldr	r3, [pc, #88]	; (800bff4 <_vfiprintf_r+0x270>)
 800bf9a:	f7fb ffd5 	bl	8007f48 <_printf_float>
 800bf9e:	9004      	str	r0, [sp, #16]
 800bfa0:	9b04      	ldr	r3, [sp, #16]
 800bfa2:	3301      	adds	r3, #1
 800bfa4:	d1d1      	bne.n	800bf4a <_vfiprintf_r+0x1c6>
 800bfa6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800bfa8:	07db      	lsls	r3, r3, #31
 800bfaa:	d405      	bmi.n	800bfb8 <_vfiprintf_r+0x234>
 800bfac:	89a3      	ldrh	r3, [r4, #12]
 800bfae:	059b      	lsls	r3, r3, #22
 800bfb0:	d402      	bmi.n	800bfb8 <_vfiprintf_r+0x234>
 800bfb2:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800bfb4:	f000 fac6 	bl	800c544 <__retarget_lock_release_recursive>
 800bfb8:	89a3      	ldrh	r3, [r4, #12]
 800bfba:	065b      	lsls	r3, r3, #25
 800bfbc:	d500      	bpl.n	800bfc0 <_vfiprintf_r+0x23c>
 800bfbe:	e70a      	b.n	800bdd6 <_vfiprintf_r+0x52>
 800bfc0:	980d      	ldr	r0, [sp, #52]	; 0x34
 800bfc2:	e70a      	b.n	800bdda <_vfiprintf_r+0x56>
 800bfc4:	ab07      	add	r3, sp, #28
 800bfc6:	9300      	str	r3, [sp, #0]
 800bfc8:	0022      	movs	r2, r4
 800bfca:	0029      	movs	r1, r5
 800bfcc:	0030      	movs	r0, r6
 800bfce:	4b09      	ldr	r3, [pc, #36]	; (800bff4 <_vfiprintf_r+0x270>)
 800bfd0:	f7fc fa6c 	bl	80084ac <_printf_i>
 800bfd4:	e7e3      	b.n	800bf9e <_vfiprintf_r+0x21a>
 800bfd6:	46c0      	nop			; (mov r8, r8)
 800bfd8:	0800d1bc 	.word	0x0800d1bc
 800bfdc:	0800d1dc 	.word	0x0800d1dc
 800bfe0:	0800d19c 	.word	0x0800d19c
 800bfe4:	0800d14c 	.word	0x0800d14c
 800bfe8:	0800d152 	.word	0x0800d152
 800bfec:	0800d156 	.word	0x0800d156
 800bff0:	08007f49 	.word	0x08007f49
 800bff4:	0800bd61 	.word	0x0800bd61

0800bff8 <__swbuf_r>:
 800bff8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bffa:	0005      	movs	r5, r0
 800bffc:	000e      	movs	r6, r1
 800bffe:	0014      	movs	r4, r2
 800c000:	2800      	cmp	r0, #0
 800c002:	d004      	beq.n	800c00e <__swbuf_r+0x16>
 800c004:	6983      	ldr	r3, [r0, #24]
 800c006:	2b00      	cmp	r3, #0
 800c008:	d101      	bne.n	800c00e <__swbuf_r+0x16>
 800c00a:	f000 f9f9 	bl	800c400 <__sinit>
 800c00e:	4b22      	ldr	r3, [pc, #136]	; (800c098 <__swbuf_r+0xa0>)
 800c010:	429c      	cmp	r4, r3
 800c012:	d12e      	bne.n	800c072 <__swbuf_r+0x7a>
 800c014:	686c      	ldr	r4, [r5, #4]
 800c016:	69a3      	ldr	r3, [r4, #24]
 800c018:	60a3      	str	r3, [r4, #8]
 800c01a:	89a3      	ldrh	r3, [r4, #12]
 800c01c:	071b      	lsls	r3, r3, #28
 800c01e:	d532      	bpl.n	800c086 <__swbuf_r+0x8e>
 800c020:	6923      	ldr	r3, [r4, #16]
 800c022:	2b00      	cmp	r3, #0
 800c024:	d02f      	beq.n	800c086 <__swbuf_r+0x8e>
 800c026:	6823      	ldr	r3, [r4, #0]
 800c028:	6922      	ldr	r2, [r4, #16]
 800c02a:	b2f7      	uxtb	r7, r6
 800c02c:	1a98      	subs	r0, r3, r2
 800c02e:	6963      	ldr	r3, [r4, #20]
 800c030:	b2f6      	uxtb	r6, r6
 800c032:	4283      	cmp	r3, r0
 800c034:	dc05      	bgt.n	800c042 <__swbuf_r+0x4a>
 800c036:	0021      	movs	r1, r4
 800c038:	0028      	movs	r0, r5
 800c03a:	f000 f93f 	bl	800c2bc <_fflush_r>
 800c03e:	2800      	cmp	r0, #0
 800c040:	d127      	bne.n	800c092 <__swbuf_r+0x9a>
 800c042:	68a3      	ldr	r3, [r4, #8]
 800c044:	3001      	adds	r0, #1
 800c046:	3b01      	subs	r3, #1
 800c048:	60a3      	str	r3, [r4, #8]
 800c04a:	6823      	ldr	r3, [r4, #0]
 800c04c:	1c5a      	adds	r2, r3, #1
 800c04e:	6022      	str	r2, [r4, #0]
 800c050:	701f      	strb	r7, [r3, #0]
 800c052:	6963      	ldr	r3, [r4, #20]
 800c054:	4283      	cmp	r3, r0
 800c056:	d004      	beq.n	800c062 <__swbuf_r+0x6a>
 800c058:	89a3      	ldrh	r3, [r4, #12]
 800c05a:	07db      	lsls	r3, r3, #31
 800c05c:	d507      	bpl.n	800c06e <__swbuf_r+0x76>
 800c05e:	2e0a      	cmp	r6, #10
 800c060:	d105      	bne.n	800c06e <__swbuf_r+0x76>
 800c062:	0021      	movs	r1, r4
 800c064:	0028      	movs	r0, r5
 800c066:	f000 f929 	bl	800c2bc <_fflush_r>
 800c06a:	2800      	cmp	r0, #0
 800c06c:	d111      	bne.n	800c092 <__swbuf_r+0x9a>
 800c06e:	0030      	movs	r0, r6
 800c070:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c072:	4b0a      	ldr	r3, [pc, #40]	; (800c09c <__swbuf_r+0xa4>)
 800c074:	429c      	cmp	r4, r3
 800c076:	d101      	bne.n	800c07c <__swbuf_r+0x84>
 800c078:	68ac      	ldr	r4, [r5, #8]
 800c07a:	e7cc      	b.n	800c016 <__swbuf_r+0x1e>
 800c07c:	4b08      	ldr	r3, [pc, #32]	; (800c0a0 <__swbuf_r+0xa8>)
 800c07e:	429c      	cmp	r4, r3
 800c080:	d1c9      	bne.n	800c016 <__swbuf_r+0x1e>
 800c082:	68ec      	ldr	r4, [r5, #12]
 800c084:	e7c7      	b.n	800c016 <__swbuf_r+0x1e>
 800c086:	0021      	movs	r1, r4
 800c088:	0028      	movs	r0, r5
 800c08a:	f000 f80b 	bl	800c0a4 <__swsetup_r>
 800c08e:	2800      	cmp	r0, #0
 800c090:	d0c9      	beq.n	800c026 <__swbuf_r+0x2e>
 800c092:	2601      	movs	r6, #1
 800c094:	4276      	negs	r6, r6
 800c096:	e7ea      	b.n	800c06e <__swbuf_r+0x76>
 800c098:	0800d1bc 	.word	0x0800d1bc
 800c09c:	0800d1dc 	.word	0x0800d1dc
 800c0a0:	0800d19c 	.word	0x0800d19c

0800c0a4 <__swsetup_r>:
 800c0a4:	4b37      	ldr	r3, [pc, #220]	; (800c184 <__swsetup_r+0xe0>)
 800c0a6:	b570      	push	{r4, r5, r6, lr}
 800c0a8:	681d      	ldr	r5, [r3, #0]
 800c0aa:	0006      	movs	r6, r0
 800c0ac:	000c      	movs	r4, r1
 800c0ae:	2d00      	cmp	r5, #0
 800c0b0:	d005      	beq.n	800c0be <__swsetup_r+0x1a>
 800c0b2:	69ab      	ldr	r3, [r5, #24]
 800c0b4:	2b00      	cmp	r3, #0
 800c0b6:	d102      	bne.n	800c0be <__swsetup_r+0x1a>
 800c0b8:	0028      	movs	r0, r5
 800c0ba:	f000 f9a1 	bl	800c400 <__sinit>
 800c0be:	4b32      	ldr	r3, [pc, #200]	; (800c188 <__swsetup_r+0xe4>)
 800c0c0:	429c      	cmp	r4, r3
 800c0c2:	d10f      	bne.n	800c0e4 <__swsetup_r+0x40>
 800c0c4:	686c      	ldr	r4, [r5, #4]
 800c0c6:	230c      	movs	r3, #12
 800c0c8:	5ee2      	ldrsh	r2, [r4, r3]
 800c0ca:	b293      	uxth	r3, r2
 800c0cc:	0711      	lsls	r1, r2, #28
 800c0ce:	d42d      	bmi.n	800c12c <__swsetup_r+0x88>
 800c0d0:	06d9      	lsls	r1, r3, #27
 800c0d2:	d411      	bmi.n	800c0f8 <__swsetup_r+0x54>
 800c0d4:	2309      	movs	r3, #9
 800c0d6:	2001      	movs	r0, #1
 800c0d8:	6033      	str	r3, [r6, #0]
 800c0da:	3337      	adds	r3, #55	; 0x37
 800c0dc:	4313      	orrs	r3, r2
 800c0de:	81a3      	strh	r3, [r4, #12]
 800c0e0:	4240      	negs	r0, r0
 800c0e2:	bd70      	pop	{r4, r5, r6, pc}
 800c0e4:	4b29      	ldr	r3, [pc, #164]	; (800c18c <__swsetup_r+0xe8>)
 800c0e6:	429c      	cmp	r4, r3
 800c0e8:	d101      	bne.n	800c0ee <__swsetup_r+0x4a>
 800c0ea:	68ac      	ldr	r4, [r5, #8]
 800c0ec:	e7eb      	b.n	800c0c6 <__swsetup_r+0x22>
 800c0ee:	4b28      	ldr	r3, [pc, #160]	; (800c190 <__swsetup_r+0xec>)
 800c0f0:	429c      	cmp	r4, r3
 800c0f2:	d1e8      	bne.n	800c0c6 <__swsetup_r+0x22>
 800c0f4:	68ec      	ldr	r4, [r5, #12]
 800c0f6:	e7e6      	b.n	800c0c6 <__swsetup_r+0x22>
 800c0f8:	075b      	lsls	r3, r3, #29
 800c0fa:	d513      	bpl.n	800c124 <__swsetup_r+0x80>
 800c0fc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c0fe:	2900      	cmp	r1, #0
 800c100:	d008      	beq.n	800c114 <__swsetup_r+0x70>
 800c102:	0023      	movs	r3, r4
 800c104:	3344      	adds	r3, #68	; 0x44
 800c106:	4299      	cmp	r1, r3
 800c108:	d002      	beq.n	800c110 <__swsetup_r+0x6c>
 800c10a:	0030      	movs	r0, r6
 800c10c:	f7ff fb16 	bl	800b73c <_free_r>
 800c110:	2300      	movs	r3, #0
 800c112:	6363      	str	r3, [r4, #52]	; 0x34
 800c114:	2224      	movs	r2, #36	; 0x24
 800c116:	89a3      	ldrh	r3, [r4, #12]
 800c118:	4393      	bics	r3, r2
 800c11a:	81a3      	strh	r3, [r4, #12]
 800c11c:	2300      	movs	r3, #0
 800c11e:	6063      	str	r3, [r4, #4]
 800c120:	6923      	ldr	r3, [r4, #16]
 800c122:	6023      	str	r3, [r4, #0]
 800c124:	2308      	movs	r3, #8
 800c126:	89a2      	ldrh	r2, [r4, #12]
 800c128:	4313      	orrs	r3, r2
 800c12a:	81a3      	strh	r3, [r4, #12]
 800c12c:	6923      	ldr	r3, [r4, #16]
 800c12e:	2b00      	cmp	r3, #0
 800c130:	d10b      	bne.n	800c14a <__swsetup_r+0xa6>
 800c132:	21a0      	movs	r1, #160	; 0xa0
 800c134:	2280      	movs	r2, #128	; 0x80
 800c136:	89a3      	ldrh	r3, [r4, #12]
 800c138:	0089      	lsls	r1, r1, #2
 800c13a:	0092      	lsls	r2, r2, #2
 800c13c:	400b      	ands	r3, r1
 800c13e:	4293      	cmp	r3, r2
 800c140:	d003      	beq.n	800c14a <__swsetup_r+0xa6>
 800c142:	0021      	movs	r1, r4
 800c144:	0030      	movs	r0, r6
 800c146:	f000 fa27 	bl	800c598 <__smakebuf_r>
 800c14a:	220c      	movs	r2, #12
 800c14c:	5ea3      	ldrsh	r3, [r4, r2]
 800c14e:	2001      	movs	r0, #1
 800c150:	001a      	movs	r2, r3
 800c152:	b299      	uxth	r1, r3
 800c154:	4002      	ands	r2, r0
 800c156:	4203      	tst	r3, r0
 800c158:	d00f      	beq.n	800c17a <__swsetup_r+0xd6>
 800c15a:	2200      	movs	r2, #0
 800c15c:	60a2      	str	r2, [r4, #8]
 800c15e:	6962      	ldr	r2, [r4, #20]
 800c160:	4252      	negs	r2, r2
 800c162:	61a2      	str	r2, [r4, #24]
 800c164:	2000      	movs	r0, #0
 800c166:	6922      	ldr	r2, [r4, #16]
 800c168:	4282      	cmp	r2, r0
 800c16a:	d1ba      	bne.n	800c0e2 <__swsetup_r+0x3e>
 800c16c:	060a      	lsls	r2, r1, #24
 800c16e:	d5b8      	bpl.n	800c0e2 <__swsetup_r+0x3e>
 800c170:	2240      	movs	r2, #64	; 0x40
 800c172:	4313      	orrs	r3, r2
 800c174:	81a3      	strh	r3, [r4, #12]
 800c176:	3801      	subs	r0, #1
 800c178:	e7b3      	b.n	800c0e2 <__swsetup_r+0x3e>
 800c17a:	0788      	lsls	r0, r1, #30
 800c17c:	d400      	bmi.n	800c180 <__swsetup_r+0xdc>
 800c17e:	6962      	ldr	r2, [r4, #20]
 800c180:	60a2      	str	r2, [r4, #8]
 800c182:	e7ef      	b.n	800c164 <__swsetup_r+0xc0>
 800c184:	2000001c 	.word	0x2000001c
 800c188:	0800d1bc 	.word	0x0800d1bc
 800c18c:	0800d1dc 	.word	0x0800d1dc
 800c190:	0800d19c 	.word	0x0800d19c

0800c194 <abort>:
 800c194:	2006      	movs	r0, #6
 800c196:	b510      	push	{r4, lr}
 800c198:	f000 fa74 	bl	800c684 <raise>
 800c19c:	2001      	movs	r0, #1
 800c19e:	f7f7 fc08 	bl	80039b2 <_exit>
	...

0800c1a4 <__sflush_r>:
 800c1a4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c1a6:	898b      	ldrh	r3, [r1, #12]
 800c1a8:	0005      	movs	r5, r0
 800c1aa:	000c      	movs	r4, r1
 800c1ac:	071a      	lsls	r2, r3, #28
 800c1ae:	d45f      	bmi.n	800c270 <__sflush_r+0xcc>
 800c1b0:	684a      	ldr	r2, [r1, #4]
 800c1b2:	2a00      	cmp	r2, #0
 800c1b4:	dc04      	bgt.n	800c1c0 <__sflush_r+0x1c>
 800c1b6:	6c0a      	ldr	r2, [r1, #64]	; 0x40
 800c1b8:	2a00      	cmp	r2, #0
 800c1ba:	dc01      	bgt.n	800c1c0 <__sflush_r+0x1c>
 800c1bc:	2000      	movs	r0, #0
 800c1be:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800c1c0:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 800c1c2:	2f00      	cmp	r7, #0
 800c1c4:	d0fa      	beq.n	800c1bc <__sflush_r+0x18>
 800c1c6:	2200      	movs	r2, #0
 800c1c8:	2180      	movs	r1, #128	; 0x80
 800c1ca:	682e      	ldr	r6, [r5, #0]
 800c1cc:	602a      	str	r2, [r5, #0]
 800c1ce:	001a      	movs	r2, r3
 800c1d0:	0149      	lsls	r1, r1, #5
 800c1d2:	400a      	ands	r2, r1
 800c1d4:	420b      	tst	r3, r1
 800c1d6:	d034      	beq.n	800c242 <__sflush_r+0x9e>
 800c1d8:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800c1da:	89a3      	ldrh	r3, [r4, #12]
 800c1dc:	075b      	lsls	r3, r3, #29
 800c1de:	d506      	bpl.n	800c1ee <__sflush_r+0x4a>
 800c1e0:	6863      	ldr	r3, [r4, #4]
 800c1e2:	1ac0      	subs	r0, r0, r3
 800c1e4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800c1e6:	2b00      	cmp	r3, #0
 800c1e8:	d001      	beq.n	800c1ee <__sflush_r+0x4a>
 800c1ea:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800c1ec:	1ac0      	subs	r0, r0, r3
 800c1ee:	0002      	movs	r2, r0
 800c1f0:	6a21      	ldr	r1, [r4, #32]
 800c1f2:	2300      	movs	r3, #0
 800c1f4:	0028      	movs	r0, r5
 800c1f6:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 800c1f8:	47b8      	blx	r7
 800c1fa:	89a1      	ldrh	r1, [r4, #12]
 800c1fc:	1c43      	adds	r3, r0, #1
 800c1fe:	d106      	bne.n	800c20e <__sflush_r+0x6a>
 800c200:	682b      	ldr	r3, [r5, #0]
 800c202:	2b1d      	cmp	r3, #29
 800c204:	d831      	bhi.n	800c26a <__sflush_r+0xc6>
 800c206:	4a2c      	ldr	r2, [pc, #176]	; (800c2b8 <__sflush_r+0x114>)
 800c208:	40da      	lsrs	r2, r3
 800c20a:	07d3      	lsls	r3, r2, #31
 800c20c:	d52d      	bpl.n	800c26a <__sflush_r+0xc6>
 800c20e:	2300      	movs	r3, #0
 800c210:	6063      	str	r3, [r4, #4]
 800c212:	6923      	ldr	r3, [r4, #16]
 800c214:	6023      	str	r3, [r4, #0]
 800c216:	04cb      	lsls	r3, r1, #19
 800c218:	d505      	bpl.n	800c226 <__sflush_r+0x82>
 800c21a:	1c43      	adds	r3, r0, #1
 800c21c:	d102      	bne.n	800c224 <__sflush_r+0x80>
 800c21e:	682b      	ldr	r3, [r5, #0]
 800c220:	2b00      	cmp	r3, #0
 800c222:	d100      	bne.n	800c226 <__sflush_r+0x82>
 800c224:	6560      	str	r0, [r4, #84]	; 0x54
 800c226:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c228:	602e      	str	r6, [r5, #0]
 800c22a:	2900      	cmp	r1, #0
 800c22c:	d0c6      	beq.n	800c1bc <__sflush_r+0x18>
 800c22e:	0023      	movs	r3, r4
 800c230:	3344      	adds	r3, #68	; 0x44
 800c232:	4299      	cmp	r1, r3
 800c234:	d002      	beq.n	800c23c <__sflush_r+0x98>
 800c236:	0028      	movs	r0, r5
 800c238:	f7ff fa80 	bl	800b73c <_free_r>
 800c23c:	2000      	movs	r0, #0
 800c23e:	6360      	str	r0, [r4, #52]	; 0x34
 800c240:	e7bd      	b.n	800c1be <__sflush_r+0x1a>
 800c242:	2301      	movs	r3, #1
 800c244:	0028      	movs	r0, r5
 800c246:	6a21      	ldr	r1, [r4, #32]
 800c248:	47b8      	blx	r7
 800c24a:	1c43      	adds	r3, r0, #1
 800c24c:	d1c5      	bne.n	800c1da <__sflush_r+0x36>
 800c24e:	682b      	ldr	r3, [r5, #0]
 800c250:	2b00      	cmp	r3, #0
 800c252:	d0c2      	beq.n	800c1da <__sflush_r+0x36>
 800c254:	2b1d      	cmp	r3, #29
 800c256:	d001      	beq.n	800c25c <__sflush_r+0xb8>
 800c258:	2b16      	cmp	r3, #22
 800c25a:	d101      	bne.n	800c260 <__sflush_r+0xbc>
 800c25c:	602e      	str	r6, [r5, #0]
 800c25e:	e7ad      	b.n	800c1bc <__sflush_r+0x18>
 800c260:	2340      	movs	r3, #64	; 0x40
 800c262:	89a2      	ldrh	r2, [r4, #12]
 800c264:	4313      	orrs	r3, r2
 800c266:	81a3      	strh	r3, [r4, #12]
 800c268:	e7a9      	b.n	800c1be <__sflush_r+0x1a>
 800c26a:	2340      	movs	r3, #64	; 0x40
 800c26c:	430b      	orrs	r3, r1
 800c26e:	e7fa      	b.n	800c266 <__sflush_r+0xc2>
 800c270:	690f      	ldr	r7, [r1, #16]
 800c272:	2f00      	cmp	r7, #0
 800c274:	d0a2      	beq.n	800c1bc <__sflush_r+0x18>
 800c276:	680a      	ldr	r2, [r1, #0]
 800c278:	600f      	str	r7, [r1, #0]
 800c27a:	1bd2      	subs	r2, r2, r7
 800c27c:	9201      	str	r2, [sp, #4]
 800c27e:	2200      	movs	r2, #0
 800c280:	079b      	lsls	r3, r3, #30
 800c282:	d100      	bne.n	800c286 <__sflush_r+0xe2>
 800c284:	694a      	ldr	r2, [r1, #20]
 800c286:	60a2      	str	r2, [r4, #8]
 800c288:	9b01      	ldr	r3, [sp, #4]
 800c28a:	2b00      	cmp	r3, #0
 800c28c:	dc00      	bgt.n	800c290 <__sflush_r+0xec>
 800c28e:	e795      	b.n	800c1bc <__sflush_r+0x18>
 800c290:	003a      	movs	r2, r7
 800c292:	0028      	movs	r0, r5
 800c294:	9b01      	ldr	r3, [sp, #4]
 800c296:	6a21      	ldr	r1, [r4, #32]
 800c298:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800c29a:	47b0      	blx	r6
 800c29c:	2800      	cmp	r0, #0
 800c29e:	dc06      	bgt.n	800c2ae <__sflush_r+0x10a>
 800c2a0:	2340      	movs	r3, #64	; 0x40
 800c2a2:	2001      	movs	r0, #1
 800c2a4:	89a2      	ldrh	r2, [r4, #12]
 800c2a6:	4240      	negs	r0, r0
 800c2a8:	4313      	orrs	r3, r2
 800c2aa:	81a3      	strh	r3, [r4, #12]
 800c2ac:	e787      	b.n	800c1be <__sflush_r+0x1a>
 800c2ae:	9b01      	ldr	r3, [sp, #4]
 800c2b0:	183f      	adds	r7, r7, r0
 800c2b2:	1a1b      	subs	r3, r3, r0
 800c2b4:	9301      	str	r3, [sp, #4]
 800c2b6:	e7e7      	b.n	800c288 <__sflush_r+0xe4>
 800c2b8:	20400001 	.word	0x20400001

0800c2bc <_fflush_r>:
 800c2bc:	690b      	ldr	r3, [r1, #16]
 800c2be:	b570      	push	{r4, r5, r6, lr}
 800c2c0:	0005      	movs	r5, r0
 800c2c2:	000c      	movs	r4, r1
 800c2c4:	2b00      	cmp	r3, #0
 800c2c6:	d102      	bne.n	800c2ce <_fflush_r+0x12>
 800c2c8:	2500      	movs	r5, #0
 800c2ca:	0028      	movs	r0, r5
 800c2cc:	bd70      	pop	{r4, r5, r6, pc}
 800c2ce:	2800      	cmp	r0, #0
 800c2d0:	d004      	beq.n	800c2dc <_fflush_r+0x20>
 800c2d2:	6983      	ldr	r3, [r0, #24]
 800c2d4:	2b00      	cmp	r3, #0
 800c2d6:	d101      	bne.n	800c2dc <_fflush_r+0x20>
 800c2d8:	f000 f892 	bl	800c400 <__sinit>
 800c2dc:	4b14      	ldr	r3, [pc, #80]	; (800c330 <_fflush_r+0x74>)
 800c2de:	429c      	cmp	r4, r3
 800c2e0:	d11b      	bne.n	800c31a <_fflush_r+0x5e>
 800c2e2:	686c      	ldr	r4, [r5, #4]
 800c2e4:	220c      	movs	r2, #12
 800c2e6:	5ea3      	ldrsh	r3, [r4, r2]
 800c2e8:	2b00      	cmp	r3, #0
 800c2ea:	d0ed      	beq.n	800c2c8 <_fflush_r+0xc>
 800c2ec:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800c2ee:	07d2      	lsls	r2, r2, #31
 800c2f0:	d404      	bmi.n	800c2fc <_fflush_r+0x40>
 800c2f2:	059b      	lsls	r3, r3, #22
 800c2f4:	d402      	bmi.n	800c2fc <_fflush_r+0x40>
 800c2f6:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c2f8:	f000 f923 	bl	800c542 <__retarget_lock_acquire_recursive>
 800c2fc:	0028      	movs	r0, r5
 800c2fe:	0021      	movs	r1, r4
 800c300:	f7ff ff50 	bl	800c1a4 <__sflush_r>
 800c304:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800c306:	0005      	movs	r5, r0
 800c308:	07db      	lsls	r3, r3, #31
 800c30a:	d4de      	bmi.n	800c2ca <_fflush_r+0xe>
 800c30c:	89a3      	ldrh	r3, [r4, #12]
 800c30e:	059b      	lsls	r3, r3, #22
 800c310:	d4db      	bmi.n	800c2ca <_fflush_r+0xe>
 800c312:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c314:	f000 f916 	bl	800c544 <__retarget_lock_release_recursive>
 800c318:	e7d7      	b.n	800c2ca <_fflush_r+0xe>
 800c31a:	4b06      	ldr	r3, [pc, #24]	; (800c334 <_fflush_r+0x78>)
 800c31c:	429c      	cmp	r4, r3
 800c31e:	d101      	bne.n	800c324 <_fflush_r+0x68>
 800c320:	68ac      	ldr	r4, [r5, #8]
 800c322:	e7df      	b.n	800c2e4 <_fflush_r+0x28>
 800c324:	4b04      	ldr	r3, [pc, #16]	; (800c338 <_fflush_r+0x7c>)
 800c326:	429c      	cmp	r4, r3
 800c328:	d1dc      	bne.n	800c2e4 <_fflush_r+0x28>
 800c32a:	68ec      	ldr	r4, [r5, #12]
 800c32c:	e7da      	b.n	800c2e4 <_fflush_r+0x28>
 800c32e:	46c0      	nop			; (mov r8, r8)
 800c330:	0800d1bc 	.word	0x0800d1bc
 800c334:	0800d1dc 	.word	0x0800d1dc
 800c338:	0800d19c 	.word	0x0800d19c

0800c33c <std>:
 800c33c:	2300      	movs	r3, #0
 800c33e:	b510      	push	{r4, lr}
 800c340:	0004      	movs	r4, r0
 800c342:	6003      	str	r3, [r0, #0]
 800c344:	6043      	str	r3, [r0, #4]
 800c346:	6083      	str	r3, [r0, #8]
 800c348:	8181      	strh	r1, [r0, #12]
 800c34a:	6643      	str	r3, [r0, #100]	; 0x64
 800c34c:	0019      	movs	r1, r3
 800c34e:	81c2      	strh	r2, [r0, #14]
 800c350:	6103      	str	r3, [r0, #16]
 800c352:	6143      	str	r3, [r0, #20]
 800c354:	6183      	str	r3, [r0, #24]
 800c356:	2208      	movs	r2, #8
 800c358:	305c      	adds	r0, #92	; 0x5c
 800c35a:	f7fb fd43 	bl	8007de4 <memset>
 800c35e:	4b05      	ldr	r3, [pc, #20]	; (800c374 <std+0x38>)
 800c360:	6224      	str	r4, [r4, #32]
 800c362:	6263      	str	r3, [r4, #36]	; 0x24
 800c364:	4b04      	ldr	r3, [pc, #16]	; (800c378 <std+0x3c>)
 800c366:	62a3      	str	r3, [r4, #40]	; 0x28
 800c368:	4b04      	ldr	r3, [pc, #16]	; (800c37c <std+0x40>)
 800c36a:	62e3      	str	r3, [r4, #44]	; 0x2c
 800c36c:	4b04      	ldr	r3, [pc, #16]	; (800c380 <std+0x44>)
 800c36e:	6323      	str	r3, [r4, #48]	; 0x30
 800c370:	bd10      	pop	{r4, pc}
 800c372:	46c0      	nop			; (mov r8, r8)
 800c374:	0800c6c5 	.word	0x0800c6c5
 800c378:	0800c6ed 	.word	0x0800c6ed
 800c37c:	0800c725 	.word	0x0800c725
 800c380:	0800c751 	.word	0x0800c751

0800c384 <_cleanup_r>:
 800c384:	b510      	push	{r4, lr}
 800c386:	4902      	ldr	r1, [pc, #8]	; (800c390 <_cleanup_r+0xc>)
 800c388:	f000 f8ba 	bl	800c500 <_fwalk_reent>
 800c38c:	bd10      	pop	{r4, pc}
 800c38e:	46c0      	nop			; (mov r8, r8)
 800c390:	0800c2bd 	.word	0x0800c2bd

0800c394 <__sfmoreglue>:
 800c394:	b570      	push	{r4, r5, r6, lr}
 800c396:	2568      	movs	r5, #104	; 0x68
 800c398:	1e4a      	subs	r2, r1, #1
 800c39a:	4355      	muls	r5, r2
 800c39c:	000e      	movs	r6, r1
 800c39e:	0029      	movs	r1, r5
 800c3a0:	3174      	adds	r1, #116	; 0x74
 800c3a2:	f7ff fa37 	bl	800b814 <_malloc_r>
 800c3a6:	1e04      	subs	r4, r0, #0
 800c3a8:	d008      	beq.n	800c3bc <__sfmoreglue+0x28>
 800c3aa:	2100      	movs	r1, #0
 800c3ac:	002a      	movs	r2, r5
 800c3ae:	6001      	str	r1, [r0, #0]
 800c3b0:	6046      	str	r6, [r0, #4]
 800c3b2:	300c      	adds	r0, #12
 800c3b4:	60a0      	str	r0, [r4, #8]
 800c3b6:	3268      	adds	r2, #104	; 0x68
 800c3b8:	f7fb fd14 	bl	8007de4 <memset>
 800c3bc:	0020      	movs	r0, r4
 800c3be:	bd70      	pop	{r4, r5, r6, pc}

0800c3c0 <__sfp_lock_acquire>:
 800c3c0:	b510      	push	{r4, lr}
 800c3c2:	4802      	ldr	r0, [pc, #8]	; (800c3cc <__sfp_lock_acquire+0xc>)
 800c3c4:	f000 f8bd 	bl	800c542 <__retarget_lock_acquire_recursive>
 800c3c8:	bd10      	pop	{r4, pc}
 800c3ca:	46c0      	nop			; (mov r8, r8)
 800c3cc:	200003c1 	.word	0x200003c1

0800c3d0 <__sfp_lock_release>:
 800c3d0:	b510      	push	{r4, lr}
 800c3d2:	4802      	ldr	r0, [pc, #8]	; (800c3dc <__sfp_lock_release+0xc>)
 800c3d4:	f000 f8b6 	bl	800c544 <__retarget_lock_release_recursive>
 800c3d8:	bd10      	pop	{r4, pc}
 800c3da:	46c0      	nop			; (mov r8, r8)
 800c3dc:	200003c1 	.word	0x200003c1

0800c3e0 <__sinit_lock_acquire>:
 800c3e0:	b510      	push	{r4, lr}
 800c3e2:	4802      	ldr	r0, [pc, #8]	; (800c3ec <__sinit_lock_acquire+0xc>)
 800c3e4:	f000 f8ad 	bl	800c542 <__retarget_lock_acquire_recursive>
 800c3e8:	bd10      	pop	{r4, pc}
 800c3ea:	46c0      	nop			; (mov r8, r8)
 800c3ec:	200003c2 	.word	0x200003c2

0800c3f0 <__sinit_lock_release>:
 800c3f0:	b510      	push	{r4, lr}
 800c3f2:	4802      	ldr	r0, [pc, #8]	; (800c3fc <__sinit_lock_release+0xc>)
 800c3f4:	f000 f8a6 	bl	800c544 <__retarget_lock_release_recursive>
 800c3f8:	bd10      	pop	{r4, pc}
 800c3fa:	46c0      	nop			; (mov r8, r8)
 800c3fc:	200003c2 	.word	0x200003c2

0800c400 <__sinit>:
 800c400:	b513      	push	{r0, r1, r4, lr}
 800c402:	0004      	movs	r4, r0
 800c404:	f7ff ffec 	bl	800c3e0 <__sinit_lock_acquire>
 800c408:	69a3      	ldr	r3, [r4, #24]
 800c40a:	2b00      	cmp	r3, #0
 800c40c:	d002      	beq.n	800c414 <__sinit+0x14>
 800c40e:	f7ff ffef 	bl	800c3f0 <__sinit_lock_release>
 800c412:	bd13      	pop	{r0, r1, r4, pc}
 800c414:	64a3      	str	r3, [r4, #72]	; 0x48
 800c416:	64e3      	str	r3, [r4, #76]	; 0x4c
 800c418:	6523      	str	r3, [r4, #80]	; 0x50
 800c41a:	4b13      	ldr	r3, [pc, #76]	; (800c468 <__sinit+0x68>)
 800c41c:	4a13      	ldr	r2, [pc, #76]	; (800c46c <__sinit+0x6c>)
 800c41e:	681b      	ldr	r3, [r3, #0]
 800c420:	62a2      	str	r2, [r4, #40]	; 0x28
 800c422:	9301      	str	r3, [sp, #4]
 800c424:	42a3      	cmp	r3, r4
 800c426:	d101      	bne.n	800c42c <__sinit+0x2c>
 800c428:	2301      	movs	r3, #1
 800c42a:	61a3      	str	r3, [r4, #24]
 800c42c:	0020      	movs	r0, r4
 800c42e:	f000 f81f 	bl	800c470 <__sfp>
 800c432:	6060      	str	r0, [r4, #4]
 800c434:	0020      	movs	r0, r4
 800c436:	f000 f81b 	bl	800c470 <__sfp>
 800c43a:	60a0      	str	r0, [r4, #8]
 800c43c:	0020      	movs	r0, r4
 800c43e:	f000 f817 	bl	800c470 <__sfp>
 800c442:	2200      	movs	r2, #0
 800c444:	2104      	movs	r1, #4
 800c446:	60e0      	str	r0, [r4, #12]
 800c448:	6860      	ldr	r0, [r4, #4]
 800c44a:	f7ff ff77 	bl	800c33c <std>
 800c44e:	2201      	movs	r2, #1
 800c450:	2109      	movs	r1, #9
 800c452:	68a0      	ldr	r0, [r4, #8]
 800c454:	f7ff ff72 	bl	800c33c <std>
 800c458:	2202      	movs	r2, #2
 800c45a:	2112      	movs	r1, #18
 800c45c:	68e0      	ldr	r0, [r4, #12]
 800c45e:	f7ff ff6d 	bl	800c33c <std>
 800c462:	2301      	movs	r3, #1
 800c464:	61a3      	str	r3, [r4, #24]
 800c466:	e7d2      	b.n	800c40e <__sinit+0xe>
 800c468:	0800cd54 	.word	0x0800cd54
 800c46c:	0800c385 	.word	0x0800c385

0800c470 <__sfp>:
 800c470:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c472:	0007      	movs	r7, r0
 800c474:	f7ff ffa4 	bl	800c3c0 <__sfp_lock_acquire>
 800c478:	4b1f      	ldr	r3, [pc, #124]	; (800c4f8 <__sfp+0x88>)
 800c47a:	681e      	ldr	r6, [r3, #0]
 800c47c:	69b3      	ldr	r3, [r6, #24]
 800c47e:	2b00      	cmp	r3, #0
 800c480:	d102      	bne.n	800c488 <__sfp+0x18>
 800c482:	0030      	movs	r0, r6
 800c484:	f7ff ffbc 	bl	800c400 <__sinit>
 800c488:	3648      	adds	r6, #72	; 0x48
 800c48a:	68b4      	ldr	r4, [r6, #8]
 800c48c:	6873      	ldr	r3, [r6, #4]
 800c48e:	3b01      	subs	r3, #1
 800c490:	d504      	bpl.n	800c49c <__sfp+0x2c>
 800c492:	6833      	ldr	r3, [r6, #0]
 800c494:	2b00      	cmp	r3, #0
 800c496:	d022      	beq.n	800c4de <__sfp+0x6e>
 800c498:	6836      	ldr	r6, [r6, #0]
 800c49a:	e7f6      	b.n	800c48a <__sfp+0x1a>
 800c49c:	220c      	movs	r2, #12
 800c49e:	5ea5      	ldrsh	r5, [r4, r2]
 800c4a0:	2d00      	cmp	r5, #0
 800c4a2:	d11a      	bne.n	800c4da <__sfp+0x6a>
 800c4a4:	0020      	movs	r0, r4
 800c4a6:	4b15      	ldr	r3, [pc, #84]	; (800c4fc <__sfp+0x8c>)
 800c4a8:	3058      	adds	r0, #88	; 0x58
 800c4aa:	60e3      	str	r3, [r4, #12]
 800c4ac:	6665      	str	r5, [r4, #100]	; 0x64
 800c4ae:	f000 f847 	bl	800c540 <__retarget_lock_init_recursive>
 800c4b2:	f7ff ff8d 	bl	800c3d0 <__sfp_lock_release>
 800c4b6:	0020      	movs	r0, r4
 800c4b8:	2208      	movs	r2, #8
 800c4ba:	0029      	movs	r1, r5
 800c4bc:	6025      	str	r5, [r4, #0]
 800c4be:	60a5      	str	r5, [r4, #8]
 800c4c0:	6065      	str	r5, [r4, #4]
 800c4c2:	6125      	str	r5, [r4, #16]
 800c4c4:	6165      	str	r5, [r4, #20]
 800c4c6:	61a5      	str	r5, [r4, #24]
 800c4c8:	305c      	adds	r0, #92	; 0x5c
 800c4ca:	f7fb fc8b 	bl	8007de4 <memset>
 800c4ce:	6365      	str	r5, [r4, #52]	; 0x34
 800c4d0:	63a5      	str	r5, [r4, #56]	; 0x38
 800c4d2:	64a5      	str	r5, [r4, #72]	; 0x48
 800c4d4:	64e5      	str	r5, [r4, #76]	; 0x4c
 800c4d6:	0020      	movs	r0, r4
 800c4d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c4da:	3468      	adds	r4, #104	; 0x68
 800c4dc:	e7d7      	b.n	800c48e <__sfp+0x1e>
 800c4de:	2104      	movs	r1, #4
 800c4e0:	0038      	movs	r0, r7
 800c4e2:	f7ff ff57 	bl	800c394 <__sfmoreglue>
 800c4e6:	1e04      	subs	r4, r0, #0
 800c4e8:	6030      	str	r0, [r6, #0]
 800c4ea:	d1d5      	bne.n	800c498 <__sfp+0x28>
 800c4ec:	f7ff ff70 	bl	800c3d0 <__sfp_lock_release>
 800c4f0:	230c      	movs	r3, #12
 800c4f2:	603b      	str	r3, [r7, #0]
 800c4f4:	e7ef      	b.n	800c4d6 <__sfp+0x66>
 800c4f6:	46c0      	nop			; (mov r8, r8)
 800c4f8:	0800cd54 	.word	0x0800cd54
 800c4fc:	ffff0001 	.word	0xffff0001

0800c500 <_fwalk_reent>:
 800c500:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c502:	0004      	movs	r4, r0
 800c504:	0006      	movs	r6, r0
 800c506:	2700      	movs	r7, #0
 800c508:	9101      	str	r1, [sp, #4]
 800c50a:	3448      	adds	r4, #72	; 0x48
 800c50c:	6863      	ldr	r3, [r4, #4]
 800c50e:	68a5      	ldr	r5, [r4, #8]
 800c510:	9300      	str	r3, [sp, #0]
 800c512:	9b00      	ldr	r3, [sp, #0]
 800c514:	3b01      	subs	r3, #1
 800c516:	9300      	str	r3, [sp, #0]
 800c518:	d504      	bpl.n	800c524 <_fwalk_reent+0x24>
 800c51a:	6824      	ldr	r4, [r4, #0]
 800c51c:	2c00      	cmp	r4, #0
 800c51e:	d1f5      	bne.n	800c50c <_fwalk_reent+0xc>
 800c520:	0038      	movs	r0, r7
 800c522:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800c524:	89ab      	ldrh	r3, [r5, #12]
 800c526:	2b01      	cmp	r3, #1
 800c528:	d908      	bls.n	800c53c <_fwalk_reent+0x3c>
 800c52a:	220e      	movs	r2, #14
 800c52c:	5eab      	ldrsh	r3, [r5, r2]
 800c52e:	3301      	adds	r3, #1
 800c530:	d004      	beq.n	800c53c <_fwalk_reent+0x3c>
 800c532:	0029      	movs	r1, r5
 800c534:	0030      	movs	r0, r6
 800c536:	9b01      	ldr	r3, [sp, #4]
 800c538:	4798      	blx	r3
 800c53a:	4307      	orrs	r7, r0
 800c53c:	3568      	adds	r5, #104	; 0x68
 800c53e:	e7e8      	b.n	800c512 <_fwalk_reent+0x12>

0800c540 <__retarget_lock_init_recursive>:
 800c540:	4770      	bx	lr

0800c542 <__retarget_lock_acquire_recursive>:
 800c542:	4770      	bx	lr

0800c544 <__retarget_lock_release_recursive>:
 800c544:	4770      	bx	lr
	...

0800c548 <__swhatbuf_r>:
 800c548:	b570      	push	{r4, r5, r6, lr}
 800c54a:	000e      	movs	r6, r1
 800c54c:	001d      	movs	r5, r3
 800c54e:	230e      	movs	r3, #14
 800c550:	5ec9      	ldrsh	r1, [r1, r3]
 800c552:	0014      	movs	r4, r2
 800c554:	b096      	sub	sp, #88	; 0x58
 800c556:	2900      	cmp	r1, #0
 800c558:	da08      	bge.n	800c56c <__swhatbuf_r+0x24>
 800c55a:	220c      	movs	r2, #12
 800c55c:	5eb3      	ldrsh	r3, [r6, r2]
 800c55e:	2200      	movs	r2, #0
 800c560:	602a      	str	r2, [r5, #0]
 800c562:	061b      	lsls	r3, r3, #24
 800c564:	d411      	bmi.n	800c58a <__swhatbuf_r+0x42>
 800c566:	2380      	movs	r3, #128	; 0x80
 800c568:	00db      	lsls	r3, r3, #3
 800c56a:	e00f      	b.n	800c58c <__swhatbuf_r+0x44>
 800c56c:	466a      	mov	r2, sp
 800c56e:	f000 f91b 	bl	800c7a8 <_fstat_r>
 800c572:	2800      	cmp	r0, #0
 800c574:	dbf1      	blt.n	800c55a <__swhatbuf_r+0x12>
 800c576:	23f0      	movs	r3, #240	; 0xf0
 800c578:	9901      	ldr	r1, [sp, #4]
 800c57a:	021b      	lsls	r3, r3, #8
 800c57c:	4019      	ands	r1, r3
 800c57e:	4b05      	ldr	r3, [pc, #20]	; (800c594 <__swhatbuf_r+0x4c>)
 800c580:	18c9      	adds	r1, r1, r3
 800c582:	424b      	negs	r3, r1
 800c584:	4159      	adcs	r1, r3
 800c586:	6029      	str	r1, [r5, #0]
 800c588:	e7ed      	b.n	800c566 <__swhatbuf_r+0x1e>
 800c58a:	2340      	movs	r3, #64	; 0x40
 800c58c:	2000      	movs	r0, #0
 800c58e:	6023      	str	r3, [r4, #0]
 800c590:	b016      	add	sp, #88	; 0x58
 800c592:	bd70      	pop	{r4, r5, r6, pc}
 800c594:	ffffe000 	.word	0xffffe000

0800c598 <__smakebuf_r>:
 800c598:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c59a:	2602      	movs	r6, #2
 800c59c:	898b      	ldrh	r3, [r1, #12]
 800c59e:	0005      	movs	r5, r0
 800c5a0:	000c      	movs	r4, r1
 800c5a2:	4233      	tst	r3, r6
 800c5a4:	d006      	beq.n	800c5b4 <__smakebuf_r+0x1c>
 800c5a6:	0023      	movs	r3, r4
 800c5a8:	3347      	adds	r3, #71	; 0x47
 800c5aa:	6023      	str	r3, [r4, #0]
 800c5ac:	6123      	str	r3, [r4, #16]
 800c5ae:	2301      	movs	r3, #1
 800c5b0:	6163      	str	r3, [r4, #20]
 800c5b2:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 800c5b4:	466a      	mov	r2, sp
 800c5b6:	ab01      	add	r3, sp, #4
 800c5b8:	f7ff ffc6 	bl	800c548 <__swhatbuf_r>
 800c5bc:	9900      	ldr	r1, [sp, #0]
 800c5be:	0007      	movs	r7, r0
 800c5c0:	0028      	movs	r0, r5
 800c5c2:	f7ff f927 	bl	800b814 <_malloc_r>
 800c5c6:	2800      	cmp	r0, #0
 800c5c8:	d108      	bne.n	800c5dc <__smakebuf_r+0x44>
 800c5ca:	220c      	movs	r2, #12
 800c5cc:	5ea3      	ldrsh	r3, [r4, r2]
 800c5ce:	059a      	lsls	r2, r3, #22
 800c5d0:	d4ef      	bmi.n	800c5b2 <__smakebuf_r+0x1a>
 800c5d2:	2203      	movs	r2, #3
 800c5d4:	4393      	bics	r3, r2
 800c5d6:	431e      	orrs	r6, r3
 800c5d8:	81a6      	strh	r6, [r4, #12]
 800c5da:	e7e4      	b.n	800c5a6 <__smakebuf_r+0xe>
 800c5dc:	4b0f      	ldr	r3, [pc, #60]	; (800c61c <__smakebuf_r+0x84>)
 800c5de:	62ab      	str	r3, [r5, #40]	; 0x28
 800c5e0:	2380      	movs	r3, #128	; 0x80
 800c5e2:	89a2      	ldrh	r2, [r4, #12]
 800c5e4:	6020      	str	r0, [r4, #0]
 800c5e6:	4313      	orrs	r3, r2
 800c5e8:	81a3      	strh	r3, [r4, #12]
 800c5ea:	9b00      	ldr	r3, [sp, #0]
 800c5ec:	6120      	str	r0, [r4, #16]
 800c5ee:	6163      	str	r3, [r4, #20]
 800c5f0:	9b01      	ldr	r3, [sp, #4]
 800c5f2:	2b00      	cmp	r3, #0
 800c5f4:	d00d      	beq.n	800c612 <__smakebuf_r+0x7a>
 800c5f6:	0028      	movs	r0, r5
 800c5f8:	230e      	movs	r3, #14
 800c5fa:	5ee1      	ldrsh	r1, [r4, r3]
 800c5fc:	f000 f8e6 	bl	800c7cc <_isatty_r>
 800c600:	2800      	cmp	r0, #0
 800c602:	d006      	beq.n	800c612 <__smakebuf_r+0x7a>
 800c604:	2203      	movs	r2, #3
 800c606:	89a3      	ldrh	r3, [r4, #12]
 800c608:	4393      	bics	r3, r2
 800c60a:	001a      	movs	r2, r3
 800c60c:	2301      	movs	r3, #1
 800c60e:	4313      	orrs	r3, r2
 800c610:	81a3      	strh	r3, [r4, #12]
 800c612:	89a0      	ldrh	r0, [r4, #12]
 800c614:	4307      	orrs	r7, r0
 800c616:	81a7      	strh	r7, [r4, #12]
 800c618:	e7cb      	b.n	800c5b2 <__smakebuf_r+0x1a>
 800c61a:	46c0      	nop			; (mov r8, r8)
 800c61c:	0800c385 	.word	0x0800c385

0800c620 <_malloc_usable_size_r>:
 800c620:	1f0b      	subs	r3, r1, #4
 800c622:	681b      	ldr	r3, [r3, #0]
 800c624:	1f18      	subs	r0, r3, #4
 800c626:	2b00      	cmp	r3, #0
 800c628:	da01      	bge.n	800c62e <_malloc_usable_size_r+0xe>
 800c62a:	580b      	ldr	r3, [r1, r0]
 800c62c:	18c0      	adds	r0, r0, r3
 800c62e:	4770      	bx	lr

0800c630 <_raise_r>:
 800c630:	b570      	push	{r4, r5, r6, lr}
 800c632:	0004      	movs	r4, r0
 800c634:	000d      	movs	r5, r1
 800c636:	291f      	cmp	r1, #31
 800c638:	d904      	bls.n	800c644 <_raise_r+0x14>
 800c63a:	2316      	movs	r3, #22
 800c63c:	6003      	str	r3, [r0, #0]
 800c63e:	2001      	movs	r0, #1
 800c640:	4240      	negs	r0, r0
 800c642:	bd70      	pop	{r4, r5, r6, pc}
 800c644:	6c43      	ldr	r3, [r0, #68]	; 0x44
 800c646:	2b00      	cmp	r3, #0
 800c648:	d004      	beq.n	800c654 <_raise_r+0x24>
 800c64a:	008a      	lsls	r2, r1, #2
 800c64c:	189b      	adds	r3, r3, r2
 800c64e:	681a      	ldr	r2, [r3, #0]
 800c650:	2a00      	cmp	r2, #0
 800c652:	d108      	bne.n	800c666 <_raise_r+0x36>
 800c654:	0020      	movs	r0, r4
 800c656:	f000 f831 	bl	800c6bc <_getpid_r>
 800c65a:	002a      	movs	r2, r5
 800c65c:	0001      	movs	r1, r0
 800c65e:	0020      	movs	r0, r4
 800c660:	f000 f81a 	bl	800c698 <_kill_r>
 800c664:	e7ed      	b.n	800c642 <_raise_r+0x12>
 800c666:	2000      	movs	r0, #0
 800c668:	2a01      	cmp	r2, #1
 800c66a:	d0ea      	beq.n	800c642 <_raise_r+0x12>
 800c66c:	1c51      	adds	r1, r2, #1
 800c66e:	d103      	bne.n	800c678 <_raise_r+0x48>
 800c670:	2316      	movs	r3, #22
 800c672:	3001      	adds	r0, #1
 800c674:	6023      	str	r3, [r4, #0]
 800c676:	e7e4      	b.n	800c642 <_raise_r+0x12>
 800c678:	2400      	movs	r4, #0
 800c67a:	0028      	movs	r0, r5
 800c67c:	601c      	str	r4, [r3, #0]
 800c67e:	4790      	blx	r2
 800c680:	0020      	movs	r0, r4
 800c682:	e7de      	b.n	800c642 <_raise_r+0x12>

0800c684 <raise>:
 800c684:	b510      	push	{r4, lr}
 800c686:	4b03      	ldr	r3, [pc, #12]	; (800c694 <raise+0x10>)
 800c688:	0001      	movs	r1, r0
 800c68a:	6818      	ldr	r0, [r3, #0]
 800c68c:	f7ff ffd0 	bl	800c630 <_raise_r>
 800c690:	bd10      	pop	{r4, pc}
 800c692:	46c0      	nop			; (mov r8, r8)
 800c694:	2000001c 	.word	0x2000001c

0800c698 <_kill_r>:
 800c698:	2300      	movs	r3, #0
 800c69a:	b570      	push	{r4, r5, r6, lr}
 800c69c:	4d06      	ldr	r5, [pc, #24]	; (800c6b8 <_kill_r+0x20>)
 800c69e:	0004      	movs	r4, r0
 800c6a0:	0008      	movs	r0, r1
 800c6a2:	0011      	movs	r1, r2
 800c6a4:	602b      	str	r3, [r5, #0]
 800c6a6:	f7f7 f974 	bl	8003992 <_kill>
 800c6aa:	1c43      	adds	r3, r0, #1
 800c6ac:	d103      	bne.n	800c6b6 <_kill_r+0x1e>
 800c6ae:	682b      	ldr	r3, [r5, #0]
 800c6b0:	2b00      	cmp	r3, #0
 800c6b2:	d000      	beq.n	800c6b6 <_kill_r+0x1e>
 800c6b4:	6023      	str	r3, [r4, #0]
 800c6b6:	bd70      	pop	{r4, r5, r6, pc}
 800c6b8:	200003bc 	.word	0x200003bc

0800c6bc <_getpid_r>:
 800c6bc:	b510      	push	{r4, lr}
 800c6be:	f7f7 f962 	bl	8003986 <_getpid>
 800c6c2:	bd10      	pop	{r4, pc}

0800c6c4 <__sread>:
 800c6c4:	b570      	push	{r4, r5, r6, lr}
 800c6c6:	000c      	movs	r4, r1
 800c6c8:	250e      	movs	r5, #14
 800c6ca:	5f49      	ldrsh	r1, [r1, r5]
 800c6cc:	f000 f8a4 	bl	800c818 <_read_r>
 800c6d0:	2800      	cmp	r0, #0
 800c6d2:	db03      	blt.n	800c6dc <__sread+0x18>
 800c6d4:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800c6d6:	181b      	adds	r3, r3, r0
 800c6d8:	6563      	str	r3, [r4, #84]	; 0x54
 800c6da:	bd70      	pop	{r4, r5, r6, pc}
 800c6dc:	89a3      	ldrh	r3, [r4, #12]
 800c6de:	4a02      	ldr	r2, [pc, #8]	; (800c6e8 <__sread+0x24>)
 800c6e0:	4013      	ands	r3, r2
 800c6e2:	81a3      	strh	r3, [r4, #12]
 800c6e4:	e7f9      	b.n	800c6da <__sread+0x16>
 800c6e6:	46c0      	nop			; (mov r8, r8)
 800c6e8:	ffffefff 	.word	0xffffefff

0800c6ec <__swrite>:
 800c6ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c6ee:	001f      	movs	r7, r3
 800c6f0:	898b      	ldrh	r3, [r1, #12]
 800c6f2:	0005      	movs	r5, r0
 800c6f4:	000c      	movs	r4, r1
 800c6f6:	0016      	movs	r6, r2
 800c6f8:	05db      	lsls	r3, r3, #23
 800c6fa:	d505      	bpl.n	800c708 <__swrite+0x1c>
 800c6fc:	230e      	movs	r3, #14
 800c6fe:	5ec9      	ldrsh	r1, [r1, r3]
 800c700:	2200      	movs	r2, #0
 800c702:	2302      	movs	r3, #2
 800c704:	f000 f874 	bl	800c7f0 <_lseek_r>
 800c708:	89a3      	ldrh	r3, [r4, #12]
 800c70a:	4a05      	ldr	r2, [pc, #20]	; (800c720 <__swrite+0x34>)
 800c70c:	0028      	movs	r0, r5
 800c70e:	4013      	ands	r3, r2
 800c710:	81a3      	strh	r3, [r4, #12]
 800c712:	0032      	movs	r2, r6
 800c714:	230e      	movs	r3, #14
 800c716:	5ee1      	ldrsh	r1, [r4, r3]
 800c718:	003b      	movs	r3, r7
 800c71a:	f000 f81f 	bl	800c75c <_write_r>
 800c71e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c720:	ffffefff 	.word	0xffffefff

0800c724 <__sseek>:
 800c724:	b570      	push	{r4, r5, r6, lr}
 800c726:	000c      	movs	r4, r1
 800c728:	250e      	movs	r5, #14
 800c72a:	5f49      	ldrsh	r1, [r1, r5]
 800c72c:	f000 f860 	bl	800c7f0 <_lseek_r>
 800c730:	89a3      	ldrh	r3, [r4, #12]
 800c732:	1c42      	adds	r2, r0, #1
 800c734:	d103      	bne.n	800c73e <__sseek+0x1a>
 800c736:	4a05      	ldr	r2, [pc, #20]	; (800c74c <__sseek+0x28>)
 800c738:	4013      	ands	r3, r2
 800c73a:	81a3      	strh	r3, [r4, #12]
 800c73c:	bd70      	pop	{r4, r5, r6, pc}
 800c73e:	2280      	movs	r2, #128	; 0x80
 800c740:	0152      	lsls	r2, r2, #5
 800c742:	4313      	orrs	r3, r2
 800c744:	81a3      	strh	r3, [r4, #12]
 800c746:	6560      	str	r0, [r4, #84]	; 0x54
 800c748:	e7f8      	b.n	800c73c <__sseek+0x18>
 800c74a:	46c0      	nop			; (mov r8, r8)
 800c74c:	ffffefff 	.word	0xffffefff

0800c750 <__sclose>:
 800c750:	b510      	push	{r4, lr}
 800c752:	230e      	movs	r3, #14
 800c754:	5ec9      	ldrsh	r1, [r1, r3]
 800c756:	f000 f815 	bl	800c784 <_close_r>
 800c75a:	bd10      	pop	{r4, pc}

0800c75c <_write_r>:
 800c75c:	b570      	push	{r4, r5, r6, lr}
 800c75e:	0004      	movs	r4, r0
 800c760:	0008      	movs	r0, r1
 800c762:	0011      	movs	r1, r2
 800c764:	001a      	movs	r2, r3
 800c766:	2300      	movs	r3, #0
 800c768:	4d05      	ldr	r5, [pc, #20]	; (800c780 <_write_r+0x24>)
 800c76a:	602b      	str	r3, [r5, #0]
 800c76c:	f7f7 f94a 	bl	8003a04 <_write>
 800c770:	1c43      	adds	r3, r0, #1
 800c772:	d103      	bne.n	800c77c <_write_r+0x20>
 800c774:	682b      	ldr	r3, [r5, #0]
 800c776:	2b00      	cmp	r3, #0
 800c778:	d000      	beq.n	800c77c <_write_r+0x20>
 800c77a:	6023      	str	r3, [r4, #0]
 800c77c:	bd70      	pop	{r4, r5, r6, pc}
 800c77e:	46c0      	nop			; (mov r8, r8)
 800c780:	200003bc 	.word	0x200003bc

0800c784 <_close_r>:
 800c784:	2300      	movs	r3, #0
 800c786:	b570      	push	{r4, r5, r6, lr}
 800c788:	4d06      	ldr	r5, [pc, #24]	; (800c7a4 <_close_r+0x20>)
 800c78a:	0004      	movs	r4, r0
 800c78c:	0008      	movs	r0, r1
 800c78e:	602b      	str	r3, [r5, #0]
 800c790:	f7f7 f954 	bl	8003a3c <_close>
 800c794:	1c43      	adds	r3, r0, #1
 800c796:	d103      	bne.n	800c7a0 <_close_r+0x1c>
 800c798:	682b      	ldr	r3, [r5, #0]
 800c79a:	2b00      	cmp	r3, #0
 800c79c:	d000      	beq.n	800c7a0 <_close_r+0x1c>
 800c79e:	6023      	str	r3, [r4, #0]
 800c7a0:	bd70      	pop	{r4, r5, r6, pc}
 800c7a2:	46c0      	nop			; (mov r8, r8)
 800c7a4:	200003bc 	.word	0x200003bc

0800c7a8 <_fstat_r>:
 800c7a8:	2300      	movs	r3, #0
 800c7aa:	b570      	push	{r4, r5, r6, lr}
 800c7ac:	4d06      	ldr	r5, [pc, #24]	; (800c7c8 <_fstat_r+0x20>)
 800c7ae:	0004      	movs	r4, r0
 800c7b0:	0008      	movs	r0, r1
 800c7b2:	0011      	movs	r1, r2
 800c7b4:	602b      	str	r3, [r5, #0]
 800c7b6:	f7f7 f94b 	bl	8003a50 <_fstat>
 800c7ba:	1c43      	adds	r3, r0, #1
 800c7bc:	d103      	bne.n	800c7c6 <_fstat_r+0x1e>
 800c7be:	682b      	ldr	r3, [r5, #0]
 800c7c0:	2b00      	cmp	r3, #0
 800c7c2:	d000      	beq.n	800c7c6 <_fstat_r+0x1e>
 800c7c4:	6023      	str	r3, [r4, #0]
 800c7c6:	bd70      	pop	{r4, r5, r6, pc}
 800c7c8:	200003bc 	.word	0x200003bc

0800c7cc <_isatty_r>:
 800c7cc:	2300      	movs	r3, #0
 800c7ce:	b570      	push	{r4, r5, r6, lr}
 800c7d0:	4d06      	ldr	r5, [pc, #24]	; (800c7ec <_isatty_r+0x20>)
 800c7d2:	0004      	movs	r4, r0
 800c7d4:	0008      	movs	r0, r1
 800c7d6:	602b      	str	r3, [r5, #0]
 800c7d8:	f7f7 f948 	bl	8003a6c <_isatty>
 800c7dc:	1c43      	adds	r3, r0, #1
 800c7de:	d103      	bne.n	800c7e8 <_isatty_r+0x1c>
 800c7e0:	682b      	ldr	r3, [r5, #0]
 800c7e2:	2b00      	cmp	r3, #0
 800c7e4:	d000      	beq.n	800c7e8 <_isatty_r+0x1c>
 800c7e6:	6023      	str	r3, [r4, #0]
 800c7e8:	bd70      	pop	{r4, r5, r6, pc}
 800c7ea:	46c0      	nop			; (mov r8, r8)
 800c7ec:	200003bc 	.word	0x200003bc

0800c7f0 <_lseek_r>:
 800c7f0:	b570      	push	{r4, r5, r6, lr}
 800c7f2:	0004      	movs	r4, r0
 800c7f4:	0008      	movs	r0, r1
 800c7f6:	0011      	movs	r1, r2
 800c7f8:	001a      	movs	r2, r3
 800c7fa:	2300      	movs	r3, #0
 800c7fc:	4d05      	ldr	r5, [pc, #20]	; (800c814 <_lseek_r+0x24>)
 800c7fe:	602b      	str	r3, [r5, #0]
 800c800:	f7f7 f93d 	bl	8003a7e <_lseek>
 800c804:	1c43      	adds	r3, r0, #1
 800c806:	d103      	bne.n	800c810 <_lseek_r+0x20>
 800c808:	682b      	ldr	r3, [r5, #0]
 800c80a:	2b00      	cmp	r3, #0
 800c80c:	d000      	beq.n	800c810 <_lseek_r+0x20>
 800c80e:	6023      	str	r3, [r4, #0]
 800c810:	bd70      	pop	{r4, r5, r6, pc}
 800c812:	46c0      	nop			; (mov r8, r8)
 800c814:	200003bc 	.word	0x200003bc

0800c818 <_read_r>:
 800c818:	b570      	push	{r4, r5, r6, lr}
 800c81a:	0004      	movs	r4, r0
 800c81c:	0008      	movs	r0, r1
 800c81e:	0011      	movs	r1, r2
 800c820:	001a      	movs	r2, r3
 800c822:	2300      	movs	r3, #0
 800c824:	4d05      	ldr	r5, [pc, #20]	; (800c83c <_read_r+0x24>)
 800c826:	602b      	str	r3, [r5, #0]
 800c828:	f7f7 f8cf 	bl	80039ca <_read>
 800c82c:	1c43      	adds	r3, r0, #1
 800c82e:	d103      	bne.n	800c838 <_read_r+0x20>
 800c830:	682b      	ldr	r3, [r5, #0]
 800c832:	2b00      	cmp	r3, #0
 800c834:	d000      	beq.n	800c838 <_read_r+0x20>
 800c836:	6023      	str	r3, [r4, #0]
 800c838:	bd70      	pop	{r4, r5, r6, pc}
 800c83a:	46c0      	nop			; (mov r8, r8)
 800c83c:	200003bc 	.word	0x200003bc

0800c840 <_init>:
 800c840:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c842:	46c0      	nop			; (mov r8, r8)
 800c844:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c846:	bc08      	pop	{r3}
 800c848:	469e      	mov	lr, r3
 800c84a:	4770      	bx	lr

0800c84c <_fini>:
 800c84c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c84e:	46c0      	nop			; (mov r8, r8)
 800c850:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c852:	bc08      	pop	{r3}
 800c854:	469e      	mov	lr, r3
 800c856:	4770      	bx	lr
