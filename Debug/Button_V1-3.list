
Button_V1-3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006610  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004b0  080066d0  080066d0  000166d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006b80  08006b80  00020080  2**0
                  CONTENTS
  4 .ARM          00000008  08006b80  08006b80  00016b80  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006b88  08006b88  00020080  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006b88  08006b88  00016b88  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006b8c  08006b8c  00016b8c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000080  20000000  08006b90  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001d4  20000080  08006c10  00020080  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000254  08006c10  00020254  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020080  2**0
                  CONTENTS, READONLY
 12 .debug_info   000106a2  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002294  00000000  00000000  0003074a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f00  00000000  00000000  000329e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000e18  00000000  00000000  000338e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00013d20  00000000  00000000  000346f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000111c1  00000000  00000000  00048418  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00079e6c  00000000  00000000  000595d9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000d3445  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003b38  00000000  00000000  000d3498  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000080 	.word	0x20000080
 80000e0:	00000000 	.word	0x00000000
 80000e4:	080066b8 	.word	0x080066b8

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000084 	.word	0x20000084
 8000104:	080066b8 	.word	0x080066b8

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__gnu_thumb1_case_shi>:
 8000118:	b403      	push	{r0, r1}
 800011a:	4671      	mov	r1, lr
 800011c:	0849      	lsrs	r1, r1, #1
 800011e:	0040      	lsls	r0, r0, #1
 8000120:	0049      	lsls	r1, r1, #1
 8000122:	5e09      	ldrsh	r1, [r1, r0]
 8000124:	0049      	lsls	r1, r1, #1
 8000126:	448e      	add	lr, r1
 8000128:	bc03      	pop	{r0, r1}
 800012a:	4770      	bx	lr

0800012c <__udivsi3>:
 800012c:	2200      	movs	r2, #0
 800012e:	0843      	lsrs	r3, r0, #1
 8000130:	428b      	cmp	r3, r1
 8000132:	d374      	bcc.n	800021e <__udivsi3+0xf2>
 8000134:	0903      	lsrs	r3, r0, #4
 8000136:	428b      	cmp	r3, r1
 8000138:	d35f      	bcc.n	80001fa <__udivsi3+0xce>
 800013a:	0a03      	lsrs	r3, r0, #8
 800013c:	428b      	cmp	r3, r1
 800013e:	d344      	bcc.n	80001ca <__udivsi3+0x9e>
 8000140:	0b03      	lsrs	r3, r0, #12
 8000142:	428b      	cmp	r3, r1
 8000144:	d328      	bcc.n	8000198 <__udivsi3+0x6c>
 8000146:	0c03      	lsrs	r3, r0, #16
 8000148:	428b      	cmp	r3, r1
 800014a:	d30d      	bcc.n	8000168 <__udivsi3+0x3c>
 800014c:	22ff      	movs	r2, #255	; 0xff
 800014e:	0209      	lsls	r1, r1, #8
 8000150:	ba12      	rev	r2, r2
 8000152:	0c03      	lsrs	r3, r0, #16
 8000154:	428b      	cmp	r3, r1
 8000156:	d302      	bcc.n	800015e <__udivsi3+0x32>
 8000158:	1212      	asrs	r2, r2, #8
 800015a:	0209      	lsls	r1, r1, #8
 800015c:	d065      	beq.n	800022a <__udivsi3+0xfe>
 800015e:	0b03      	lsrs	r3, r0, #12
 8000160:	428b      	cmp	r3, r1
 8000162:	d319      	bcc.n	8000198 <__udivsi3+0x6c>
 8000164:	e000      	b.n	8000168 <__udivsi3+0x3c>
 8000166:	0a09      	lsrs	r1, r1, #8
 8000168:	0bc3      	lsrs	r3, r0, #15
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x46>
 800016e:	03cb      	lsls	r3, r1, #15
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0b83      	lsrs	r3, r0, #14
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x52>
 800017a:	038b      	lsls	r3, r1, #14
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0b43      	lsrs	r3, r0, #13
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x5e>
 8000186:	034b      	lsls	r3, r1, #13
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0b03      	lsrs	r3, r0, #12
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x6a>
 8000192:	030b      	lsls	r3, r1, #12
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0ac3      	lsrs	r3, r0, #11
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x76>
 800019e:	02cb      	lsls	r3, r1, #11
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	0a83      	lsrs	r3, r0, #10
 80001a6:	428b      	cmp	r3, r1
 80001a8:	d301      	bcc.n	80001ae <__udivsi3+0x82>
 80001aa:	028b      	lsls	r3, r1, #10
 80001ac:	1ac0      	subs	r0, r0, r3
 80001ae:	4152      	adcs	r2, r2
 80001b0:	0a43      	lsrs	r3, r0, #9
 80001b2:	428b      	cmp	r3, r1
 80001b4:	d301      	bcc.n	80001ba <__udivsi3+0x8e>
 80001b6:	024b      	lsls	r3, r1, #9
 80001b8:	1ac0      	subs	r0, r0, r3
 80001ba:	4152      	adcs	r2, r2
 80001bc:	0a03      	lsrs	r3, r0, #8
 80001be:	428b      	cmp	r3, r1
 80001c0:	d301      	bcc.n	80001c6 <__udivsi3+0x9a>
 80001c2:	020b      	lsls	r3, r1, #8
 80001c4:	1ac0      	subs	r0, r0, r3
 80001c6:	4152      	adcs	r2, r2
 80001c8:	d2cd      	bcs.n	8000166 <__udivsi3+0x3a>
 80001ca:	09c3      	lsrs	r3, r0, #7
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xa8>
 80001d0:	01cb      	lsls	r3, r1, #7
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	0983      	lsrs	r3, r0, #6
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xb4>
 80001dc:	018b      	lsls	r3, r1, #6
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0943      	lsrs	r3, r0, #5
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xc0>
 80001e8:	014b      	lsls	r3, r1, #5
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0903      	lsrs	r3, r0, #4
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xcc>
 80001f4:	010b      	lsls	r3, r1, #4
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	08c3      	lsrs	r3, r0, #3
 80001fc:	428b      	cmp	r3, r1
 80001fe:	d301      	bcc.n	8000204 <__udivsi3+0xd8>
 8000200:	00cb      	lsls	r3, r1, #3
 8000202:	1ac0      	subs	r0, r0, r3
 8000204:	4152      	adcs	r2, r2
 8000206:	0883      	lsrs	r3, r0, #2
 8000208:	428b      	cmp	r3, r1
 800020a:	d301      	bcc.n	8000210 <__udivsi3+0xe4>
 800020c:	008b      	lsls	r3, r1, #2
 800020e:	1ac0      	subs	r0, r0, r3
 8000210:	4152      	adcs	r2, r2
 8000212:	0843      	lsrs	r3, r0, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d301      	bcc.n	800021c <__udivsi3+0xf0>
 8000218:	004b      	lsls	r3, r1, #1
 800021a:	1ac0      	subs	r0, r0, r3
 800021c:	4152      	adcs	r2, r2
 800021e:	1a41      	subs	r1, r0, r1
 8000220:	d200      	bcs.n	8000224 <__udivsi3+0xf8>
 8000222:	4601      	mov	r1, r0
 8000224:	4152      	adcs	r2, r2
 8000226:	4610      	mov	r0, r2
 8000228:	4770      	bx	lr
 800022a:	e7ff      	b.n	800022c <__udivsi3+0x100>
 800022c:	b501      	push	{r0, lr}
 800022e:	2000      	movs	r0, #0
 8000230:	f000 f8f0 	bl	8000414 <__aeabi_idiv0>
 8000234:	bd02      	pop	{r1, pc}
 8000236:	46c0      	nop			; (mov r8, r8)

08000238 <__aeabi_uidivmod>:
 8000238:	2900      	cmp	r1, #0
 800023a:	d0f7      	beq.n	800022c <__udivsi3+0x100>
 800023c:	e776      	b.n	800012c <__udivsi3>
 800023e:	4770      	bx	lr

08000240 <__divsi3>:
 8000240:	4603      	mov	r3, r0
 8000242:	430b      	orrs	r3, r1
 8000244:	d47f      	bmi.n	8000346 <__divsi3+0x106>
 8000246:	2200      	movs	r2, #0
 8000248:	0843      	lsrs	r3, r0, #1
 800024a:	428b      	cmp	r3, r1
 800024c:	d374      	bcc.n	8000338 <__divsi3+0xf8>
 800024e:	0903      	lsrs	r3, r0, #4
 8000250:	428b      	cmp	r3, r1
 8000252:	d35f      	bcc.n	8000314 <__divsi3+0xd4>
 8000254:	0a03      	lsrs	r3, r0, #8
 8000256:	428b      	cmp	r3, r1
 8000258:	d344      	bcc.n	80002e4 <__divsi3+0xa4>
 800025a:	0b03      	lsrs	r3, r0, #12
 800025c:	428b      	cmp	r3, r1
 800025e:	d328      	bcc.n	80002b2 <__divsi3+0x72>
 8000260:	0c03      	lsrs	r3, r0, #16
 8000262:	428b      	cmp	r3, r1
 8000264:	d30d      	bcc.n	8000282 <__divsi3+0x42>
 8000266:	22ff      	movs	r2, #255	; 0xff
 8000268:	0209      	lsls	r1, r1, #8
 800026a:	ba12      	rev	r2, r2
 800026c:	0c03      	lsrs	r3, r0, #16
 800026e:	428b      	cmp	r3, r1
 8000270:	d302      	bcc.n	8000278 <__divsi3+0x38>
 8000272:	1212      	asrs	r2, r2, #8
 8000274:	0209      	lsls	r1, r1, #8
 8000276:	d065      	beq.n	8000344 <__divsi3+0x104>
 8000278:	0b03      	lsrs	r3, r0, #12
 800027a:	428b      	cmp	r3, r1
 800027c:	d319      	bcc.n	80002b2 <__divsi3+0x72>
 800027e:	e000      	b.n	8000282 <__divsi3+0x42>
 8000280:	0a09      	lsrs	r1, r1, #8
 8000282:	0bc3      	lsrs	r3, r0, #15
 8000284:	428b      	cmp	r3, r1
 8000286:	d301      	bcc.n	800028c <__divsi3+0x4c>
 8000288:	03cb      	lsls	r3, r1, #15
 800028a:	1ac0      	subs	r0, r0, r3
 800028c:	4152      	adcs	r2, r2
 800028e:	0b83      	lsrs	r3, r0, #14
 8000290:	428b      	cmp	r3, r1
 8000292:	d301      	bcc.n	8000298 <__divsi3+0x58>
 8000294:	038b      	lsls	r3, r1, #14
 8000296:	1ac0      	subs	r0, r0, r3
 8000298:	4152      	adcs	r2, r2
 800029a:	0b43      	lsrs	r3, r0, #13
 800029c:	428b      	cmp	r3, r1
 800029e:	d301      	bcc.n	80002a4 <__divsi3+0x64>
 80002a0:	034b      	lsls	r3, r1, #13
 80002a2:	1ac0      	subs	r0, r0, r3
 80002a4:	4152      	adcs	r2, r2
 80002a6:	0b03      	lsrs	r3, r0, #12
 80002a8:	428b      	cmp	r3, r1
 80002aa:	d301      	bcc.n	80002b0 <__divsi3+0x70>
 80002ac:	030b      	lsls	r3, r1, #12
 80002ae:	1ac0      	subs	r0, r0, r3
 80002b0:	4152      	adcs	r2, r2
 80002b2:	0ac3      	lsrs	r3, r0, #11
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d301      	bcc.n	80002bc <__divsi3+0x7c>
 80002b8:	02cb      	lsls	r3, r1, #11
 80002ba:	1ac0      	subs	r0, r0, r3
 80002bc:	4152      	adcs	r2, r2
 80002be:	0a83      	lsrs	r3, r0, #10
 80002c0:	428b      	cmp	r3, r1
 80002c2:	d301      	bcc.n	80002c8 <__divsi3+0x88>
 80002c4:	028b      	lsls	r3, r1, #10
 80002c6:	1ac0      	subs	r0, r0, r3
 80002c8:	4152      	adcs	r2, r2
 80002ca:	0a43      	lsrs	r3, r0, #9
 80002cc:	428b      	cmp	r3, r1
 80002ce:	d301      	bcc.n	80002d4 <__divsi3+0x94>
 80002d0:	024b      	lsls	r3, r1, #9
 80002d2:	1ac0      	subs	r0, r0, r3
 80002d4:	4152      	adcs	r2, r2
 80002d6:	0a03      	lsrs	r3, r0, #8
 80002d8:	428b      	cmp	r3, r1
 80002da:	d301      	bcc.n	80002e0 <__divsi3+0xa0>
 80002dc:	020b      	lsls	r3, r1, #8
 80002de:	1ac0      	subs	r0, r0, r3
 80002e0:	4152      	adcs	r2, r2
 80002e2:	d2cd      	bcs.n	8000280 <__divsi3+0x40>
 80002e4:	09c3      	lsrs	r3, r0, #7
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d301      	bcc.n	80002ee <__divsi3+0xae>
 80002ea:	01cb      	lsls	r3, r1, #7
 80002ec:	1ac0      	subs	r0, r0, r3
 80002ee:	4152      	adcs	r2, r2
 80002f0:	0983      	lsrs	r3, r0, #6
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d301      	bcc.n	80002fa <__divsi3+0xba>
 80002f6:	018b      	lsls	r3, r1, #6
 80002f8:	1ac0      	subs	r0, r0, r3
 80002fa:	4152      	adcs	r2, r2
 80002fc:	0943      	lsrs	r3, r0, #5
 80002fe:	428b      	cmp	r3, r1
 8000300:	d301      	bcc.n	8000306 <__divsi3+0xc6>
 8000302:	014b      	lsls	r3, r1, #5
 8000304:	1ac0      	subs	r0, r0, r3
 8000306:	4152      	adcs	r2, r2
 8000308:	0903      	lsrs	r3, r0, #4
 800030a:	428b      	cmp	r3, r1
 800030c:	d301      	bcc.n	8000312 <__divsi3+0xd2>
 800030e:	010b      	lsls	r3, r1, #4
 8000310:	1ac0      	subs	r0, r0, r3
 8000312:	4152      	adcs	r2, r2
 8000314:	08c3      	lsrs	r3, r0, #3
 8000316:	428b      	cmp	r3, r1
 8000318:	d301      	bcc.n	800031e <__divsi3+0xde>
 800031a:	00cb      	lsls	r3, r1, #3
 800031c:	1ac0      	subs	r0, r0, r3
 800031e:	4152      	adcs	r2, r2
 8000320:	0883      	lsrs	r3, r0, #2
 8000322:	428b      	cmp	r3, r1
 8000324:	d301      	bcc.n	800032a <__divsi3+0xea>
 8000326:	008b      	lsls	r3, r1, #2
 8000328:	1ac0      	subs	r0, r0, r3
 800032a:	4152      	adcs	r2, r2
 800032c:	0843      	lsrs	r3, r0, #1
 800032e:	428b      	cmp	r3, r1
 8000330:	d301      	bcc.n	8000336 <__divsi3+0xf6>
 8000332:	004b      	lsls	r3, r1, #1
 8000334:	1ac0      	subs	r0, r0, r3
 8000336:	4152      	adcs	r2, r2
 8000338:	1a41      	subs	r1, r0, r1
 800033a:	d200      	bcs.n	800033e <__divsi3+0xfe>
 800033c:	4601      	mov	r1, r0
 800033e:	4152      	adcs	r2, r2
 8000340:	4610      	mov	r0, r2
 8000342:	4770      	bx	lr
 8000344:	e05d      	b.n	8000402 <__divsi3+0x1c2>
 8000346:	0fca      	lsrs	r2, r1, #31
 8000348:	d000      	beq.n	800034c <__divsi3+0x10c>
 800034a:	4249      	negs	r1, r1
 800034c:	1003      	asrs	r3, r0, #32
 800034e:	d300      	bcc.n	8000352 <__divsi3+0x112>
 8000350:	4240      	negs	r0, r0
 8000352:	4053      	eors	r3, r2
 8000354:	2200      	movs	r2, #0
 8000356:	469c      	mov	ip, r3
 8000358:	0903      	lsrs	r3, r0, #4
 800035a:	428b      	cmp	r3, r1
 800035c:	d32d      	bcc.n	80003ba <__divsi3+0x17a>
 800035e:	0a03      	lsrs	r3, r0, #8
 8000360:	428b      	cmp	r3, r1
 8000362:	d312      	bcc.n	800038a <__divsi3+0x14a>
 8000364:	22fc      	movs	r2, #252	; 0xfc
 8000366:	0189      	lsls	r1, r1, #6
 8000368:	ba12      	rev	r2, r2
 800036a:	0a03      	lsrs	r3, r0, #8
 800036c:	428b      	cmp	r3, r1
 800036e:	d30c      	bcc.n	800038a <__divsi3+0x14a>
 8000370:	0189      	lsls	r1, r1, #6
 8000372:	1192      	asrs	r2, r2, #6
 8000374:	428b      	cmp	r3, r1
 8000376:	d308      	bcc.n	800038a <__divsi3+0x14a>
 8000378:	0189      	lsls	r1, r1, #6
 800037a:	1192      	asrs	r2, r2, #6
 800037c:	428b      	cmp	r3, r1
 800037e:	d304      	bcc.n	800038a <__divsi3+0x14a>
 8000380:	0189      	lsls	r1, r1, #6
 8000382:	d03a      	beq.n	80003fa <__divsi3+0x1ba>
 8000384:	1192      	asrs	r2, r2, #6
 8000386:	e000      	b.n	800038a <__divsi3+0x14a>
 8000388:	0989      	lsrs	r1, r1, #6
 800038a:	09c3      	lsrs	r3, r0, #7
 800038c:	428b      	cmp	r3, r1
 800038e:	d301      	bcc.n	8000394 <__divsi3+0x154>
 8000390:	01cb      	lsls	r3, r1, #7
 8000392:	1ac0      	subs	r0, r0, r3
 8000394:	4152      	adcs	r2, r2
 8000396:	0983      	lsrs	r3, r0, #6
 8000398:	428b      	cmp	r3, r1
 800039a:	d301      	bcc.n	80003a0 <__divsi3+0x160>
 800039c:	018b      	lsls	r3, r1, #6
 800039e:	1ac0      	subs	r0, r0, r3
 80003a0:	4152      	adcs	r2, r2
 80003a2:	0943      	lsrs	r3, r0, #5
 80003a4:	428b      	cmp	r3, r1
 80003a6:	d301      	bcc.n	80003ac <__divsi3+0x16c>
 80003a8:	014b      	lsls	r3, r1, #5
 80003aa:	1ac0      	subs	r0, r0, r3
 80003ac:	4152      	adcs	r2, r2
 80003ae:	0903      	lsrs	r3, r0, #4
 80003b0:	428b      	cmp	r3, r1
 80003b2:	d301      	bcc.n	80003b8 <__divsi3+0x178>
 80003b4:	010b      	lsls	r3, r1, #4
 80003b6:	1ac0      	subs	r0, r0, r3
 80003b8:	4152      	adcs	r2, r2
 80003ba:	08c3      	lsrs	r3, r0, #3
 80003bc:	428b      	cmp	r3, r1
 80003be:	d301      	bcc.n	80003c4 <__divsi3+0x184>
 80003c0:	00cb      	lsls	r3, r1, #3
 80003c2:	1ac0      	subs	r0, r0, r3
 80003c4:	4152      	adcs	r2, r2
 80003c6:	0883      	lsrs	r3, r0, #2
 80003c8:	428b      	cmp	r3, r1
 80003ca:	d301      	bcc.n	80003d0 <__divsi3+0x190>
 80003cc:	008b      	lsls	r3, r1, #2
 80003ce:	1ac0      	subs	r0, r0, r3
 80003d0:	4152      	adcs	r2, r2
 80003d2:	d2d9      	bcs.n	8000388 <__divsi3+0x148>
 80003d4:	0843      	lsrs	r3, r0, #1
 80003d6:	428b      	cmp	r3, r1
 80003d8:	d301      	bcc.n	80003de <__divsi3+0x19e>
 80003da:	004b      	lsls	r3, r1, #1
 80003dc:	1ac0      	subs	r0, r0, r3
 80003de:	4152      	adcs	r2, r2
 80003e0:	1a41      	subs	r1, r0, r1
 80003e2:	d200      	bcs.n	80003e6 <__divsi3+0x1a6>
 80003e4:	4601      	mov	r1, r0
 80003e6:	4663      	mov	r3, ip
 80003e8:	4152      	adcs	r2, r2
 80003ea:	105b      	asrs	r3, r3, #1
 80003ec:	4610      	mov	r0, r2
 80003ee:	d301      	bcc.n	80003f4 <__divsi3+0x1b4>
 80003f0:	4240      	negs	r0, r0
 80003f2:	2b00      	cmp	r3, #0
 80003f4:	d500      	bpl.n	80003f8 <__divsi3+0x1b8>
 80003f6:	4249      	negs	r1, r1
 80003f8:	4770      	bx	lr
 80003fa:	4663      	mov	r3, ip
 80003fc:	105b      	asrs	r3, r3, #1
 80003fe:	d300      	bcc.n	8000402 <__divsi3+0x1c2>
 8000400:	4240      	negs	r0, r0
 8000402:	b501      	push	{r0, lr}
 8000404:	2000      	movs	r0, #0
 8000406:	f000 f805 	bl	8000414 <__aeabi_idiv0>
 800040a:	bd02      	pop	{r1, pc}

0800040c <__aeabi_idivmod>:
 800040c:	2900      	cmp	r1, #0
 800040e:	d0f8      	beq.n	8000402 <__divsi3+0x1c2>
 8000410:	e716      	b.n	8000240 <__divsi3>
 8000412:	4770      	bx	lr

08000414 <__aeabi_idiv0>:
 8000414:	4770      	bx	lr
 8000416:	46c0      	nop			; (mov r8, r8)

08000418 <__aeabi_cfrcmple>:
 8000418:	4684      	mov	ip, r0
 800041a:	0008      	movs	r0, r1
 800041c:	4661      	mov	r1, ip
 800041e:	e7ff      	b.n	8000420 <__aeabi_cfcmpeq>

08000420 <__aeabi_cfcmpeq>:
 8000420:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8000422:	f000 fad1 	bl	80009c8 <__lesf2>
 8000426:	2800      	cmp	r0, #0
 8000428:	d401      	bmi.n	800042e <__aeabi_cfcmpeq+0xe>
 800042a:	2100      	movs	r1, #0
 800042c:	42c8      	cmn	r0, r1
 800042e:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000430 <__aeabi_fcmpeq>:
 8000430:	b510      	push	{r4, lr}
 8000432:	f000 fa5d 	bl	80008f0 <__eqsf2>
 8000436:	4240      	negs	r0, r0
 8000438:	3001      	adds	r0, #1
 800043a:	bd10      	pop	{r4, pc}

0800043c <__aeabi_fcmplt>:
 800043c:	b510      	push	{r4, lr}
 800043e:	f000 fac3 	bl	80009c8 <__lesf2>
 8000442:	2800      	cmp	r0, #0
 8000444:	db01      	blt.n	800044a <__aeabi_fcmplt+0xe>
 8000446:	2000      	movs	r0, #0
 8000448:	bd10      	pop	{r4, pc}
 800044a:	2001      	movs	r0, #1
 800044c:	bd10      	pop	{r4, pc}
 800044e:	46c0      	nop			; (mov r8, r8)

08000450 <__aeabi_fcmple>:
 8000450:	b510      	push	{r4, lr}
 8000452:	f000 fab9 	bl	80009c8 <__lesf2>
 8000456:	2800      	cmp	r0, #0
 8000458:	dd01      	ble.n	800045e <__aeabi_fcmple+0xe>
 800045a:	2000      	movs	r0, #0
 800045c:	bd10      	pop	{r4, pc}
 800045e:	2001      	movs	r0, #1
 8000460:	bd10      	pop	{r4, pc}
 8000462:	46c0      	nop			; (mov r8, r8)

08000464 <__aeabi_fcmpgt>:
 8000464:	b510      	push	{r4, lr}
 8000466:	f000 fa69 	bl	800093c <__gesf2>
 800046a:	2800      	cmp	r0, #0
 800046c:	dc01      	bgt.n	8000472 <__aeabi_fcmpgt+0xe>
 800046e:	2000      	movs	r0, #0
 8000470:	bd10      	pop	{r4, pc}
 8000472:	2001      	movs	r0, #1
 8000474:	bd10      	pop	{r4, pc}
 8000476:	46c0      	nop			; (mov r8, r8)

08000478 <__aeabi_fcmpge>:
 8000478:	b510      	push	{r4, lr}
 800047a:	f000 fa5f 	bl	800093c <__gesf2>
 800047e:	2800      	cmp	r0, #0
 8000480:	da01      	bge.n	8000486 <__aeabi_fcmpge+0xe>
 8000482:	2000      	movs	r0, #0
 8000484:	bd10      	pop	{r4, pc}
 8000486:	2001      	movs	r0, #1
 8000488:	bd10      	pop	{r4, pc}
 800048a:	46c0      	nop			; (mov r8, r8)

0800048c <__aeabi_uldivmod>:
 800048c:	2b00      	cmp	r3, #0
 800048e:	d111      	bne.n	80004b4 <__aeabi_uldivmod+0x28>
 8000490:	2a00      	cmp	r2, #0
 8000492:	d10f      	bne.n	80004b4 <__aeabi_uldivmod+0x28>
 8000494:	2900      	cmp	r1, #0
 8000496:	d100      	bne.n	800049a <__aeabi_uldivmod+0xe>
 8000498:	2800      	cmp	r0, #0
 800049a:	d002      	beq.n	80004a2 <__aeabi_uldivmod+0x16>
 800049c:	2100      	movs	r1, #0
 800049e:	43c9      	mvns	r1, r1
 80004a0:	0008      	movs	r0, r1
 80004a2:	b407      	push	{r0, r1, r2}
 80004a4:	4802      	ldr	r0, [pc, #8]	; (80004b0 <__aeabi_uldivmod+0x24>)
 80004a6:	a102      	add	r1, pc, #8	; (adr r1, 80004b0 <__aeabi_uldivmod+0x24>)
 80004a8:	1840      	adds	r0, r0, r1
 80004aa:	9002      	str	r0, [sp, #8]
 80004ac:	bd03      	pop	{r0, r1, pc}
 80004ae:	46c0      	nop			; (mov r8, r8)
 80004b0:	ffffff65 	.word	0xffffff65
 80004b4:	b403      	push	{r0, r1}
 80004b6:	4668      	mov	r0, sp
 80004b8:	b501      	push	{r0, lr}
 80004ba:	9802      	ldr	r0, [sp, #8]
 80004bc:	f000 f834 	bl	8000528 <__udivmoddi4>
 80004c0:	9b01      	ldr	r3, [sp, #4]
 80004c2:	469e      	mov	lr, r3
 80004c4:	b002      	add	sp, #8
 80004c6:	bc0c      	pop	{r2, r3}
 80004c8:	4770      	bx	lr
 80004ca:	46c0      	nop			; (mov r8, r8)

080004cc <__aeabi_lmul>:
 80004cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80004ce:	46ce      	mov	lr, r9
 80004d0:	4647      	mov	r7, r8
 80004d2:	b580      	push	{r7, lr}
 80004d4:	0007      	movs	r7, r0
 80004d6:	4699      	mov	r9, r3
 80004d8:	0c3b      	lsrs	r3, r7, #16
 80004da:	469c      	mov	ip, r3
 80004dc:	0413      	lsls	r3, r2, #16
 80004de:	0c1b      	lsrs	r3, r3, #16
 80004e0:	001d      	movs	r5, r3
 80004e2:	000e      	movs	r6, r1
 80004e4:	4661      	mov	r1, ip
 80004e6:	0400      	lsls	r0, r0, #16
 80004e8:	0c14      	lsrs	r4, r2, #16
 80004ea:	0c00      	lsrs	r0, r0, #16
 80004ec:	4345      	muls	r5, r0
 80004ee:	434b      	muls	r3, r1
 80004f0:	4360      	muls	r0, r4
 80004f2:	4361      	muls	r1, r4
 80004f4:	18c0      	adds	r0, r0, r3
 80004f6:	0c2c      	lsrs	r4, r5, #16
 80004f8:	1820      	adds	r0, r4, r0
 80004fa:	468c      	mov	ip, r1
 80004fc:	4283      	cmp	r3, r0
 80004fe:	d903      	bls.n	8000508 <__aeabi_lmul+0x3c>
 8000500:	2380      	movs	r3, #128	; 0x80
 8000502:	025b      	lsls	r3, r3, #9
 8000504:	4698      	mov	r8, r3
 8000506:	44c4      	add	ip, r8
 8000508:	4649      	mov	r1, r9
 800050a:	4379      	muls	r1, r7
 800050c:	4372      	muls	r2, r6
 800050e:	0c03      	lsrs	r3, r0, #16
 8000510:	4463      	add	r3, ip
 8000512:	042d      	lsls	r5, r5, #16
 8000514:	0c2d      	lsrs	r5, r5, #16
 8000516:	18c9      	adds	r1, r1, r3
 8000518:	0400      	lsls	r0, r0, #16
 800051a:	1940      	adds	r0, r0, r5
 800051c:	1889      	adds	r1, r1, r2
 800051e:	bcc0      	pop	{r6, r7}
 8000520:	46b9      	mov	r9, r7
 8000522:	46b0      	mov	r8, r6
 8000524:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000526:	46c0      	nop			; (mov r8, r8)

08000528 <__udivmoddi4>:
 8000528:	b5f0      	push	{r4, r5, r6, r7, lr}
 800052a:	4657      	mov	r7, sl
 800052c:	464e      	mov	r6, r9
 800052e:	4645      	mov	r5, r8
 8000530:	46de      	mov	lr, fp
 8000532:	b5e0      	push	{r5, r6, r7, lr}
 8000534:	0004      	movs	r4, r0
 8000536:	000d      	movs	r5, r1
 8000538:	4692      	mov	sl, r2
 800053a:	4699      	mov	r9, r3
 800053c:	b083      	sub	sp, #12
 800053e:	428b      	cmp	r3, r1
 8000540:	d830      	bhi.n	80005a4 <__udivmoddi4+0x7c>
 8000542:	d02d      	beq.n	80005a0 <__udivmoddi4+0x78>
 8000544:	4649      	mov	r1, r9
 8000546:	4650      	mov	r0, sl
 8000548:	f000 fc08 	bl	8000d5c <__clzdi2>
 800054c:	0029      	movs	r1, r5
 800054e:	0006      	movs	r6, r0
 8000550:	0020      	movs	r0, r4
 8000552:	f000 fc03 	bl	8000d5c <__clzdi2>
 8000556:	1a33      	subs	r3, r6, r0
 8000558:	4698      	mov	r8, r3
 800055a:	3b20      	subs	r3, #32
 800055c:	469b      	mov	fp, r3
 800055e:	d433      	bmi.n	80005c8 <__udivmoddi4+0xa0>
 8000560:	465a      	mov	r2, fp
 8000562:	4653      	mov	r3, sl
 8000564:	4093      	lsls	r3, r2
 8000566:	4642      	mov	r2, r8
 8000568:	001f      	movs	r7, r3
 800056a:	4653      	mov	r3, sl
 800056c:	4093      	lsls	r3, r2
 800056e:	001e      	movs	r6, r3
 8000570:	42af      	cmp	r7, r5
 8000572:	d83a      	bhi.n	80005ea <__udivmoddi4+0xc2>
 8000574:	42af      	cmp	r7, r5
 8000576:	d100      	bne.n	800057a <__udivmoddi4+0x52>
 8000578:	e078      	b.n	800066c <__udivmoddi4+0x144>
 800057a:	465b      	mov	r3, fp
 800057c:	1ba4      	subs	r4, r4, r6
 800057e:	41bd      	sbcs	r5, r7
 8000580:	2b00      	cmp	r3, #0
 8000582:	da00      	bge.n	8000586 <__udivmoddi4+0x5e>
 8000584:	e075      	b.n	8000672 <__udivmoddi4+0x14a>
 8000586:	2200      	movs	r2, #0
 8000588:	2300      	movs	r3, #0
 800058a:	9200      	str	r2, [sp, #0]
 800058c:	9301      	str	r3, [sp, #4]
 800058e:	2301      	movs	r3, #1
 8000590:	465a      	mov	r2, fp
 8000592:	4093      	lsls	r3, r2
 8000594:	9301      	str	r3, [sp, #4]
 8000596:	2301      	movs	r3, #1
 8000598:	4642      	mov	r2, r8
 800059a:	4093      	lsls	r3, r2
 800059c:	9300      	str	r3, [sp, #0]
 800059e:	e028      	b.n	80005f2 <__udivmoddi4+0xca>
 80005a0:	4282      	cmp	r2, r0
 80005a2:	d9cf      	bls.n	8000544 <__udivmoddi4+0x1c>
 80005a4:	2200      	movs	r2, #0
 80005a6:	2300      	movs	r3, #0
 80005a8:	9200      	str	r2, [sp, #0]
 80005aa:	9301      	str	r3, [sp, #4]
 80005ac:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80005ae:	2b00      	cmp	r3, #0
 80005b0:	d001      	beq.n	80005b6 <__udivmoddi4+0x8e>
 80005b2:	601c      	str	r4, [r3, #0]
 80005b4:	605d      	str	r5, [r3, #4]
 80005b6:	9800      	ldr	r0, [sp, #0]
 80005b8:	9901      	ldr	r1, [sp, #4]
 80005ba:	b003      	add	sp, #12
 80005bc:	bcf0      	pop	{r4, r5, r6, r7}
 80005be:	46bb      	mov	fp, r7
 80005c0:	46b2      	mov	sl, r6
 80005c2:	46a9      	mov	r9, r5
 80005c4:	46a0      	mov	r8, r4
 80005c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80005c8:	4642      	mov	r2, r8
 80005ca:	2320      	movs	r3, #32
 80005cc:	1a9b      	subs	r3, r3, r2
 80005ce:	4652      	mov	r2, sl
 80005d0:	40da      	lsrs	r2, r3
 80005d2:	4641      	mov	r1, r8
 80005d4:	0013      	movs	r3, r2
 80005d6:	464a      	mov	r2, r9
 80005d8:	408a      	lsls	r2, r1
 80005da:	0017      	movs	r7, r2
 80005dc:	4642      	mov	r2, r8
 80005de:	431f      	orrs	r7, r3
 80005e0:	4653      	mov	r3, sl
 80005e2:	4093      	lsls	r3, r2
 80005e4:	001e      	movs	r6, r3
 80005e6:	42af      	cmp	r7, r5
 80005e8:	d9c4      	bls.n	8000574 <__udivmoddi4+0x4c>
 80005ea:	2200      	movs	r2, #0
 80005ec:	2300      	movs	r3, #0
 80005ee:	9200      	str	r2, [sp, #0]
 80005f0:	9301      	str	r3, [sp, #4]
 80005f2:	4643      	mov	r3, r8
 80005f4:	2b00      	cmp	r3, #0
 80005f6:	d0d9      	beq.n	80005ac <__udivmoddi4+0x84>
 80005f8:	07fb      	lsls	r3, r7, #31
 80005fa:	0872      	lsrs	r2, r6, #1
 80005fc:	431a      	orrs	r2, r3
 80005fe:	4646      	mov	r6, r8
 8000600:	087b      	lsrs	r3, r7, #1
 8000602:	e00e      	b.n	8000622 <__udivmoddi4+0xfa>
 8000604:	42ab      	cmp	r3, r5
 8000606:	d101      	bne.n	800060c <__udivmoddi4+0xe4>
 8000608:	42a2      	cmp	r2, r4
 800060a:	d80c      	bhi.n	8000626 <__udivmoddi4+0xfe>
 800060c:	1aa4      	subs	r4, r4, r2
 800060e:	419d      	sbcs	r5, r3
 8000610:	2001      	movs	r0, #1
 8000612:	1924      	adds	r4, r4, r4
 8000614:	416d      	adcs	r5, r5
 8000616:	2100      	movs	r1, #0
 8000618:	3e01      	subs	r6, #1
 800061a:	1824      	adds	r4, r4, r0
 800061c:	414d      	adcs	r5, r1
 800061e:	2e00      	cmp	r6, #0
 8000620:	d006      	beq.n	8000630 <__udivmoddi4+0x108>
 8000622:	42ab      	cmp	r3, r5
 8000624:	d9ee      	bls.n	8000604 <__udivmoddi4+0xdc>
 8000626:	3e01      	subs	r6, #1
 8000628:	1924      	adds	r4, r4, r4
 800062a:	416d      	adcs	r5, r5
 800062c:	2e00      	cmp	r6, #0
 800062e:	d1f8      	bne.n	8000622 <__udivmoddi4+0xfa>
 8000630:	9800      	ldr	r0, [sp, #0]
 8000632:	9901      	ldr	r1, [sp, #4]
 8000634:	465b      	mov	r3, fp
 8000636:	1900      	adds	r0, r0, r4
 8000638:	4169      	adcs	r1, r5
 800063a:	2b00      	cmp	r3, #0
 800063c:	db24      	blt.n	8000688 <__udivmoddi4+0x160>
 800063e:	002b      	movs	r3, r5
 8000640:	465a      	mov	r2, fp
 8000642:	4644      	mov	r4, r8
 8000644:	40d3      	lsrs	r3, r2
 8000646:	002a      	movs	r2, r5
 8000648:	40e2      	lsrs	r2, r4
 800064a:	001c      	movs	r4, r3
 800064c:	465b      	mov	r3, fp
 800064e:	0015      	movs	r5, r2
 8000650:	2b00      	cmp	r3, #0
 8000652:	db2a      	blt.n	80006aa <__udivmoddi4+0x182>
 8000654:	0026      	movs	r6, r4
 8000656:	409e      	lsls	r6, r3
 8000658:	0033      	movs	r3, r6
 800065a:	0026      	movs	r6, r4
 800065c:	4647      	mov	r7, r8
 800065e:	40be      	lsls	r6, r7
 8000660:	0032      	movs	r2, r6
 8000662:	1a80      	subs	r0, r0, r2
 8000664:	4199      	sbcs	r1, r3
 8000666:	9000      	str	r0, [sp, #0]
 8000668:	9101      	str	r1, [sp, #4]
 800066a:	e79f      	b.n	80005ac <__udivmoddi4+0x84>
 800066c:	42a3      	cmp	r3, r4
 800066e:	d8bc      	bhi.n	80005ea <__udivmoddi4+0xc2>
 8000670:	e783      	b.n	800057a <__udivmoddi4+0x52>
 8000672:	4642      	mov	r2, r8
 8000674:	2320      	movs	r3, #32
 8000676:	2100      	movs	r1, #0
 8000678:	1a9b      	subs	r3, r3, r2
 800067a:	2200      	movs	r2, #0
 800067c:	9100      	str	r1, [sp, #0]
 800067e:	9201      	str	r2, [sp, #4]
 8000680:	2201      	movs	r2, #1
 8000682:	40da      	lsrs	r2, r3
 8000684:	9201      	str	r2, [sp, #4]
 8000686:	e786      	b.n	8000596 <__udivmoddi4+0x6e>
 8000688:	4642      	mov	r2, r8
 800068a:	2320      	movs	r3, #32
 800068c:	1a9b      	subs	r3, r3, r2
 800068e:	002a      	movs	r2, r5
 8000690:	4646      	mov	r6, r8
 8000692:	409a      	lsls	r2, r3
 8000694:	0023      	movs	r3, r4
 8000696:	40f3      	lsrs	r3, r6
 8000698:	4644      	mov	r4, r8
 800069a:	4313      	orrs	r3, r2
 800069c:	002a      	movs	r2, r5
 800069e:	40e2      	lsrs	r2, r4
 80006a0:	001c      	movs	r4, r3
 80006a2:	465b      	mov	r3, fp
 80006a4:	0015      	movs	r5, r2
 80006a6:	2b00      	cmp	r3, #0
 80006a8:	dad4      	bge.n	8000654 <__udivmoddi4+0x12c>
 80006aa:	4642      	mov	r2, r8
 80006ac:	002f      	movs	r7, r5
 80006ae:	2320      	movs	r3, #32
 80006b0:	0026      	movs	r6, r4
 80006b2:	4097      	lsls	r7, r2
 80006b4:	1a9b      	subs	r3, r3, r2
 80006b6:	40de      	lsrs	r6, r3
 80006b8:	003b      	movs	r3, r7
 80006ba:	4333      	orrs	r3, r6
 80006bc:	e7cd      	b.n	800065a <__udivmoddi4+0x132>
 80006be:	46c0      	nop			; (mov r8, r8)

080006c0 <__aeabi_fdiv>:
 80006c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80006c2:	464f      	mov	r7, r9
 80006c4:	4646      	mov	r6, r8
 80006c6:	46d6      	mov	lr, sl
 80006c8:	0245      	lsls	r5, r0, #9
 80006ca:	b5c0      	push	{r6, r7, lr}
 80006cc:	0047      	lsls	r7, r0, #1
 80006ce:	1c0c      	adds	r4, r1, #0
 80006d0:	0a6d      	lsrs	r5, r5, #9
 80006d2:	0e3f      	lsrs	r7, r7, #24
 80006d4:	0fc6      	lsrs	r6, r0, #31
 80006d6:	2f00      	cmp	r7, #0
 80006d8:	d100      	bne.n	80006dc <__aeabi_fdiv+0x1c>
 80006da:	e070      	b.n	80007be <__aeabi_fdiv+0xfe>
 80006dc:	2fff      	cmp	r7, #255	; 0xff
 80006de:	d100      	bne.n	80006e2 <__aeabi_fdiv+0x22>
 80006e0:	e075      	b.n	80007ce <__aeabi_fdiv+0x10e>
 80006e2:	00eb      	lsls	r3, r5, #3
 80006e4:	2580      	movs	r5, #128	; 0x80
 80006e6:	04ed      	lsls	r5, r5, #19
 80006e8:	431d      	orrs	r5, r3
 80006ea:	2300      	movs	r3, #0
 80006ec:	4699      	mov	r9, r3
 80006ee:	469a      	mov	sl, r3
 80006f0:	3f7f      	subs	r7, #127	; 0x7f
 80006f2:	0260      	lsls	r0, r4, #9
 80006f4:	0a43      	lsrs	r3, r0, #9
 80006f6:	4698      	mov	r8, r3
 80006f8:	0063      	lsls	r3, r4, #1
 80006fa:	0e1b      	lsrs	r3, r3, #24
 80006fc:	0fe4      	lsrs	r4, r4, #31
 80006fe:	2b00      	cmp	r3, #0
 8000700:	d04e      	beq.n	80007a0 <__aeabi_fdiv+0xe0>
 8000702:	2bff      	cmp	r3, #255	; 0xff
 8000704:	d046      	beq.n	8000794 <__aeabi_fdiv+0xd4>
 8000706:	4642      	mov	r2, r8
 8000708:	00d0      	lsls	r0, r2, #3
 800070a:	2280      	movs	r2, #128	; 0x80
 800070c:	04d2      	lsls	r2, r2, #19
 800070e:	4302      	orrs	r2, r0
 8000710:	4690      	mov	r8, r2
 8000712:	2200      	movs	r2, #0
 8000714:	3b7f      	subs	r3, #127	; 0x7f
 8000716:	0031      	movs	r1, r6
 8000718:	1aff      	subs	r7, r7, r3
 800071a:	464b      	mov	r3, r9
 800071c:	4061      	eors	r1, r4
 800071e:	b2c9      	uxtb	r1, r1
 8000720:	4313      	orrs	r3, r2
 8000722:	2b0f      	cmp	r3, #15
 8000724:	d900      	bls.n	8000728 <__aeabi_fdiv+0x68>
 8000726:	e0b5      	b.n	8000894 <__aeabi_fdiv+0x1d4>
 8000728:	486e      	ldr	r0, [pc, #440]	; (80008e4 <__aeabi_fdiv+0x224>)
 800072a:	009b      	lsls	r3, r3, #2
 800072c:	58c3      	ldr	r3, [r0, r3]
 800072e:	469f      	mov	pc, r3
 8000730:	2300      	movs	r3, #0
 8000732:	4698      	mov	r8, r3
 8000734:	0026      	movs	r6, r4
 8000736:	4645      	mov	r5, r8
 8000738:	4692      	mov	sl, r2
 800073a:	4653      	mov	r3, sl
 800073c:	2b02      	cmp	r3, #2
 800073e:	d100      	bne.n	8000742 <__aeabi_fdiv+0x82>
 8000740:	e089      	b.n	8000856 <__aeabi_fdiv+0x196>
 8000742:	2b03      	cmp	r3, #3
 8000744:	d100      	bne.n	8000748 <__aeabi_fdiv+0x88>
 8000746:	e09e      	b.n	8000886 <__aeabi_fdiv+0x1c6>
 8000748:	2b01      	cmp	r3, #1
 800074a:	d018      	beq.n	800077e <__aeabi_fdiv+0xbe>
 800074c:	003b      	movs	r3, r7
 800074e:	337f      	adds	r3, #127	; 0x7f
 8000750:	2b00      	cmp	r3, #0
 8000752:	dd69      	ble.n	8000828 <__aeabi_fdiv+0x168>
 8000754:	076a      	lsls	r2, r5, #29
 8000756:	d004      	beq.n	8000762 <__aeabi_fdiv+0xa2>
 8000758:	220f      	movs	r2, #15
 800075a:	402a      	ands	r2, r5
 800075c:	2a04      	cmp	r2, #4
 800075e:	d000      	beq.n	8000762 <__aeabi_fdiv+0xa2>
 8000760:	3504      	adds	r5, #4
 8000762:	012a      	lsls	r2, r5, #4
 8000764:	d503      	bpl.n	800076e <__aeabi_fdiv+0xae>
 8000766:	4b60      	ldr	r3, [pc, #384]	; (80008e8 <__aeabi_fdiv+0x228>)
 8000768:	401d      	ands	r5, r3
 800076a:	003b      	movs	r3, r7
 800076c:	3380      	adds	r3, #128	; 0x80
 800076e:	2bfe      	cmp	r3, #254	; 0xfe
 8000770:	dd00      	ble.n	8000774 <__aeabi_fdiv+0xb4>
 8000772:	e070      	b.n	8000856 <__aeabi_fdiv+0x196>
 8000774:	01ad      	lsls	r5, r5, #6
 8000776:	0a6d      	lsrs	r5, r5, #9
 8000778:	b2d8      	uxtb	r0, r3
 800077a:	e002      	b.n	8000782 <__aeabi_fdiv+0xc2>
 800077c:	000e      	movs	r6, r1
 800077e:	2000      	movs	r0, #0
 8000780:	2500      	movs	r5, #0
 8000782:	05c0      	lsls	r0, r0, #23
 8000784:	4328      	orrs	r0, r5
 8000786:	07f6      	lsls	r6, r6, #31
 8000788:	4330      	orrs	r0, r6
 800078a:	bce0      	pop	{r5, r6, r7}
 800078c:	46ba      	mov	sl, r7
 800078e:	46b1      	mov	r9, r6
 8000790:	46a8      	mov	r8, r5
 8000792:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000794:	4643      	mov	r3, r8
 8000796:	2b00      	cmp	r3, #0
 8000798:	d13f      	bne.n	800081a <__aeabi_fdiv+0x15a>
 800079a:	2202      	movs	r2, #2
 800079c:	3fff      	subs	r7, #255	; 0xff
 800079e:	e003      	b.n	80007a8 <__aeabi_fdiv+0xe8>
 80007a0:	4643      	mov	r3, r8
 80007a2:	2b00      	cmp	r3, #0
 80007a4:	d12d      	bne.n	8000802 <__aeabi_fdiv+0x142>
 80007a6:	2201      	movs	r2, #1
 80007a8:	0031      	movs	r1, r6
 80007aa:	464b      	mov	r3, r9
 80007ac:	4061      	eors	r1, r4
 80007ae:	b2c9      	uxtb	r1, r1
 80007b0:	4313      	orrs	r3, r2
 80007b2:	2b0f      	cmp	r3, #15
 80007b4:	d834      	bhi.n	8000820 <__aeabi_fdiv+0x160>
 80007b6:	484d      	ldr	r0, [pc, #308]	; (80008ec <__aeabi_fdiv+0x22c>)
 80007b8:	009b      	lsls	r3, r3, #2
 80007ba:	58c3      	ldr	r3, [r0, r3]
 80007bc:	469f      	mov	pc, r3
 80007be:	2d00      	cmp	r5, #0
 80007c0:	d113      	bne.n	80007ea <__aeabi_fdiv+0x12a>
 80007c2:	2304      	movs	r3, #4
 80007c4:	4699      	mov	r9, r3
 80007c6:	3b03      	subs	r3, #3
 80007c8:	2700      	movs	r7, #0
 80007ca:	469a      	mov	sl, r3
 80007cc:	e791      	b.n	80006f2 <__aeabi_fdiv+0x32>
 80007ce:	2d00      	cmp	r5, #0
 80007d0:	d105      	bne.n	80007de <__aeabi_fdiv+0x11e>
 80007d2:	2308      	movs	r3, #8
 80007d4:	4699      	mov	r9, r3
 80007d6:	3b06      	subs	r3, #6
 80007d8:	27ff      	movs	r7, #255	; 0xff
 80007da:	469a      	mov	sl, r3
 80007dc:	e789      	b.n	80006f2 <__aeabi_fdiv+0x32>
 80007de:	230c      	movs	r3, #12
 80007e0:	4699      	mov	r9, r3
 80007e2:	3b09      	subs	r3, #9
 80007e4:	27ff      	movs	r7, #255	; 0xff
 80007e6:	469a      	mov	sl, r3
 80007e8:	e783      	b.n	80006f2 <__aeabi_fdiv+0x32>
 80007ea:	0028      	movs	r0, r5
 80007ec:	f000 fa98 	bl	8000d20 <__clzsi2>
 80007f0:	2776      	movs	r7, #118	; 0x76
 80007f2:	1f43      	subs	r3, r0, #5
 80007f4:	409d      	lsls	r5, r3
 80007f6:	2300      	movs	r3, #0
 80007f8:	427f      	negs	r7, r7
 80007fa:	4699      	mov	r9, r3
 80007fc:	469a      	mov	sl, r3
 80007fe:	1a3f      	subs	r7, r7, r0
 8000800:	e777      	b.n	80006f2 <__aeabi_fdiv+0x32>
 8000802:	4640      	mov	r0, r8
 8000804:	f000 fa8c 	bl	8000d20 <__clzsi2>
 8000808:	4642      	mov	r2, r8
 800080a:	1f43      	subs	r3, r0, #5
 800080c:	409a      	lsls	r2, r3
 800080e:	2376      	movs	r3, #118	; 0x76
 8000810:	425b      	negs	r3, r3
 8000812:	4690      	mov	r8, r2
 8000814:	1a1b      	subs	r3, r3, r0
 8000816:	2200      	movs	r2, #0
 8000818:	e77d      	b.n	8000716 <__aeabi_fdiv+0x56>
 800081a:	23ff      	movs	r3, #255	; 0xff
 800081c:	2203      	movs	r2, #3
 800081e:	e77a      	b.n	8000716 <__aeabi_fdiv+0x56>
 8000820:	000e      	movs	r6, r1
 8000822:	20ff      	movs	r0, #255	; 0xff
 8000824:	2500      	movs	r5, #0
 8000826:	e7ac      	b.n	8000782 <__aeabi_fdiv+0xc2>
 8000828:	2001      	movs	r0, #1
 800082a:	1ac0      	subs	r0, r0, r3
 800082c:	281b      	cmp	r0, #27
 800082e:	dca6      	bgt.n	800077e <__aeabi_fdiv+0xbe>
 8000830:	379e      	adds	r7, #158	; 0x9e
 8000832:	002a      	movs	r2, r5
 8000834:	40bd      	lsls	r5, r7
 8000836:	40c2      	lsrs	r2, r0
 8000838:	1e6b      	subs	r3, r5, #1
 800083a:	419d      	sbcs	r5, r3
 800083c:	4315      	orrs	r5, r2
 800083e:	076b      	lsls	r3, r5, #29
 8000840:	d004      	beq.n	800084c <__aeabi_fdiv+0x18c>
 8000842:	230f      	movs	r3, #15
 8000844:	402b      	ands	r3, r5
 8000846:	2b04      	cmp	r3, #4
 8000848:	d000      	beq.n	800084c <__aeabi_fdiv+0x18c>
 800084a:	3504      	adds	r5, #4
 800084c:	016b      	lsls	r3, r5, #5
 800084e:	d544      	bpl.n	80008da <__aeabi_fdiv+0x21a>
 8000850:	2001      	movs	r0, #1
 8000852:	2500      	movs	r5, #0
 8000854:	e795      	b.n	8000782 <__aeabi_fdiv+0xc2>
 8000856:	20ff      	movs	r0, #255	; 0xff
 8000858:	2500      	movs	r5, #0
 800085a:	e792      	b.n	8000782 <__aeabi_fdiv+0xc2>
 800085c:	2580      	movs	r5, #128	; 0x80
 800085e:	2600      	movs	r6, #0
 8000860:	20ff      	movs	r0, #255	; 0xff
 8000862:	03ed      	lsls	r5, r5, #15
 8000864:	e78d      	b.n	8000782 <__aeabi_fdiv+0xc2>
 8000866:	2300      	movs	r3, #0
 8000868:	4698      	mov	r8, r3
 800086a:	2080      	movs	r0, #128	; 0x80
 800086c:	03c0      	lsls	r0, r0, #15
 800086e:	4205      	tst	r5, r0
 8000870:	d009      	beq.n	8000886 <__aeabi_fdiv+0x1c6>
 8000872:	4643      	mov	r3, r8
 8000874:	4203      	tst	r3, r0
 8000876:	d106      	bne.n	8000886 <__aeabi_fdiv+0x1c6>
 8000878:	4645      	mov	r5, r8
 800087a:	4305      	orrs	r5, r0
 800087c:	026d      	lsls	r5, r5, #9
 800087e:	0026      	movs	r6, r4
 8000880:	20ff      	movs	r0, #255	; 0xff
 8000882:	0a6d      	lsrs	r5, r5, #9
 8000884:	e77d      	b.n	8000782 <__aeabi_fdiv+0xc2>
 8000886:	2080      	movs	r0, #128	; 0x80
 8000888:	03c0      	lsls	r0, r0, #15
 800088a:	4305      	orrs	r5, r0
 800088c:	026d      	lsls	r5, r5, #9
 800088e:	20ff      	movs	r0, #255	; 0xff
 8000890:	0a6d      	lsrs	r5, r5, #9
 8000892:	e776      	b.n	8000782 <__aeabi_fdiv+0xc2>
 8000894:	4642      	mov	r2, r8
 8000896:	016b      	lsls	r3, r5, #5
 8000898:	0150      	lsls	r0, r2, #5
 800089a:	4283      	cmp	r3, r0
 800089c:	d219      	bcs.n	80008d2 <__aeabi_fdiv+0x212>
 800089e:	221b      	movs	r2, #27
 80008a0:	2500      	movs	r5, #0
 80008a2:	3f01      	subs	r7, #1
 80008a4:	2601      	movs	r6, #1
 80008a6:	001c      	movs	r4, r3
 80008a8:	006d      	lsls	r5, r5, #1
 80008aa:	005b      	lsls	r3, r3, #1
 80008ac:	2c00      	cmp	r4, #0
 80008ae:	db01      	blt.n	80008b4 <__aeabi_fdiv+0x1f4>
 80008b0:	4298      	cmp	r0, r3
 80008b2:	d801      	bhi.n	80008b8 <__aeabi_fdiv+0x1f8>
 80008b4:	1a1b      	subs	r3, r3, r0
 80008b6:	4335      	orrs	r5, r6
 80008b8:	3a01      	subs	r2, #1
 80008ba:	2a00      	cmp	r2, #0
 80008bc:	d1f3      	bne.n	80008a6 <__aeabi_fdiv+0x1e6>
 80008be:	1e5a      	subs	r2, r3, #1
 80008c0:	4193      	sbcs	r3, r2
 80008c2:	431d      	orrs	r5, r3
 80008c4:	003b      	movs	r3, r7
 80008c6:	337f      	adds	r3, #127	; 0x7f
 80008c8:	000e      	movs	r6, r1
 80008ca:	2b00      	cmp	r3, #0
 80008cc:	dd00      	ble.n	80008d0 <__aeabi_fdiv+0x210>
 80008ce:	e741      	b.n	8000754 <__aeabi_fdiv+0x94>
 80008d0:	e7aa      	b.n	8000828 <__aeabi_fdiv+0x168>
 80008d2:	221a      	movs	r2, #26
 80008d4:	2501      	movs	r5, #1
 80008d6:	1a1b      	subs	r3, r3, r0
 80008d8:	e7e4      	b.n	80008a4 <__aeabi_fdiv+0x1e4>
 80008da:	01ad      	lsls	r5, r5, #6
 80008dc:	2000      	movs	r0, #0
 80008de:	0a6d      	lsrs	r5, r5, #9
 80008e0:	e74f      	b.n	8000782 <__aeabi_fdiv+0xc2>
 80008e2:	46c0      	nop			; (mov r8, r8)
 80008e4:	080069e8 	.word	0x080069e8
 80008e8:	f7ffffff 	.word	0xf7ffffff
 80008ec:	08006a28 	.word	0x08006a28

080008f0 <__eqsf2>:
 80008f0:	b570      	push	{r4, r5, r6, lr}
 80008f2:	0042      	lsls	r2, r0, #1
 80008f4:	0245      	lsls	r5, r0, #9
 80008f6:	024e      	lsls	r6, r1, #9
 80008f8:	004c      	lsls	r4, r1, #1
 80008fa:	0fc3      	lsrs	r3, r0, #31
 80008fc:	0a6d      	lsrs	r5, r5, #9
 80008fe:	2001      	movs	r0, #1
 8000900:	0e12      	lsrs	r2, r2, #24
 8000902:	0a76      	lsrs	r6, r6, #9
 8000904:	0e24      	lsrs	r4, r4, #24
 8000906:	0fc9      	lsrs	r1, r1, #31
 8000908:	2aff      	cmp	r2, #255	; 0xff
 800090a:	d006      	beq.n	800091a <__eqsf2+0x2a>
 800090c:	2cff      	cmp	r4, #255	; 0xff
 800090e:	d003      	beq.n	8000918 <__eqsf2+0x28>
 8000910:	42a2      	cmp	r2, r4
 8000912:	d101      	bne.n	8000918 <__eqsf2+0x28>
 8000914:	42b5      	cmp	r5, r6
 8000916:	d006      	beq.n	8000926 <__eqsf2+0x36>
 8000918:	bd70      	pop	{r4, r5, r6, pc}
 800091a:	2d00      	cmp	r5, #0
 800091c:	d1fc      	bne.n	8000918 <__eqsf2+0x28>
 800091e:	2cff      	cmp	r4, #255	; 0xff
 8000920:	d1fa      	bne.n	8000918 <__eqsf2+0x28>
 8000922:	2e00      	cmp	r6, #0
 8000924:	d1f8      	bne.n	8000918 <__eqsf2+0x28>
 8000926:	428b      	cmp	r3, r1
 8000928:	d006      	beq.n	8000938 <__eqsf2+0x48>
 800092a:	2001      	movs	r0, #1
 800092c:	2a00      	cmp	r2, #0
 800092e:	d1f3      	bne.n	8000918 <__eqsf2+0x28>
 8000930:	0028      	movs	r0, r5
 8000932:	1e43      	subs	r3, r0, #1
 8000934:	4198      	sbcs	r0, r3
 8000936:	e7ef      	b.n	8000918 <__eqsf2+0x28>
 8000938:	2000      	movs	r0, #0
 800093a:	e7ed      	b.n	8000918 <__eqsf2+0x28>

0800093c <__gesf2>:
 800093c:	b570      	push	{r4, r5, r6, lr}
 800093e:	0042      	lsls	r2, r0, #1
 8000940:	0245      	lsls	r5, r0, #9
 8000942:	024e      	lsls	r6, r1, #9
 8000944:	004c      	lsls	r4, r1, #1
 8000946:	0fc3      	lsrs	r3, r0, #31
 8000948:	0a6d      	lsrs	r5, r5, #9
 800094a:	0e12      	lsrs	r2, r2, #24
 800094c:	0a76      	lsrs	r6, r6, #9
 800094e:	0e24      	lsrs	r4, r4, #24
 8000950:	0fc8      	lsrs	r0, r1, #31
 8000952:	2aff      	cmp	r2, #255	; 0xff
 8000954:	d01b      	beq.n	800098e <__gesf2+0x52>
 8000956:	2cff      	cmp	r4, #255	; 0xff
 8000958:	d00e      	beq.n	8000978 <__gesf2+0x3c>
 800095a:	2a00      	cmp	r2, #0
 800095c:	d11b      	bne.n	8000996 <__gesf2+0x5a>
 800095e:	2c00      	cmp	r4, #0
 8000960:	d101      	bne.n	8000966 <__gesf2+0x2a>
 8000962:	2e00      	cmp	r6, #0
 8000964:	d01c      	beq.n	80009a0 <__gesf2+0x64>
 8000966:	2d00      	cmp	r5, #0
 8000968:	d00c      	beq.n	8000984 <__gesf2+0x48>
 800096a:	4283      	cmp	r3, r0
 800096c:	d01c      	beq.n	80009a8 <__gesf2+0x6c>
 800096e:	2102      	movs	r1, #2
 8000970:	1e58      	subs	r0, r3, #1
 8000972:	4008      	ands	r0, r1
 8000974:	3801      	subs	r0, #1
 8000976:	bd70      	pop	{r4, r5, r6, pc}
 8000978:	2e00      	cmp	r6, #0
 800097a:	d122      	bne.n	80009c2 <__gesf2+0x86>
 800097c:	2a00      	cmp	r2, #0
 800097e:	d1f4      	bne.n	800096a <__gesf2+0x2e>
 8000980:	2d00      	cmp	r5, #0
 8000982:	d1f2      	bne.n	800096a <__gesf2+0x2e>
 8000984:	2800      	cmp	r0, #0
 8000986:	d1f6      	bne.n	8000976 <__gesf2+0x3a>
 8000988:	2001      	movs	r0, #1
 800098a:	4240      	negs	r0, r0
 800098c:	e7f3      	b.n	8000976 <__gesf2+0x3a>
 800098e:	2d00      	cmp	r5, #0
 8000990:	d117      	bne.n	80009c2 <__gesf2+0x86>
 8000992:	2cff      	cmp	r4, #255	; 0xff
 8000994:	d0f0      	beq.n	8000978 <__gesf2+0x3c>
 8000996:	2c00      	cmp	r4, #0
 8000998:	d1e7      	bne.n	800096a <__gesf2+0x2e>
 800099a:	2e00      	cmp	r6, #0
 800099c:	d1e5      	bne.n	800096a <__gesf2+0x2e>
 800099e:	e7e6      	b.n	800096e <__gesf2+0x32>
 80009a0:	2000      	movs	r0, #0
 80009a2:	2d00      	cmp	r5, #0
 80009a4:	d0e7      	beq.n	8000976 <__gesf2+0x3a>
 80009a6:	e7e2      	b.n	800096e <__gesf2+0x32>
 80009a8:	42a2      	cmp	r2, r4
 80009aa:	dc05      	bgt.n	80009b8 <__gesf2+0x7c>
 80009ac:	dbea      	blt.n	8000984 <__gesf2+0x48>
 80009ae:	42b5      	cmp	r5, r6
 80009b0:	d802      	bhi.n	80009b8 <__gesf2+0x7c>
 80009b2:	d3e7      	bcc.n	8000984 <__gesf2+0x48>
 80009b4:	2000      	movs	r0, #0
 80009b6:	e7de      	b.n	8000976 <__gesf2+0x3a>
 80009b8:	4243      	negs	r3, r0
 80009ba:	4158      	adcs	r0, r3
 80009bc:	0040      	lsls	r0, r0, #1
 80009be:	3801      	subs	r0, #1
 80009c0:	e7d9      	b.n	8000976 <__gesf2+0x3a>
 80009c2:	2002      	movs	r0, #2
 80009c4:	4240      	negs	r0, r0
 80009c6:	e7d6      	b.n	8000976 <__gesf2+0x3a>

080009c8 <__lesf2>:
 80009c8:	b570      	push	{r4, r5, r6, lr}
 80009ca:	0042      	lsls	r2, r0, #1
 80009cc:	0245      	lsls	r5, r0, #9
 80009ce:	024e      	lsls	r6, r1, #9
 80009d0:	004c      	lsls	r4, r1, #1
 80009d2:	0fc3      	lsrs	r3, r0, #31
 80009d4:	0a6d      	lsrs	r5, r5, #9
 80009d6:	0e12      	lsrs	r2, r2, #24
 80009d8:	0a76      	lsrs	r6, r6, #9
 80009da:	0e24      	lsrs	r4, r4, #24
 80009dc:	0fc8      	lsrs	r0, r1, #31
 80009de:	2aff      	cmp	r2, #255	; 0xff
 80009e0:	d00b      	beq.n	80009fa <__lesf2+0x32>
 80009e2:	2cff      	cmp	r4, #255	; 0xff
 80009e4:	d00d      	beq.n	8000a02 <__lesf2+0x3a>
 80009e6:	2a00      	cmp	r2, #0
 80009e8:	d11f      	bne.n	8000a2a <__lesf2+0x62>
 80009ea:	2c00      	cmp	r4, #0
 80009ec:	d116      	bne.n	8000a1c <__lesf2+0x54>
 80009ee:	2e00      	cmp	r6, #0
 80009f0:	d114      	bne.n	8000a1c <__lesf2+0x54>
 80009f2:	2000      	movs	r0, #0
 80009f4:	2d00      	cmp	r5, #0
 80009f6:	d010      	beq.n	8000a1a <__lesf2+0x52>
 80009f8:	e009      	b.n	8000a0e <__lesf2+0x46>
 80009fa:	2d00      	cmp	r5, #0
 80009fc:	d10c      	bne.n	8000a18 <__lesf2+0x50>
 80009fe:	2cff      	cmp	r4, #255	; 0xff
 8000a00:	d113      	bne.n	8000a2a <__lesf2+0x62>
 8000a02:	2e00      	cmp	r6, #0
 8000a04:	d108      	bne.n	8000a18 <__lesf2+0x50>
 8000a06:	2a00      	cmp	r2, #0
 8000a08:	d008      	beq.n	8000a1c <__lesf2+0x54>
 8000a0a:	4283      	cmp	r3, r0
 8000a0c:	d012      	beq.n	8000a34 <__lesf2+0x6c>
 8000a0e:	2102      	movs	r1, #2
 8000a10:	1e58      	subs	r0, r3, #1
 8000a12:	4008      	ands	r0, r1
 8000a14:	3801      	subs	r0, #1
 8000a16:	e000      	b.n	8000a1a <__lesf2+0x52>
 8000a18:	2002      	movs	r0, #2
 8000a1a:	bd70      	pop	{r4, r5, r6, pc}
 8000a1c:	2d00      	cmp	r5, #0
 8000a1e:	d1f4      	bne.n	8000a0a <__lesf2+0x42>
 8000a20:	2800      	cmp	r0, #0
 8000a22:	d1fa      	bne.n	8000a1a <__lesf2+0x52>
 8000a24:	2001      	movs	r0, #1
 8000a26:	4240      	negs	r0, r0
 8000a28:	e7f7      	b.n	8000a1a <__lesf2+0x52>
 8000a2a:	2c00      	cmp	r4, #0
 8000a2c:	d1ed      	bne.n	8000a0a <__lesf2+0x42>
 8000a2e:	2e00      	cmp	r6, #0
 8000a30:	d1eb      	bne.n	8000a0a <__lesf2+0x42>
 8000a32:	e7ec      	b.n	8000a0e <__lesf2+0x46>
 8000a34:	42a2      	cmp	r2, r4
 8000a36:	dc05      	bgt.n	8000a44 <__lesf2+0x7c>
 8000a38:	dbf2      	blt.n	8000a20 <__lesf2+0x58>
 8000a3a:	42b5      	cmp	r5, r6
 8000a3c:	d802      	bhi.n	8000a44 <__lesf2+0x7c>
 8000a3e:	d3ef      	bcc.n	8000a20 <__lesf2+0x58>
 8000a40:	2000      	movs	r0, #0
 8000a42:	e7ea      	b.n	8000a1a <__lesf2+0x52>
 8000a44:	4243      	negs	r3, r0
 8000a46:	4158      	adcs	r0, r3
 8000a48:	0040      	lsls	r0, r0, #1
 8000a4a:	3801      	subs	r0, #1
 8000a4c:	e7e5      	b.n	8000a1a <__lesf2+0x52>
 8000a4e:	46c0      	nop			; (mov r8, r8)

08000a50 <__aeabi_fmul>:
 8000a50:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000a52:	464f      	mov	r7, r9
 8000a54:	4646      	mov	r6, r8
 8000a56:	46d6      	mov	lr, sl
 8000a58:	0244      	lsls	r4, r0, #9
 8000a5a:	0045      	lsls	r5, r0, #1
 8000a5c:	b5c0      	push	{r6, r7, lr}
 8000a5e:	0a64      	lsrs	r4, r4, #9
 8000a60:	1c0f      	adds	r7, r1, #0
 8000a62:	0e2d      	lsrs	r5, r5, #24
 8000a64:	0fc6      	lsrs	r6, r0, #31
 8000a66:	2d00      	cmp	r5, #0
 8000a68:	d100      	bne.n	8000a6c <__aeabi_fmul+0x1c>
 8000a6a:	e08d      	b.n	8000b88 <__aeabi_fmul+0x138>
 8000a6c:	2dff      	cmp	r5, #255	; 0xff
 8000a6e:	d100      	bne.n	8000a72 <__aeabi_fmul+0x22>
 8000a70:	e092      	b.n	8000b98 <__aeabi_fmul+0x148>
 8000a72:	2300      	movs	r3, #0
 8000a74:	2080      	movs	r0, #128	; 0x80
 8000a76:	4699      	mov	r9, r3
 8000a78:	469a      	mov	sl, r3
 8000a7a:	00e4      	lsls	r4, r4, #3
 8000a7c:	04c0      	lsls	r0, r0, #19
 8000a7e:	4304      	orrs	r4, r0
 8000a80:	3d7f      	subs	r5, #127	; 0x7f
 8000a82:	0278      	lsls	r0, r7, #9
 8000a84:	0a43      	lsrs	r3, r0, #9
 8000a86:	4698      	mov	r8, r3
 8000a88:	007b      	lsls	r3, r7, #1
 8000a8a:	0e1b      	lsrs	r3, r3, #24
 8000a8c:	0fff      	lsrs	r7, r7, #31
 8000a8e:	2b00      	cmp	r3, #0
 8000a90:	d100      	bne.n	8000a94 <__aeabi_fmul+0x44>
 8000a92:	e070      	b.n	8000b76 <__aeabi_fmul+0x126>
 8000a94:	2bff      	cmp	r3, #255	; 0xff
 8000a96:	d100      	bne.n	8000a9a <__aeabi_fmul+0x4a>
 8000a98:	e086      	b.n	8000ba8 <__aeabi_fmul+0x158>
 8000a9a:	4642      	mov	r2, r8
 8000a9c:	00d0      	lsls	r0, r2, #3
 8000a9e:	2280      	movs	r2, #128	; 0x80
 8000aa0:	3b7f      	subs	r3, #127	; 0x7f
 8000aa2:	18ed      	adds	r5, r5, r3
 8000aa4:	2300      	movs	r3, #0
 8000aa6:	04d2      	lsls	r2, r2, #19
 8000aa8:	4302      	orrs	r2, r0
 8000aaa:	4690      	mov	r8, r2
 8000aac:	469c      	mov	ip, r3
 8000aae:	0031      	movs	r1, r6
 8000ab0:	464b      	mov	r3, r9
 8000ab2:	4079      	eors	r1, r7
 8000ab4:	1c68      	adds	r0, r5, #1
 8000ab6:	2b0f      	cmp	r3, #15
 8000ab8:	d81c      	bhi.n	8000af4 <__aeabi_fmul+0xa4>
 8000aba:	4a76      	ldr	r2, [pc, #472]	; (8000c94 <__aeabi_fmul+0x244>)
 8000abc:	009b      	lsls	r3, r3, #2
 8000abe:	58d3      	ldr	r3, [r2, r3]
 8000ac0:	469f      	mov	pc, r3
 8000ac2:	0039      	movs	r1, r7
 8000ac4:	4644      	mov	r4, r8
 8000ac6:	46e2      	mov	sl, ip
 8000ac8:	4653      	mov	r3, sl
 8000aca:	2b02      	cmp	r3, #2
 8000acc:	d00f      	beq.n	8000aee <__aeabi_fmul+0x9e>
 8000ace:	2b03      	cmp	r3, #3
 8000ad0:	d100      	bne.n	8000ad4 <__aeabi_fmul+0x84>
 8000ad2:	e0d7      	b.n	8000c84 <__aeabi_fmul+0x234>
 8000ad4:	2b01      	cmp	r3, #1
 8000ad6:	d137      	bne.n	8000b48 <__aeabi_fmul+0xf8>
 8000ad8:	2000      	movs	r0, #0
 8000ada:	2400      	movs	r4, #0
 8000adc:	05c0      	lsls	r0, r0, #23
 8000ade:	4320      	orrs	r0, r4
 8000ae0:	07c9      	lsls	r1, r1, #31
 8000ae2:	4308      	orrs	r0, r1
 8000ae4:	bce0      	pop	{r5, r6, r7}
 8000ae6:	46ba      	mov	sl, r7
 8000ae8:	46b1      	mov	r9, r6
 8000aea:	46a8      	mov	r8, r5
 8000aec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000aee:	20ff      	movs	r0, #255	; 0xff
 8000af0:	2400      	movs	r4, #0
 8000af2:	e7f3      	b.n	8000adc <__aeabi_fmul+0x8c>
 8000af4:	0c26      	lsrs	r6, r4, #16
 8000af6:	0424      	lsls	r4, r4, #16
 8000af8:	0c22      	lsrs	r2, r4, #16
 8000afa:	4644      	mov	r4, r8
 8000afc:	0424      	lsls	r4, r4, #16
 8000afe:	0c24      	lsrs	r4, r4, #16
 8000b00:	4643      	mov	r3, r8
 8000b02:	0027      	movs	r7, r4
 8000b04:	0c1b      	lsrs	r3, r3, #16
 8000b06:	4357      	muls	r7, r2
 8000b08:	4374      	muls	r4, r6
 8000b0a:	435a      	muls	r2, r3
 8000b0c:	435e      	muls	r6, r3
 8000b0e:	1912      	adds	r2, r2, r4
 8000b10:	0c3b      	lsrs	r3, r7, #16
 8000b12:	189b      	adds	r3, r3, r2
 8000b14:	429c      	cmp	r4, r3
 8000b16:	d903      	bls.n	8000b20 <__aeabi_fmul+0xd0>
 8000b18:	2280      	movs	r2, #128	; 0x80
 8000b1a:	0252      	lsls	r2, r2, #9
 8000b1c:	4694      	mov	ip, r2
 8000b1e:	4466      	add	r6, ip
 8000b20:	043f      	lsls	r7, r7, #16
 8000b22:	041a      	lsls	r2, r3, #16
 8000b24:	0c3f      	lsrs	r7, r7, #16
 8000b26:	19d2      	adds	r2, r2, r7
 8000b28:	0194      	lsls	r4, r2, #6
 8000b2a:	1e67      	subs	r7, r4, #1
 8000b2c:	41bc      	sbcs	r4, r7
 8000b2e:	0c1b      	lsrs	r3, r3, #16
 8000b30:	0e92      	lsrs	r2, r2, #26
 8000b32:	199b      	adds	r3, r3, r6
 8000b34:	4314      	orrs	r4, r2
 8000b36:	019b      	lsls	r3, r3, #6
 8000b38:	431c      	orrs	r4, r3
 8000b3a:	011b      	lsls	r3, r3, #4
 8000b3c:	d400      	bmi.n	8000b40 <__aeabi_fmul+0xf0>
 8000b3e:	e09b      	b.n	8000c78 <__aeabi_fmul+0x228>
 8000b40:	2301      	movs	r3, #1
 8000b42:	0862      	lsrs	r2, r4, #1
 8000b44:	401c      	ands	r4, r3
 8000b46:	4314      	orrs	r4, r2
 8000b48:	0002      	movs	r2, r0
 8000b4a:	327f      	adds	r2, #127	; 0x7f
 8000b4c:	2a00      	cmp	r2, #0
 8000b4e:	dd64      	ble.n	8000c1a <__aeabi_fmul+0x1ca>
 8000b50:	0763      	lsls	r3, r4, #29
 8000b52:	d004      	beq.n	8000b5e <__aeabi_fmul+0x10e>
 8000b54:	230f      	movs	r3, #15
 8000b56:	4023      	ands	r3, r4
 8000b58:	2b04      	cmp	r3, #4
 8000b5a:	d000      	beq.n	8000b5e <__aeabi_fmul+0x10e>
 8000b5c:	3404      	adds	r4, #4
 8000b5e:	0123      	lsls	r3, r4, #4
 8000b60:	d503      	bpl.n	8000b6a <__aeabi_fmul+0x11a>
 8000b62:	0002      	movs	r2, r0
 8000b64:	4b4c      	ldr	r3, [pc, #304]	; (8000c98 <__aeabi_fmul+0x248>)
 8000b66:	3280      	adds	r2, #128	; 0x80
 8000b68:	401c      	ands	r4, r3
 8000b6a:	2afe      	cmp	r2, #254	; 0xfe
 8000b6c:	dcbf      	bgt.n	8000aee <__aeabi_fmul+0x9e>
 8000b6e:	01a4      	lsls	r4, r4, #6
 8000b70:	0a64      	lsrs	r4, r4, #9
 8000b72:	b2d0      	uxtb	r0, r2
 8000b74:	e7b2      	b.n	8000adc <__aeabi_fmul+0x8c>
 8000b76:	4643      	mov	r3, r8
 8000b78:	2b00      	cmp	r3, #0
 8000b7a:	d13d      	bne.n	8000bf8 <__aeabi_fmul+0x1a8>
 8000b7c:	464a      	mov	r2, r9
 8000b7e:	3301      	adds	r3, #1
 8000b80:	431a      	orrs	r2, r3
 8000b82:	4691      	mov	r9, r2
 8000b84:	469c      	mov	ip, r3
 8000b86:	e792      	b.n	8000aae <__aeabi_fmul+0x5e>
 8000b88:	2c00      	cmp	r4, #0
 8000b8a:	d129      	bne.n	8000be0 <__aeabi_fmul+0x190>
 8000b8c:	2304      	movs	r3, #4
 8000b8e:	4699      	mov	r9, r3
 8000b90:	3b03      	subs	r3, #3
 8000b92:	2500      	movs	r5, #0
 8000b94:	469a      	mov	sl, r3
 8000b96:	e774      	b.n	8000a82 <__aeabi_fmul+0x32>
 8000b98:	2c00      	cmp	r4, #0
 8000b9a:	d11b      	bne.n	8000bd4 <__aeabi_fmul+0x184>
 8000b9c:	2308      	movs	r3, #8
 8000b9e:	4699      	mov	r9, r3
 8000ba0:	3b06      	subs	r3, #6
 8000ba2:	25ff      	movs	r5, #255	; 0xff
 8000ba4:	469a      	mov	sl, r3
 8000ba6:	e76c      	b.n	8000a82 <__aeabi_fmul+0x32>
 8000ba8:	4643      	mov	r3, r8
 8000baa:	35ff      	adds	r5, #255	; 0xff
 8000bac:	2b00      	cmp	r3, #0
 8000bae:	d10b      	bne.n	8000bc8 <__aeabi_fmul+0x178>
 8000bb0:	2302      	movs	r3, #2
 8000bb2:	464a      	mov	r2, r9
 8000bb4:	431a      	orrs	r2, r3
 8000bb6:	4691      	mov	r9, r2
 8000bb8:	469c      	mov	ip, r3
 8000bba:	e778      	b.n	8000aae <__aeabi_fmul+0x5e>
 8000bbc:	4653      	mov	r3, sl
 8000bbe:	0031      	movs	r1, r6
 8000bc0:	2b02      	cmp	r3, #2
 8000bc2:	d000      	beq.n	8000bc6 <__aeabi_fmul+0x176>
 8000bc4:	e783      	b.n	8000ace <__aeabi_fmul+0x7e>
 8000bc6:	e792      	b.n	8000aee <__aeabi_fmul+0x9e>
 8000bc8:	2303      	movs	r3, #3
 8000bca:	464a      	mov	r2, r9
 8000bcc:	431a      	orrs	r2, r3
 8000bce:	4691      	mov	r9, r2
 8000bd0:	469c      	mov	ip, r3
 8000bd2:	e76c      	b.n	8000aae <__aeabi_fmul+0x5e>
 8000bd4:	230c      	movs	r3, #12
 8000bd6:	4699      	mov	r9, r3
 8000bd8:	3b09      	subs	r3, #9
 8000bda:	25ff      	movs	r5, #255	; 0xff
 8000bdc:	469a      	mov	sl, r3
 8000bde:	e750      	b.n	8000a82 <__aeabi_fmul+0x32>
 8000be0:	0020      	movs	r0, r4
 8000be2:	f000 f89d 	bl	8000d20 <__clzsi2>
 8000be6:	2576      	movs	r5, #118	; 0x76
 8000be8:	1f43      	subs	r3, r0, #5
 8000bea:	409c      	lsls	r4, r3
 8000bec:	2300      	movs	r3, #0
 8000bee:	426d      	negs	r5, r5
 8000bf0:	4699      	mov	r9, r3
 8000bf2:	469a      	mov	sl, r3
 8000bf4:	1a2d      	subs	r5, r5, r0
 8000bf6:	e744      	b.n	8000a82 <__aeabi_fmul+0x32>
 8000bf8:	4640      	mov	r0, r8
 8000bfa:	f000 f891 	bl	8000d20 <__clzsi2>
 8000bfe:	4642      	mov	r2, r8
 8000c00:	1f43      	subs	r3, r0, #5
 8000c02:	409a      	lsls	r2, r3
 8000c04:	2300      	movs	r3, #0
 8000c06:	1a2d      	subs	r5, r5, r0
 8000c08:	4690      	mov	r8, r2
 8000c0a:	469c      	mov	ip, r3
 8000c0c:	3d76      	subs	r5, #118	; 0x76
 8000c0e:	e74e      	b.n	8000aae <__aeabi_fmul+0x5e>
 8000c10:	2480      	movs	r4, #128	; 0x80
 8000c12:	2100      	movs	r1, #0
 8000c14:	20ff      	movs	r0, #255	; 0xff
 8000c16:	03e4      	lsls	r4, r4, #15
 8000c18:	e760      	b.n	8000adc <__aeabi_fmul+0x8c>
 8000c1a:	2301      	movs	r3, #1
 8000c1c:	1a9b      	subs	r3, r3, r2
 8000c1e:	2b1b      	cmp	r3, #27
 8000c20:	dd00      	ble.n	8000c24 <__aeabi_fmul+0x1d4>
 8000c22:	e759      	b.n	8000ad8 <__aeabi_fmul+0x88>
 8000c24:	0022      	movs	r2, r4
 8000c26:	309e      	adds	r0, #158	; 0x9e
 8000c28:	40da      	lsrs	r2, r3
 8000c2a:	4084      	lsls	r4, r0
 8000c2c:	0013      	movs	r3, r2
 8000c2e:	1e62      	subs	r2, r4, #1
 8000c30:	4194      	sbcs	r4, r2
 8000c32:	431c      	orrs	r4, r3
 8000c34:	0763      	lsls	r3, r4, #29
 8000c36:	d004      	beq.n	8000c42 <__aeabi_fmul+0x1f2>
 8000c38:	230f      	movs	r3, #15
 8000c3a:	4023      	ands	r3, r4
 8000c3c:	2b04      	cmp	r3, #4
 8000c3e:	d000      	beq.n	8000c42 <__aeabi_fmul+0x1f2>
 8000c40:	3404      	adds	r4, #4
 8000c42:	0163      	lsls	r3, r4, #5
 8000c44:	d51a      	bpl.n	8000c7c <__aeabi_fmul+0x22c>
 8000c46:	2001      	movs	r0, #1
 8000c48:	2400      	movs	r4, #0
 8000c4a:	e747      	b.n	8000adc <__aeabi_fmul+0x8c>
 8000c4c:	2080      	movs	r0, #128	; 0x80
 8000c4e:	03c0      	lsls	r0, r0, #15
 8000c50:	4204      	tst	r4, r0
 8000c52:	d009      	beq.n	8000c68 <__aeabi_fmul+0x218>
 8000c54:	4643      	mov	r3, r8
 8000c56:	4203      	tst	r3, r0
 8000c58:	d106      	bne.n	8000c68 <__aeabi_fmul+0x218>
 8000c5a:	4644      	mov	r4, r8
 8000c5c:	4304      	orrs	r4, r0
 8000c5e:	0264      	lsls	r4, r4, #9
 8000c60:	0039      	movs	r1, r7
 8000c62:	20ff      	movs	r0, #255	; 0xff
 8000c64:	0a64      	lsrs	r4, r4, #9
 8000c66:	e739      	b.n	8000adc <__aeabi_fmul+0x8c>
 8000c68:	2080      	movs	r0, #128	; 0x80
 8000c6a:	03c0      	lsls	r0, r0, #15
 8000c6c:	4304      	orrs	r4, r0
 8000c6e:	0264      	lsls	r4, r4, #9
 8000c70:	0031      	movs	r1, r6
 8000c72:	20ff      	movs	r0, #255	; 0xff
 8000c74:	0a64      	lsrs	r4, r4, #9
 8000c76:	e731      	b.n	8000adc <__aeabi_fmul+0x8c>
 8000c78:	0028      	movs	r0, r5
 8000c7a:	e765      	b.n	8000b48 <__aeabi_fmul+0xf8>
 8000c7c:	01a4      	lsls	r4, r4, #6
 8000c7e:	2000      	movs	r0, #0
 8000c80:	0a64      	lsrs	r4, r4, #9
 8000c82:	e72b      	b.n	8000adc <__aeabi_fmul+0x8c>
 8000c84:	2080      	movs	r0, #128	; 0x80
 8000c86:	03c0      	lsls	r0, r0, #15
 8000c88:	4304      	orrs	r4, r0
 8000c8a:	0264      	lsls	r4, r4, #9
 8000c8c:	20ff      	movs	r0, #255	; 0xff
 8000c8e:	0a64      	lsrs	r4, r4, #9
 8000c90:	e724      	b.n	8000adc <__aeabi_fmul+0x8c>
 8000c92:	46c0      	nop			; (mov r8, r8)
 8000c94:	08006a68 	.word	0x08006a68
 8000c98:	f7ffffff 	.word	0xf7ffffff

08000c9c <__aeabi_ui2f>:
 8000c9c:	b570      	push	{r4, r5, r6, lr}
 8000c9e:	1e05      	subs	r5, r0, #0
 8000ca0:	d00e      	beq.n	8000cc0 <__aeabi_ui2f+0x24>
 8000ca2:	f000 f83d 	bl	8000d20 <__clzsi2>
 8000ca6:	239e      	movs	r3, #158	; 0x9e
 8000ca8:	0004      	movs	r4, r0
 8000caa:	1a1b      	subs	r3, r3, r0
 8000cac:	2b96      	cmp	r3, #150	; 0x96
 8000cae:	dc0c      	bgt.n	8000cca <__aeabi_ui2f+0x2e>
 8000cb0:	2808      	cmp	r0, #8
 8000cb2:	dd01      	ble.n	8000cb8 <__aeabi_ui2f+0x1c>
 8000cb4:	3c08      	subs	r4, #8
 8000cb6:	40a5      	lsls	r5, r4
 8000cb8:	026d      	lsls	r5, r5, #9
 8000cba:	0a6d      	lsrs	r5, r5, #9
 8000cbc:	b2d8      	uxtb	r0, r3
 8000cbe:	e001      	b.n	8000cc4 <__aeabi_ui2f+0x28>
 8000cc0:	2000      	movs	r0, #0
 8000cc2:	2500      	movs	r5, #0
 8000cc4:	05c0      	lsls	r0, r0, #23
 8000cc6:	4328      	orrs	r0, r5
 8000cc8:	bd70      	pop	{r4, r5, r6, pc}
 8000cca:	2b99      	cmp	r3, #153	; 0x99
 8000ccc:	dd09      	ble.n	8000ce2 <__aeabi_ui2f+0x46>
 8000cce:	0002      	movs	r2, r0
 8000cd0:	0029      	movs	r1, r5
 8000cd2:	321b      	adds	r2, #27
 8000cd4:	4091      	lsls	r1, r2
 8000cd6:	1e4a      	subs	r2, r1, #1
 8000cd8:	4191      	sbcs	r1, r2
 8000cda:	2205      	movs	r2, #5
 8000cdc:	1a12      	subs	r2, r2, r0
 8000cde:	40d5      	lsrs	r5, r2
 8000ce0:	430d      	orrs	r5, r1
 8000ce2:	2c05      	cmp	r4, #5
 8000ce4:	dc12      	bgt.n	8000d0c <__aeabi_ui2f+0x70>
 8000ce6:	0029      	movs	r1, r5
 8000ce8:	4e0c      	ldr	r6, [pc, #48]	; (8000d1c <__aeabi_ui2f+0x80>)
 8000cea:	4031      	ands	r1, r6
 8000cec:	076a      	lsls	r2, r5, #29
 8000cee:	d009      	beq.n	8000d04 <__aeabi_ui2f+0x68>
 8000cf0:	200f      	movs	r0, #15
 8000cf2:	4028      	ands	r0, r5
 8000cf4:	2804      	cmp	r0, #4
 8000cf6:	d005      	beq.n	8000d04 <__aeabi_ui2f+0x68>
 8000cf8:	3104      	adds	r1, #4
 8000cfa:	014a      	lsls	r2, r1, #5
 8000cfc:	d502      	bpl.n	8000d04 <__aeabi_ui2f+0x68>
 8000cfe:	239f      	movs	r3, #159	; 0x9f
 8000d00:	4031      	ands	r1, r6
 8000d02:	1b1b      	subs	r3, r3, r4
 8000d04:	0189      	lsls	r1, r1, #6
 8000d06:	0a4d      	lsrs	r5, r1, #9
 8000d08:	b2d8      	uxtb	r0, r3
 8000d0a:	e7db      	b.n	8000cc4 <__aeabi_ui2f+0x28>
 8000d0c:	1f62      	subs	r2, r4, #5
 8000d0e:	4095      	lsls	r5, r2
 8000d10:	0029      	movs	r1, r5
 8000d12:	4e02      	ldr	r6, [pc, #8]	; (8000d1c <__aeabi_ui2f+0x80>)
 8000d14:	4031      	ands	r1, r6
 8000d16:	076a      	lsls	r2, r5, #29
 8000d18:	d0f4      	beq.n	8000d04 <__aeabi_ui2f+0x68>
 8000d1a:	e7e9      	b.n	8000cf0 <__aeabi_ui2f+0x54>
 8000d1c:	fbffffff 	.word	0xfbffffff

08000d20 <__clzsi2>:
 8000d20:	211c      	movs	r1, #28
 8000d22:	2301      	movs	r3, #1
 8000d24:	041b      	lsls	r3, r3, #16
 8000d26:	4298      	cmp	r0, r3
 8000d28:	d301      	bcc.n	8000d2e <__clzsi2+0xe>
 8000d2a:	0c00      	lsrs	r0, r0, #16
 8000d2c:	3910      	subs	r1, #16
 8000d2e:	0a1b      	lsrs	r3, r3, #8
 8000d30:	4298      	cmp	r0, r3
 8000d32:	d301      	bcc.n	8000d38 <__clzsi2+0x18>
 8000d34:	0a00      	lsrs	r0, r0, #8
 8000d36:	3908      	subs	r1, #8
 8000d38:	091b      	lsrs	r3, r3, #4
 8000d3a:	4298      	cmp	r0, r3
 8000d3c:	d301      	bcc.n	8000d42 <__clzsi2+0x22>
 8000d3e:	0900      	lsrs	r0, r0, #4
 8000d40:	3904      	subs	r1, #4
 8000d42:	a202      	add	r2, pc, #8	; (adr r2, 8000d4c <__clzsi2+0x2c>)
 8000d44:	5c10      	ldrb	r0, [r2, r0]
 8000d46:	1840      	adds	r0, r0, r1
 8000d48:	4770      	bx	lr
 8000d4a:	46c0      	nop			; (mov r8, r8)
 8000d4c:	02020304 	.word	0x02020304
 8000d50:	01010101 	.word	0x01010101
	...

08000d5c <__clzdi2>:
 8000d5c:	b510      	push	{r4, lr}
 8000d5e:	2900      	cmp	r1, #0
 8000d60:	d103      	bne.n	8000d6a <__clzdi2+0xe>
 8000d62:	f7ff ffdd 	bl	8000d20 <__clzsi2>
 8000d66:	3020      	adds	r0, #32
 8000d68:	e002      	b.n	8000d70 <__clzdi2+0x14>
 8000d6a:	0008      	movs	r0, r1
 8000d6c:	f7ff ffd8 	bl	8000d20 <__clzsi2>
 8000d70:	bd10      	pop	{r4, pc}
 8000d72:	46c0      	nop			; (mov r8, r8)

08000d74 <Read_Button_ID>:
#define VREFINT_CAL_ADDR ((uint16_t*) ((uint32_t) 0x1FF80078))
#define VREFINT_VOLTAGE 3
uint16_t vrefintCalibrationValue;

uint8_t Read_Button_ID(void)
{
 8000d74:	b580      	push	{r7, lr}
 8000d76:	b082      	sub	sp, #8
 8000d78:	af00      	add	r7, sp, #0
	uint8_t Addr = 0;
 8000d7a:	1dfb      	adds	r3, r7, #7
 8000d7c:	2200      	movs	r2, #0
 8000d7e:	701a      	strb	r2, [r3, #0]
	Addr |= (HAL_GPIO_ReadPin(GPIOB, Dev_ID0_Pin) << 0);
 8000d80:	2380      	movs	r3, #128	; 0x80
 8000d82:	005b      	lsls	r3, r3, #1
 8000d84:	4a42      	ldr	r2, [pc, #264]	; (8000e90 <Read_Button_ID+0x11c>)
 8000d86:	0019      	movs	r1, r3
 8000d88:	0010      	movs	r0, r2
 8000d8a:	f001 fdc1 	bl	8002910 <HAL_GPIO_ReadPin>
 8000d8e:	0003      	movs	r3, r0
 8000d90:	b25a      	sxtb	r2, r3
 8000d92:	1dfb      	adds	r3, r7, #7
 8000d94:	781b      	ldrb	r3, [r3, #0]
 8000d96:	b25b      	sxtb	r3, r3
 8000d98:	4313      	orrs	r3, r2
 8000d9a:	b25a      	sxtb	r2, r3
 8000d9c:	1dfb      	adds	r3, r7, #7
 8000d9e:	701a      	strb	r2, [r3, #0]
	Addr |= (HAL_GPIO_ReadPin(GPIOB, Dev_ID1_Pin) << 1);
 8000da0:	2380      	movs	r3, #128	; 0x80
 8000da2:	009b      	lsls	r3, r3, #2
 8000da4:	4a3a      	ldr	r2, [pc, #232]	; (8000e90 <Read_Button_ID+0x11c>)
 8000da6:	0019      	movs	r1, r3
 8000da8:	0010      	movs	r0, r2
 8000daa:	f001 fdb1 	bl	8002910 <HAL_GPIO_ReadPin>
 8000dae:	0003      	movs	r3, r0
 8000db0:	005b      	lsls	r3, r3, #1
 8000db2:	b25a      	sxtb	r2, r3
 8000db4:	1dfb      	adds	r3, r7, #7
 8000db6:	781b      	ldrb	r3, [r3, #0]
 8000db8:	b25b      	sxtb	r3, r3
 8000dba:	4313      	orrs	r3, r2
 8000dbc:	b25a      	sxtb	r2, r3
 8000dbe:	1dfb      	adds	r3, r7, #7
 8000dc0:	701a      	strb	r2, [r3, #0]
	Addr |= (HAL_GPIO_ReadPin(GPIOC, Dev_ID2_Pin) << 2);
 8000dc2:	2380      	movs	r3, #128	; 0x80
 8000dc4:	019b      	lsls	r3, r3, #6
 8000dc6:	4a33      	ldr	r2, [pc, #204]	; (8000e94 <Read_Button_ID+0x120>)
 8000dc8:	0019      	movs	r1, r3
 8000dca:	0010      	movs	r0, r2
 8000dcc:	f001 fda0 	bl	8002910 <HAL_GPIO_ReadPin>
 8000dd0:	0003      	movs	r3, r0
 8000dd2:	009b      	lsls	r3, r3, #2
 8000dd4:	b25a      	sxtb	r2, r3
 8000dd6:	1dfb      	adds	r3, r7, #7
 8000dd8:	781b      	ldrb	r3, [r3, #0]
 8000dda:	b25b      	sxtb	r3, r3
 8000ddc:	4313      	orrs	r3, r2
 8000dde:	b25a      	sxtb	r2, r3
 8000de0:	1dfb      	adds	r3, r7, #7
 8000de2:	701a      	strb	r2, [r3, #0]
	Addr |= (HAL_GPIO_ReadPin(GPIOC, Dev_ID3_Pin) << 3);
 8000de4:	2380      	movs	r3, #128	; 0x80
 8000de6:	01db      	lsls	r3, r3, #7
 8000de8:	4a2a      	ldr	r2, [pc, #168]	; (8000e94 <Read_Button_ID+0x120>)
 8000dea:	0019      	movs	r1, r3
 8000dec:	0010      	movs	r0, r2
 8000dee:	f001 fd8f 	bl	8002910 <HAL_GPIO_ReadPin>
 8000df2:	0003      	movs	r3, r0
 8000df4:	00db      	lsls	r3, r3, #3
 8000df6:	b25a      	sxtb	r2, r3
 8000df8:	1dfb      	adds	r3, r7, #7
 8000dfa:	781b      	ldrb	r3, [r3, #0]
 8000dfc:	b25b      	sxtb	r3, r3
 8000dfe:	4313      	orrs	r3, r2
 8000e00:	b25a      	sxtb	r2, r3
 8000e02:	1dfb      	adds	r3, r7, #7
 8000e04:	701a      	strb	r2, [r3, #0]
	Addr |= (HAL_GPIO_ReadPin(GPIOC, Dev_ID4_Pin) << 4);
 8000e06:	2380      	movs	r3, #128	; 0x80
 8000e08:	021b      	lsls	r3, r3, #8
 8000e0a:	4a22      	ldr	r2, [pc, #136]	; (8000e94 <Read_Button_ID+0x120>)
 8000e0c:	0019      	movs	r1, r3
 8000e0e:	0010      	movs	r0, r2
 8000e10:	f001 fd7e 	bl	8002910 <HAL_GPIO_ReadPin>
 8000e14:	0003      	movs	r3, r0
 8000e16:	011b      	lsls	r3, r3, #4
 8000e18:	b25a      	sxtb	r2, r3
 8000e1a:	1dfb      	adds	r3, r7, #7
 8000e1c:	781b      	ldrb	r3, [r3, #0]
 8000e1e:	b25b      	sxtb	r3, r3
 8000e20:	4313      	orrs	r3, r2
 8000e22:	b25a      	sxtb	r2, r3
 8000e24:	1dfb      	adds	r3, r7, #7
 8000e26:	701a      	strb	r2, [r3, #0]
	Addr |= (HAL_GPIO_ReadPin(GPIOH, Dev_ID5_Pin) << 5);
 8000e28:	4b1b      	ldr	r3, [pc, #108]	; (8000e98 <Read_Button_ID+0x124>)
 8000e2a:	2101      	movs	r1, #1
 8000e2c:	0018      	movs	r0, r3
 8000e2e:	f001 fd6f 	bl	8002910 <HAL_GPIO_ReadPin>
 8000e32:	0003      	movs	r3, r0
 8000e34:	015b      	lsls	r3, r3, #5
 8000e36:	b25a      	sxtb	r2, r3
 8000e38:	1dfb      	adds	r3, r7, #7
 8000e3a:	781b      	ldrb	r3, [r3, #0]
 8000e3c:	b25b      	sxtb	r3, r3
 8000e3e:	4313      	orrs	r3, r2
 8000e40:	b25a      	sxtb	r2, r3
 8000e42:	1dfb      	adds	r3, r7, #7
 8000e44:	701a      	strb	r2, [r3, #0]
	Addr |= (HAL_GPIO_ReadPin(GPIOH, Dev_ID6_Pin) << 6);
 8000e46:	4b14      	ldr	r3, [pc, #80]	; (8000e98 <Read_Button_ID+0x124>)
 8000e48:	2102      	movs	r1, #2
 8000e4a:	0018      	movs	r0, r3
 8000e4c:	f001 fd60 	bl	8002910 <HAL_GPIO_ReadPin>
 8000e50:	0003      	movs	r3, r0
 8000e52:	019b      	lsls	r3, r3, #6
 8000e54:	b25a      	sxtb	r2, r3
 8000e56:	1dfb      	adds	r3, r7, #7
 8000e58:	781b      	ldrb	r3, [r3, #0]
 8000e5a:	b25b      	sxtb	r3, r3
 8000e5c:	4313      	orrs	r3, r2
 8000e5e:	b25a      	sxtb	r2, r3
 8000e60:	1dfb      	adds	r3, r7, #7
 8000e62:	701a      	strb	r2, [r3, #0]
	Addr |= (HAL_GPIO_ReadPin(Dev_ID7_GPIO_Port, Dev_ID7_Pin) << 7);
 8000e64:	23a0      	movs	r3, #160	; 0xa0
 8000e66:	05db      	lsls	r3, r3, #23
 8000e68:	2101      	movs	r1, #1
 8000e6a:	0018      	movs	r0, r3
 8000e6c:	f001 fd50 	bl	8002910 <HAL_GPIO_ReadPin>
 8000e70:	0003      	movs	r3, r0
 8000e72:	01db      	lsls	r3, r3, #7
 8000e74:	b25a      	sxtb	r2, r3
 8000e76:	1dfb      	adds	r3, r7, #7
 8000e78:	781b      	ldrb	r3, [r3, #0]
 8000e7a:	b25b      	sxtb	r3, r3
 8000e7c:	4313      	orrs	r3, r2
 8000e7e:	b25a      	sxtb	r2, r3
 8000e80:	1dfb      	adds	r3, r7, #7
 8000e82:	701a      	strb	r2, [r3, #0]

	return Addr;
 8000e84:	1dfb      	adds	r3, r7, #7
 8000e86:	781b      	ldrb	r3, [r3, #0]
}
 8000e88:	0018      	movs	r0, r3
 8000e8a:	46bd      	mov	sp, r7
 8000e8c:	b002      	add	sp, #8
 8000e8e:	bd80      	pop	{r7, pc}
 8000e90:	50000400 	.word	0x50000400
 8000e94:	50000800 	.word	0x50000800
 8000e98:	50001c00 	.word	0x50001c00

08000e9c <RF_Channel_Lookup>:
// Dev_ID = 13 to 18  ---> Channel 102
// Dev_ID = 19 to 24  ---> Channel 103
// Dev_ID = 25 to 30  ---> Channel 104
// Dev_ID = 31 to 36  ---> Channel 105
uint8_t RF_Channel_Lookup(uint8_t ID)
{
 8000e9c:	b580      	push	{r7, lr}
 8000e9e:	b084      	sub	sp, #16
 8000ea0:	af00      	add	r7, sp, #0
 8000ea2:	0002      	movs	r2, r0
 8000ea4:	1dfb      	adds	r3, r7, #7
 8000ea6:	701a      	strb	r2, [r3, #0]
	uint8_t RF_CH = 100 + ((ID-1) / 6);
 8000ea8:	1dfb      	adds	r3, r7, #7
 8000eaa:	781b      	ldrb	r3, [r3, #0]
 8000eac:	3b01      	subs	r3, #1
 8000eae:	2106      	movs	r1, #6
 8000eb0:	0018      	movs	r0, r3
 8000eb2:	f7ff f9c5 	bl	8000240 <__divsi3>
 8000eb6:	0003      	movs	r3, r0
 8000eb8:	b2da      	uxtb	r2, r3
 8000eba:	210f      	movs	r1, #15
 8000ebc:	187b      	adds	r3, r7, r1
 8000ebe:	3264      	adds	r2, #100	; 0x64
 8000ec0:	701a      	strb	r2, [r3, #0]
	return RF_CH;
 8000ec2:	187b      	adds	r3, r7, r1
 8000ec4:	781b      	ldrb	r3, [r3, #0]
}
 8000ec6:	0018      	movs	r0, r3
 8000ec8:	46bd      	mov	sp, r7
 8000eca:	b004      	add	sp, #16
 8000ecc:	bd80      	pop	{r7, pc}
	...

08000ed0 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000ed0:	b580      	push	{r7, lr}
 8000ed2:	b084      	sub	sp, #16
 8000ed4:	af00      	add	r7, sp, #0
 8000ed6:	0002      	movs	r2, r0
 8000ed8:	1dbb      	adds	r3, r7, #6
 8000eda:	801a      	strh	r2, [r3, #0]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */

  HAL_NVIC_DisableIRQ(EXTI0_1_IRQn);
 8000edc:	2005      	movs	r0, #5
 8000ede:	f001 fb74 	bl	80025ca <HAL_NVIC_DisableIRQ>
  HAL_NVIC_DisableIRQ(EXTI2_3_IRQn);
 8000ee2:	2006      	movs	r0, #6
 8000ee4:	f001 fb71 	bl	80025ca <HAL_NVIC_DisableIRQ>
  HAL_NVIC_DisableIRQ(EXTI4_15_IRQn);
 8000ee8:	2007      	movs	r0, #7
 8000eea:	f001 fb6e 	bl	80025ca <HAL_NVIC_DisableIRQ>

  /*** Wake up from stop mode in External Interrupt ***/
  SystemClock_Config();
 8000eee:	f000 fa0b 	bl	8001308 <SystemClock_Config>
  HAL_ResumeTick();
 8000ef2:	f000 fecf 	bl	8001c94 <HAL_ResumeTick>
#ifndef Debug
  HAL_UART_Transmit(&hlpuart1, (uint8_t *)"WAKEUP from EXTI\n\n",18, HAL_MAX_DELAY);
#endif


  for (volatile uint32_t i = 0; i < 100000; i++);
 8000ef6:	2300      	movs	r3, #0
 8000ef8:	60fb      	str	r3, [r7, #12]
 8000efa:	e002      	b.n	8000f02 <HAL_GPIO_EXTI_Callback+0x32>
 8000efc:	68fb      	ldr	r3, [r7, #12]
 8000efe:	3301      	adds	r3, #1
 8000f00:	60fb      	str	r3, [r7, #12]
 8000f02:	68fb      	ldr	r3, [r7, #12]
 8000f04:	4a23      	ldr	r2, [pc, #140]	; (8000f94 <HAL_GPIO_EXTI_Callback+0xc4>)
 8000f06:	4293      	cmp	r3, r2
 8000f08:	d9f8      	bls.n	8000efc <HAL_GPIO_EXTI_Callback+0x2c>

  Press_Counter++;
 8000f0a:	4b23      	ldr	r3, [pc, #140]	; (8000f98 <HAL_GPIO_EXTI_Callback+0xc8>)
 8000f0c:	881b      	ldrh	r3, [r3, #0]
 8000f0e:	3301      	adds	r3, #1
 8000f10:	b29a      	uxth	r2, r3
 8000f12:	4b21      	ldr	r3, [pc, #132]	; (8000f98 <HAL_GPIO_EXTI_Callback+0xc8>)
 8000f14:	801a      	strh	r2, [r3, #0]
  if(Press_Counter>65534) Press_Counter=0;
 8000f16:	4b20      	ldr	r3, [pc, #128]	; (8000f98 <HAL_GPIO_EXTI_Callback+0xc8>)
 8000f18:	881b      	ldrh	r3, [r3, #0]
 8000f1a:	4a20      	ldr	r2, [pc, #128]	; (8000f9c <HAL_GPIO_EXTI_Callback+0xcc>)
 8000f1c:	4293      	cmp	r3, r2
 8000f1e:	d102      	bne.n	8000f26 <HAL_GPIO_EXTI_Callback+0x56>
 8000f20:	4b1d      	ldr	r3, [pc, #116]	; (8000f98 <HAL_GPIO_EXTI_Callback+0xc8>)
 8000f22:	2200      	movs	r2, #0
 8000f24:	801a      	strh	r2, [r3, #0]

  if (GPIO_Pin == Key_IN1_Pin)
 8000f26:	1dbb      	adds	r3, r7, #6
 8000f28:	881a      	ldrh	r2, [r3, #0]
 8000f2a:	2380      	movs	r3, #128	; 0x80
 8000f2c:	015b      	lsls	r3, r3, #5
 8000f2e:	429a      	cmp	r2, r3
 8000f30:	d102      	bne.n	8000f38 <HAL_GPIO_EXTI_Callback+0x68>
  {
#ifndef Debug
	  HAL_UART_Transmit(&hlpuart1, (uint8_t *)"Key1 Was pressed\n\n",18, HAL_MAX_DELAY);
#endif
	  Pressed_Key = 1;
 8000f32:	4b1b      	ldr	r3, [pc, #108]	; (8000fa0 <HAL_GPIO_EXTI_Callback+0xd0>)
 8000f34:	2201      	movs	r2, #1
 8000f36:	701a      	strb	r2, [r3, #0]
  }
  if (GPIO_Pin == Key_IN2_Pin)
 8000f38:	1dbb      	adds	r3, r7, #6
 8000f3a:	881b      	ldrh	r3, [r3, #0]
 8000f3c:	2b04      	cmp	r3, #4
 8000f3e:	d102      	bne.n	8000f46 <HAL_GPIO_EXTI_Callback+0x76>
  {
#ifndef Debug
	  HAL_UART_Transmit(&hlpuart1, (uint8_t *)"Key2 Was pressed\n\n",18, HAL_MAX_DELAY);
#endif
	  Pressed_Key = 2;
 8000f40:	4b17      	ldr	r3, [pc, #92]	; (8000fa0 <HAL_GPIO_EXTI_Callback+0xd0>)
 8000f42:	2202      	movs	r2, #2
 8000f44:	701a      	strb	r2, [r3, #0]
  }
  if (GPIO_Pin == Key_IN3_Pin)
 8000f46:	1dbb      	adds	r3, r7, #6
 8000f48:	881a      	ldrh	r2, [r3, #0]
 8000f4a:	2380      	movs	r3, #128	; 0x80
 8000f4c:	019b      	lsls	r3, r3, #6
 8000f4e:	429a      	cmp	r2, r3
 8000f50:	d102      	bne.n	8000f58 <HAL_GPIO_EXTI_Callback+0x88>
  {
#ifndef Debug
	  HAL_UART_Transmit(&hlpuart1, (uint8_t *)"Key3 Was pressed\n\n",18, HAL_MAX_DELAY);
#endif
	  Pressed_Key = 3;
 8000f52:	4b13      	ldr	r3, [pc, #76]	; (8000fa0 <HAL_GPIO_EXTI_Callback+0xd0>)
 8000f54:	2203      	movs	r2, #3
 8000f56:	701a      	strb	r2, [r3, #0]
  }
  if (GPIO_Pin == Key_IN4_Pin)
 8000f58:	1dbb      	adds	r3, r7, #6
 8000f5a:	881b      	ldrh	r3, [r3, #0]
 8000f5c:	2b02      	cmp	r3, #2
 8000f5e:	d102      	bne.n	8000f66 <HAL_GPIO_EXTI_Callback+0x96>
  {
#ifndef Debug
	  HAL_UART_Transmit(&hlpuart1, (uint8_t *)"Key4 Was pressed\n\n",18, HAL_MAX_DELAY);
#endif
	  Pressed_Key = 4;
 8000f60:	4b0f      	ldr	r3, [pc, #60]	; (8000fa0 <HAL_GPIO_EXTI_Callback+0xd0>)
 8000f62:	2204      	movs	r2, #4
 8000f64:	701a      	strb	r2, [r3, #0]
  }
  //__HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
  HAL_NVIC_ClearPendingIRQ(EXTI0_1_IRQn);
 8000f66:	2005      	movs	r0, #5
 8000f68:	f001 fb4c 	bl	8002604 <HAL_NVIC_ClearPendingIRQ>
  HAL_NVIC_ClearPendingIRQ(EXTI2_3_IRQn);
 8000f6c:	2006      	movs	r0, #6
 8000f6e:	f001 fb49 	bl	8002604 <HAL_NVIC_ClearPendingIRQ>
  HAL_NVIC_ClearPendingIRQ(EXTI4_15_IRQn);
 8000f72:	2007      	movs	r0, #7
 8000f74:	f001 fb46 	bl	8002604 <HAL_NVIC_ClearPendingIRQ>

  HAL_NVIC_EnableIRQ(EXTI0_1_IRQn);
 8000f78:	2005      	movs	r0, #5
 8000f7a:	f001 fb16 	bl	80025aa <HAL_NVIC_EnableIRQ>
  HAL_NVIC_EnableIRQ(EXTI2_3_IRQn);
 8000f7e:	2006      	movs	r0, #6
 8000f80:	f001 fb13 	bl	80025aa <HAL_NVIC_EnableIRQ>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 8000f84:	2007      	movs	r0, #7
 8000f86:	f001 fb10 	bl	80025aa <HAL_NVIC_EnableIRQ>
}
 8000f8a:	46c0      	nop			; (mov r8, r8)
 8000f8c:	46bd      	mov	sp, r7
 8000f8e:	b004      	add	sp, #16
 8000f90:	bd80      	pop	{r7, pc}
 8000f92:	46c0      	nop			; (mov r8, r8)
 8000f94:	0001869f 	.word	0x0001869f
 8000f98:	20000218 	.word	0x20000218
 8000f9c:	0000ffff 	.word	0x0000ffff
 8000fa0:	2000022f 	.word	0x2000022f

08000fa4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000fa4:	b590      	push	{r4, r7, lr}
 8000fa6:	b085      	sub	sp, #20
 8000fa8:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000faa:	f000 fdd1 	bl	8001b50 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000fae:	f000 f9ab 	bl	8001308 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000fb2:	f000 fb23 	bl	80015fc <MX_GPIO_Init>
  MX_ADC_Init();
 8000fb6:	f000 fa19 	bl	80013ec <MX_ADC_Init>
  MX_LPUART1_UART_Init();
 8000fba:	f000 fa7d 	bl	80014b8 <MX_LPUART1_UART_Init>
  MX_SPI1_Init();
 8000fbe:	f000 faa9 	bl	8001514 <MX_SPI1_Init>
  MX_TIM6_Init();
 8000fc2:	f000 fadf 	bl	8001584 <MX_TIM6_Init>
  /* USER CODE BEGIN 2 */

  HAL_Delay(10000);
 8000fc6:	4bbe      	ldr	r3, [pc, #760]	; (80012c0 <main+0x31c>)
 8000fc8:	0018      	movs	r0, r3
 8000fca:	f000 fe31 	bl	8001c30 <HAL_Delay>

  Button_ID = Read_Button_ID();                                       //Reading the Button ID through DIP Switch
 8000fce:	f7ff fed1 	bl	8000d74 <Read_Button_ID>
 8000fd2:	0003      	movs	r3, r0
 8000fd4:	001a      	movs	r2, r3
 8000fd6:	4bbb      	ldr	r3, [pc, #748]	; (80012c4 <main+0x320>)
 8000fd8:	701a      	strb	r2, [r3, #0]
  TxData[0] = Button_ID;
 8000fda:	4bba      	ldr	r3, [pc, #744]	; (80012c4 <main+0x320>)
 8000fdc:	781a      	ldrb	r2, [r3, #0]
 8000fde:	4bba      	ldr	r3, [pc, #744]	; (80012c8 <main+0x324>)
 8000fe0:	701a      	strb	r2, [r3, #0]
  RF_Channel_FRQ = RF_Channel_Lookup(Button_ID);                      //Define the Frequency Channel based on the Button_ID
 8000fe2:	4bb8      	ldr	r3, [pc, #736]	; (80012c4 <main+0x320>)
 8000fe4:	781b      	ldrb	r3, [r3, #0]
 8000fe6:	0018      	movs	r0, r3
 8000fe8:	f7ff ff58 	bl	8000e9c <RF_Channel_Lookup>
 8000fec:	0003      	movs	r3, r0
 8000fee:	001a      	movs	r2, r3
 8000ff0:	4bb6      	ldr	r3, [pc, #728]	; (80012cc <main+0x328>)
 8000ff2:	701a      	strb	r2, [r3, #0]
  TxAddr[0] = Button_ID;                                              //Set the RF Module TxAddr based on Button_ID
 8000ff4:	4bb3      	ldr	r3, [pc, #716]	; (80012c4 <main+0x320>)
 8000ff6:	781a      	ldrb	r2, [r3, #0]
 8000ff8:	4bb5      	ldr	r3, [pc, #724]	; (80012d0 <main+0x32c>)
 8000ffa:	701a      	strb	r2, [r3, #0]
  RxAddr[0] = Button_ID;                                              //Set the RF Module RxAddr based on Button_ID
 8000ffc:	4bb1      	ldr	r3, [pc, #708]	; (80012c4 <main+0x320>)
 8000ffe:	781a      	ldrb	r2, [r3, #0]
 8001000:	4bb4      	ldr	r3, [pc, #720]	; (80012d4 <main+0x330>)
 8001002:	701a      	strb	r2, [r3, #0]

  nRF24_Reset(nRF_CSN_Pin, nRF24_REG_STATUS);
 8001004:	2107      	movs	r1, #7
 8001006:	2008      	movs	r0, #8
 8001008:	f004 f9e2 	bl	80053d0 <nRF24_Reset>

  nRF24_Module_Setup(nRF_CSN_Pin, Transmitter_Mode_noAA_noCRC,
 800100c:	4baf      	ldr	r3, [pc, #700]	; (80012cc <main+0x328>)
 800100e:	781a      	ldrb	r2, [r3, #0]
 8001010:	4bb1      	ldr	r3, [pc, #708]	; (80012d8 <main+0x334>)
 8001012:	781b      	ldrb	r3, [r3, #0]
 8001014:	49ae      	ldr	r1, [pc, #696]	; (80012d0 <main+0x32c>)
 8001016:	9302      	str	r3, [sp, #8]
 8001018:	2303      	movs	r3, #3
 800101a:	9301      	str	r3, [sp, #4]
 800101c:	4bad      	ldr	r3, [pc, #692]	; (80012d4 <main+0x330>)
 800101e:	9300      	str	r3, [sp, #0]
 8001020:	000b      	movs	r3, r1
 8001022:	2105      	movs	r1, #5
 8001024:	2008      	movs	r0, #8
 8001026:	f004 f9fb 	bl	8005420 <nRF24_Module_Setup>
		             RF_Channel_FRQ, TxAddr, RxAddr, MBPS1_0dBm,
					 Packet_Size);

  nRF24_Register_Display(nRF_CSN_Pin);
 800102a:	2008      	movs	r0, #8
 800102c:	f004 fcd0 	bl	80059d0 <nRF24_Register_Display>
	  //HAL_GPIO_TogglePin(GPIOB, LED_RED_Pin);
	  //HAL_Delay(500);

	  // Start ADC conversion

	  HAL_ADC_Start(&hadc);
 8001030:	4baa      	ldr	r3, [pc, #680]	; (80012dc <main+0x338>)
 8001032:	0018      	movs	r0, r3
 8001034:	f000 ffb0 	bl	8001f98 <HAL_ADC_Start>

	  if (HAL_ADC_PollForConversion(&hadc, HAL_MAX_DELAY) == HAL_OK)
 8001038:	2301      	movs	r3, #1
 800103a:	425a      	negs	r2, r3
 800103c:	4ba7      	ldr	r3, [pc, #668]	; (80012dc <main+0x338>)
 800103e:	0011      	movs	r1, r2
 8001040:	0018      	movs	r0, r3
 8001042:	f000 fffd 	bl	8002040 <HAL_ADC_PollForConversion>
 8001046:	1e03      	subs	r3, r0, #0
 8001048:	d134      	bne.n	80010b4 <main+0x110>
	  {
		  adcValue = HAL_ADC_GetValue(&hadc);
 800104a:	4ba4      	ldr	r3, [pc, #656]	; (80012dc <main+0x338>)
 800104c:	0018      	movs	r0, r3
 800104e:	f001 f893 	bl	8002178 <HAL_ADC_GetValue>
 8001052:	0002      	movs	r2, r0
 8001054:	4ba2      	ldr	r3, [pc, #648]	; (80012e0 <main+0x33c>)
 8001056:	601a      	str	r2, [r3, #0]
		  vrefintCalibrationValue = *VREFINT_CAL_ADDR;
 8001058:	4ba2      	ldr	r3, [pc, #648]	; (80012e4 <main+0x340>)
 800105a:	881a      	ldrh	r2, [r3, #0]
 800105c:	4ba2      	ldr	r3, [pc, #648]	; (80012e8 <main+0x344>)
 800105e:	801a      	strh	r2, [r3, #0]
		  // Calculate VDD voltage
		  vddVoltage = ((float)vrefintCalibrationValue * VREFINT_VOLTAGE) / (float)adcValue;
 8001060:	4ba1      	ldr	r3, [pc, #644]	; (80012e8 <main+0x344>)
 8001062:	881b      	ldrh	r3, [r3, #0]
 8001064:	0018      	movs	r0, r3
 8001066:	f7ff fe19 	bl	8000c9c <__aeabi_ui2f>
 800106a:	1c03      	adds	r3, r0, #0
 800106c:	499f      	ldr	r1, [pc, #636]	; (80012ec <main+0x348>)
 800106e:	1c18      	adds	r0, r3, #0
 8001070:	f7ff fcee 	bl	8000a50 <__aeabi_fmul>
 8001074:	1c03      	adds	r3, r0, #0
 8001076:	1c1c      	adds	r4, r3, #0
 8001078:	4b99      	ldr	r3, [pc, #612]	; (80012e0 <main+0x33c>)
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	0018      	movs	r0, r3
 800107e:	f7ff fe0d 	bl	8000c9c <__aeabi_ui2f>
 8001082:	1c03      	adds	r3, r0, #0
 8001084:	1c19      	adds	r1, r3, #0
 8001086:	1c20      	adds	r0, r4, #0
 8001088:	f7ff fb1a 	bl	80006c0 <__aeabi_fdiv>
 800108c:	1c03      	adds	r3, r0, #0
 800108e:	1c1a      	adds	r2, r3, #0
 8001090:	4b97      	ldr	r3, [pc, #604]	; (80012f0 <main+0x34c>)
 8001092:	601a      	str	r2, [r3, #0]

		  if(vddVoltage < 3)
 8001094:	4b96      	ldr	r3, [pc, #600]	; (80012f0 <main+0x34c>)
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	4994      	ldr	r1, [pc, #592]	; (80012ec <main+0x348>)
 800109a:	1c18      	adds	r0, r3, #0
 800109c:	f7ff f9ce 	bl	800043c <__aeabi_fcmplt>
 80010a0:	1e03      	subs	r3, r0, #0
 80010a2:	d003      	beq.n	80010ac <main+0x108>
		  {
			  Need_To_Be_Charged = 1;
 80010a4:	4b93      	ldr	r3, [pc, #588]	; (80012f4 <main+0x350>)
 80010a6:	2201      	movs	r2, #1
 80010a8:	701a      	strb	r2, [r3, #0]
 80010aa:	e009      	b.n	80010c0 <main+0x11c>
		  }
		  else
		  {
			  Need_To_Be_Charged = 0;
 80010ac:	4b91      	ldr	r3, [pc, #580]	; (80012f4 <main+0x350>)
 80010ae:	2200      	movs	r2, #0
 80010b0:	701a      	strb	r2, [r3, #0]
 80010b2:	e005      	b.n	80010c0 <main+0x11c>
		  }
	  }
	  else
	  {
		  HAL_UART_Transmit(&hlpuart1, (uint8_t *)"ADC ERROR\n", 10, 100);
 80010b4:	4990      	ldr	r1, [pc, #576]	; (80012f8 <main+0x354>)
 80010b6:	4891      	ldr	r0, [pc, #580]	; (80012fc <main+0x358>)
 80010b8:	2364      	movs	r3, #100	; 0x64
 80010ba:	220a      	movs	r2, #10
 80010bc:	f003 fb0c 	bl	80046d8 <HAL_UART_Transmit>
	  }

	  HAL_Delay(1);
 80010c0:	2001      	movs	r0, #1
 80010c2:	f000 fdb5 	bl	8001c30 <HAL_Delay>
	  //key1
	  if (Pressed_Key == 1)
 80010c6:	4b8e      	ldr	r3, [pc, #568]	; (8001300 <main+0x35c>)
 80010c8:	781b      	ldrb	r3, [r3, #0]
 80010ca:	2b01      	cmp	r3, #1
 80010cc:	d138      	bne.n	8001140 <main+0x19c>
	  {
		  Pressed_Key = 0;
 80010ce:	4b8c      	ldr	r3, [pc, #560]	; (8001300 <main+0x35c>)
 80010d0:	2200      	movs	r2, #0
 80010d2:	701a      	strb	r2, [r3, #0]

		  //Check for the Battery Voltage to select the LED Color 2n4 a   1n3 b
		  while(HAL_GPIO_ReadPin(GPIOB, Key_IN1_Pin) == GPIO_PIN_SET)
 80010d4:	e012      	b.n	80010fc <main+0x158>
		  {
			  if(Need_To_Be_Charged == 1)
 80010d6:	4b87      	ldr	r3, [pc, #540]	; (80012f4 <main+0x350>)
 80010d8:	781b      	ldrb	r3, [r3, #0]
 80010da:	2b01      	cmp	r3, #1
 80010dc:	d106      	bne.n	80010ec <main+0x148>
			  {
				  HAL_GPIO_WritePin(GPIOB, LED_RED_Pin, GPIO_PIN_RESET);
 80010de:	4b89      	ldr	r3, [pc, #548]	; (8001304 <main+0x360>)
 80010e0:	2200      	movs	r2, #0
 80010e2:	2108      	movs	r1, #8
 80010e4:	0018      	movs	r0, r3
 80010e6:	f001 fc30 	bl	800294a <HAL_GPIO_WritePin>
 80010ea:	e007      	b.n	80010fc <main+0x158>
			  }
			  else
			  {
			  	  HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_RESET);
 80010ec:	2380      	movs	r3, #128	; 0x80
 80010ee:	0219      	lsls	r1, r3, #8
 80010f0:	23a0      	movs	r3, #160	; 0xa0
 80010f2:	05db      	lsls	r3, r3, #23
 80010f4:	2200      	movs	r2, #0
 80010f6:	0018      	movs	r0, r3
 80010f8:	f001 fc27 	bl	800294a <HAL_GPIO_WritePin>
		  while(HAL_GPIO_ReadPin(GPIOB, Key_IN1_Pin) == GPIO_PIN_SET)
 80010fc:	2380      	movs	r3, #128	; 0x80
 80010fe:	015b      	lsls	r3, r3, #5
 8001100:	4a80      	ldr	r2, [pc, #512]	; (8001304 <main+0x360>)
 8001102:	0019      	movs	r1, r3
 8001104:	0010      	movs	r0, r2
 8001106:	f001 fc03 	bl	8002910 <HAL_GPIO_ReadPin>
 800110a:	0003      	movs	r3, r0
 800110c:	2b01      	cmp	r3, #1
 800110e:	d0e2      	beq.n	80010d6 <main+0x132>
	    	  }
		  }
		  HAL_GPIO_WritePin(GPIOB, LED_RED_Pin, GPIO_PIN_SET);
 8001110:	4b7c      	ldr	r3, [pc, #496]	; (8001304 <main+0x360>)
 8001112:	2201      	movs	r2, #1
 8001114:	2108      	movs	r1, #8
 8001116:	0018      	movs	r0, r3
 8001118:	f001 fc17 	bl	800294a <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_SET);
 800111c:	2380      	movs	r3, #128	; 0x80
 800111e:	0219      	lsls	r1, r3, #8
 8001120:	23a0      	movs	r3, #160	; 0xa0
 8001122:	05db      	lsls	r3, r3, #23
 8001124:	2201      	movs	r2, #1
 8001126:	0018      	movs	r0, r3
 8001128:	f001 fc0f 	bl	800294a <HAL_GPIO_WritePin>

		  TxData[1] = 1;
 800112c:	4b66      	ldr	r3, [pc, #408]	; (80012c8 <main+0x324>)
 800112e:	2201      	movs	r2, #1
 8001130:	705a      	strb	r2, [r3, #1]
		  nRF24_Transmit(nRF_CSN_Pin, TxData, Packet_Size);
 8001132:	4b69      	ldr	r3, [pc, #420]	; (80012d8 <main+0x334>)
 8001134:	781a      	ldrb	r2, [r3, #0]
 8001136:	4b64      	ldr	r3, [pc, #400]	; (80012c8 <main+0x324>)
 8001138:	0019      	movs	r1, r3
 800113a:	2008      	movs	r0, #8
 800113c:	f004 fb0c 	bl	8005758 <nRF24_Transmit>
		  nRF24_Transmit_Report(nRF_CSN_Pin);
#endif

	  }
	  //key2
	  if (Pressed_Key == 2)
 8001140:	4b6f      	ldr	r3, [pc, #444]	; (8001300 <main+0x35c>)
 8001142:	781b      	ldrb	r3, [r3, #0]
 8001144:	2b02      	cmp	r3, #2
 8001146:	d137      	bne.n	80011b8 <main+0x214>
	  {
		  Pressed_Key = 0;
 8001148:	4b6d      	ldr	r3, [pc, #436]	; (8001300 <main+0x35c>)
 800114a:	2200      	movs	r2, #0
 800114c:	701a      	strb	r2, [r3, #0]

		  //Check the Battery Voltage to select the LED Color 2n4 a   1n3 b
		  while(HAL_GPIO_ReadPin(GPIOA, Key_IN2_Pin) == GPIO_PIN_SET)
 800114e:	e012      	b.n	8001176 <main+0x1d2>
		  {
			  if(Need_To_Be_Charged == 1)
 8001150:	4b68      	ldr	r3, [pc, #416]	; (80012f4 <main+0x350>)
 8001152:	781b      	ldrb	r3, [r3, #0]
 8001154:	2b01      	cmp	r3, #1
 8001156:	d106      	bne.n	8001166 <main+0x1c2>
			  {
				  HAL_GPIO_WritePin(GPIOB, LED_RED_Pin, GPIO_PIN_RESET);
 8001158:	4b6a      	ldr	r3, [pc, #424]	; (8001304 <main+0x360>)
 800115a:	2200      	movs	r2, #0
 800115c:	2108      	movs	r1, #8
 800115e:	0018      	movs	r0, r3
 8001160:	f001 fbf3 	bl	800294a <HAL_GPIO_WritePin>
 8001164:	e007      	b.n	8001176 <main+0x1d2>
			  }
			  else
			  {
			  	  HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_RESET);
 8001166:	2380      	movs	r3, #128	; 0x80
 8001168:	0219      	lsls	r1, r3, #8
 800116a:	23a0      	movs	r3, #160	; 0xa0
 800116c:	05db      	lsls	r3, r3, #23
 800116e:	2200      	movs	r2, #0
 8001170:	0018      	movs	r0, r3
 8001172:	f001 fbea 	bl	800294a <HAL_GPIO_WritePin>
		  while(HAL_GPIO_ReadPin(GPIOA, Key_IN2_Pin) == GPIO_PIN_SET)
 8001176:	23a0      	movs	r3, #160	; 0xa0
 8001178:	05db      	lsls	r3, r3, #23
 800117a:	2104      	movs	r1, #4
 800117c:	0018      	movs	r0, r3
 800117e:	f001 fbc7 	bl	8002910 <HAL_GPIO_ReadPin>
 8001182:	0003      	movs	r3, r0
 8001184:	2b01      	cmp	r3, #1
 8001186:	d0e3      	beq.n	8001150 <main+0x1ac>
	    	  }
		  }
		  HAL_GPIO_WritePin(GPIOB, LED_RED_Pin, GPIO_PIN_SET);
 8001188:	4b5e      	ldr	r3, [pc, #376]	; (8001304 <main+0x360>)
 800118a:	2201      	movs	r2, #1
 800118c:	2108      	movs	r1, #8
 800118e:	0018      	movs	r0, r3
 8001190:	f001 fbdb 	bl	800294a <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_SET);
 8001194:	2380      	movs	r3, #128	; 0x80
 8001196:	0219      	lsls	r1, r3, #8
 8001198:	23a0      	movs	r3, #160	; 0xa0
 800119a:	05db      	lsls	r3, r3, #23
 800119c:	2201      	movs	r2, #1
 800119e:	0018      	movs	r0, r3
 80011a0:	f001 fbd3 	bl	800294a <HAL_GPIO_WritePin>

		  TxData[1] = 2;
 80011a4:	4b48      	ldr	r3, [pc, #288]	; (80012c8 <main+0x324>)
 80011a6:	2202      	movs	r2, #2
 80011a8:	705a      	strb	r2, [r3, #1]
		  nRF24_Transmit(nRF_CSN_Pin, TxData, Packet_Size);
 80011aa:	4b4b      	ldr	r3, [pc, #300]	; (80012d8 <main+0x334>)
 80011ac:	781a      	ldrb	r2, [r3, #0]
 80011ae:	4b46      	ldr	r3, [pc, #280]	; (80012c8 <main+0x324>)
 80011b0:	0019      	movs	r1, r3
 80011b2:	2008      	movs	r0, #8
 80011b4:	f004 fad0 	bl	8005758 <nRF24_Transmit>
		  nRF24_Transmit_Report(nRF_CSN_Pin);
#endif

	  }
	  //key3
	  if (Pressed_Key == 3)
 80011b8:	4b51      	ldr	r3, [pc, #324]	; (8001300 <main+0x35c>)
 80011ba:	781b      	ldrb	r3, [r3, #0]
 80011bc:	2b03      	cmp	r3, #3
 80011be:	d138      	bne.n	8001232 <main+0x28e>
	  {
		  Pressed_Key = 0;
 80011c0:	4b4f      	ldr	r3, [pc, #316]	; (8001300 <main+0x35c>)
 80011c2:	2200      	movs	r2, #0
 80011c4:	701a      	strb	r2, [r3, #0]

		  //Check for the Battery Voltage to select the LED Color 2n4 a   1n3 b
		  while(HAL_GPIO_ReadPin(GPIOB, Key_IN3_Pin) == GPIO_PIN_SET)
 80011c6:	e012      	b.n	80011ee <main+0x24a>
		  {
			  if(Need_To_Be_Charged == 1)
 80011c8:	4b4a      	ldr	r3, [pc, #296]	; (80012f4 <main+0x350>)
 80011ca:	781b      	ldrb	r3, [r3, #0]
 80011cc:	2b01      	cmp	r3, #1
 80011ce:	d106      	bne.n	80011de <main+0x23a>
			  {
				  HAL_GPIO_WritePin(GPIOB, LED_RED_Pin, GPIO_PIN_RESET);
 80011d0:	4b4c      	ldr	r3, [pc, #304]	; (8001304 <main+0x360>)
 80011d2:	2200      	movs	r2, #0
 80011d4:	2108      	movs	r1, #8
 80011d6:	0018      	movs	r0, r3
 80011d8:	f001 fbb7 	bl	800294a <HAL_GPIO_WritePin>
 80011dc:	e007      	b.n	80011ee <main+0x24a>
			  }
			  else
			  {
			  	  HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_RESET);
 80011de:	2380      	movs	r3, #128	; 0x80
 80011e0:	0219      	lsls	r1, r3, #8
 80011e2:	23a0      	movs	r3, #160	; 0xa0
 80011e4:	05db      	lsls	r3, r3, #23
 80011e6:	2200      	movs	r2, #0
 80011e8:	0018      	movs	r0, r3
 80011ea:	f001 fbae 	bl	800294a <HAL_GPIO_WritePin>
		  while(HAL_GPIO_ReadPin(GPIOB, Key_IN3_Pin) == GPIO_PIN_SET)
 80011ee:	2380      	movs	r3, #128	; 0x80
 80011f0:	019b      	lsls	r3, r3, #6
 80011f2:	4a44      	ldr	r2, [pc, #272]	; (8001304 <main+0x360>)
 80011f4:	0019      	movs	r1, r3
 80011f6:	0010      	movs	r0, r2
 80011f8:	f001 fb8a 	bl	8002910 <HAL_GPIO_ReadPin>
 80011fc:	0003      	movs	r3, r0
 80011fe:	2b01      	cmp	r3, #1
 8001200:	d0e2      	beq.n	80011c8 <main+0x224>
	    	  }
		  }
		  HAL_GPIO_WritePin(GPIOB, LED_RED_Pin, GPIO_PIN_SET);
 8001202:	4b40      	ldr	r3, [pc, #256]	; (8001304 <main+0x360>)
 8001204:	2201      	movs	r2, #1
 8001206:	2108      	movs	r1, #8
 8001208:	0018      	movs	r0, r3
 800120a:	f001 fb9e 	bl	800294a <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_SET);
 800120e:	2380      	movs	r3, #128	; 0x80
 8001210:	0219      	lsls	r1, r3, #8
 8001212:	23a0      	movs	r3, #160	; 0xa0
 8001214:	05db      	lsls	r3, r3, #23
 8001216:	2201      	movs	r2, #1
 8001218:	0018      	movs	r0, r3
 800121a:	f001 fb96 	bl	800294a <HAL_GPIO_WritePin>

		  TxData[1] = 3;
 800121e:	4b2a      	ldr	r3, [pc, #168]	; (80012c8 <main+0x324>)
 8001220:	2203      	movs	r2, #3
 8001222:	705a      	strb	r2, [r3, #1]
		  nRF24_Transmit(nRF_CSN_Pin, TxData, Packet_Size);
 8001224:	4b2c      	ldr	r3, [pc, #176]	; (80012d8 <main+0x334>)
 8001226:	781a      	ldrb	r2, [r3, #0]
 8001228:	4b27      	ldr	r3, [pc, #156]	; (80012c8 <main+0x324>)
 800122a:	0019      	movs	r1, r3
 800122c:	2008      	movs	r0, #8
 800122e:	f004 fa93 	bl	8005758 <nRF24_Transmit>
#endif

	  }

	  //key4
	  if (Pressed_Key == 4)
 8001232:	4b33      	ldr	r3, [pc, #204]	; (8001300 <main+0x35c>)
 8001234:	781b      	ldrb	r3, [r3, #0]
 8001236:	2b04      	cmp	r3, #4
 8001238:	d137      	bne.n	80012aa <main+0x306>
	  {
		  Pressed_Key = 0;
 800123a:	4b31      	ldr	r3, [pc, #196]	; (8001300 <main+0x35c>)
 800123c:	2200      	movs	r2, #0
 800123e:	701a      	strb	r2, [r3, #0]

		  //Check for the Battery Voltage to select the LED Color 2n4 a   1n3 b
		  while(HAL_GPIO_ReadPin(GPIOA, Key_IN4_Pin) == GPIO_PIN_SET)
 8001240:	e012      	b.n	8001268 <main+0x2c4>
		  {
			  if(Need_To_Be_Charged == 1)
 8001242:	4b2c      	ldr	r3, [pc, #176]	; (80012f4 <main+0x350>)
 8001244:	781b      	ldrb	r3, [r3, #0]
 8001246:	2b01      	cmp	r3, #1
 8001248:	d106      	bne.n	8001258 <main+0x2b4>
			  {
				  HAL_GPIO_WritePin(GPIOB, LED_RED_Pin, GPIO_PIN_RESET);
 800124a:	4b2e      	ldr	r3, [pc, #184]	; (8001304 <main+0x360>)
 800124c:	2200      	movs	r2, #0
 800124e:	2108      	movs	r1, #8
 8001250:	0018      	movs	r0, r3
 8001252:	f001 fb7a 	bl	800294a <HAL_GPIO_WritePin>
 8001256:	e007      	b.n	8001268 <main+0x2c4>
			  }
			  else
			  {
			  	  HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_RESET);
 8001258:	2380      	movs	r3, #128	; 0x80
 800125a:	0219      	lsls	r1, r3, #8
 800125c:	23a0      	movs	r3, #160	; 0xa0
 800125e:	05db      	lsls	r3, r3, #23
 8001260:	2200      	movs	r2, #0
 8001262:	0018      	movs	r0, r3
 8001264:	f001 fb71 	bl	800294a <HAL_GPIO_WritePin>
		  while(HAL_GPIO_ReadPin(GPIOA, Key_IN4_Pin) == GPIO_PIN_SET)
 8001268:	23a0      	movs	r3, #160	; 0xa0
 800126a:	05db      	lsls	r3, r3, #23
 800126c:	2102      	movs	r1, #2
 800126e:	0018      	movs	r0, r3
 8001270:	f001 fb4e 	bl	8002910 <HAL_GPIO_ReadPin>
 8001274:	0003      	movs	r3, r0
 8001276:	2b01      	cmp	r3, #1
 8001278:	d0e3      	beq.n	8001242 <main+0x29e>
	    	  }
		  }
		  HAL_GPIO_WritePin(GPIOB, LED_RED_Pin, GPIO_PIN_SET);
 800127a:	4b22      	ldr	r3, [pc, #136]	; (8001304 <main+0x360>)
 800127c:	2201      	movs	r2, #1
 800127e:	2108      	movs	r1, #8
 8001280:	0018      	movs	r0, r3
 8001282:	f001 fb62 	bl	800294a <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_SET);
 8001286:	2380      	movs	r3, #128	; 0x80
 8001288:	0219      	lsls	r1, r3, #8
 800128a:	23a0      	movs	r3, #160	; 0xa0
 800128c:	05db      	lsls	r3, r3, #23
 800128e:	2201      	movs	r2, #1
 8001290:	0018      	movs	r0, r3
 8001292:	f001 fb5a 	bl	800294a <HAL_GPIO_WritePin>

		  TxData[1] = 4;
 8001296:	4b0c      	ldr	r3, [pc, #48]	; (80012c8 <main+0x324>)
 8001298:	2204      	movs	r2, #4
 800129a:	705a      	strb	r2, [r3, #1]
		  nRF24_Transmit(nRF_CSN_Pin, TxData, Packet_Size);
 800129c:	4b0e      	ldr	r3, [pc, #56]	; (80012d8 <main+0x334>)
 800129e:	781a      	ldrb	r2, [r3, #0]
 80012a0:	4b09      	ldr	r3, [pc, #36]	; (80012c8 <main+0x324>)
 80012a2:	0019      	movs	r1, r3
 80012a4:	2008      	movs	r0, #8
 80012a6:	f004 fa57 	bl	8005758 <nRF24_Transmit>
		  nRF24_Transmit_Report(nRF_CSN_Pin);
#endif

	  }

	  HAL_Delay(1);
 80012aa:	2001      	movs	r0, #1
 80012ac:	f000 fcc0 	bl	8001c30 <HAL_Delay>
#ifndef Debug
	  char *message = "About to Go into the STOP mode\n\n";
	  HAL_UART_Transmit(&hlpuart1, (uint8_t *)message, strlen (message), 100);    //Last Words
#endif
	  HAL_SuspendTick();                                                          //Suspend the sys tick before going into stop mode
 80012b0:	f000 fce2 	bl	8001c78 <HAL_SuspendTick>
	  HAL_PWR_EnterSTOPMode(PWR_LOWPOWERREGULATOR_ON, PWR_STOPENTRY_WFI);         //Enter the stop mode
 80012b4:	2101      	movs	r1, #1
 80012b6:	2001      	movs	r0, #1
 80012b8:	f001 fb80 	bl	80029bc <HAL_PWR_EnterSTOPMode>
	  HAL_ADC_Start(&hadc);
 80012bc:	e6b8      	b.n	8001030 <main+0x8c>
 80012be:	46c0      	nop			; (mov r8, r8)
 80012c0:	00002710 	.word	0x00002710
 80012c4:	2000022c 	.word	0x2000022c
 80012c8:	2000021c 	.word	0x2000021c
 80012cc:	2000022d 	.word	0x2000022d
 80012d0:	20000000 	.word	0x20000000
 80012d4:	20000008 	.word	0x20000008
 80012d8:	2000000d 	.word	0x2000000d
 80012dc:	2000009c 	.word	0x2000009c
 80012e0:	20000230 	.word	0x20000230
 80012e4:	1ff80078 	.word	0x1ff80078
 80012e8:	20000238 	.word	0x20000238
 80012ec:	40400000 	.word	0x40400000
 80012f0:	20000234 	.word	0x20000234
 80012f4:	2000022e 	.word	0x2000022e
 80012f8:	080066d0 	.word	0x080066d0
 80012fc:	200000f8 	.word	0x200000f8
 8001300:	2000022f 	.word	0x2000022f
 8001304:	50000400 	.word	0x50000400

08001308 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001308:	b590      	push	{r4, r7, lr}
 800130a:	b09b      	sub	sp, #108	; 0x6c
 800130c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800130e:	2434      	movs	r4, #52	; 0x34
 8001310:	193b      	adds	r3, r7, r4
 8001312:	0018      	movs	r0, r3
 8001314:	2334      	movs	r3, #52	; 0x34
 8001316:	001a      	movs	r2, r3
 8001318:	2100      	movs	r1, #0
 800131a:	f004 fd5b 	bl	8005dd4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800131e:	2320      	movs	r3, #32
 8001320:	18fb      	adds	r3, r7, r3
 8001322:	0018      	movs	r0, r3
 8001324:	2314      	movs	r3, #20
 8001326:	001a      	movs	r2, r3
 8001328:	2100      	movs	r1, #0
 800132a:	f004 fd53 	bl	8005dd4 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800132e:	1d3b      	adds	r3, r7, #4
 8001330:	0018      	movs	r0, r3
 8001332:	231c      	movs	r3, #28
 8001334:	001a      	movs	r2, r3
 8001336:	2100      	movs	r1, #0
 8001338:	f004 fd4c 	bl	8005dd4 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800133c:	4b29      	ldr	r3, [pc, #164]	; (80013e4 <SystemClock_Config+0xdc>)
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	4a29      	ldr	r2, [pc, #164]	; (80013e8 <SystemClock_Config+0xe0>)
 8001342:	401a      	ands	r2, r3
 8001344:	4b27      	ldr	r3, [pc, #156]	; (80013e4 <SystemClock_Config+0xdc>)
 8001346:	2180      	movs	r1, #128	; 0x80
 8001348:	0109      	lsls	r1, r1, #4
 800134a:	430a      	orrs	r2, r1
 800134c:	601a      	str	r2, [r3, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800134e:	0021      	movs	r1, r4
 8001350:	187b      	adds	r3, r7, r1
 8001352:	2202      	movs	r2, #2
 8001354:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001356:	187b      	adds	r3, r7, r1
 8001358:	2201      	movs	r2, #1
 800135a:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800135c:	187b      	adds	r3, r7, r1
 800135e:	2210      	movs	r2, #16
 8001360:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001362:	187b      	adds	r3, r7, r1
 8001364:	2202      	movs	r2, #2
 8001366:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001368:	187b      	adds	r3, r7, r1
 800136a:	2200      	movs	r2, #0
 800136c:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLLMUL_3;
 800136e:	187b      	adds	r3, r7, r1
 8001370:	2200      	movs	r2, #0
 8001372:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLLDIV_2;
 8001374:	187b      	adds	r3, r7, r1
 8001376:	2280      	movs	r2, #128	; 0x80
 8001378:	03d2      	lsls	r2, r2, #15
 800137a:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800137c:	187b      	adds	r3, r7, r1
 800137e:	0018      	movs	r0, r3
 8001380:	f001 fb78 	bl	8002a74 <HAL_RCC_OscConfig>
 8001384:	1e03      	subs	r3, r0, #0
 8001386:	d001      	beq.n	800138c <SystemClock_Config+0x84>
  {
    Error_Handler();
 8001388:	f000 fa6e 	bl	8001868 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800138c:	2120      	movs	r1, #32
 800138e:	187b      	adds	r3, r7, r1
 8001390:	220f      	movs	r2, #15
 8001392:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001394:	187b      	adds	r3, r7, r1
 8001396:	2203      	movs	r2, #3
 8001398:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800139a:	187b      	adds	r3, r7, r1
 800139c:	2200      	movs	r2, #0
 800139e:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80013a0:	187b      	adds	r3, r7, r1
 80013a2:	2200      	movs	r2, #0
 80013a4:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80013a6:	187b      	adds	r3, r7, r1
 80013a8:	2200      	movs	r2, #0
 80013aa:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80013ac:	187b      	adds	r3, r7, r1
 80013ae:	2101      	movs	r1, #1
 80013b0:	0018      	movs	r0, r3
 80013b2:	f001 fec9 	bl	8003148 <HAL_RCC_ClockConfig>
 80013b6:	1e03      	subs	r3, r0, #0
 80013b8:	d001      	beq.n	80013be <SystemClock_Config+0xb6>
  {
    Error_Handler();
 80013ba:	f000 fa55 	bl	8001868 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 80013be:	1d3b      	adds	r3, r7, #4
 80013c0:	2204      	movs	r2, #4
 80013c2:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 80013c4:	1d3b      	adds	r3, r7, #4
 80013c6:	2200      	movs	r2, #0
 80013c8:	611a      	str	r2, [r3, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80013ca:	1d3b      	adds	r3, r7, #4
 80013cc:	0018      	movs	r0, r3
 80013ce:	f002 f8df 	bl	8003590 <HAL_RCCEx_PeriphCLKConfig>
 80013d2:	1e03      	subs	r3, r0, #0
 80013d4:	d001      	beq.n	80013da <SystemClock_Config+0xd2>
  {
    Error_Handler();
 80013d6:	f000 fa47 	bl	8001868 <Error_Handler>
  }
}
 80013da:	46c0      	nop			; (mov r8, r8)
 80013dc:	46bd      	mov	sp, r7
 80013de:	b01b      	add	sp, #108	; 0x6c
 80013e0:	bd90      	pop	{r4, r7, pc}
 80013e2:	46c0      	nop			; (mov r8, r8)
 80013e4:	40007000 	.word	0x40007000
 80013e8:	ffffe7ff 	.word	0xffffe7ff

080013ec <MX_ADC_Init>:
  * @brief ADC Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC_Init(void)
{
 80013ec:	b580      	push	{r7, lr}
 80013ee:	b082      	sub	sp, #8
 80013f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80013f2:	003b      	movs	r3, r7
 80013f4:	0018      	movs	r0, r3
 80013f6:	2308      	movs	r3, #8
 80013f8:	001a      	movs	r2, r3
 80013fa:	2100      	movs	r1, #0
 80013fc:	f004 fcea 	bl	8005dd4 <memset>

  /* USER CODE END ADC_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 8001400:	4b2a      	ldr	r3, [pc, #168]	; (80014ac <MX_ADC_Init+0xc0>)
 8001402:	4a2b      	ldr	r2, [pc, #172]	; (80014b0 <MX_ADC_Init+0xc4>)
 8001404:	601a      	str	r2, [r3, #0]
  hadc.Init.OversamplingMode = DISABLE;
 8001406:	4b29      	ldr	r3, [pc, #164]	; (80014ac <MX_ADC_Init+0xc0>)
 8001408:	2200      	movs	r2, #0
 800140a:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 800140c:	4b27      	ldr	r3, [pc, #156]	; (80014ac <MX_ADC_Init+0xc0>)
 800140e:	2280      	movs	r2, #128	; 0x80
 8001410:	05d2      	lsls	r2, r2, #23
 8001412:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 8001414:	4b25      	ldr	r3, [pc, #148]	; (80014ac <MX_ADC_Init+0xc0>)
 8001416:	2200      	movs	r2, #0
 8001418:	609a      	str	r2, [r3, #8]
  hadc.Init.SamplingTime = ADC_SAMPLETIME_19CYCLES_5;
 800141a:	4b24      	ldr	r3, [pc, #144]	; (80014ac <MX_ADC_Init+0xc0>)
 800141c:	2204      	movs	r2, #4
 800141e:	639a      	str	r2, [r3, #56]	; 0x38
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 8001420:	4b22      	ldr	r3, [pc, #136]	; (80014ac <MX_ADC_Init+0xc0>)
 8001422:	2201      	movs	r2, #1
 8001424:	611a      	str	r2, [r3, #16]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001426:	4b21      	ldr	r3, [pc, #132]	; (80014ac <MX_ADC_Init+0xc0>)
 8001428:	2200      	movs	r2, #0
 800142a:	60da      	str	r2, [r3, #12]
  hadc.Init.ContinuousConvMode = DISABLE;
 800142c:	4b1f      	ldr	r3, [pc, #124]	; (80014ac <MX_ADC_Init+0xc0>)
 800142e:	2220      	movs	r2, #32
 8001430:	2100      	movs	r1, #0
 8001432:	5499      	strb	r1, [r3, r2]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 8001434:	4b1d      	ldr	r3, [pc, #116]	; (80014ac <MX_ADC_Init+0xc0>)
 8001436:	2221      	movs	r2, #33	; 0x21
 8001438:	2100      	movs	r1, #0
 800143a:	5499      	strb	r1, [r3, r2]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800143c:	4b1b      	ldr	r3, [pc, #108]	; (80014ac <MX_ADC_Init+0xc0>)
 800143e:	2200      	movs	r2, #0
 8001440:	629a      	str	r2, [r3, #40]	; 0x28
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001442:	4b1a      	ldr	r3, [pc, #104]	; (80014ac <MX_ADC_Init+0xc0>)
 8001444:	22c2      	movs	r2, #194	; 0xc2
 8001446:	32ff      	adds	r2, #255	; 0xff
 8001448:	625a      	str	r2, [r3, #36]	; 0x24
  hadc.Init.DMAContinuousRequests = DISABLE;
 800144a:	4b18      	ldr	r3, [pc, #96]	; (80014ac <MX_ADC_Init+0xc0>)
 800144c:	222c      	movs	r2, #44	; 0x2c
 800144e:	2100      	movs	r1, #0
 8001450:	5499      	strb	r1, [r3, r2]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001452:	4b16      	ldr	r3, [pc, #88]	; (80014ac <MX_ADC_Init+0xc0>)
 8001454:	2204      	movs	r2, #4
 8001456:	615a      	str	r2, [r3, #20]
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001458:	4b14      	ldr	r3, [pc, #80]	; (80014ac <MX_ADC_Init+0xc0>)
 800145a:	2200      	movs	r2, #0
 800145c:	631a      	str	r2, [r3, #48]	; 0x30
  hadc.Init.LowPowerAutoWait = DISABLE;
 800145e:	4b13      	ldr	r3, [pc, #76]	; (80014ac <MX_ADC_Init+0xc0>)
 8001460:	2200      	movs	r2, #0
 8001462:	619a      	str	r2, [r3, #24]
  hadc.Init.LowPowerFrequencyMode = DISABLE;
 8001464:	4b11      	ldr	r3, [pc, #68]	; (80014ac <MX_ADC_Init+0xc0>)
 8001466:	2200      	movs	r2, #0
 8001468:	635a      	str	r2, [r3, #52]	; 0x34
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 800146a:	4b10      	ldr	r3, [pc, #64]	; (80014ac <MX_ADC_Init+0xc0>)
 800146c:	2200      	movs	r2, #0
 800146e:	61da      	str	r2, [r3, #28]
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 8001470:	4b0e      	ldr	r3, [pc, #56]	; (80014ac <MX_ADC_Init+0xc0>)
 8001472:	0018      	movs	r0, r3
 8001474:	f000 fc1c 	bl	8001cb0 <HAL_ADC_Init>
 8001478:	1e03      	subs	r3, r0, #0
 800147a:	d001      	beq.n	8001480 <MX_ADC_Init+0x94>
  {
    Error_Handler();
 800147c:	f000 f9f4 	bl	8001868 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_VREFINT;
 8001480:	003b      	movs	r3, r7
 8001482:	4a0c      	ldr	r2, [pc, #48]	; (80014b4 <MX_ADC_Init+0xc8>)
 8001484:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 8001486:	003b      	movs	r3, r7
 8001488:	2280      	movs	r2, #128	; 0x80
 800148a:	0152      	lsls	r2, r2, #5
 800148c:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 800148e:	003a      	movs	r2, r7
 8001490:	4b06      	ldr	r3, [pc, #24]	; (80014ac <MX_ADC_Init+0xc0>)
 8001492:	0011      	movs	r1, r2
 8001494:	0018      	movs	r0, r3
 8001496:	f000 fe7b 	bl	8002190 <HAL_ADC_ConfigChannel>
 800149a:	1e03      	subs	r3, r0, #0
 800149c:	d001      	beq.n	80014a2 <MX_ADC_Init+0xb6>
  {
    Error_Handler();
 800149e:	f000 f9e3 	bl	8001868 <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 80014a2:	46c0      	nop			; (mov r8, r8)
 80014a4:	46bd      	mov	sp, r7
 80014a6:	b002      	add	sp, #8
 80014a8:	bd80      	pop	{r7, pc}
 80014aa:	46c0      	nop			; (mov r8, r8)
 80014ac:	2000009c 	.word	0x2000009c
 80014b0:	40012400 	.word	0x40012400
 80014b4:	44020000 	.word	0x44020000

080014b8 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 80014b8:	b580      	push	{r7, lr}
 80014ba:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 80014bc:	4b13      	ldr	r3, [pc, #76]	; (800150c <MX_LPUART1_UART_Init+0x54>)
 80014be:	4a14      	ldr	r2, [pc, #80]	; (8001510 <MX_LPUART1_UART_Init+0x58>)
 80014c0:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 80014c2:	4b12      	ldr	r3, [pc, #72]	; (800150c <MX_LPUART1_UART_Init+0x54>)
 80014c4:	22e1      	movs	r2, #225	; 0xe1
 80014c6:	0252      	lsls	r2, r2, #9
 80014c8:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 80014ca:	4b10      	ldr	r3, [pc, #64]	; (800150c <MX_LPUART1_UART_Init+0x54>)
 80014cc:	2200      	movs	r2, #0
 80014ce:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 80014d0:	4b0e      	ldr	r3, [pc, #56]	; (800150c <MX_LPUART1_UART_Init+0x54>)
 80014d2:	2200      	movs	r2, #0
 80014d4:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 80014d6:	4b0d      	ldr	r3, [pc, #52]	; (800150c <MX_LPUART1_UART_Init+0x54>)
 80014d8:	2200      	movs	r2, #0
 80014da:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 80014dc:	4b0b      	ldr	r3, [pc, #44]	; (800150c <MX_LPUART1_UART_Init+0x54>)
 80014de:	220c      	movs	r2, #12
 80014e0:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80014e2:	4b0a      	ldr	r3, [pc, #40]	; (800150c <MX_LPUART1_UART_Init+0x54>)
 80014e4:	2200      	movs	r2, #0
 80014e6:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80014e8:	4b08      	ldr	r3, [pc, #32]	; (800150c <MX_LPUART1_UART_Init+0x54>)
 80014ea:	2200      	movs	r2, #0
 80014ec:	621a      	str	r2, [r3, #32]
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80014ee:	4b07      	ldr	r3, [pc, #28]	; (800150c <MX_LPUART1_UART_Init+0x54>)
 80014f0:	2200      	movs	r2, #0
 80014f2:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 80014f4:	4b05      	ldr	r3, [pc, #20]	; (800150c <MX_LPUART1_UART_Init+0x54>)
 80014f6:	0018      	movs	r0, r3
 80014f8:	f003 f89a 	bl	8004630 <HAL_UART_Init>
 80014fc:	1e03      	subs	r3, r0, #0
 80014fe:	d001      	beq.n	8001504 <MX_LPUART1_UART_Init+0x4c>
  {
    Error_Handler();
 8001500:	f000 f9b2 	bl	8001868 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8001504:	46c0      	nop			; (mov r8, r8)
 8001506:	46bd      	mov	sp, r7
 8001508:	bd80      	pop	{r7, pc}
 800150a:	46c0      	nop			; (mov r8, r8)
 800150c:	200000f8 	.word	0x200000f8
 8001510:	40004800 	.word	0x40004800

08001514 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001514:	b580      	push	{r7, lr}
 8001516:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001518:	4b18      	ldr	r3, [pc, #96]	; (800157c <MX_SPI1_Init+0x68>)
 800151a:	4a19      	ldr	r2, [pc, #100]	; (8001580 <MX_SPI1_Init+0x6c>)
 800151c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800151e:	4b17      	ldr	r3, [pc, #92]	; (800157c <MX_SPI1_Init+0x68>)
 8001520:	2282      	movs	r2, #130	; 0x82
 8001522:	0052      	lsls	r2, r2, #1
 8001524:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001526:	4b15      	ldr	r3, [pc, #84]	; (800157c <MX_SPI1_Init+0x68>)
 8001528:	2200      	movs	r2, #0
 800152a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800152c:	4b13      	ldr	r3, [pc, #76]	; (800157c <MX_SPI1_Init+0x68>)
 800152e:	2200      	movs	r2, #0
 8001530:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001532:	4b12      	ldr	r3, [pc, #72]	; (800157c <MX_SPI1_Init+0x68>)
 8001534:	2200      	movs	r2, #0
 8001536:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001538:	4b10      	ldr	r3, [pc, #64]	; (800157c <MX_SPI1_Init+0x68>)
 800153a:	2200      	movs	r2, #0
 800153c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800153e:	4b0f      	ldr	r3, [pc, #60]	; (800157c <MX_SPI1_Init+0x68>)
 8001540:	2280      	movs	r2, #128	; 0x80
 8001542:	0092      	lsls	r2, r2, #2
 8001544:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001546:	4b0d      	ldr	r3, [pc, #52]	; (800157c <MX_SPI1_Init+0x68>)
 8001548:	2200      	movs	r2, #0
 800154a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800154c:	4b0b      	ldr	r3, [pc, #44]	; (800157c <MX_SPI1_Init+0x68>)
 800154e:	2200      	movs	r2, #0
 8001550:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001552:	4b0a      	ldr	r3, [pc, #40]	; (800157c <MX_SPI1_Init+0x68>)
 8001554:	2200      	movs	r2, #0
 8001556:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001558:	4b08      	ldr	r3, [pc, #32]	; (800157c <MX_SPI1_Init+0x68>)
 800155a:	2200      	movs	r2, #0
 800155c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 800155e:	4b07      	ldr	r3, [pc, #28]	; (800157c <MX_SPI1_Init+0x68>)
 8001560:	2207      	movs	r2, #7
 8001562:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001564:	4b05      	ldr	r3, [pc, #20]	; (800157c <MX_SPI1_Init+0x68>)
 8001566:	0018      	movs	r0, r3
 8001568:	f002 f94c 	bl	8003804 <HAL_SPI_Init>
 800156c:	1e03      	subs	r3, r0, #0
 800156e:	d001      	beq.n	8001574 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001570:	f000 f97a 	bl	8001868 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001574:	46c0      	nop			; (mov r8, r8)
 8001576:	46bd      	mov	sp, r7
 8001578:	bd80      	pop	{r7, pc}
 800157a:	46c0      	nop			; (mov r8, r8)
 800157c:	20000180 	.word	0x20000180
 8001580:	40013000 	.word	0x40013000

08001584 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8001584:	b580      	push	{r7, lr}
 8001586:	b082      	sub	sp, #8
 8001588:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800158a:	003b      	movs	r3, r7
 800158c:	0018      	movs	r0, r3
 800158e:	2308      	movs	r3, #8
 8001590:	001a      	movs	r2, r3
 8001592:	2100      	movs	r1, #0
 8001594:	f004 fc1e 	bl	8005dd4 <memset>

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8001598:	4b15      	ldr	r3, [pc, #84]	; (80015f0 <MX_TIM6_Init+0x6c>)
 800159a:	4a16      	ldr	r2, [pc, #88]	; (80015f4 <MX_TIM6_Init+0x70>)
 800159c:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 0;
 800159e:	4b14      	ldr	r3, [pc, #80]	; (80015f0 <MX_TIM6_Init+0x6c>)
 80015a0:	2200      	movs	r2, #0
 80015a2:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80015a4:	4b12      	ldr	r3, [pc, #72]	; (80015f0 <MX_TIM6_Init+0x6c>)
 80015a6:	2200      	movs	r2, #0
 80015a8:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 65535;
 80015aa:	4b11      	ldr	r3, [pc, #68]	; (80015f0 <MX_TIM6_Init+0x6c>)
 80015ac:	4a12      	ldr	r2, [pc, #72]	; (80015f8 <MX_TIM6_Init+0x74>)
 80015ae:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80015b0:	4b0f      	ldr	r3, [pc, #60]	; (80015f0 <MX_TIM6_Init+0x6c>)
 80015b2:	2200      	movs	r2, #0
 80015b4:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80015b6:	4b0e      	ldr	r3, [pc, #56]	; (80015f0 <MX_TIM6_Init+0x6c>)
 80015b8:	0018      	movs	r0, r3
 80015ba:	f002 ff4d 	bl	8004458 <HAL_TIM_Base_Init>
 80015be:	1e03      	subs	r3, r0, #0
 80015c0:	d001      	beq.n	80015c6 <MX_TIM6_Init+0x42>
  {
    Error_Handler();
 80015c2:	f000 f951 	bl	8001868 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80015c6:	003b      	movs	r3, r7
 80015c8:	2200      	movs	r2, #0
 80015ca:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80015cc:	003b      	movs	r3, r7
 80015ce:	2200      	movs	r2, #0
 80015d0:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80015d2:	003a      	movs	r2, r7
 80015d4:	4b06      	ldr	r3, [pc, #24]	; (80015f0 <MX_TIM6_Init+0x6c>)
 80015d6:	0011      	movs	r1, r2
 80015d8:	0018      	movs	r0, r3
 80015da:	f002 ffd1 	bl	8004580 <HAL_TIMEx_MasterConfigSynchronization>
 80015de:	1e03      	subs	r3, r0, #0
 80015e0:	d001      	beq.n	80015e6 <MX_TIM6_Init+0x62>
  {
    Error_Handler();
 80015e2:	f000 f941 	bl	8001868 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 80015e6:	46c0      	nop			; (mov r8, r8)
 80015e8:	46bd      	mov	sp, r7
 80015ea:	b002      	add	sp, #8
 80015ec:	bd80      	pop	{r7, pc}
 80015ee:	46c0      	nop			; (mov r8, r8)
 80015f0:	200001d8 	.word	0x200001d8
 80015f4:	40001000 	.word	0x40001000
 80015f8:	0000ffff 	.word	0x0000ffff

080015fc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80015fc:	b590      	push	{r4, r7, lr}
 80015fe:	b08b      	sub	sp, #44	; 0x2c
 8001600:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001602:	2414      	movs	r4, #20
 8001604:	193b      	adds	r3, r7, r4
 8001606:	0018      	movs	r0, r3
 8001608:	2314      	movs	r3, #20
 800160a:	001a      	movs	r2, r3
 800160c:	2100      	movs	r1, #0
 800160e:	f004 fbe1 	bl	8005dd4 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001612:	4b90      	ldr	r3, [pc, #576]	; (8001854 <MX_GPIO_Init+0x258>)
 8001614:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001616:	4b8f      	ldr	r3, [pc, #572]	; (8001854 <MX_GPIO_Init+0x258>)
 8001618:	2104      	movs	r1, #4
 800161a:	430a      	orrs	r2, r1
 800161c:	62da      	str	r2, [r3, #44]	; 0x2c
 800161e:	4b8d      	ldr	r3, [pc, #564]	; (8001854 <MX_GPIO_Init+0x258>)
 8001620:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001622:	2204      	movs	r2, #4
 8001624:	4013      	ands	r3, r2
 8001626:	613b      	str	r3, [r7, #16]
 8001628:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800162a:	4b8a      	ldr	r3, [pc, #552]	; (8001854 <MX_GPIO_Init+0x258>)
 800162c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800162e:	4b89      	ldr	r3, [pc, #548]	; (8001854 <MX_GPIO_Init+0x258>)
 8001630:	2180      	movs	r1, #128	; 0x80
 8001632:	430a      	orrs	r2, r1
 8001634:	62da      	str	r2, [r3, #44]	; 0x2c
 8001636:	4b87      	ldr	r3, [pc, #540]	; (8001854 <MX_GPIO_Init+0x258>)
 8001638:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800163a:	2280      	movs	r2, #128	; 0x80
 800163c:	4013      	ands	r3, r2
 800163e:	60fb      	str	r3, [r7, #12]
 8001640:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001642:	4b84      	ldr	r3, [pc, #528]	; (8001854 <MX_GPIO_Init+0x258>)
 8001644:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001646:	4b83      	ldr	r3, [pc, #524]	; (8001854 <MX_GPIO_Init+0x258>)
 8001648:	2101      	movs	r1, #1
 800164a:	430a      	orrs	r2, r1
 800164c:	62da      	str	r2, [r3, #44]	; 0x2c
 800164e:	4b81      	ldr	r3, [pc, #516]	; (8001854 <MX_GPIO_Init+0x258>)
 8001650:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001652:	2201      	movs	r2, #1
 8001654:	4013      	ands	r3, r2
 8001656:	60bb      	str	r3, [r7, #8]
 8001658:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800165a:	4b7e      	ldr	r3, [pc, #504]	; (8001854 <MX_GPIO_Init+0x258>)
 800165c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800165e:	4b7d      	ldr	r3, [pc, #500]	; (8001854 <MX_GPIO_Init+0x258>)
 8001660:	2102      	movs	r1, #2
 8001662:	430a      	orrs	r2, r1
 8001664:	62da      	str	r2, [r3, #44]	; 0x2c
 8001666:	4b7b      	ldr	r3, [pc, #492]	; (8001854 <MX_GPIO_Init+0x258>)
 8001668:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800166a:	2202      	movs	r2, #2
 800166c:	4013      	ands	r3, r2
 800166e:	607b      	str	r3, [r7, #4]
 8001670:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, nRF_CSN_Pin|LED_GREEN_Pin, GPIO_PIN_SET);
 8001672:	4979      	ldr	r1, [pc, #484]	; (8001858 <MX_GPIO_Init+0x25c>)
 8001674:	23a0      	movs	r3, #160	; 0xa0
 8001676:	05db      	lsls	r3, r3, #23
 8001678:	2201      	movs	r2, #1
 800167a:	0018      	movs	r0, r3
 800167c:	f001 f965 	bl	800294a <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(nRF_CE_GPIO_Port, nRF_CE_Pin, GPIO_PIN_RESET);
 8001680:	4b76      	ldr	r3, [pc, #472]	; (800185c <MX_GPIO_Init+0x260>)
 8001682:	2200      	movs	r2, #0
 8001684:	2104      	movs	r1, #4
 8001686:	0018      	movs	r0, r3
 8001688:	f001 f95f 	bl	800294a <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_RED_Pin|LED_BLUE_Pin, GPIO_PIN_SET);
 800168c:	4b73      	ldr	r3, [pc, #460]	; (800185c <MX_GPIO_Init+0x260>)
 800168e:	2201      	movs	r2, #1
 8001690:	2118      	movs	r1, #24
 8001692:	0018      	movs	r0, r3
 8001694:	f001 f959 	bl	800294a <HAL_GPIO_WritePin>

  /*Configure GPIO pins : Dev_ID2_Pin Dev_ID3_Pin Dev_ID4_Pin */
  GPIO_InitStruct.Pin = Dev_ID2_Pin|Dev_ID3_Pin|Dev_ID4_Pin;
 8001698:	193b      	adds	r3, r7, r4
 800169a:	22e0      	movs	r2, #224	; 0xe0
 800169c:	0212      	lsls	r2, r2, #8
 800169e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80016a0:	193b      	adds	r3, r7, r4
 80016a2:	2200      	movs	r2, #0
 80016a4:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80016a6:	193b      	adds	r3, r7, r4
 80016a8:	2202      	movs	r2, #2
 80016aa:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80016ac:	193b      	adds	r3, r7, r4
 80016ae:	4a6c      	ldr	r2, [pc, #432]	; (8001860 <MX_GPIO_Init+0x264>)
 80016b0:	0019      	movs	r1, r3
 80016b2:	0010      	movs	r0, r2
 80016b4:	f000 ffb6 	bl	8002624 <HAL_GPIO_Init>

  /*Configure GPIO pins : Dev_ID5_Pin Dev_ID6_Pin */
  GPIO_InitStruct.Pin = Dev_ID5_Pin|Dev_ID6_Pin;
 80016b8:	193b      	adds	r3, r7, r4
 80016ba:	2203      	movs	r2, #3
 80016bc:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80016be:	193b      	adds	r3, r7, r4
 80016c0:	2200      	movs	r2, #0
 80016c2:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80016c4:	193b      	adds	r3, r7, r4
 80016c6:	2202      	movs	r2, #2
 80016c8:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80016ca:	193b      	adds	r3, r7, r4
 80016cc:	4a65      	ldr	r2, [pc, #404]	; (8001864 <MX_GPIO_Init+0x268>)
 80016ce:	0019      	movs	r1, r3
 80016d0:	0010      	movs	r0, r2
 80016d2:	f000 ffa7 	bl	8002624 <HAL_GPIO_Init>

  /*Configure GPIO pin : Dev_ID7_Pin */
  GPIO_InitStruct.Pin = Dev_ID7_Pin;
 80016d6:	193b      	adds	r3, r7, r4
 80016d8:	2201      	movs	r2, #1
 80016da:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80016dc:	193b      	adds	r3, r7, r4
 80016de:	2200      	movs	r2, #0
 80016e0:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80016e2:	193b      	adds	r3, r7, r4
 80016e4:	2202      	movs	r2, #2
 80016e6:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(Dev_ID7_GPIO_Port, &GPIO_InitStruct);
 80016e8:	193a      	adds	r2, r7, r4
 80016ea:	23a0      	movs	r3, #160	; 0xa0
 80016ec:	05db      	lsls	r3, r3, #23
 80016ee:	0011      	movs	r1, r2
 80016f0:	0018      	movs	r0, r3
 80016f2:	f000 ff97 	bl	8002624 <HAL_GPIO_Init>

  /*Configure GPIO pins : Key_IN4_Pin Key_IN2_Pin */
  GPIO_InitStruct.Pin = Key_IN4_Pin|Key_IN2_Pin;
 80016f6:	193b      	adds	r3, r7, r4
 80016f8:	2206      	movs	r2, #6
 80016fa:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80016fc:	193b      	adds	r3, r7, r4
 80016fe:	2288      	movs	r2, #136	; 0x88
 8001700:	0352      	lsls	r2, r2, #13
 8001702:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001704:	193b      	adds	r3, r7, r4
 8001706:	2202      	movs	r2, #2
 8001708:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800170a:	193a      	adds	r2, r7, r4
 800170c:	23a0      	movs	r3, #160	; 0xa0
 800170e:	05db      	lsls	r3, r3, #23
 8001710:	0011      	movs	r1, r2
 8001712:	0018      	movs	r0, r3
 8001714:	f000 ff86 	bl	8002624 <HAL_GPIO_Init>

  /*Configure GPIO pin : nRF_CSN_Pin */
  GPIO_InitStruct.Pin = nRF_CSN_Pin;
 8001718:	193b      	adds	r3, r7, r4
 800171a:	2208      	movs	r2, #8
 800171c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800171e:	193b      	adds	r3, r7, r4
 8001720:	2201      	movs	r2, #1
 8001722:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001724:	193b      	adds	r3, r7, r4
 8001726:	2200      	movs	r2, #0
 8001728:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800172a:	193b      	adds	r3, r7, r4
 800172c:	2202      	movs	r2, #2
 800172e:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(nRF_CSN_GPIO_Port, &GPIO_InitStruct);
 8001730:	193a      	adds	r2, r7, r4
 8001732:	23a0      	movs	r3, #160	; 0xa0
 8001734:	05db      	lsls	r3, r3, #23
 8001736:	0011      	movs	r1, r2
 8001738:	0018      	movs	r0, r3
 800173a:	f000 ff73 	bl	8002624 <HAL_GPIO_Init>

  /*Configure GPIO pin : nRF_IRQ_Pin */
  GPIO_InitStruct.Pin = nRF_IRQ_Pin;
 800173e:	193b      	adds	r3, r7, r4
 8001740:	2210      	movs	r2, #16
 8001742:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001744:	193b      	adds	r3, r7, r4
 8001746:	2284      	movs	r2, #132	; 0x84
 8001748:	0392      	lsls	r2, r2, #14
 800174a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800174c:	193b      	adds	r3, r7, r4
 800174e:	2200      	movs	r2, #0
 8001750:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(nRF_IRQ_GPIO_Port, &GPIO_InitStruct);
 8001752:	193a      	adds	r2, r7, r4
 8001754:	23a0      	movs	r3, #160	; 0xa0
 8001756:	05db      	lsls	r3, r3, #23
 8001758:	0011      	movs	r1, r2
 800175a:	0018      	movs	r0, r3
 800175c:	f000 ff62 	bl	8002624 <HAL_GPIO_Init>

  /*Configure GPIO pin : nRF_CE_Pin */
  GPIO_InitStruct.Pin = nRF_CE_Pin;
 8001760:	193b      	adds	r3, r7, r4
 8001762:	2204      	movs	r2, #4
 8001764:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001766:	193b      	adds	r3, r7, r4
 8001768:	2201      	movs	r2, #1
 800176a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800176c:	193b      	adds	r3, r7, r4
 800176e:	2200      	movs	r2, #0
 8001770:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001772:	193b      	adds	r3, r7, r4
 8001774:	2202      	movs	r2, #2
 8001776:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(nRF_CE_GPIO_Port, &GPIO_InitStruct);
 8001778:	193b      	adds	r3, r7, r4
 800177a:	4a38      	ldr	r2, [pc, #224]	; (800185c <MX_GPIO_Init+0x260>)
 800177c:	0019      	movs	r1, r3
 800177e:	0010      	movs	r0, r2
 8001780:	f000 ff50 	bl	8002624 <HAL_GPIO_Init>

  /*Configure GPIO pins : Key_IN1_Pin Key_IN3_Pin */
  GPIO_InitStruct.Pin = Key_IN1_Pin|Key_IN3_Pin;
 8001784:	0021      	movs	r1, r4
 8001786:	187b      	adds	r3, r7, r1
 8001788:	22c0      	movs	r2, #192	; 0xc0
 800178a:	0192      	lsls	r2, r2, #6
 800178c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800178e:	187b      	adds	r3, r7, r1
 8001790:	2288      	movs	r2, #136	; 0x88
 8001792:	0352      	lsls	r2, r2, #13
 8001794:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001796:	187b      	adds	r3, r7, r1
 8001798:	2202      	movs	r2, #2
 800179a:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800179c:	000c      	movs	r4, r1
 800179e:	187b      	adds	r3, r7, r1
 80017a0:	4a2e      	ldr	r2, [pc, #184]	; (800185c <MX_GPIO_Init+0x260>)
 80017a2:	0019      	movs	r1, r3
 80017a4:	0010      	movs	r0, r2
 80017a6:	f000 ff3d 	bl	8002624 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_GREEN_Pin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin;
 80017aa:	0021      	movs	r1, r4
 80017ac:	187b      	adds	r3, r7, r1
 80017ae:	2280      	movs	r2, #128	; 0x80
 80017b0:	0212      	lsls	r2, r2, #8
 80017b2:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017b4:	000c      	movs	r4, r1
 80017b6:	193b      	adds	r3, r7, r4
 80017b8:	2201      	movs	r2, #1
 80017ba:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017bc:	193b      	adds	r3, r7, r4
 80017be:	2200      	movs	r2, #0
 80017c0:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017c2:	193b      	adds	r3, r7, r4
 80017c4:	2200      	movs	r2, #0
 80017c6:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LED_GREEN_GPIO_Port, &GPIO_InitStruct);
 80017c8:	193a      	adds	r2, r7, r4
 80017ca:	23a0      	movs	r3, #160	; 0xa0
 80017cc:	05db      	lsls	r3, r3, #23
 80017ce:	0011      	movs	r1, r2
 80017d0:	0018      	movs	r0, r3
 80017d2:	f000 ff27 	bl	8002624 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_RED_Pin LED_BLUE_Pin */
  GPIO_InitStruct.Pin = LED_RED_Pin|LED_BLUE_Pin;
 80017d6:	193b      	adds	r3, r7, r4
 80017d8:	2218      	movs	r2, #24
 80017da:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017dc:	193b      	adds	r3, r7, r4
 80017de:	2201      	movs	r2, #1
 80017e0:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017e2:	193b      	adds	r3, r7, r4
 80017e4:	2200      	movs	r2, #0
 80017e6:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017e8:	193b      	adds	r3, r7, r4
 80017ea:	2200      	movs	r2, #0
 80017ec:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80017ee:	193b      	adds	r3, r7, r4
 80017f0:	4a1a      	ldr	r2, [pc, #104]	; (800185c <MX_GPIO_Init+0x260>)
 80017f2:	0019      	movs	r1, r3
 80017f4:	0010      	movs	r0, r2
 80017f6:	f000 ff15 	bl	8002624 <HAL_GPIO_Init>

  /*Configure GPIO pins : Dev_ID0_Pin Dev_ID1_Pin */
  GPIO_InitStruct.Pin = Dev_ID0_Pin|Dev_ID1_Pin;
 80017fa:	0021      	movs	r1, r4
 80017fc:	187b      	adds	r3, r7, r1
 80017fe:	22c0      	movs	r2, #192	; 0xc0
 8001800:	0092      	lsls	r2, r2, #2
 8001802:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001804:	187b      	adds	r3, r7, r1
 8001806:	2200      	movs	r2, #0
 8001808:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800180a:	187b      	adds	r3, r7, r1
 800180c:	2202      	movs	r2, #2
 800180e:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001810:	187b      	adds	r3, r7, r1
 8001812:	4a12      	ldr	r2, [pc, #72]	; (800185c <MX_GPIO_Init+0x260>)
 8001814:	0019      	movs	r1, r3
 8001816:	0010      	movs	r0, r2
 8001818:	f000 ff04 	bl	8002624 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_1_IRQn, 0, 0);
 800181c:	2200      	movs	r2, #0
 800181e:	2100      	movs	r1, #0
 8001820:	2005      	movs	r0, #5
 8001822:	f000 fead 	bl	8002580 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_1_IRQn);
 8001826:	2005      	movs	r0, #5
 8001828:	f000 febf 	bl	80025aa <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI2_3_IRQn, 0, 0);
 800182c:	2200      	movs	r2, #0
 800182e:	2100      	movs	r1, #0
 8001830:	2006      	movs	r0, #6
 8001832:	f000 fea5 	bl	8002580 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_3_IRQn);
 8001836:	2006      	movs	r0, #6
 8001838:	f000 feb7 	bl	80025aa <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 0, 0);
 800183c:	2200      	movs	r2, #0
 800183e:	2100      	movs	r1, #0
 8001840:	2007      	movs	r0, #7
 8001842:	f000 fe9d 	bl	8002580 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 8001846:	2007      	movs	r0, #7
 8001848:	f000 feaf 	bl	80025aa <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800184c:	46c0      	nop			; (mov r8, r8)
 800184e:	46bd      	mov	sp, r7
 8001850:	b00b      	add	sp, #44	; 0x2c
 8001852:	bd90      	pop	{r4, r7, pc}
 8001854:	40021000 	.word	0x40021000
 8001858:	00008008 	.word	0x00008008
 800185c:	50000400 	.word	0x50000400
 8001860:	50000800 	.word	0x50000800
 8001864:	50001c00 	.word	0x50001c00

08001868 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001868:	b580      	push	{r7, lr}
 800186a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800186c:	b672      	cpsid	i
}
 800186e:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001870:	e7fe      	b.n	8001870 <Error_Handler+0x8>
	...

08001874 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001874:	b580      	push	{r7, lr}
 8001876:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001878:	4b07      	ldr	r3, [pc, #28]	; (8001898 <HAL_MspInit+0x24>)
 800187a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800187c:	4b06      	ldr	r3, [pc, #24]	; (8001898 <HAL_MspInit+0x24>)
 800187e:	2101      	movs	r1, #1
 8001880:	430a      	orrs	r2, r1
 8001882:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 8001884:	4b04      	ldr	r3, [pc, #16]	; (8001898 <HAL_MspInit+0x24>)
 8001886:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001888:	4b03      	ldr	r3, [pc, #12]	; (8001898 <HAL_MspInit+0x24>)
 800188a:	2180      	movs	r1, #128	; 0x80
 800188c:	0549      	lsls	r1, r1, #21
 800188e:	430a      	orrs	r2, r1
 8001890:	639a      	str	r2, [r3, #56]	; 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001892:	46c0      	nop			; (mov r8, r8)
 8001894:	46bd      	mov	sp, r7
 8001896:	bd80      	pop	{r7, pc}
 8001898:	40021000 	.word	0x40021000

0800189c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800189c:	b580      	push	{r7, lr}
 800189e:	b082      	sub	sp, #8
 80018a0:	af00      	add	r7, sp, #0
 80018a2:	6078      	str	r0, [r7, #4]
  if(hadc->Instance==ADC1)
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	4a06      	ldr	r2, [pc, #24]	; (80018c4 <HAL_ADC_MspInit+0x28>)
 80018aa:	4293      	cmp	r3, r2
 80018ac:	d106      	bne.n	80018bc <HAL_ADC_MspInit+0x20>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80018ae:	4b06      	ldr	r3, [pc, #24]	; (80018c8 <HAL_ADC_MspInit+0x2c>)
 80018b0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80018b2:	4b05      	ldr	r3, [pc, #20]	; (80018c8 <HAL_ADC_MspInit+0x2c>)
 80018b4:	2180      	movs	r1, #128	; 0x80
 80018b6:	0089      	lsls	r1, r1, #2
 80018b8:	430a      	orrs	r2, r1
 80018ba:	635a      	str	r2, [r3, #52]	; 0x34
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80018bc:	46c0      	nop			; (mov r8, r8)
 80018be:	46bd      	mov	sp, r7
 80018c0:	b002      	add	sp, #8
 80018c2:	bd80      	pop	{r7, pc}
 80018c4:	40012400 	.word	0x40012400
 80018c8:	40021000 	.word	0x40021000

080018cc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80018cc:	b590      	push	{r4, r7, lr}
 80018ce:	b089      	sub	sp, #36	; 0x24
 80018d0:	af00      	add	r7, sp, #0
 80018d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018d4:	240c      	movs	r4, #12
 80018d6:	193b      	adds	r3, r7, r4
 80018d8:	0018      	movs	r0, r3
 80018da:	2314      	movs	r3, #20
 80018dc:	001a      	movs	r2, r3
 80018de:	2100      	movs	r1, #0
 80018e0:	f004 fa78 	bl	8005dd4 <memset>
  if(huart->Instance==LPUART1)
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	4a18      	ldr	r2, [pc, #96]	; (800194c <HAL_UART_MspInit+0x80>)
 80018ea:	4293      	cmp	r3, r2
 80018ec:	d129      	bne.n	8001942 <HAL_UART_MspInit+0x76>
  {
  /* USER CODE BEGIN LPUART1_MspInit 0 */

  /* USER CODE END LPUART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 80018ee:	4b18      	ldr	r3, [pc, #96]	; (8001950 <HAL_UART_MspInit+0x84>)
 80018f0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80018f2:	4b17      	ldr	r3, [pc, #92]	; (8001950 <HAL_UART_MspInit+0x84>)
 80018f4:	2180      	movs	r1, #128	; 0x80
 80018f6:	02c9      	lsls	r1, r1, #11
 80018f8:	430a      	orrs	r2, r1
 80018fa:	639a      	str	r2, [r3, #56]	; 0x38

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80018fc:	4b14      	ldr	r3, [pc, #80]	; (8001950 <HAL_UART_MspInit+0x84>)
 80018fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001900:	4b13      	ldr	r3, [pc, #76]	; (8001950 <HAL_UART_MspInit+0x84>)
 8001902:	2102      	movs	r1, #2
 8001904:	430a      	orrs	r2, r1
 8001906:	62da      	str	r2, [r3, #44]	; 0x2c
 8001908:	4b11      	ldr	r3, [pc, #68]	; (8001950 <HAL_UART_MspInit+0x84>)
 800190a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800190c:	2202      	movs	r2, #2
 800190e:	4013      	ands	r3, r2
 8001910:	60bb      	str	r3, [r7, #8]
 8001912:	68bb      	ldr	r3, [r7, #8]
    /**LPUART1 GPIO Configuration
    PB10     ------> LPUART1_TX
    PB11     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001914:	193b      	adds	r3, r7, r4
 8001916:	22c0      	movs	r2, #192	; 0xc0
 8001918:	0112      	lsls	r2, r2, #4
 800191a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800191c:	0021      	movs	r1, r4
 800191e:	187b      	adds	r3, r7, r1
 8001920:	2202      	movs	r2, #2
 8001922:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001924:	187b      	adds	r3, r7, r1
 8001926:	2200      	movs	r2, #0
 8001928:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800192a:	187b      	adds	r3, r7, r1
 800192c:	2203      	movs	r2, #3
 800192e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_LPUART1;
 8001930:	187b      	adds	r3, r7, r1
 8001932:	2204      	movs	r2, #4
 8001934:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001936:	187b      	adds	r3, r7, r1
 8001938:	4a06      	ldr	r2, [pc, #24]	; (8001954 <HAL_UART_MspInit+0x88>)
 800193a:	0019      	movs	r1, r3
 800193c:	0010      	movs	r0, r2
 800193e:	f000 fe71 	bl	8002624 <HAL_GPIO_Init>
  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }

}
 8001942:	46c0      	nop			; (mov r8, r8)
 8001944:	46bd      	mov	sp, r7
 8001946:	b009      	add	sp, #36	; 0x24
 8001948:	bd90      	pop	{r4, r7, pc}
 800194a:	46c0      	nop			; (mov r8, r8)
 800194c:	40004800 	.word	0x40004800
 8001950:	40021000 	.word	0x40021000
 8001954:	50000400 	.word	0x50000400

08001958 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001958:	b590      	push	{r4, r7, lr}
 800195a:	b089      	sub	sp, #36	; 0x24
 800195c:	af00      	add	r7, sp, #0
 800195e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001960:	240c      	movs	r4, #12
 8001962:	193b      	adds	r3, r7, r4
 8001964:	0018      	movs	r0, r3
 8001966:	2314      	movs	r3, #20
 8001968:	001a      	movs	r2, r3
 800196a:	2100      	movs	r1, #0
 800196c:	f004 fa32 	bl	8005dd4 <memset>
  if(hspi->Instance==SPI1)
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	4a18      	ldr	r2, [pc, #96]	; (80019d8 <HAL_SPI_MspInit+0x80>)
 8001976:	4293      	cmp	r3, r2
 8001978:	d129      	bne.n	80019ce <HAL_SPI_MspInit+0x76>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800197a:	4b18      	ldr	r3, [pc, #96]	; (80019dc <HAL_SPI_MspInit+0x84>)
 800197c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800197e:	4b17      	ldr	r3, [pc, #92]	; (80019dc <HAL_SPI_MspInit+0x84>)
 8001980:	2180      	movs	r1, #128	; 0x80
 8001982:	0149      	lsls	r1, r1, #5
 8001984:	430a      	orrs	r2, r1
 8001986:	635a      	str	r2, [r3, #52]	; 0x34

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001988:	4b14      	ldr	r3, [pc, #80]	; (80019dc <HAL_SPI_MspInit+0x84>)
 800198a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800198c:	4b13      	ldr	r3, [pc, #76]	; (80019dc <HAL_SPI_MspInit+0x84>)
 800198e:	2101      	movs	r1, #1
 8001990:	430a      	orrs	r2, r1
 8001992:	62da      	str	r2, [r3, #44]	; 0x2c
 8001994:	4b11      	ldr	r3, [pc, #68]	; (80019dc <HAL_SPI_MspInit+0x84>)
 8001996:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001998:	2201      	movs	r2, #1
 800199a:	4013      	ands	r3, r2
 800199c:	60bb      	str	r3, [r7, #8]
 800199e:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = nRF_SCK_Pin|nRF_MISO_Pin|nRF_MOSI_Pin;
 80019a0:	0021      	movs	r1, r4
 80019a2:	187b      	adds	r3, r7, r1
 80019a4:	22e0      	movs	r2, #224	; 0xe0
 80019a6:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019a8:	187b      	adds	r3, r7, r1
 80019aa:	2202      	movs	r2, #2
 80019ac:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019ae:	187b      	adds	r3, r7, r1
 80019b0:	2200      	movs	r2, #0
 80019b2:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019b4:	187b      	adds	r3, r7, r1
 80019b6:	2203      	movs	r2, #3
 80019b8:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 80019ba:	187b      	adds	r3, r7, r1
 80019bc:	2200      	movs	r2, #0
 80019be:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019c0:	187a      	adds	r2, r7, r1
 80019c2:	23a0      	movs	r3, #160	; 0xa0
 80019c4:	05db      	lsls	r3, r3, #23
 80019c6:	0011      	movs	r1, r2
 80019c8:	0018      	movs	r0, r3
 80019ca:	f000 fe2b 	bl	8002624 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80019ce:	46c0      	nop			; (mov r8, r8)
 80019d0:	46bd      	mov	sp, r7
 80019d2:	b009      	add	sp, #36	; 0x24
 80019d4:	bd90      	pop	{r4, r7, pc}
 80019d6:	46c0      	nop			; (mov r8, r8)
 80019d8:	40013000 	.word	0x40013000
 80019dc:	40021000 	.word	0x40021000

080019e0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80019e0:	b580      	push	{r7, lr}
 80019e2:	b082      	sub	sp, #8
 80019e4:	af00      	add	r7, sp, #0
 80019e6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	4a06      	ldr	r2, [pc, #24]	; (8001a08 <HAL_TIM_Base_MspInit+0x28>)
 80019ee:	4293      	cmp	r3, r2
 80019f0:	d105      	bne.n	80019fe <HAL_TIM_Base_MspInit+0x1e>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 80019f2:	4b06      	ldr	r3, [pc, #24]	; (8001a0c <HAL_TIM_Base_MspInit+0x2c>)
 80019f4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80019f6:	4b05      	ldr	r3, [pc, #20]	; (8001a0c <HAL_TIM_Base_MspInit+0x2c>)
 80019f8:	2110      	movs	r1, #16
 80019fa:	430a      	orrs	r2, r1
 80019fc:	639a      	str	r2, [r3, #56]	; 0x38
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 80019fe:	46c0      	nop			; (mov r8, r8)
 8001a00:	46bd      	mov	sp, r7
 8001a02:	b002      	add	sp, #8
 8001a04:	bd80      	pop	{r7, pc}
 8001a06:	46c0      	nop			; (mov r8, r8)
 8001a08:	40001000 	.word	0x40001000
 8001a0c:	40021000 	.word	0x40021000

08001a10 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001a10:	b580      	push	{r7, lr}
 8001a12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001a14:	e7fe      	b.n	8001a14 <NMI_Handler+0x4>

08001a16 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001a16:	b580      	push	{r7, lr}
 8001a18:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001a1a:	e7fe      	b.n	8001a1a <HardFault_Handler+0x4>

08001a1c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001a1c:	b580      	push	{r7, lr}
 8001a1e:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8001a20:	46c0      	nop			; (mov r8, r8)
 8001a22:	46bd      	mov	sp, r7
 8001a24:	bd80      	pop	{r7, pc}

08001a26 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001a26:	b580      	push	{r7, lr}
 8001a28:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001a2a:	46c0      	nop			; (mov r8, r8)
 8001a2c:	46bd      	mov	sp, r7
 8001a2e:	bd80      	pop	{r7, pc}

08001a30 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001a30:	b580      	push	{r7, lr}
 8001a32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001a34:	f000 f8e0 	bl	8001bf8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001a38:	46c0      	nop			; (mov r8, r8)
 8001a3a:	46bd      	mov	sp, r7
 8001a3c:	bd80      	pop	{r7, pc}

08001a3e <EXTI0_1_IRQHandler>:

/**
  * @brief This function handles EXTI line 0 and line 1 interrupts.
  */
void EXTI0_1_IRQHandler(void)
{
 8001a3e:	b580      	push	{r7, lr}
 8001a40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_1_IRQn 0 */

  /* USER CODE END EXTI0_1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Key_IN4_Pin);
 8001a42:	2002      	movs	r0, #2
 8001a44:	f000 ff9e 	bl	8002984 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_1_IRQn 1 */

  /* USER CODE END EXTI0_1_IRQn 1 */
}
 8001a48:	46c0      	nop			; (mov r8, r8)
 8001a4a:	46bd      	mov	sp, r7
 8001a4c:	bd80      	pop	{r7, pc}

08001a4e <EXTI2_3_IRQHandler>:

/**
  * @brief This function handles EXTI line 2 and line 3 interrupts.
  */
void EXTI2_3_IRQHandler(void)
{
 8001a4e:	b580      	push	{r7, lr}
 8001a50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_3_IRQn 0 */

  /* USER CODE END EXTI2_3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Key_IN2_Pin);
 8001a52:	2004      	movs	r0, #4
 8001a54:	f000 ff96 	bl	8002984 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_3_IRQn 1 */

  /* USER CODE END EXTI2_3_IRQn 1 */
}
 8001a58:	46c0      	nop			; (mov r8, r8)
 8001a5a:	46bd      	mov	sp, r7
 8001a5c:	bd80      	pop	{r7, pc}

08001a5e <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 8001a5e:	b580      	push	{r7, lr}
 8001a60:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(nRF_IRQ_Pin);
 8001a62:	2010      	movs	r0, #16
 8001a64:	f000 ff8e 	bl	8002984 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(Key_IN1_Pin);
 8001a68:	2380      	movs	r3, #128	; 0x80
 8001a6a:	015b      	lsls	r3, r3, #5
 8001a6c:	0018      	movs	r0, r3
 8001a6e:	f000 ff89 	bl	8002984 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(Key_IN3_Pin);
 8001a72:	2380      	movs	r3, #128	; 0x80
 8001a74:	019b      	lsls	r3, r3, #6
 8001a76:	0018      	movs	r0, r3
 8001a78:	f000 ff84 	bl	8002984 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 8001a7c:	46c0      	nop			; (mov r8, r8)
 8001a7e:	46bd      	mov	sp, r7
 8001a80:	bd80      	pop	{r7, pc}
	...

08001a84 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001a84:	b580      	push	{r7, lr}
 8001a86:	b086      	sub	sp, #24
 8001a88:	af00      	add	r7, sp, #0
 8001a8a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001a8c:	4a14      	ldr	r2, [pc, #80]	; (8001ae0 <_sbrk+0x5c>)
 8001a8e:	4b15      	ldr	r3, [pc, #84]	; (8001ae4 <_sbrk+0x60>)
 8001a90:	1ad3      	subs	r3, r2, r3
 8001a92:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001a94:	697b      	ldr	r3, [r7, #20]
 8001a96:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001a98:	4b13      	ldr	r3, [pc, #76]	; (8001ae8 <_sbrk+0x64>)
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	d102      	bne.n	8001aa6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001aa0:	4b11      	ldr	r3, [pc, #68]	; (8001ae8 <_sbrk+0x64>)
 8001aa2:	4a12      	ldr	r2, [pc, #72]	; (8001aec <_sbrk+0x68>)
 8001aa4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001aa6:	4b10      	ldr	r3, [pc, #64]	; (8001ae8 <_sbrk+0x64>)
 8001aa8:	681a      	ldr	r2, [r3, #0]
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	18d3      	adds	r3, r2, r3
 8001aae:	693a      	ldr	r2, [r7, #16]
 8001ab0:	429a      	cmp	r2, r3
 8001ab2:	d207      	bcs.n	8001ac4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001ab4:	f004 f964 	bl	8005d80 <__errno>
 8001ab8:	0003      	movs	r3, r0
 8001aba:	220c      	movs	r2, #12
 8001abc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001abe:	2301      	movs	r3, #1
 8001ac0:	425b      	negs	r3, r3
 8001ac2:	e009      	b.n	8001ad8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001ac4:	4b08      	ldr	r3, [pc, #32]	; (8001ae8 <_sbrk+0x64>)
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001aca:	4b07      	ldr	r3, [pc, #28]	; (8001ae8 <_sbrk+0x64>)
 8001acc:	681a      	ldr	r2, [r3, #0]
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	18d2      	adds	r2, r2, r3
 8001ad2:	4b05      	ldr	r3, [pc, #20]	; (8001ae8 <_sbrk+0x64>)
 8001ad4:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8001ad6:	68fb      	ldr	r3, [r7, #12]
}
 8001ad8:	0018      	movs	r0, r3
 8001ada:	46bd      	mov	sp, r7
 8001adc:	b006      	add	sp, #24
 8001ade:	bd80      	pop	{r7, pc}
 8001ae0:	20002000 	.word	0x20002000
 8001ae4:	00000400 	.word	0x00000400
 8001ae8:	2000023c 	.word	0x2000023c
 8001aec:	20000258 	.word	0x20000258

08001af0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001af0:	b580      	push	{r7, lr}
 8001af2:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001af4:	46c0      	nop			; (mov r8, r8)
 8001af6:	46bd      	mov	sp, r7
 8001af8:	bd80      	pop	{r7, pc}
	...

08001afc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 8001afc:	480d      	ldr	r0, [pc, #52]	; (8001b34 <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 8001afe:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001b00:	f7ff fff6 	bl	8001af0 <SystemInit>
  
/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001b04:	480c      	ldr	r0, [pc, #48]	; (8001b38 <LoopForever+0x6>)
  ldr r1, =_edata
 8001b06:	490d      	ldr	r1, [pc, #52]	; (8001b3c <LoopForever+0xa>)
  ldr r2, =_sidata
 8001b08:	4a0d      	ldr	r2, [pc, #52]	; (8001b40 <LoopForever+0xe>)
  movs r3, #0
 8001b0a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001b0c:	e002      	b.n	8001b14 <LoopCopyDataInit>

08001b0e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001b0e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001b10:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001b12:	3304      	adds	r3, #4

08001b14 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001b14:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001b16:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001b18:	d3f9      	bcc.n	8001b0e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001b1a:	4a0a      	ldr	r2, [pc, #40]	; (8001b44 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001b1c:	4c0a      	ldr	r4, [pc, #40]	; (8001b48 <LoopForever+0x16>)
  movs r3, #0
 8001b1e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001b20:	e001      	b.n	8001b26 <LoopFillZerobss>

08001b22 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001b22:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001b24:	3204      	adds	r2, #4

08001b26 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001b26:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001b28:	d3fb      	bcc.n	8001b22 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001b2a:	f004 f92f 	bl	8005d8c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001b2e:	f7ff fa39 	bl	8000fa4 <main>

08001b32 <LoopForever>:

LoopForever:
    b LoopForever
 8001b32:	e7fe      	b.n	8001b32 <LoopForever>
   ldr   r0, =_estack
 8001b34:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8001b38:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001b3c:	20000080 	.word	0x20000080
  ldr r2, =_sidata
 8001b40:	08006b90 	.word	0x08006b90
  ldr r2, =_sbss
 8001b44:	20000080 	.word	0x20000080
  ldr r4, =_ebss
 8001b48:	20000254 	.word	0x20000254

08001b4c <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001b4c:	e7fe      	b.n	8001b4c <ADC1_COMP_IRQHandler>
	...

08001b50 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001b50:	b580      	push	{r7, lr}
 8001b52:	b082      	sub	sp, #8
 8001b54:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001b56:	1dfb      	adds	r3, r7, #7
 8001b58:	2200      	movs	r2, #0
 8001b5a:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8001b5c:	4b0b      	ldr	r3, [pc, #44]	; (8001b8c <HAL_Init+0x3c>)
 8001b5e:	681a      	ldr	r2, [r3, #0]
 8001b60:	4b0a      	ldr	r3, [pc, #40]	; (8001b8c <HAL_Init+0x3c>)
 8001b62:	2140      	movs	r1, #64	; 0x40
 8001b64:	430a      	orrs	r2, r1
 8001b66:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001b68:	2003      	movs	r0, #3
 8001b6a:	f000 f811 	bl	8001b90 <HAL_InitTick>
 8001b6e:	1e03      	subs	r3, r0, #0
 8001b70:	d003      	beq.n	8001b7a <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 8001b72:	1dfb      	adds	r3, r7, #7
 8001b74:	2201      	movs	r2, #1
 8001b76:	701a      	strb	r2, [r3, #0]
 8001b78:	e001      	b.n	8001b7e <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001b7a:	f7ff fe7b 	bl	8001874 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001b7e:	1dfb      	adds	r3, r7, #7
 8001b80:	781b      	ldrb	r3, [r3, #0]
}
 8001b82:	0018      	movs	r0, r3
 8001b84:	46bd      	mov	sp, r7
 8001b86:	b002      	add	sp, #8
 8001b88:	bd80      	pop	{r7, pc}
 8001b8a:	46c0      	nop			; (mov r8, r8)
 8001b8c:	40022000 	.word	0x40022000

08001b90 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001b90:	b590      	push	{r4, r7, lr}
 8001b92:	b083      	sub	sp, #12
 8001b94:	af00      	add	r7, sp, #0
 8001b96:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001b98:	4b14      	ldr	r3, [pc, #80]	; (8001bec <HAL_InitTick+0x5c>)
 8001b9a:	681c      	ldr	r4, [r3, #0]
 8001b9c:	4b14      	ldr	r3, [pc, #80]	; (8001bf0 <HAL_InitTick+0x60>)
 8001b9e:	781b      	ldrb	r3, [r3, #0]
 8001ba0:	0019      	movs	r1, r3
 8001ba2:	23fa      	movs	r3, #250	; 0xfa
 8001ba4:	0098      	lsls	r0, r3, #2
 8001ba6:	f7fe fac1 	bl	800012c <__udivsi3>
 8001baa:	0003      	movs	r3, r0
 8001bac:	0019      	movs	r1, r3
 8001bae:	0020      	movs	r0, r4
 8001bb0:	f7fe fabc 	bl	800012c <__udivsi3>
 8001bb4:	0003      	movs	r3, r0
 8001bb6:	0018      	movs	r0, r3
 8001bb8:	f000 fd17 	bl	80025ea <HAL_SYSTICK_Config>
 8001bbc:	1e03      	subs	r3, r0, #0
 8001bbe:	d001      	beq.n	8001bc4 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8001bc0:	2301      	movs	r3, #1
 8001bc2:	e00f      	b.n	8001be4 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	2b03      	cmp	r3, #3
 8001bc8:	d80b      	bhi.n	8001be2 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001bca:	6879      	ldr	r1, [r7, #4]
 8001bcc:	2301      	movs	r3, #1
 8001bce:	425b      	negs	r3, r3
 8001bd0:	2200      	movs	r2, #0
 8001bd2:	0018      	movs	r0, r3
 8001bd4:	f000 fcd4 	bl	8002580 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001bd8:	4b06      	ldr	r3, [pc, #24]	; (8001bf4 <HAL_InitTick+0x64>)
 8001bda:	687a      	ldr	r2, [r7, #4]
 8001bdc:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001bde:	2300      	movs	r3, #0
 8001be0:	e000      	b.n	8001be4 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8001be2:	2301      	movs	r3, #1
}
 8001be4:	0018      	movs	r0, r3
 8001be6:	46bd      	mov	sp, r7
 8001be8:	b003      	add	sp, #12
 8001bea:	bd90      	pop	{r4, r7, pc}
 8001bec:	20000010 	.word	0x20000010
 8001bf0:	20000018 	.word	0x20000018
 8001bf4:	20000014 	.word	0x20000014

08001bf8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001bf8:	b580      	push	{r7, lr}
 8001bfa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001bfc:	4b05      	ldr	r3, [pc, #20]	; (8001c14 <HAL_IncTick+0x1c>)
 8001bfe:	781b      	ldrb	r3, [r3, #0]
 8001c00:	001a      	movs	r2, r3
 8001c02:	4b05      	ldr	r3, [pc, #20]	; (8001c18 <HAL_IncTick+0x20>)
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	18d2      	adds	r2, r2, r3
 8001c08:	4b03      	ldr	r3, [pc, #12]	; (8001c18 <HAL_IncTick+0x20>)
 8001c0a:	601a      	str	r2, [r3, #0]
}
 8001c0c:	46c0      	nop			; (mov r8, r8)
 8001c0e:	46bd      	mov	sp, r7
 8001c10:	bd80      	pop	{r7, pc}
 8001c12:	46c0      	nop			; (mov r8, r8)
 8001c14:	20000018 	.word	0x20000018
 8001c18:	20000240 	.word	0x20000240

08001c1c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001c1c:	b580      	push	{r7, lr}
 8001c1e:	af00      	add	r7, sp, #0
  return uwTick;
 8001c20:	4b02      	ldr	r3, [pc, #8]	; (8001c2c <HAL_GetTick+0x10>)
 8001c22:	681b      	ldr	r3, [r3, #0]
}
 8001c24:	0018      	movs	r0, r3
 8001c26:	46bd      	mov	sp, r7
 8001c28:	bd80      	pop	{r7, pc}
 8001c2a:	46c0      	nop			; (mov r8, r8)
 8001c2c:	20000240 	.word	0x20000240

08001c30 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001c30:	b580      	push	{r7, lr}
 8001c32:	b084      	sub	sp, #16
 8001c34:	af00      	add	r7, sp, #0
 8001c36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001c38:	f7ff fff0 	bl	8001c1c <HAL_GetTick>
 8001c3c:	0003      	movs	r3, r0
 8001c3e:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001c44:	68fb      	ldr	r3, [r7, #12]
 8001c46:	3301      	adds	r3, #1
 8001c48:	d005      	beq.n	8001c56 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001c4a:	4b0a      	ldr	r3, [pc, #40]	; (8001c74 <HAL_Delay+0x44>)
 8001c4c:	781b      	ldrb	r3, [r3, #0]
 8001c4e:	001a      	movs	r2, r3
 8001c50:	68fb      	ldr	r3, [r7, #12]
 8001c52:	189b      	adds	r3, r3, r2
 8001c54:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001c56:	46c0      	nop			; (mov r8, r8)
 8001c58:	f7ff ffe0 	bl	8001c1c <HAL_GetTick>
 8001c5c:	0002      	movs	r2, r0
 8001c5e:	68bb      	ldr	r3, [r7, #8]
 8001c60:	1ad3      	subs	r3, r2, r3
 8001c62:	68fa      	ldr	r2, [r7, #12]
 8001c64:	429a      	cmp	r2, r3
 8001c66:	d8f7      	bhi.n	8001c58 <HAL_Delay+0x28>
  {
  }
}
 8001c68:	46c0      	nop			; (mov r8, r8)
 8001c6a:	46c0      	nop			; (mov r8, r8)
 8001c6c:	46bd      	mov	sp, r7
 8001c6e:	b004      	add	sp, #16
 8001c70:	bd80      	pop	{r7, pc}
 8001c72:	46c0      	nop			; (mov r8, r8)
 8001c74:	20000018 	.word	0x20000018

08001c78 <HAL_SuspendTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_SuspendTick(void)
{
 8001c78:	b580      	push	{r7, lr}
 8001c7a:	af00      	add	r7, sp, #0
  /* Disable SysTick Interrupt */
  SysTick->CTRL &= ~SysTick_CTRL_TICKINT_Msk;
 8001c7c:	4b04      	ldr	r3, [pc, #16]	; (8001c90 <HAL_SuspendTick+0x18>)
 8001c7e:	681a      	ldr	r2, [r3, #0]
 8001c80:	4b03      	ldr	r3, [pc, #12]	; (8001c90 <HAL_SuspendTick+0x18>)
 8001c82:	2102      	movs	r1, #2
 8001c84:	438a      	bics	r2, r1
 8001c86:	601a      	str	r2, [r3, #0]
}
 8001c88:	46c0      	nop			; (mov r8, r8)
 8001c8a:	46bd      	mov	sp, r7
 8001c8c:	bd80      	pop	{r7, pc}
 8001c8e:	46c0      	nop			; (mov r8, r8)
 8001c90:	e000e010 	.word	0xe000e010

08001c94 <HAL_ResumeTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_ResumeTick(void)
{
 8001c94:	b580      	push	{r7, lr}
 8001c96:	af00      	add	r7, sp, #0
  /* Enable SysTick Interrupt */
  SysTick->CTRL  |= SysTick_CTRL_TICKINT_Msk;
 8001c98:	4b04      	ldr	r3, [pc, #16]	; (8001cac <HAL_ResumeTick+0x18>)
 8001c9a:	681a      	ldr	r2, [r3, #0]
 8001c9c:	4b03      	ldr	r3, [pc, #12]	; (8001cac <HAL_ResumeTick+0x18>)
 8001c9e:	2102      	movs	r1, #2
 8001ca0:	430a      	orrs	r2, r1
 8001ca2:	601a      	str	r2, [r3, #0]
}
 8001ca4:	46c0      	nop			; (mov r8, r8)
 8001ca6:	46bd      	mov	sp, r7
 8001ca8:	bd80      	pop	{r7, pc}
 8001caa:	46c0      	nop			; (mov r8, r8)
 8001cac:	e000e010 	.word	0xe000e010

08001cb0 <HAL_ADC_Init>:
  *         function "HAL_ADCEx_EnableVREFINTTempSensor()" must be called similarilly.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001cb0:	b580      	push	{r7, lr}
 8001cb2:	b082      	sub	sp, #8
 8001cb4:	af00      	add	r7, sp, #0
 8001cb6:	6078      	str	r0, [r7, #4]

  /* Check ADC handle */
  if (hadc == NULL)
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d101      	bne.n	8001cc2 <HAL_ADC_Init+0x12>
  {
    return HAL_ERROR;
 8001cbe:	2301      	movs	r3, #1
 8001cc0:	e159      	b.n	8001f76 <HAL_ADC_Init+0x2c6>
  /* Refer to header of this file for more details on clock enabling procedure*/

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d10a      	bne.n	8001ce0 <HAL_ADC_Init+0x30>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	2200      	movs	r2, #0
 8001cce:	659a      	str	r2, [r3, #88]	; 0x58

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	2250      	movs	r2, #80	; 0x50
 8001cd4:	2100      	movs	r1, #0
 8001cd6:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	0018      	movs	r0, r3
 8001cdc:	f7ff fdde 	bl	800189c <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ce4:	2210      	movs	r2, #16
 8001ce6:	4013      	ands	r3, r2
 8001ce8:	2b10      	cmp	r3, #16
 8001cea:	d005      	beq.n	8001cf8 <HAL_ADC_Init+0x48>
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET))
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	689b      	ldr	r3, [r3, #8]
 8001cf2:	2204      	movs	r2, #4
 8001cf4:	4013      	ands	r3, r2
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 8001cf6:	d00b      	beq.n	8001d10 <HAL_ADC_Init+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001cfc:	2210      	movs	r2, #16
 8001cfe:	431a      	orrs	r2, r3
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	2250      	movs	r2, #80	; 0x50
 8001d08:	2100      	movs	r1, #0
 8001d0a:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 8001d0c:	2301      	movs	r3, #1
 8001d0e:	e132      	b.n	8001f76 <HAL_ADC_Init+0x2c6>
  }

  /* Set ADC state */
  ADC_STATE_CLR_SET(hadc->State,
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d14:	4a9a      	ldr	r2, [pc, #616]	; (8001f80 <HAL_ADC_Init+0x2d0>)
 8001d16:	4013      	ands	r3, r2
 8001d18:	2202      	movs	r2, #2
 8001d1a:	431a      	orrs	r2, r3
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	655a      	str	r2, [r3, #84]	; 0x54
  /* Parameters update conditioned to ADC state:                            */
  /* Parameters that can be updated only when ADC is disabled:              */
  /*  - ADC clock mode                                                      */
  /*  - ADC clock prescaler                                                 */
  /*  - ADC Resolution                                                      */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	689b      	ldr	r3, [r3, #8]
 8001d26:	2203      	movs	r2, #3
 8001d28:	4013      	ands	r3, r2
 8001d2a:	2b01      	cmp	r3, #1
 8001d2c:	d108      	bne.n	8001d40 <HAL_ADC_Init+0x90>
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	2201      	movs	r2, #1
 8001d36:	4013      	ands	r3, r2
 8001d38:	2b01      	cmp	r3, #1
 8001d3a:	d101      	bne.n	8001d40 <HAL_ADC_Init+0x90>
 8001d3c:	2301      	movs	r3, #1
 8001d3e:	e000      	b.n	8001d42 <HAL_ADC_Init+0x92>
 8001d40:	2300      	movs	r3, #0
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d149      	bne.n	8001dda <HAL_ADC_Init+0x12a>
    /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
    /*     (set into HAL_ADC_ConfigChannel() )                              */

    /* Configuration of ADC clock: clock source PCLK or asynchronous with
    selectable prescaler */
    __HAL_ADC_CLOCK_PRESCALER(hadc);
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	685a      	ldr	r2, [r3, #4]
 8001d4a:	23c0      	movs	r3, #192	; 0xc0
 8001d4c:	061b      	lsls	r3, r3, #24
 8001d4e:	429a      	cmp	r2, r3
 8001d50:	d00b      	beq.n	8001d6a <HAL_ADC_Init+0xba>
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	685a      	ldr	r2, [r3, #4]
 8001d56:	2380      	movs	r3, #128	; 0x80
 8001d58:	05db      	lsls	r3, r3, #23
 8001d5a:	429a      	cmp	r2, r3
 8001d5c:	d005      	beq.n	8001d6a <HAL_ADC_Init+0xba>
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	685a      	ldr	r2, [r3, #4]
 8001d62:	2380      	movs	r3, #128	; 0x80
 8001d64:	061b      	lsls	r3, r3, #24
 8001d66:	429a      	cmp	r2, r3
 8001d68:	d111      	bne.n	8001d8e <HAL_ADC_Init+0xde>
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	691a      	ldr	r2, [r3, #16]
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	0092      	lsls	r2, r2, #2
 8001d76:	0892      	lsrs	r2, r2, #2
 8001d78:	611a      	str	r2, [r3, #16]
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	6919      	ldr	r1, [r3, #16]
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	685a      	ldr	r2, [r3, #4]
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	430a      	orrs	r2, r1
 8001d8a:	611a      	str	r2, [r3, #16]
 8001d8c:	e014      	b.n	8001db8 <HAL_ADC_Init+0x108>
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	691a      	ldr	r2, [r3, #16]
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	0092      	lsls	r2, r2, #2
 8001d9a:	0892      	lsrs	r2, r2, #2
 8001d9c:	611a      	str	r2, [r3, #16]
 8001d9e:	4b79      	ldr	r3, [pc, #484]	; (8001f84 <HAL_ADC_Init+0x2d4>)
 8001da0:	681a      	ldr	r2, [r3, #0]
 8001da2:	4b78      	ldr	r3, [pc, #480]	; (8001f84 <HAL_ADC_Init+0x2d4>)
 8001da4:	4978      	ldr	r1, [pc, #480]	; (8001f88 <HAL_ADC_Init+0x2d8>)
 8001da6:	400a      	ands	r2, r1
 8001da8:	601a      	str	r2, [r3, #0]
 8001daa:	4b76      	ldr	r3, [pc, #472]	; (8001f84 <HAL_ADC_Init+0x2d4>)
 8001dac:	6819      	ldr	r1, [r3, #0]
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	685a      	ldr	r2, [r3, #4]
 8001db2:	4b74      	ldr	r3, [pc, #464]	; (8001f84 <HAL_ADC_Init+0x2d4>)
 8001db4:	430a      	orrs	r2, r1
 8001db6:	601a      	str	r2, [r3, #0]

    /* Configuration of ADC:                                                */
    /*  - Resolution                                                        */
    hadc->Instance->CFGR1 &= ~(ADC_CFGR1_RES);
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	68da      	ldr	r2, [r3, #12]
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	2118      	movs	r1, #24
 8001dc4:	438a      	bics	r2, r1
 8001dc6:	60da      	str	r2, [r3, #12]
    hadc->Instance->CFGR1 |= hadc->Init.Resolution;
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	68d9      	ldr	r1, [r3, #12]
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	689a      	ldr	r2, [r3, #8]
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	430a      	orrs	r2, r1
 8001dd8:	60da      	str	r2, [r3, #12]
  }

  /* Set the Low Frequency mode */
  ADC->CCR &= (uint32_t)~ADC_CCR_LFMEN;
 8001dda:	4b6a      	ldr	r3, [pc, #424]	; (8001f84 <HAL_ADC_Init+0x2d4>)
 8001ddc:	681a      	ldr	r2, [r3, #0]
 8001dde:	4b69      	ldr	r3, [pc, #420]	; (8001f84 <HAL_ADC_Init+0x2d4>)
 8001de0:	496a      	ldr	r1, [pc, #424]	; (8001f8c <HAL_ADC_Init+0x2dc>)
 8001de2:	400a      	ands	r2, r1
 8001de4:	601a      	str	r2, [r3, #0]
  ADC->CCR |= __HAL_ADC_CCR_LOWFREQUENCY(hadc->Init.LowPowerFrequencyMode);
 8001de6:	4b67      	ldr	r3, [pc, #412]	; (8001f84 <HAL_ADC_Init+0x2d4>)
 8001de8:	6819      	ldr	r1, [r3, #0]
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001dee:	065a      	lsls	r2, r3, #25
 8001df0:	4b64      	ldr	r3, [pc, #400]	; (8001f84 <HAL_ADC_Init+0x2d4>)
 8001df2:	430a      	orrs	r2, r1
 8001df4:	601a      	str	r2, [r3, #0]

  /* Enable voltage regulator (if disabled at this step) */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN))
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	689a      	ldr	r2, [r3, #8]
 8001dfc:	2380      	movs	r3, #128	; 0x80
 8001dfe:	055b      	lsls	r3, r3, #21
 8001e00:	4013      	ands	r3, r2
 8001e02:	d108      	bne.n	8001e16 <HAL_ADC_Init+0x166>
  {
    /* Set ADVREGEN bit */
    hadc->Instance->CR |= ADC_CR_ADVREGEN;
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	689a      	ldr	r2, [r3, #8]
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	2180      	movs	r1, #128	; 0x80
 8001e10:	0549      	lsls	r1, r1, #21
 8001e12:	430a      	orrs	r2, r1
 8001e14:	609a      	str	r2, [r3, #8]
  /*  - Continuous conversion mode                                            */
  /*  - DMA continuous request                                                */
  /*  - Overrun                                                               */
  /*  - AutoDelay feature                                                     */
  /*  - Discontinuous mode                                                    */
  hadc->Instance->CFGR1 &= ~(ADC_CFGR1_ALIGN   |
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	68da      	ldr	r2, [r3, #12]
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	495b      	ldr	r1, [pc, #364]	; (8001f90 <HAL_ADC_Init+0x2e0>)
 8001e22:	400a      	ands	r2, r1
 8001e24:	60da      	str	r2, [r3, #12]
                             ADC_CFGR1_OVRMOD  |
                             ADC_CFGR1_AUTDLY  |
                             ADC_CFGR1_AUTOFF  |
                             ADC_CFGR1_DISCEN);

  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	68d9      	ldr	r1, [r3, #12]
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	68da      	ldr	r2, [r3, #12]
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	691b      	ldr	r3, [r3, #16]
 8001e34:	2b02      	cmp	r3, #2
 8001e36:	d101      	bne.n	8001e3c <HAL_ADC_Init+0x18c>
 8001e38:	2304      	movs	r3, #4
 8001e3a:	e000      	b.n	8001e3e <HAL_ADC_Init+0x18e>
 8001e3c:	2300      	movs	r3, #0
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8001e3e:	431a      	orrs	r2, r3
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	2020      	movs	r0, #32
 8001e44:	5c1b      	ldrb	r3, [r3, r0]
 8001e46:	035b      	lsls	r3, r3, #13
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 8001e48:	431a      	orrs	r2, r3
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	202c      	movs	r0, #44	; 0x2c
 8001e4e:	5c1b      	ldrb	r3, [r3, r0]
 8001e50:	005b      	lsls	r3, r3, #1
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8001e52:	431a      	orrs	r2, r3
                            hadc->Init.Overrun                               |
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 8001e58:	431a      	orrs	r2, r3
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	699b      	ldr	r3, [r3, #24]
 8001e5e:	039b      	lsls	r3, r3, #14
                            hadc->Init.Overrun                               |
 8001e60:	431a      	orrs	r2, r3
                            __HAL_ADC_CFGR1_AUTOFF(hadc->Init.LowPowerAutoPowerOff));
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	69db      	ldr	r3, [r3, #28]
 8001e66:	03db      	lsls	r3, r3, #15
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 8001e68:	431a      	orrs	r2, r3
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	430a      	orrs	r2, r1
 8001e70:	60da      	str	r2, [r3, #12]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001e76:	23c2      	movs	r3, #194	; 0xc2
 8001e78:	33ff      	adds	r3, #255	; 0xff
 8001e7a:	429a      	cmp	r2, r3
 8001e7c:	d00b      	beq.n	8001e96 <HAL_ADC_Init+0x1e6>
  {
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	68d9      	ldr	r1, [r3, #12]
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	6a5a      	ldr	r2, [r3, #36]	; 0x24
                             hadc->Init.ExternalTrigConvEdge;
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 8001e8c:	431a      	orrs	r2, r3
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	430a      	orrs	r2, r1
 8001e94:	60da      	str	r2, [r3, #12]
  }

  /* Enable discontinuous mode only if continuous mode is disabled */
  if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	2221      	movs	r2, #33	; 0x21
 8001e9a:	5c9b      	ldrb	r3, [r3, r2]
 8001e9c:	2b01      	cmp	r3, #1
 8001e9e:	d11a      	bne.n	8001ed6 <HAL_ADC_Init+0x226>
  {
    if (hadc->Init.ContinuousConvMode == DISABLE)
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	2220      	movs	r2, #32
 8001ea4:	5c9b      	ldrb	r3, [r3, r2]
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d109      	bne.n	8001ebe <HAL_ADC_Init+0x20e>
    {
      /* Enable the selected ADC group regular discontinuous mode */
      hadc->Instance->CFGR1 |= (ADC_CFGR1_DISCEN);
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	68da      	ldr	r2, [r3, #12]
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	2180      	movs	r1, #128	; 0x80
 8001eb6:	0249      	lsls	r1, r1, #9
 8001eb8:	430a      	orrs	r2, r1
 8001eba:	60da      	str	r2, [r3, #12]
 8001ebc:	e00b      	b.n	8001ed6 <HAL_ADC_Init+0x226>
      /* ADC regular group discontinuous was intended to be enabled,        */
      /* but ADC regular group modes continuous and sequencer discontinuous */
      /* cannot be enabled simultaneously.                                  */

      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ec2:	2220      	movs	r2, #32
 8001ec4:	431a      	orrs	r2, r3
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ece:	2201      	movs	r2, #1
 8001ed0:	431a      	orrs	r2, r3
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	659a      	str	r2, [r3, #88]	; 0x58
    }
  }

  if (hadc->Init.OversamplingMode == ENABLE)
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001eda:	2b01      	cmp	r3, #1
 8001edc:	d11f      	bne.n	8001f1e <HAL_ADC_Init+0x26e>
    /* Configuration of Oversampler:                                          */
    /*  - Oversampling Ratio                                                  */
    /*  - Right bit shift                                                     */
    /*  - Triggered mode                                                      */

    hadc->Instance->CFGR2 &= ~(ADC_CFGR2_OVSR |
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	691a      	ldr	r2, [r3, #16]
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	492a      	ldr	r1, [pc, #168]	; (8001f94 <HAL_ADC_Init+0x2e4>)
 8001eea:	400a      	ands	r2, r1
 8001eec:	611a      	str	r2, [r3, #16]
                               ADC_CFGR2_OVSS |
                               ADC_CFGR2_TOVS);

    hadc->Instance->CFGR2 |= (hadc->Init.Oversample.Ratio         |
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	6919      	ldr	r1, [r3, #16]
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
                              hadc->Init.Oversample.RightBitShift             |
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    hadc->Instance->CFGR2 |= (hadc->Init.Oversample.Ratio         |
 8001efc:	431a      	orrs	r2, r3
                              hadc->Init.Oversample.TriggeredMode);
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                              hadc->Init.Oversample.RightBitShift             |
 8001f02:	431a      	orrs	r2, r3
    hadc->Instance->CFGR2 |= (hadc->Init.Oversample.Ratio         |
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	430a      	orrs	r2, r1
 8001f0a:	611a      	str	r2, [r3, #16]

    /* Enable OverSampling mode */
    hadc->Instance->CFGR2 |= ADC_CFGR2_OVSE;
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	691a      	ldr	r2, [r3, #16]
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	2101      	movs	r1, #1
 8001f18:	430a      	orrs	r2, r1
 8001f1a:	611a      	str	r2, [r3, #16]
 8001f1c:	e00e      	b.n	8001f3c <HAL_ADC_Init+0x28c>
  }
  else
  {
    if (HAL_IS_BIT_SET(hadc->Instance->CFGR2, ADC_CFGR2_OVSE))
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	691b      	ldr	r3, [r3, #16]
 8001f24:	2201      	movs	r2, #1
 8001f26:	4013      	ands	r3, r2
 8001f28:	2b01      	cmp	r3, #1
 8001f2a:	d107      	bne.n	8001f3c <HAL_ADC_Init+0x28c>
    {
      /* Disable OverSampling mode if needed */
      hadc->Instance->CFGR2 &= ~ADC_CFGR2_OVSE;
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	691a      	ldr	r2, [r3, #16]
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	2101      	movs	r1, #1
 8001f38:	438a      	bics	r2, r1
 8001f3a:	611a      	str	r2, [r3, #16]
    }
  }

  /* Clear the old sampling time */
  hadc->Instance->SMPR &= (uint32_t)(~ADC_SMPR_SMPR);
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	695a      	ldr	r2, [r3, #20]
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	2107      	movs	r1, #7
 8001f48:	438a      	bics	r2, r1
 8001f4a:	615a      	str	r2, [r3, #20]

  /* Set the new sample time */
  hadc->Instance->SMPR |= hadc->Init.SamplingTime;
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	6959      	ldr	r1, [r3, #20]
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	430a      	orrs	r2, r1
 8001f5c:	615a      	str	r2, [r3, #20]

  /* Clear ADC error code */
  ADC_CLEAR_ERRORCODE(hadc);
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	2200      	movs	r2, #0
 8001f62:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set the ADC state */
  ADC_STATE_CLR_SET(hadc->State,
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f68:	2203      	movs	r2, #3
 8001f6a:	4393      	bics	r3, r2
 8001f6c:	2201      	movs	r2, #1
 8001f6e:	431a      	orrs	r2, r3
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	655a      	str	r2, [r3, #84]	; 0x54
                    HAL_ADC_STATE_BUSY_INTERNAL,
                    HAL_ADC_STATE_READY);


  /* Return function status */
  return HAL_OK;
 8001f74:	2300      	movs	r3, #0
}
 8001f76:	0018      	movs	r0, r3
 8001f78:	46bd      	mov	sp, r7
 8001f7a:	b002      	add	sp, #8
 8001f7c:	bd80      	pop	{r7, pc}
 8001f7e:	46c0      	nop			; (mov r8, r8)
 8001f80:	fffffefd 	.word	0xfffffefd
 8001f84:	40012708 	.word	0x40012708
 8001f88:	ffc3ffff 	.word	0xffc3ffff
 8001f8c:	fdffffff 	.word	0xfdffffff
 8001f90:	fffe0219 	.word	0xfffe0219
 8001f94:	fffffc03 	.word	0xfffffc03

08001f98 <HAL_ADC_Start>:
  * @note   Interruptions enabled in this function: None.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8001f98:	b590      	push	{r4, r7, lr}
 8001f9a:	b085      	sub	sp, #20
 8001f9c:	af00      	add	r7, sp, #0
 8001f9e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001fa0:	230f      	movs	r3, #15
 8001fa2:	18fb      	adds	r3, r7, r3
 8001fa4:	2200      	movs	r2, #0
 8001fa6:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	689b      	ldr	r3, [r3, #8]
 8001fae:	2204      	movs	r2, #4
 8001fb0:	4013      	ands	r3, r2
 8001fb2:	d138      	bne.n	8002026 <HAL_ADC_Start+0x8e>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	2250      	movs	r2, #80	; 0x50
 8001fb8:	5c9b      	ldrb	r3, [r3, r2]
 8001fba:	2b01      	cmp	r3, #1
 8001fbc:	d101      	bne.n	8001fc2 <HAL_ADC_Start+0x2a>
 8001fbe:	2302      	movs	r3, #2
 8001fc0:	e038      	b.n	8002034 <HAL_ADC_Start+0x9c>
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	2250      	movs	r2, #80	; 0x50
 8001fc6:	2101      	movs	r1, #1
 8001fc8:	5499      	strb	r1, [r3, r2]

    /* Enable the ADC peripheral */
    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware.                                   */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	69db      	ldr	r3, [r3, #28]
 8001fce:	2b01      	cmp	r3, #1
 8001fd0:	d007      	beq.n	8001fe2 <HAL_ADC_Start+0x4a>
    {
      tmp_hal_status = ADC_Enable(hadc);
 8001fd2:	230f      	movs	r3, #15
 8001fd4:	18fc      	adds	r4, r7, r3
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	0018      	movs	r0, r3
 8001fda:	f000 f95f 	bl	800229c <ADC_Enable>
 8001fde:	0003      	movs	r3, r0
 8001fe0:	7023      	strb	r3, [r4, #0]
    }

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8001fe2:	230f      	movs	r3, #15
 8001fe4:	18fb      	adds	r3, r7, r3
 8001fe6:	781b      	ldrb	r3, [r3, #0]
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d120      	bne.n	800202e <HAL_ADC_Start+0x96>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ff0:	4a12      	ldr	r2, [pc, #72]	; (800203c <HAL_ADC_Start+0xa4>)
 8001ff2:	4013      	ands	r3, r2
 8001ff4:	2280      	movs	r2, #128	; 0x80
 8001ff6:	0052      	lsls	r2, r2, #1
 8001ff8:	431a      	orrs	r2, r3
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	655a      	str	r2, [r3, #84]	; 0x54
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);

      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	2200      	movs	r2, #0
 8002002:	659a      	str	r2, [r3, #88]	; 0x58

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	2250      	movs	r2, #80	; 0x50
 8002008:	2100      	movs	r1, #0
 800200a:	5499      	strb	r1, [r3, r2]

      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	221c      	movs	r2, #28
 8002012:	601a      	str	r2, [r3, #0]

      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      hadc->Instance->CR |= ADC_CR_ADSTART;
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	689a      	ldr	r2, [r3, #8]
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	2104      	movs	r1, #4
 8002020:	430a      	orrs	r2, r1
 8002022:	609a      	str	r2, [r3, #8]
 8002024:	e003      	b.n	800202e <HAL_ADC_Start+0x96>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8002026:	230f      	movs	r3, #15
 8002028:	18fb      	adds	r3, r7, r3
 800202a:	2202      	movs	r2, #2
 800202c:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return tmp_hal_status;
 800202e:	230f      	movs	r3, #15
 8002030:	18fb      	adds	r3, r7, r3
 8002032:	781b      	ldrb	r3, [r3, #0]
}
 8002034:	0018      	movs	r0, r3
 8002036:	46bd      	mov	sp, r7
 8002038:	b005      	add	sp, #20
 800203a:	bd90      	pop	{r4, r7, pc}
 800203c:	fffff0fe 	.word	0xfffff0fe

08002040 <HAL_ADC_PollForConversion>:
  * @param  hadc ADC handle
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8002040:	b580      	push	{r7, lr}
 8002042:	b084      	sub	sp, #16
 8002044:	af00      	add	r7, sp, #0
 8002046:	6078      	str	r0, [r7, #4]
 8002048:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800204a:	2300      	movs	r3, #0
 800204c:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_Flag_EOC   = 0x00;
 800204e:	2300      	movs	r3, #0
 8002050:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	695b      	ldr	r3, [r3, #20]
 8002056:	2b08      	cmp	r3, #8
 8002058:	d102      	bne.n	8002060 <HAL_ADC_PollForConversion+0x20>
  {
    tmp_Flag_EOC = ADC_FLAG_EOS;
 800205a:	2308      	movs	r3, #8
 800205c:	60fb      	str	r3, [r7, #12]
 800205e:	e014      	b.n	800208a <HAL_ADC_PollForConversion+0x4a>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if (HAL_IS_BIT_SET(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN))
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	68db      	ldr	r3, [r3, #12]
 8002066:	2201      	movs	r2, #1
 8002068:	4013      	ands	r3, r2
 800206a:	2b01      	cmp	r3, #1
 800206c:	d10b      	bne.n	8002086 <HAL_ADC_PollForConversion+0x46>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002072:	2220      	movs	r2, #32
 8002074:	431a      	orrs	r2, r3
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	655a      	str	r2, [r3, #84]	; 0x54

      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	2250      	movs	r2, #80	; 0x50
 800207e:	2100      	movs	r1, #0
 8002080:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 8002082:	2301      	movs	r3, #1
 8002084:	e072      	b.n	800216c <HAL_ADC_PollForConversion+0x12c>
    }
    else
    {
      tmp_Flag_EOC = (ADC_FLAG_EOC | ADC_FLAG_EOS);
 8002086:	230c      	movs	r3, #12
 8002088:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 800208a:	f7ff fdc7 	bl	8001c1c <HAL_GetTick>
 800208e:	0003      	movs	r3, r0
 8002090:	60bb      	str	r3, [r7, #8]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while (HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8002092:	e01f      	b.n	80020d4 <HAL_ADC_PollForConversion+0x94>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8002094:	683b      	ldr	r3, [r7, #0]
 8002096:	3301      	adds	r3, #1
 8002098:	d01c      	beq.n	80020d4 <HAL_ADC_PollForConversion+0x94>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 800209a:	683b      	ldr	r3, [r7, #0]
 800209c:	2b00      	cmp	r3, #0
 800209e:	d007      	beq.n	80020b0 <HAL_ADC_PollForConversion+0x70>
 80020a0:	f7ff fdbc 	bl	8001c1c <HAL_GetTick>
 80020a4:	0002      	movs	r2, r0
 80020a6:	68bb      	ldr	r3, [r7, #8]
 80020a8:	1ad3      	subs	r3, r2, r3
 80020aa:	683a      	ldr	r2, [r7, #0]
 80020ac:	429a      	cmp	r2, r3
 80020ae:	d211      	bcs.n	80020d4 <HAL_ADC_PollForConversion+0x94>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	68fa      	ldr	r2, [r7, #12]
 80020b8:	4013      	ands	r3, r2
 80020ba:	d10b      	bne.n	80020d4 <HAL_ADC_PollForConversion+0x94>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80020c0:	2204      	movs	r2, #4
 80020c2:	431a      	orrs	r2, r3
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	655a      	str	r2, [r3, #84]	; 0x54

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	2250      	movs	r2, #80	; 0x50
 80020cc:	2100      	movs	r1, #0
 80020ce:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 80020d0:	2303      	movs	r3, #3
 80020d2:	e04b      	b.n	800216c <HAL_ADC_PollForConversion+0x12c>
  while (HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	68fa      	ldr	r2, [r7, #12]
 80020dc:	4013      	ands	r3, r2
 80020de:	d0d9      	beq.n	8002094 <HAL_ADC_PollForConversion+0x54>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80020e4:	2280      	movs	r2, #128	; 0x80
 80020e6:	0092      	lsls	r2, r2, #2
 80020e8:	431a      	orrs	r2, r3
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	655a      	str	r2, [r3, #84]	; 0x54

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	68da      	ldr	r2, [r3, #12]
 80020f4:	23c0      	movs	r3, #192	; 0xc0
 80020f6:	011b      	lsls	r3, r3, #4
 80020f8:	4013      	ands	r3, r2
 80020fa:	d12e      	bne.n	800215a <HAL_ADC_PollForConversion+0x11a>
      (hadc->Init.ContinuousConvMode == DISABLE))
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	2220      	movs	r2, #32
 8002100:	5c9b      	ldrb	r3, [r3, r2]
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8002102:	2b00      	cmp	r3, #0
 8002104:	d129      	bne.n	800215a <HAL_ADC_PollForConversion+0x11a>
  {
    /* If End of Sequence is reached, disable interrupts */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	2208      	movs	r2, #8
 800210e:	4013      	ands	r3, r2
 8002110:	2b08      	cmp	r3, #8
 8002112:	d122      	bne.n	800215a <HAL_ADC_PollForConversion+0x11a>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	689b      	ldr	r3, [r3, #8]
 800211a:	2204      	movs	r2, #4
 800211c:	4013      	ands	r3, r2
 800211e:	d110      	bne.n	8002142 <HAL_ADC_PollForConversion+0x102>
      {
        /* Disable ADC end of single conversion interrupt on group regular */
        /* Note: Overrun interrupt was enabled with EOC interrupt in          */
        /* HAL_Start_IT(), but is not disabled here because can be used       */
        /* by overrun IRQ process below.                                      */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	685a      	ldr	r2, [r3, #4]
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	210c      	movs	r1, #12
 800212c:	438a      	bics	r2, r1
 800212e:	605a      	str	r2, [r3, #4]

        /* Set ADC state */
        ADC_STATE_CLR_SET(hadc->State,
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002134:	4a0f      	ldr	r2, [pc, #60]	; (8002174 <HAL_ADC_PollForConversion+0x134>)
 8002136:	4013      	ands	r3, r2
 8002138:	2201      	movs	r2, #1
 800213a:	431a      	orrs	r2, r3
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	655a      	str	r2, [r3, #84]	; 0x54
 8002140:	e00b      	b.n	800215a <HAL_ADC_PollForConversion+0x11a>
                          HAL_ADC_STATE_READY);
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002146:	2220      	movs	r2, #32
 8002148:	431a      	orrs	r2, r3
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	655a      	str	r2, [r3, #84]	; 0x54

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002152:	2201      	movs	r2, #1
 8002154:	431a      	orrs	r2, r3
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	659a      	str	r2, [r3, #88]	; 0x58
  }

  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	699b      	ldr	r3, [r3, #24]
 800215e:	2b00      	cmp	r3, #0
 8002160:	d103      	bne.n	800216a <HAL_ADC_PollForConversion+0x12a>
  {
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	220c      	movs	r2, #12
 8002168:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800216a:	2300      	movs	r3, #0
}
 800216c:	0018      	movs	r0, r3
 800216e:	46bd      	mov	sp, r7
 8002170:	b004      	add	sp, #16
 8002172:	bd80      	pop	{r7, pc}
 8002174:	fffffefe 	.word	0xfffffefe

08002178 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8002178:	b580      	push	{r7, lr}
 800217a:	b082      	sub	sp, #8
 800217c:	af00      	add	r7, sp, #0
 800217e:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8002186:	0018      	movs	r0, r3
 8002188:	46bd      	mov	sp, r7
 800218a:	b002      	add	sp, #8
 800218c:	bd80      	pop	{r7, pc}
	...

08002190 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8002190:	b580      	push	{r7, lr}
 8002192:	b082      	sub	sp, #8
 8002194:	af00      	add	r7, sp, #0
 8002196:	6078      	str	r0, [r7, #4]
 8002198:	6039      	str	r1, [r7, #0]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));

  /* Process locked */
  __HAL_LOCK(hadc);
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	2250      	movs	r2, #80	; 0x50
 800219e:	5c9b      	ldrb	r3, [r3, r2]
 80021a0:	2b01      	cmp	r3, #1
 80021a2:	d101      	bne.n	80021a8 <HAL_ADC_ConfigChannel+0x18>
 80021a4:	2302      	movs	r3, #2
 80021a6:	e06c      	b.n	8002282 <HAL_ADC_ConfigChannel+0xf2>
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	2250      	movs	r2, #80	; 0x50
 80021ac:	2101      	movs	r1, #1
 80021ae:	5499      	strb	r1, [r3, r2]
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Management of internal measurement channels: Vbat/VrefInt/TempSensor  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET)
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	689b      	ldr	r3, [r3, #8]
 80021b6:	2204      	movs	r2, #4
 80021b8:	4013      	ands	r3, r2
 80021ba:	d00b      	beq.n	80021d4 <HAL_ADC_ConfigChannel+0x44>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80021c0:	2220      	movs	r2, #32
 80021c2:	431a      	orrs	r2, r3
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	655a      	str	r2, [r3, #84]	; 0x54
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	2250      	movs	r2, #80	; 0x50
 80021cc:	2100      	movs	r1, #0
 80021ce:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 80021d0:	2301      	movs	r3, #1
 80021d2:	e056      	b.n	8002282 <HAL_ADC_ConfigChannel+0xf2>
  }

  if (sConfig->Rank != ADC_RANK_NONE)
 80021d4:	683b      	ldr	r3, [r7, #0]
 80021d6:	685b      	ldr	r3, [r3, #4]
 80021d8:	4a2c      	ldr	r2, [pc, #176]	; (800228c <HAL_ADC_ConfigChannel+0xfc>)
 80021da:	4293      	cmp	r3, r2
 80021dc:	d028      	beq.n	8002230 <HAL_ADC_ConfigChannel+0xa0>
  {
    /* Enable selected channels */
    hadc->Instance->CHSELR |= (uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK);
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	6a99      	ldr	r1, [r3, #40]	; 0x28
 80021e4:	683b      	ldr	r3, [r7, #0]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	035b      	lsls	r3, r3, #13
 80021ea:	0b5a      	lsrs	r2, r3, #13
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	430a      	orrs	r2, r1
 80021f2:	629a      	str	r2, [r3, #40]	; 0x28
    /* dedicated internal buffers and path.                                     */

#if defined(ADC_CCR_TSEN)
    /* If Temperature sensor channel is selected, then enable the internal      */
    /* buffers and path  */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 80021f4:	683b      	ldr	r3, [r7, #0]
 80021f6:	681a      	ldr	r2, [r3, #0]
 80021f8:	2380      	movs	r3, #128	; 0x80
 80021fa:	02db      	lsls	r3, r3, #11
 80021fc:	4013      	ands	r3, r2
 80021fe:	d009      	beq.n	8002214 <HAL_ADC_ConfigChannel+0x84>
    {
      ADC->CCR |= ADC_CCR_TSEN;
 8002200:	4b23      	ldr	r3, [pc, #140]	; (8002290 <HAL_ADC_ConfigChannel+0x100>)
 8002202:	681a      	ldr	r2, [r3, #0]
 8002204:	4b22      	ldr	r3, [pc, #136]	; (8002290 <HAL_ADC_ConfigChannel+0x100>)
 8002206:	2180      	movs	r1, #128	; 0x80
 8002208:	0409      	lsls	r1, r1, #16
 800220a:	430a      	orrs	r2, r1
 800220c:	601a      	str	r2, [r3, #0]

      /* Delay for temperature sensor stabilization time */
      ADC_DelayMicroSecond(ADC_TEMPSENSOR_DELAY_US);
 800220e:	200a      	movs	r0, #10
 8002210:	f000 f8ac 	bl	800236c <ADC_DelayMicroSecond>
    }
#endif

    /* If VRefInt channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 8002214:	683b      	ldr	r3, [r7, #0]
 8002216:	681a      	ldr	r2, [r3, #0]
 8002218:	2380      	movs	r3, #128	; 0x80
 800221a:	029b      	lsls	r3, r3, #10
 800221c:	4013      	ands	r3, r2
 800221e:	d02b      	beq.n	8002278 <HAL_ADC_ConfigChannel+0xe8>
    {
      ADC->CCR |= ADC_CCR_VREFEN;
 8002220:	4b1b      	ldr	r3, [pc, #108]	; (8002290 <HAL_ADC_ConfigChannel+0x100>)
 8002222:	681a      	ldr	r2, [r3, #0]
 8002224:	4b1a      	ldr	r3, [pc, #104]	; (8002290 <HAL_ADC_ConfigChannel+0x100>)
 8002226:	2180      	movs	r1, #128	; 0x80
 8002228:	03c9      	lsls	r1, r1, #15
 800222a:	430a      	orrs	r2, r1
 800222c:	601a      	str	r2, [r3, #0]
 800222e:	e023      	b.n	8002278 <HAL_ADC_ConfigChannel+0xe8>
  }
  else
  {
    /* Regular sequence configuration */
    /* Reset the channel selection register from the selected channel */
    hadc->Instance->CHSELR &= ~((uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK));
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002236:	683b      	ldr	r3, [r7, #0]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	035b      	lsls	r3, r3, #13
 800223c:	0b5b      	lsrs	r3, r3, #13
 800223e:	43d9      	mvns	r1, r3
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	400a      	ands	r2, r1
 8002246:	629a      	str	r2, [r3, #40]	; 0x28

    /* Management of internal measurement channels: VrefInt/TempSensor/Vbat */
    /* internal measurement paths disable: If internal channel selected,    */
    /* disable dedicated internal buffers and path.                         */
#if defined(ADC_CCR_TSEN)
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 8002248:	683b      	ldr	r3, [r7, #0]
 800224a:	681a      	ldr	r2, [r3, #0]
 800224c:	2380      	movs	r3, #128	; 0x80
 800224e:	02db      	lsls	r3, r3, #11
 8002250:	4013      	ands	r3, r2
 8002252:	d005      	beq.n	8002260 <HAL_ADC_ConfigChannel+0xd0>
    {
      ADC->CCR &= ~ADC_CCR_TSEN;
 8002254:	4b0e      	ldr	r3, [pc, #56]	; (8002290 <HAL_ADC_ConfigChannel+0x100>)
 8002256:	681a      	ldr	r2, [r3, #0]
 8002258:	4b0d      	ldr	r3, [pc, #52]	; (8002290 <HAL_ADC_ConfigChannel+0x100>)
 800225a:	490e      	ldr	r1, [pc, #56]	; (8002294 <HAL_ADC_ConfigChannel+0x104>)
 800225c:	400a      	ands	r2, r1
 800225e:	601a      	str	r2, [r3, #0]
    }
#endif

    /* If VRefInt channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 8002260:	683b      	ldr	r3, [r7, #0]
 8002262:	681a      	ldr	r2, [r3, #0]
 8002264:	2380      	movs	r3, #128	; 0x80
 8002266:	029b      	lsls	r3, r3, #10
 8002268:	4013      	ands	r3, r2
 800226a:	d005      	beq.n	8002278 <HAL_ADC_ConfigChannel+0xe8>
    {
      ADC->CCR &= ~ADC_CCR_VREFEN;
 800226c:	4b08      	ldr	r3, [pc, #32]	; (8002290 <HAL_ADC_ConfigChannel+0x100>)
 800226e:	681a      	ldr	r2, [r3, #0]
 8002270:	4b07      	ldr	r3, [pc, #28]	; (8002290 <HAL_ADC_ConfigChannel+0x100>)
 8002272:	4909      	ldr	r1, [pc, #36]	; (8002298 <HAL_ADC_ConfigChannel+0x108>)
 8002274:	400a      	ands	r2, r1
 8002276:	601a      	str	r2, [r3, #0]
    }
#endif
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	2250      	movs	r2, #80	; 0x50
 800227c:	2100      	movs	r1, #0
 800227e:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 8002280:	2300      	movs	r3, #0
}
 8002282:	0018      	movs	r0, r3
 8002284:	46bd      	mov	sp, r7
 8002286:	b002      	add	sp, #8
 8002288:	bd80      	pop	{r7, pc}
 800228a:	46c0      	nop			; (mov r8, r8)
 800228c:	00001001 	.word	0x00001001
 8002290:	40012708 	.word	0x40012708
 8002294:	ff7fffff 	.word	0xff7fffff
 8002298:	ffbfffff 	.word	0xffbfffff

0800229c <ADC_Enable>:
  *         "if (hadc->Init.LowPowerAutoPowerOff != ENABLE)".
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 800229c:	b580      	push	{r7, lr}
 800229e:	b084      	sub	sp, #16
 80022a0:	af00      	add	r7, sp, #0
 80022a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80022a4:	2300      	movs	r3, #0
 80022a6:	60fb      	str	r3, [r7, #12]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	689b      	ldr	r3, [r3, #8]
 80022ae:	2203      	movs	r2, #3
 80022b0:	4013      	ands	r3, r2
 80022b2:	2b01      	cmp	r3, #1
 80022b4:	d108      	bne.n	80022c8 <ADC_Enable+0x2c>
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	2201      	movs	r2, #1
 80022be:	4013      	ands	r3, r2
 80022c0:	2b01      	cmp	r3, #1
 80022c2:	d101      	bne.n	80022c8 <ADC_Enable+0x2c>
 80022c4:	2301      	movs	r3, #1
 80022c6:	e000      	b.n	80022ca <ADC_Enable+0x2e>
 80022c8:	2300      	movs	r3, #0
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d146      	bne.n	800235c <ADC_Enable+0xc0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	689b      	ldr	r3, [r3, #8]
 80022d4:	4a24      	ldr	r2, [pc, #144]	; (8002368 <ADC_Enable+0xcc>)
 80022d6:	4013      	ands	r3, r2
 80022d8:	d00d      	beq.n	80022f6 <ADC_Enable+0x5a>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80022de:	2210      	movs	r2, #16
 80022e0:	431a      	orrs	r2, r3
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022ea:	2201      	movs	r2, #1
 80022ec:	431a      	orrs	r2, r3
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 80022f2:	2301      	movs	r3, #1
 80022f4:	e033      	b.n	800235e <ADC_Enable+0xc2>
    }

    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	689a      	ldr	r2, [r3, #8]
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	2101      	movs	r1, #1
 8002302:	430a      	orrs	r2, r1
 8002304:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time. */
    ADC_DelayMicroSecond(ADC_STAB_DELAY_US);
 8002306:	2001      	movs	r0, #1
 8002308:	f000 f830 	bl	800236c <ADC_DelayMicroSecond>

    /* Get tick count */
    tickstart = HAL_GetTick();
 800230c:	f7ff fc86 	bl	8001c1c <HAL_GetTick>
 8002310:	0003      	movs	r3, r0
 8002312:	60fb      	str	r3, [r7, #12]

    /* Wait for ADC effectively enabled */
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8002314:	e01b      	b.n	800234e <ADC_Enable+0xb2>
    {
      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002316:	f7ff fc81 	bl	8001c1c <HAL_GetTick>
 800231a:	0002      	movs	r2, r0
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	1ad3      	subs	r3, r2, r3
 8002320:	2b0a      	cmp	r3, #10
 8002322:	d914      	bls.n	800234e <ADC_Enable+0xb2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	2201      	movs	r2, #1
 800232c:	4013      	ands	r3, r2
 800232e:	2b01      	cmp	r3, #1
 8002330:	d00d      	beq.n	800234e <ADC_Enable+0xb2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002336:	2210      	movs	r2, #16
 8002338:	431a      	orrs	r2, r3
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002342:	2201      	movs	r2, #1
 8002344:	431a      	orrs	r2, r3
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 800234a:	2301      	movs	r3, #1
 800234c:	e007      	b.n	800235e <ADC_Enable+0xc2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	2201      	movs	r2, #1
 8002356:	4013      	ands	r3, r2
 8002358:	2b01      	cmp	r3, #1
 800235a:	d1dc      	bne.n	8002316 <ADC_Enable+0x7a>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800235c:	2300      	movs	r3, #0
}
 800235e:	0018      	movs	r0, r3
 8002360:	46bd      	mov	sp, r7
 8002362:	b004      	add	sp, #16
 8002364:	bd80      	pop	{r7, pc}
 8002366:	46c0      	nop			; (mov r8, r8)
 8002368:	80000017 	.word	0x80000017

0800236c <ADC_DelayMicroSecond>:
  * @brief  Delay micro seconds
  * @param  microSecond  delay
  * @retval None
  */
static void ADC_DelayMicroSecond(uint32_t microSecond)
{
 800236c:	b580      	push	{r7, lr}
 800236e:	b084      	sub	sp, #16
 8002370:	af00      	add	r7, sp, #0
 8002372:	6078      	str	r0, [r7, #4]
  /* Compute number of CPU cycles to wait for */
  __IO uint32_t waitLoopIndex = (microSecond * (SystemCoreClock / 1000000U));
 8002374:	4b0b      	ldr	r3, [pc, #44]	; (80023a4 <ADC_DelayMicroSecond+0x38>)
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	490b      	ldr	r1, [pc, #44]	; (80023a8 <ADC_DelayMicroSecond+0x3c>)
 800237a:	0018      	movs	r0, r3
 800237c:	f7fd fed6 	bl	800012c <__udivsi3>
 8002380:	0003      	movs	r3, r0
 8002382:	001a      	movs	r2, r3
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	4353      	muls	r3, r2
 8002388:	60fb      	str	r3, [r7, #12]

  while (waitLoopIndex != 0U)
 800238a:	e002      	b.n	8002392 <ADC_DelayMicroSecond+0x26>
  {
    waitLoopIndex--;
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	3b01      	subs	r3, #1
 8002390:	60fb      	str	r3, [r7, #12]
  while (waitLoopIndex != 0U)
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	2b00      	cmp	r3, #0
 8002396:	d1f9      	bne.n	800238c <ADC_DelayMicroSecond+0x20>
  }
}
 8002398:	46c0      	nop			; (mov r8, r8)
 800239a:	46c0      	nop			; (mov r8, r8)
 800239c:	46bd      	mov	sp, r7
 800239e:	b004      	add	sp, #16
 80023a0:	bd80      	pop	{r7, pc}
 80023a2:	46c0      	nop			; (mov r8, r8)
 80023a4:	20000010 	.word	0x20000010
 80023a8:	000f4240 	.word	0x000f4240

080023ac <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80023ac:	b580      	push	{r7, lr}
 80023ae:	b082      	sub	sp, #8
 80023b0:	af00      	add	r7, sp, #0
 80023b2:	0002      	movs	r2, r0
 80023b4:	1dfb      	adds	r3, r7, #7
 80023b6:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80023b8:	1dfb      	adds	r3, r7, #7
 80023ba:	781b      	ldrb	r3, [r3, #0]
 80023bc:	2b7f      	cmp	r3, #127	; 0x7f
 80023be:	d809      	bhi.n	80023d4 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80023c0:	1dfb      	adds	r3, r7, #7
 80023c2:	781b      	ldrb	r3, [r3, #0]
 80023c4:	001a      	movs	r2, r3
 80023c6:	231f      	movs	r3, #31
 80023c8:	401a      	ands	r2, r3
 80023ca:	4b04      	ldr	r3, [pc, #16]	; (80023dc <__NVIC_EnableIRQ+0x30>)
 80023cc:	2101      	movs	r1, #1
 80023ce:	4091      	lsls	r1, r2
 80023d0:	000a      	movs	r2, r1
 80023d2:	601a      	str	r2, [r3, #0]
  }
}
 80023d4:	46c0      	nop			; (mov r8, r8)
 80023d6:	46bd      	mov	sp, r7
 80023d8:	b002      	add	sp, #8
 80023da:	bd80      	pop	{r7, pc}
 80023dc:	e000e100 	.word	0xe000e100

080023e0 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80023e0:	b580      	push	{r7, lr}
 80023e2:	b082      	sub	sp, #8
 80023e4:	af00      	add	r7, sp, #0
 80023e6:	0002      	movs	r2, r0
 80023e8:	1dfb      	adds	r3, r7, #7
 80023ea:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80023ec:	1dfb      	adds	r3, r7, #7
 80023ee:	781b      	ldrb	r3, [r3, #0]
 80023f0:	2b7f      	cmp	r3, #127	; 0x7f
 80023f2:	d810      	bhi.n	8002416 <__NVIC_DisableIRQ+0x36>
  {
    NVIC->ICER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80023f4:	1dfb      	adds	r3, r7, #7
 80023f6:	781b      	ldrb	r3, [r3, #0]
 80023f8:	001a      	movs	r2, r3
 80023fa:	231f      	movs	r3, #31
 80023fc:	4013      	ands	r3, r2
 80023fe:	4908      	ldr	r1, [pc, #32]	; (8002420 <__NVIC_DisableIRQ+0x40>)
 8002400:	2201      	movs	r2, #1
 8002402:	409a      	lsls	r2, r3
 8002404:	0013      	movs	r3, r2
 8002406:	2280      	movs	r2, #128	; 0x80
 8002408:	508b      	str	r3, [r1, r2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800240a:	f3bf 8f4f 	dsb	sy
}
 800240e:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("isb 0xF":::"memory");
 8002410:	f3bf 8f6f 	isb	sy
}
 8002414:	46c0      	nop			; (mov r8, r8)
    __DSB();
    __ISB();
  }
}
 8002416:	46c0      	nop			; (mov r8, r8)
 8002418:	46bd      	mov	sp, r7
 800241a:	b002      	add	sp, #8
 800241c:	bd80      	pop	{r7, pc}
 800241e:	46c0      	nop			; (mov r8, r8)
 8002420:	e000e100 	.word	0xe000e100

08002424 <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 8002424:	b580      	push	{r7, lr}
 8002426:	b082      	sub	sp, #8
 8002428:	af00      	add	r7, sp, #0
 800242a:	0002      	movs	r2, r0
 800242c:	1dfb      	adds	r3, r7, #7
 800242e:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8002430:	1dfb      	adds	r3, r7, #7
 8002432:	781b      	ldrb	r3, [r3, #0]
 8002434:	2b7f      	cmp	r3, #127	; 0x7f
 8002436:	d80a      	bhi.n	800244e <__NVIC_ClearPendingIRQ+0x2a>
  {
    NVIC->ICPR[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002438:	1dfb      	adds	r3, r7, #7
 800243a:	781b      	ldrb	r3, [r3, #0]
 800243c:	001a      	movs	r2, r3
 800243e:	231f      	movs	r3, #31
 8002440:	4013      	ands	r3, r2
 8002442:	4905      	ldr	r1, [pc, #20]	; (8002458 <__NVIC_ClearPendingIRQ+0x34>)
 8002444:	2201      	movs	r2, #1
 8002446:	409a      	lsls	r2, r3
 8002448:	23c0      	movs	r3, #192	; 0xc0
 800244a:	005b      	lsls	r3, r3, #1
 800244c:	50ca      	str	r2, [r1, r3]
  }
}
 800244e:	46c0      	nop			; (mov r8, r8)
 8002450:	46bd      	mov	sp, r7
 8002452:	b002      	add	sp, #8
 8002454:	bd80      	pop	{r7, pc}
 8002456:	46c0      	nop			; (mov r8, r8)
 8002458:	e000e100 	.word	0xe000e100

0800245c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800245c:	b590      	push	{r4, r7, lr}
 800245e:	b083      	sub	sp, #12
 8002460:	af00      	add	r7, sp, #0
 8002462:	0002      	movs	r2, r0
 8002464:	6039      	str	r1, [r7, #0]
 8002466:	1dfb      	adds	r3, r7, #7
 8002468:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800246a:	1dfb      	adds	r3, r7, #7
 800246c:	781b      	ldrb	r3, [r3, #0]
 800246e:	2b7f      	cmp	r3, #127	; 0x7f
 8002470:	d828      	bhi.n	80024c4 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002472:	4a2f      	ldr	r2, [pc, #188]	; (8002530 <__NVIC_SetPriority+0xd4>)
 8002474:	1dfb      	adds	r3, r7, #7
 8002476:	781b      	ldrb	r3, [r3, #0]
 8002478:	b25b      	sxtb	r3, r3
 800247a:	089b      	lsrs	r3, r3, #2
 800247c:	33c0      	adds	r3, #192	; 0xc0
 800247e:	009b      	lsls	r3, r3, #2
 8002480:	589b      	ldr	r3, [r3, r2]
 8002482:	1dfa      	adds	r2, r7, #7
 8002484:	7812      	ldrb	r2, [r2, #0]
 8002486:	0011      	movs	r1, r2
 8002488:	2203      	movs	r2, #3
 800248a:	400a      	ands	r2, r1
 800248c:	00d2      	lsls	r2, r2, #3
 800248e:	21ff      	movs	r1, #255	; 0xff
 8002490:	4091      	lsls	r1, r2
 8002492:	000a      	movs	r2, r1
 8002494:	43d2      	mvns	r2, r2
 8002496:	401a      	ands	r2, r3
 8002498:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800249a:	683b      	ldr	r3, [r7, #0]
 800249c:	019b      	lsls	r3, r3, #6
 800249e:	22ff      	movs	r2, #255	; 0xff
 80024a0:	401a      	ands	r2, r3
 80024a2:	1dfb      	adds	r3, r7, #7
 80024a4:	781b      	ldrb	r3, [r3, #0]
 80024a6:	0018      	movs	r0, r3
 80024a8:	2303      	movs	r3, #3
 80024aa:	4003      	ands	r3, r0
 80024ac:	00db      	lsls	r3, r3, #3
 80024ae:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80024b0:	481f      	ldr	r0, [pc, #124]	; (8002530 <__NVIC_SetPriority+0xd4>)
 80024b2:	1dfb      	adds	r3, r7, #7
 80024b4:	781b      	ldrb	r3, [r3, #0]
 80024b6:	b25b      	sxtb	r3, r3
 80024b8:	089b      	lsrs	r3, r3, #2
 80024ba:	430a      	orrs	r2, r1
 80024bc:	33c0      	adds	r3, #192	; 0xc0
 80024be:	009b      	lsls	r3, r3, #2
 80024c0:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80024c2:	e031      	b.n	8002528 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80024c4:	4a1b      	ldr	r2, [pc, #108]	; (8002534 <__NVIC_SetPriority+0xd8>)
 80024c6:	1dfb      	adds	r3, r7, #7
 80024c8:	781b      	ldrb	r3, [r3, #0]
 80024ca:	0019      	movs	r1, r3
 80024cc:	230f      	movs	r3, #15
 80024ce:	400b      	ands	r3, r1
 80024d0:	3b08      	subs	r3, #8
 80024d2:	089b      	lsrs	r3, r3, #2
 80024d4:	3306      	adds	r3, #6
 80024d6:	009b      	lsls	r3, r3, #2
 80024d8:	18d3      	adds	r3, r2, r3
 80024da:	3304      	adds	r3, #4
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	1dfa      	adds	r2, r7, #7
 80024e0:	7812      	ldrb	r2, [r2, #0]
 80024e2:	0011      	movs	r1, r2
 80024e4:	2203      	movs	r2, #3
 80024e6:	400a      	ands	r2, r1
 80024e8:	00d2      	lsls	r2, r2, #3
 80024ea:	21ff      	movs	r1, #255	; 0xff
 80024ec:	4091      	lsls	r1, r2
 80024ee:	000a      	movs	r2, r1
 80024f0:	43d2      	mvns	r2, r2
 80024f2:	401a      	ands	r2, r3
 80024f4:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80024f6:	683b      	ldr	r3, [r7, #0]
 80024f8:	019b      	lsls	r3, r3, #6
 80024fa:	22ff      	movs	r2, #255	; 0xff
 80024fc:	401a      	ands	r2, r3
 80024fe:	1dfb      	adds	r3, r7, #7
 8002500:	781b      	ldrb	r3, [r3, #0]
 8002502:	0018      	movs	r0, r3
 8002504:	2303      	movs	r3, #3
 8002506:	4003      	ands	r3, r0
 8002508:	00db      	lsls	r3, r3, #3
 800250a:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800250c:	4809      	ldr	r0, [pc, #36]	; (8002534 <__NVIC_SetPriority+0xd8>)
 800250e:	1dfb      	adds	r3, r7, #7
 8002510:	781b      	ldrb	r3, [r3, #0]
 8002512:	001c      	movs	r4, r3
 8002514:	230f      	movs	r3, #15
 8002516:	4023      	ands	r3, r4
 8002518:	3b08      	subs	r3, #8
 800251a:	089b      	lsrs	r3, r3, #2
 800251c:	430a      	orrs	r2, r1
 800251e:	3306      	adds	r3, #6
 8002520:	009b      	lsls	r3, r3, #2
 8002522:	18c3      	adds	r3, r0, r3
 8002524:	3304      	adds	r3, #4
 8002526:	601a      	str	r2, [r3, #0]
}
 8002528:	46c0      	nop			; (mov r8, r8)
 800252a:	46bd      	mov	sp, r7
 800252c:	b003      	add	sp, #12
 800252e:	bd90      	pop	{r4, r7, pc}
 8002530:	e000e100 	.word	0xe000e100
 8002534:	e000ed00 	.word	0xe000ed00

08002538 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002538:	b580      	push	{r7, lr}
 800253a:	b082      	sub	sp, #8
 800253c:	af00      	add	r7, sp, #0
 800253e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	1e5a      	subs	r2, r3, #1
 8002544:	2380      	movs	r3, #128	; 0x80
 8002546:	045b      	lsls	r3, r3, #17
 8002548:	429a      	cmp	r2, r3
 800254a:	d301      	bcc.n	8002550 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 800254c:	2301      	movs	r3, #1
 800254e:	e010      	b.n	8002572 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002550:	4b0a      	ldr	r3, [pc, #40]	; (800257c <SysTick_Config+0x44>)
 8002552:	687a      	ldr	r2, [r7, #4]
 8002554:	3a01      	subs	r2, #1
 8002556:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002558:	2301      	movs	r3, #1
 800255a:	425b      	negs	r3, r3
 800255c:	2103      	movs	r1, #3
 800255e:	0018      	movs	r0, r3
 8002560:	f7ff ff7c 	bl	800245c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002564:	4b05      	ldr	r3, [pc, #20]	; (800257c <SysTick_Config+0x44>)
 8002566:	2200      	movs	r2, #0
 8002568:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800256a:	4b04      	ldr	r3, [pc, #16]	; (800257c <SysTick_Config+0x44>)
 800256c:	2207      	movs	r2, #7
 800256e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002570:	2300      	movs	r3, #0
}
 8002572:	0018      	movs	r0, r3
 8002574:	46bd      	mov	sp, r7
 8002576:	b002      	add	sp, #8
 8002578:	bd80      	pop	{r7, pc}
 800257a:	46c0      	nop			; (mov r8, r8)
 800257c:	e000e010 	.word	0xe000e010

08002580 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002580:	b580      	push	{r7, lr}
 8002582:	b084      	sub	sp, #16
 8002584:	af00      	add	r7, sp, #0
 8002586:	60b9      	str	r1, [r7, #8]
 8002588:	607a      	str	r2, [r7, #4]
 800258a:	210f      	movs	r1, #15
 800258c:	187b      	adds	r3, r7, r1
 800258e:	1c02      	adds	r2, r0, #0
 8002590:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8002592:	68ba      	ldr	r2, [r7, #8]
 8002594:	187b      	adds	r3, r7, r1
 8002596:	781b      	ldrb	r3, [r3, #0]
 8002598:	b25b      	sxtb	r3, r3
 800259a:	0011      	movs	r1, r2
 800259c:	0018      	movs	r0, r3
 800259e:	f7ff ff5d 	bl	800245c <__NVIC_SetPriority>
}
 80025a2:	46c0      	nop			; (mov r8, r8)
 80025a4:	46bd      	mov	sp, r7
 80025a6:	b004      	add	sp, #16
 80025a8:	bd80      	pop	{r7, pc}

080025aa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of  IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80025aa:	b580      	push	{r7, lr}
 80025ac:	b082      	sub	sp, #8
 80025ae:	af00      	add	r7, sp, #0
 80025b0:	0002      	movs	r2, r0
 80025b2:	1dfb      	adds	r3, r7, #7
 80025b4:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80025b6:	1dfb      	adds	r3, r7, #7
 80025b8:	781b      	ldrb	r3, [r3, #0]
 80025ba:	b25b      	sxtb	r3, r3
 80025bc:	0018      	movs	r0, r3
 80025be:	f7ff fef5 	bl	80023ac <__NVIC_EnableIRQ>
}
 80025c2:	46c0      	nop			; (mov r8, r8)
 80025c4:	46bd      	mov	sp, r7
 80025c6:	b002      	add	sp, #8
 80025c8:	bd80      	pop	{r7, pc}

080025ca <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80025ca:	b580      	push	{r7, lr}
 80025cc:	b082      	sub	sp, #8
 80025ce:	af00      	add	r7, sp, #0
 80025d0:	0002      	movs	r2, r0
 80025d2:	1dfb      	adds	r3, r7, #7
 80025d4:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 80025d6:	1dfb      	adds	r3, r7, #7
 80025d8:	781b      	ldrb	r3, [r3, #0]
 80025da:	b25b      	sxtb	r3, r3
 80025dc:	0018      	movs	r0, r3
 80025de:	f7ff feff 	bl	80023e0 <__NVIC_DisableIRQ>
}
 80025e2:	46c0      	nop			; (mov r8, r8)
 80025e4:	46bd      	mov	sp, r7
 80025e6:	b002      	add	sp, #8
 80025e8:	bd80      	pop	{r7, pc}

080025ea <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80025ea:	b580      	push	{r7, lr}
 80025ec:	b082      	sub	sp, #8
 80025ee:	af00      	add	r7, sp, #0
 80025f0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	0018      	movs	r0, r3
 80025f6:	f7ff ff9f 	bl	8002538 <SysTick_Config>
 80025fa:	0003      	movs	r3, r0
}
 80025fc:	0018      	movs	r0, r3
 80025fe:	46bd      	mov	sp, r7
 8002600:	b002      	add	sp, #8
 8002602:	bd80      	pop	{r7, pc}

08002604 <HAL_NVIC_ClearPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{ 
 8002604:	b580      	push	{r7, lr}
 8002606:	b082      	sub	sp, #8
 8002608:	af00      	add	r7, sp, #0
 800260a:	0002      	movs	r2, r0
 800260c:	1dfb      	adds	r3, r7, #7
 800260e:	701a      	strb	r2, [r3, #0]
  /* Clear pending interrupt */
  NVIC_ClearPendingIRQ(IRQn);
 8002610:	1dfb      	adds	r3, r7, #7
 8002612:	781b      	ldrb	r3, [r3, #0]
 8002614:	b25b      	sxtb	r3, r3
 8002616:	0018      	movs	r0, r3
 8002618:	f7ff ff04 	bl	8002424 <__NVIC_ClearPendingIRQ>
}
 800261c:	46c0      	nop			; (mov r8, r8)
 800261e:	46bd      	mov	sp, r7
 8002620:	b002      	add	sp, #8
 8002622:	bd80      	pop	{r7, pc}

08002624 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002624:	b580      	push	{r7, lr}
 8002626:	b086      	sub	sp, #24
 8002628:	af00      	add	r7, sp, #0
 800262a:	6078      	str	r0, [r7, #4]
 800262c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800262e:	2300      	movs	r3, #0
 8002630:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002632:	2300      	movs	r3, #0
 8002634:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 8002636:	2300      	movs	r3, #0
 8002638:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 800263a:	e14f      	b.n	80028dc <HAL_GPIO_Init+0x2b8>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 800263c:	683b      	ldr	r3, [r7, #0]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	2101      	movs	r1, #1
 8002642:	697a      	ldr	r2, [r7, #20]
 8002644:	4091      	lsls	r1, r2
 8002646:	000a      	movs	r2, r1
 8002648:	4013      	ands	r3, r2
 800264a:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	2b00      	cmp	r3, #0
 8002650:	d100      	bne.n	8002654 <HAL_GPIO_Init+0x30>
 8002652:	e140      	b.n	80028d6 <HAL_GPIO_Init+0x2b2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002654:	683b      	ldr	r3, [r7, #0]
 8002656:	685b      	ldr	r3, [r3, #4]
 8002658:	2203      	movs	r2, #3
 800265a:	4013      	ands	r3, r2
 800265c:	2b01      	cmp	r3, #1
 800265e:	d005      	beq.n	800266c <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002660:	683b      	ldr	r3, [r7, #0]
 8002662:	685b      	ldr	r3, [r3, #4]
 8002664:	2203      	movs	r2, #3
 8002666:	4013      	ands	r3, r2
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002668:	2b02      	cmp	r3, #2
 800266a:	d130      	bne.n	80026ce <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	689b      	ldr	r3, [r3, #8]
 8002670:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 8002672:	697b      	ldr	r3, [r7, #20]
 8002674:	005b      	lsls	r3, r3, #1
 8002676:	2203      	movs	r2, #3
 8002678:	409a      	lsls	r2, r3
 800267a:	0013      	movs	r3, r2
 800267c:	43da      	mvns	r2, r3
 800267e:	693b      	ldr	r3, [r7, #16]
 8002680:	4013      	ands	r3, r2
 8002682:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002684:	683b      	ldr	r3, [r7, #0]
 8002686:	68da      	ldr	r2, [r3, #12]
 8002688:	697b      	ldr	r3, [r7, #20]
 800268a:	005b      	lsls	r3, r3, #1
 800268c:	409a      	lsls	r2, r3
 800268e:	0013      	movs	r3, r2
 8002690:	693a      	ldr	r2, [r7, #16]
 8002692:	4313      	orrs	r3, r2
 8002694:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	693a      	ldr	r2, [r7, #16]
 800269a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	685b      	ldr	r3, [r3, #4]
 80026a0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80026a2:	2201      	movs	r2, #1
 80026a4:	697b      	ldr	r3, [r7, #20]
 80026a6:	409a      	lsls	r2, r3
 80026a8:	0013      	movs	r3, r2
 80026aa:	43da      	mvns	r2, r3
 80026ac:	693b      	ldr	r3, [r7, #16]
 80026ae:	4013      	ands	r3, r2
 80026b0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80026b2:	683b      	ldr	r3, [r7, #0]
 80026b4:	685b      	ldr	r3, [r3, #4]
 80026b6:	091b      	lsrs	r3, r3, #4
 80026b8:	2201      	movs	r2, #1
 80026ba:	401a      	ands	r2, r3
 80026bc:	697b      	ldr	r3, [r7, #20]
 80026be:	409a      	lsls	r2, r3
 80026c0:	0013      	movs	r3, r2
 80026c2:	693a      	ldr	r2, [r7, #16]
 80026c4:	4313      	orrs	r3, r2
 80026c6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	693a      	ldr	r2, [r7, #16]
 80026cc:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80026ce:	683b      	ldr	r3, [r7, #0]
 80026d0:	685b      	ldr	r3, [r3, #4]
 80026d2:	2203      	movs	r2, #3
 80026d4:	4013      	ands	r3, r2
 80026d6:	2b03      	cmp	r3, #3
 80026d8:	d017      	beq.n	800270a <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	68db      	ldr	r3, [r3, #12]
 80026de:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80026e0:	697b      	ldr	r3, [r7, #20]
 80026e2:	005b      	lsls	r3, r3, #1
 80026e4:	2203      	movs	r2, #3
 80026e6:	409a      	lsls	r2, r3
 80026e8:	0013      	movs	r3, r2
 80026ea:	43da      	mvns	r2, r3
 80026ec:	693b      	ldr	r3, [r7, #16]
 80026ee:	4013      	ands	r3, r2
 80026f0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80026f2:	683b      	ldr	r3, [r7, #0]
 80026f4:	689a      	ldr	r2, [r3, #8]
 80026f6:	697b      	ldr	r3, [r7, #20]
 80026f8:	005b      	lsls	r3, r3, #1
 80026fa:	409a      	lsls	r2, r3
 80026fc:	0013      	movs	r3, r2
 80026fe:	693a      	ldr	r2, [r7, #16]
 8002700:	4313      	orrs	r3, r2
 8002702:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	693a      	ldr	r2, [r7, #16]
 8002708:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800270a:	683b      	ldr	r3, [r7, #0]
 800270c:	685b      	ldr	r3, [r3, #4]
 800270e:	2203      	movs	r2, #3
 8002710:	4013      	ands	r3, r2
 8002712:	2b02      	cmp	r3, #2
 8002714:	d123      	bne.n	800275e <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002716:	697b      	ldr	r3, [r7, #20]
 8002718:	08da      	lsrs	r2, r3, #3
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	3208      	adds	r2, #8
 800271e:	0092      	lsls	r2, r2, #2
 8002720:	58d3      	ldr	r3, [r2, r3]
 8002722:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 8002724:	697b      	ldr	r3, [r7, #20]
 8002726:	2207      	movs	r2, #7
 8002728:	4013      	ands	r3, r2
 800272a:	009b      	lsls	r3, r3, #2
 800272c:	220f      	movs	r2, #15
 800272e:	409a      	lsls	r2, r3
 8002730:	0013      	movs	r3, r2
 8002732:	43da      	mvns	r2, r3
 8002734:	693b      	ldr	r3, [r7, #16]
 8002736:	4013      	ands	r3, r2
 8002738:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 800273a:	683b      	ldr	r3, [r7, #0]
 800273c:	691a      	ldr	r2, [r3, #16]
 800273e:	697b      	ldr	r3, [r7, #20]
 8002740:	2107      	movs	r1, #7
 8002742:	400b      	ands	r3, r1
 8002744:	009b      	lsls	r3, r3, #2
 8002746:	409a      	lsls	r2, r3
 8002748:	0013      	movs	r3, r2
 800274a:	693a      	ldr	r2, [r7, #16]
 800274c:	4313      	orrs	r3, r2
 800274e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8002750:	697b      	ldr	r3, [r7, #20]
 8002752:	08da      	lsrs	r2, r3, #3
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	3208      	adds	r2, #8
 8002758:	0092      	lsls	r2, r2, #2
 800275a:	6939      	ldr	r1, [r7, #16]
 800275c:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002764:	697b      	ldr	r3, [r7, #20]
 8002766:	005b      	lsls	r3, r3, #1
 8002768:	2203      	movs	r2, #3
 800276a:	409a      	lsls	r2, r3
 800276c:	0013      	movs	r3, r2
 800276e:	43da      	mvns	r2, r3
 8002770:	693b      	ldr	r3, [r7, #16]
 8002772:	4013      	ands	r3, r2
 8002774:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002776:	683b      	ldr	r3, [r7, #0]
 8002778:	685b      	ldr	r3, [r3, #4]
 800277a:	2203      	movs	r2, #3
 800277c:	401a      	ands	r2, r3
 800277e:	697b      	ldr	r3, [r7, #20]
 8002780:	005b      	lsls	r3, r3, #1
 8002782:	409a      	lsls	r2, r3
 8002784:	0013      	movs	r3, r2
 8002786:	693a      	ldr	r2, [r7, #16]
 8002788:	4313      	orrs	r3, r2
 800278a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	693a      	ldr	r2, [r7, #16]
 8002790:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002792:	683b      	ldr	r3, [r7, #0]
 8002794:	685a      	ldr	r2, [r3, #4]
 8002796:	23c0      	movs	r3, #192	; 0xc0
 8002798:	029b      	lsls	r3, r3, #10
 800279a:	4013      	ands	r3, r2
 800279c:	d100      	bne.n	80027a0 <HAL_GPIO_Init+0x17c>
 800279e:	e09a      	b.n	80028d6 <HAL_GPIO_Init+0x2b2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80027a0:	4b54      	ldr	r3, [pc, #336]	; (80028f4 <HAL_GPIO_Init+0x2d0>)
 80027a2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80027a4:	4b53      	ldr	r3, [pc, #332]	; (80028f4 <HAL_GPIO_Init+0x2d0>)
 80027a6:	2101      	movs	r1, #1
 80027a8:	430a      	orrs	r2, r1
 80027aa:	635a      	str	r2, [r3, #52]	; 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 80027ac:	4a52      	ldr	r2, [pc, #328]	; (80028f8 <HAL_GPIO_Init+0x2d4>)
 80027ae:	697b      	ldr	r3, [r7, #20]
 80027b0:	089b      	lsrs	r3, r3, #2
 80027b2:	3302      	adds	r3, #2
 80027b4:	009b      	lsls	r3, r3, #2
 80027b6:	589b      	ldr	r3, [r3, r2]
 80027b8:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 80027ba:	697b      	ldr	r3, [r7, #20]
 80027bc:	2203      	movs	r2, #3
 80027be:	4013      	ands	r3, r2
 80027c0:	009b      	lsls	r3, r3, #2
 80027c2:	220f      	movs	r2, #15
 80027c4:	409a      	lsls	r2, r3
 80027c6:	0013      	movs	r3, r2
 80027c8:	43da      	mvns	r2, r3
 80027ca:	693b      	ldr	r3, [r7, #16]
 80027cc:	4013      	ands	r3, r2
 80027ce:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 80027d0:	687a      	ldr	r2, [r7, #4]
 80027d2:	23a0      	movs	r3, #160	; 0xa0
 80027d4:	05db      	lsls	r3, r3, #23
 80027d6:	429a      	cmp	r2, r3
 80027d8:	d019      	beq.n	800280e <HAL_GPIO_Init+0x1ea>
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	4a47      	ldr	r2, [pc, #284]	; (80028fc <HAL_GPIO_Init+0x2d8>)
 80027de:	4293      	cmp	r3, r2
 80027e0:	d013      	beq.n	800280a <HAL_GPIO_Init+0x1e6>
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	4a46      	ldr	r2, [pc, #280]	; (8002900 <HAL_GPIO_Init+0x2dc>)
 80027e6:	4293      	cmp	r3, r2
 80027e8:	d00d      	beq.n	8002806 <HAL_GPIO_Init+0x1e2>
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	4a45      	ldr	r2, [pc, #276]	; (8002904 <HAL_GPIO_Init+0x2e0>)
 80027ee:	4293      	cmp	r3, r2
 80027f0:	d007      	beq.n	8002802 <HAL_GPIO_Init+0x1de>
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	4a44      	ldr	r2, [pc, #272]	; (8002908 <HAL_GPIO_Init+0x2e4>)
 80027f6:	4293      	cmp	r3, r2
 80027f8:	d101      	bne.n	80027fe <HAL_GPIO_Init+0x1da>
 80027fa:	2305      	movs	r3, #5
 80027fc:	e008      	b.n	8002810 <HAL_GPIO_Init+0x1ec>
 80027fe:	2306      	movs	r3, #6
 8002800:	e006      	b.n	8002810 <HAL_GPIO_Init+0x1ec>
 8002802:	2303      	movs	r3, #3
 8002804:	e004      	b.n	8002810 <HAL_GPIO_Init+0x1ec>
 8002806:	2302      	movs	r3, #2
 8002808:	e002      	b.n	8002810 <HAL_GPIO_Init+0x1ec>
 800280a:	2301      	movs	r3, #1
 800280c:	e000      	b.n	8002810 <HAL_GPIO_Init+0x1ec>
 800280e:	2300      	movs	r3, #0
 8002810:	697a      	ldr	r2, [r7, #20]
 8002812:	2103      	movs	r1, #3
 8002814:	400a      	ands	r2, r1
 8002816:	0092      	lsls	r2, r2, #2
 8002818:	4093      	lsls	r3, r2
 800281a:	693a      	ldr	r2, [r7, #16]
 800281c:	4313      	orrs	r3, r2
 800281e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002820:	4935      	ldr	r1, [pc, #212]	; (80028f8 <HAL_GPIO_Init+0x2d4>)
 8002822:	697b      	ldr	r3, [r7, #20]
 8002824:	089b      	lsrs	r3, r3, #2
 8002826:	3302      	adds	r3, #2
 8002828:	009b      	lsls	r3, r3, #2
 800282a:	693a      	ldr	r2, [r7, #16]
 800282c:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800282e:	4b37      	ldr	r3, [pc, #220]	; (800290c <HAL_GPIO_Init+0x2e8>)
 8002830:	689b      	ldr	r3, [r3, #8]
 8002832:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	43da      	mvns	r2, r3
 8002838:	693b      	ldr	r3, [r7, #16]
 800283a:	4013      	ands	r3, r2
 800283c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800283e:	683b      	ldr	r3, [r7, #0]
 8002840:	685a      	ldr	r2, [r3, #4]
 8002842:	2380      	movs	r3, #128	; 0x80
 8002844:	035b      	lsls	r3, r3, #13
 8002846:	4013      	ands	r3, r2
 8002848:	d003      	beq.n	8002852 <HAL_GPIO_Init+0x22e>
        {
          temp |= iocurrent;
 800284a:	693a      	ldr	r2, [r7, #16]
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	4313      	orrs	r3, r2
 8002850:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8002852:	4b2e      	ldr	r3, [pc, #184]	; (800290c <HAL_GPIO_Init+0x2e8>)
 8002854:	693a      	ldr	r2, [r7, #16]
 8002856:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8002858:	4b2c      	ldr	r3, [pc, #176]	; (800290c <HAL_GPIO_Init+0x2e8>)
 800285a:	68db      	ldr	r3, [r3, #12]
 800285c:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	43da      	mvns	r2, r3
 8002862:	693b      	ldr	r3, [r7, #16]
 8002864:	4013      	ands	r3, r2
 8002866:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002868:	683b      	ldr	r3, [r7, #0]
 800286a:	685a      	ldr	r2, [r3, #4]
 800286c:	2380      	movs	r3, #128	; 0x80
 800286e:	039b      	lsls	r3, r3, #14
 8002870:	4013      	ands	r3, r2
 8002872:	d003      	beq.n	800287c <HAL_GPIO_Init+0x258>
        {
          temp |= iocurrent;
 8002874:	693a      	ldr	r2, [r7, #16]
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	4313      	orrs	r3, r2
 800287a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800287c:	4b23      	ldr	r3, [pc, #140]	; (800290c <HAL_GPIO_Init+0x2e8>)
 800287e:	693a      	ldr	r2, [r7, #16]
 8002880:	60da      	str	r2, [r3, #12]

        temp = EXTI->EMR;
 8002882:	4b22      	ldr	r3, [pc, #136]	; (800290c <HAL_GPIO_Init+0x2e8>)
 8002884:	685b      	ldr	r3, [r3, #4]
 8002886:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	43da      	mvns	r2, r3
 800288c:	693b      	ldr	r3, [r7, #16]
 800288e:	4013      	ands	r3, r2
 8002890:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002892:	683b      	ldr	r3, [r7, #0]
 8002894:	685a      	ldr	r2, [r3, #4]
 8002896:	2380      	movs	r3, #128	; 0x80
 8002898:	029b      	lsls	r3, r3, #10
 800289a:	4013      	ands	r3, r2
 800289c:	d003      	beq.n	80028a6 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800289e:	693a      	ldr	r2, [r7, #16]
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	4313      	orrs	r3, r2
 80028a4:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80028a6:	4b19      	ldr	r3, [pc, #100]	; (800290c <HAL_GPIO_Init+0x2e8>)
 80028a8:	693a      	ldr	r2, [r7, #16]
 80028aa:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80028ac:	4b17      	ldr	r3, [pc, #92]	; (800290c <HAL_GPIO_Init+0x2e8>)
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	43da      	mvns	r2, r3
 80028b6:	693b      	ldr	r3, [r7, #16]
 80028b8:	4013      	ands	r3, r2
 80028ba:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80028bc:	683b      	ldr	r3, [r7, #0]
 80028be:	685a      	ldr	r2, [r3, #4]
 80028c0:	2380      	movs	r3, #128	; 0x80
 80028c2:	025b      	lsls	r3, r3, #9
 80028c4:	4013      	ands	r3, r2
 80028c6:	d003      	beq.n	80028d0 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80028c8:	693a      	ldr	r2, [r7, #16]
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	4313      	orrs	r3, r2
 80028ce:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80028d0:	4b0e      	ldr	r3, [pc, #56]	; (800290c <HAL_GPIO_Init+0x2e8>)
 80028d2:	693a      	ldr	r2, [r7, #16]
 80028d4:	601a      	str	r2, [r3, #0]
      }
    }
    position++;
 80028d6:	697b      	ldr	r3, [r7, #20]
 80028d8:	3301      	adds	r3, #1
 80028da:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 80028dc:	683b      	ldr	r3, [r7, #0]
 80028de:	681a      	ldr	r2, [r3, #0]
 80028e0:	697b      	ldr	r3, [r7, #20]
 80028e2:	40da      	lsrs	r2, r3
 80028e4:	1e13      	subs	r3, r2, #0
 80028e6:	d000      	beq.n	80028ea <HAL_GPIO_Init+0x2c6>
 80028e8:	e6a8      	b.n	800263c <HAL_GPIO_Init+0x18>
  }
}
 80028ea:	46c0      	nop			; (mov r8, r8)
 80028ec:	46c0      	nop			; (mov r8, r8)
 80028ee:	46bd      	mov	sp, r7
 80028f0:	b006      	add	sp, #24
 80028f2:	bd80      	pop	{r7, pc}
 80028f4:	40021000 	.word	0x40021000
 80028f8:	40010000 	.word	0x40010000
 80028fc:	50000400 	.word	0x50000400
 8002900:	50000800 	.word	0x50000800
 8002904:	50000c00 	.word	0x50000c00
 8002908:	50001c00 	.word	0x50001c00
 800290c:	40010400 	.word	0x40010400

08002910 <HAL_GPIO_ReadPin>:
  *                   This parameter can be GPIO_PIN_x where x can be (0..15).
  *                   All port bits are not necessarily available on all GPIOs.
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002910:	b580      	push	{r7, lr}
 8002912:	b084      	sub	sp, #16
 8002914:	af00      	add	r7, sp, #0
 8002916:	6078      	str	r0, [r7, #4]
 8002918:	000a      	movs	r2, r1
 800291a:	1cbb      	adds	r3, r7, #2
 800291c:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	691b      	ldr	r3, [r3, #16]
 8002922:	1cba      	adds	r2, r7, #2
 8002924:	8812      	ldrh	r2, [r2, #0]
 8002926:	4013      	ands	r3, r2
 8002928:	d004      	beq.n	8002934 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 800292a:	230f      	movs	r3, #15
 800292c:	18fb      	adds	r3, r7, r3
 800292e:	2201      	movs	r2, #1
 8002930:	701a      	strb	r2, [r3, #0]
 8002932:	e003      	b.n	800293c <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002934:	230f      	movs	r3, #15
 8002936:	18fb      	adds	r3, r7, r3
 8002938:	2200      	movs	r2, #0
 800293a:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 800293c:	230f      	movs	r3, #15
 800293e:	18fb      	adds	r3, r7, r3
 8002940:	781b      	ldrb	r3, [r3, #0]
}
 8002942:	0018      	movs	r0, r3
 8002944:	46bd      	mov	sp, r7
 8002946:	b004      	add	sp, #16
 8002948:	bd80      	pop	{r7, pc}

0800294a <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800294a:	b580      	push	{r7, lr}
 800294c:	b082      	sub	sp, #8
 800294e:	af00      	add	r7, sp, #0
 8002950:	6078      	str	r0, [r7, #4]
 8002952:	0008      	movs	r0, r1
 8002954:	0011      	movs	r1, r2
 8002956:	1cbb      	adds	r3, r7, #2
 8002958:	1c02      	adds	r2, r0, #0
 800295a:	801a      	strh	r2, [r3, #0]
 800295c:	1c7b      	adds	r3, r7, #1
 800295e:	1c0a      	adds	r2, r1, #0
 8002960:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002962:	1c7b      	adds	r3, r7, #1
 8002964:	781b      	ldrb	r3, [r3, #0]
 8002966:	2b00      	cmp	r3, #0
 8002968:	d004      	beq.n	8002974 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 800296a:	1cbb      	adds	r3, r7, #2
 800296c:	881a      	ldrh	r2, [r3, #0]
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 8002972:	e003      	b.n	800297c <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 8002974:	1cbb      	adds	r3, r7, #2
 8002976:	881a      	ldrh	r2, [r3, #0]
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800297c:	46c0      	nop			; (mov r8, r8)
 800297e:	46bd      	mov	sp, r7
 8002980:	b002      	add	sp, #8
 8002982:	bd80      	pop	{r7, pc}

08002984 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected to the EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002984:	b580      	push	{r7, lr}
 8002986:	b082      	sub	sp, #8
 8002988:	af00      	add	r7, sp, #0
 800298a:	0002      	movs	r2, r0
 800298c:	1dbb      	adds	r3, r7, #6
 800298e:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8002990:	4b09      	ldr	r3, [pc, #36]	; (80029b8 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 8002992:	695b      	ldr	r3, [r3, #20]
 8002994:	1dba      	adds	r2, r7, #6
 8002996:	8812      	ldrh	r2, [r2, #0]
 8002998:	4013      	ands	r3, r2
 800299a:	d008      	beq.n	80029ae <HAL_GPIO_EXTI_IRQHandler+0x2a>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800299c:	4b06      	ldr	r3, [pc, #24]	; (80029b8 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 800299e:	1dba      	adds	r2, r7, #6
 80029a0:	8812      	ldrh	r2, [r2, #0]
 80029a2:	615a      	str	r2, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80029a4:	1dbb      	adds	r3, r7, #6
 80029a6:	881b      	ldrh	r3, [r3, #0]
 80029a8:	0018      	movs	r0, r3
 80029aa:	f7fe fa91 	bl	8000ed0 <HAL_GPIO_EXTI_Callback>
  }
}
 80029ae:	46c0      	nop			; (mov r8, r8)
 80029b0:	46bd      	mov	sp, r7
 80029b2:	b002      	add	sp, #8
 80029b4:	bd80      	pop	{r7, pc}
 80029b6:	46c0      	nop			; (mov r8, r8)
 80029b8:	40010400 	.word	0x40010400

080029bc <HAL_PWR_EnterSTOPMode>:
  *            @arg PWR_STOPENTRY_WFI: Enter Stop mode with WFI instruction
  *            @arg PWR_STOPENTRY_WFE: Enter Stop mode with WFE instruction   
  * @retval None
  */
void HAL_PWR_EnterSTOPMode(uint32_t Regulator, uint8_t STOPEntry)
{
 80029bc:	b580      	push	{r7, lr}
 80029be:	b086      	sub	sp, #24
 80029c0:	af00      	add	r7, sp, #0
 80029c2:	6078      	str	r0, [r7, #4]
 80029c4:	000a      	movs	r2, r1
 80029c6:	1cfb      	adds	r3, r7, #3
 80029c8:	701a      	strb	r2, [r3, #0]
  uint32_t tmpreg = 0U;
 80029ca:	2300      	movs	r3, #0
 80029cc:	617b      	str	r3, [r7, #20]
  assert_param(IS_PWR_REGULATOR(Regulator));
  assert_param(IS_PWR_STOP_ENTRY(STOPEntry));

  /* It is forbidden to configure both EN_VREFINT=1 and ULP=1 if the device is
     in Stop mode or in Sleep/Low-power sleep mode */
  ulpbit = READ_BIT(PWR->CR, PWR_CR_ULP);
 80029ce:	4b25      	ldr	r3, [pc, #148]	; (8002a64 <HAL_PWR_EnterSTOPMode+0xa8>)
 80029d0:	681a      	ldr	r2, [r3, #0]
 80029d2:	2380      	movs	r3, #128	; 0x80
 80029d4:	009b      	lsls	r3, r3, #2
 80029d6:	4013      	ands	r3, r2
 80029d8:	613b      	str	r3, [r7, #16]
  vrefinbit = READ_BIT(SYSCFG->CFGR3, SYSCFG_CFGR3_EN_VREFINT);
 80029da:	4b23      	ldr	r3, [pc, #140]	; (8002a68 <HAL_PWR_EnterSTOPMode+0xac>)
 80029dc:	6a1b      	ldr	r3, [r3, #32]
 80029de:	2201      	movs	r2, #1
 80029e0:	4013      	ands	r3, r2
 80029e2:	60fb      	str	r3, [r7, #12]
  if((ulpbit != 0) && (vrefinbit != 0))
 80029e4:	693b      	ldr	r3, [r7, #16]
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d008      	beq.n	80029fc <HAL_PWR_EnterSTOPMode+0x40>
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d005      	beq.n	80029fc <HAL_PWR_EnterSTOPMode+0x40>
  {
    CLEAR_BIT(PWR->CR, PWR_CR_ULP);
 80029f0:	4b1c      	ldr	r3, [pc, #112]	; (8002a64 <HAL_PWR_EnterSTOPMode+0xa8>)
 80029f2:	681a      	ldr	r2, [r3, #0]
 80029f4:	4b1b      	ldr	r3, [pc, #108]	; (8002a64 <HAL_PWR_EnterSTOPMode+0xa8>)
 80029f6:	491d      	ldr	r1, [pc, #116]	; (8002a6c <HAL_PWR_EnterSTOPMode+0xb0>)
 80029f8:	400a      	ands	r2, r1
 80029fa:	601a      	str	r2, [r3, #0]
  }

  /* Select the regulator state in Stop mode ---------------------------------*/
  tmpreg = PWR->CR;
 80029fc:	4b19      	ldr	r3, [pc, #100]	; (8002a64 <HAL_PWR_EnterSTOPMode+0xa8>)
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	617b      	str	r3, [r7, #20]
  
  /* Clear PDDS and LPDS bits */
  CLEAR_BIT(tmpreg, (PWR_CR_PDDS | PWR_CR_LPSDSR));
 8002a02:	697b      	ldr	r3, [r7, #20]
 8002a04:	2203      	movs	r2, #3
 8002a06:	4393      	bics	r3, r2
 8002a08:	617b      	str	r3, [r7, #20]

 /* Set LPSDSR bit according to PWR_Regulator value */
  SET_BIT(tmpreg, Regulator);
 8002a0a:	697a      	ldr	r2, [r7, #20]
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	4313      	orrs	r3, r2
 8002a10:	617b      	str	r3, [r7, #20]

  /* Store the new value */
  PWR->CR = tmpreg;
 8002a12:	4b14      	ldr	r3, [pc, #80]	; (8002a64 <HAL_PWR_EnterSTOPMode+0xa8>)
 8002a14:	697a      	ldr	r2, [r7, #20]
 8002a16:	601a      	str	r2, [r3, #0]

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8002a18:	4b15      	ldr	r3, [pc, #84]	; (8002a70 <HAL_PWR_EnterSTOPMode+0xb4>)
 8002a1a:	691a      	ldr	r2, [r3, #16]
 8002a1c:	4b14      	ldr	r3, [pc, #80]	; (8002a70 <HAL_PWR_EnterSTOPMode+0xb4>)
 8002a1e:	2104      	movs	r1, #4
 8002a20:	430a      	orrs	r2, r1
 8002a22:	611a      	str	r2, [r3, #16]

  /* Select Stop mode entry --------------------------------------------------*/
  if(STOPEntry == PWR_STOPENTRY_WFI)
 8002a24:	1cfb      	adds	r3, r7, #3
 8002a26:	781b      	ldrb	r3, [r3, #0]
 8002a28:	2b01      	cmp	r3, #1
 8002a2a:	d101      	bne.n	8002a30 <HAL_PWR_EnterSTOPMode+0x74>
  {
    /* Request Wait For Interrupt */
    __WFI();
 8002a2c:	bf30      	wfi
 8002a2e:	e002      	b.n	8002a36 <HAL_PWR_EnterSTOPMode+0x7a>
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 8002a30:	bf40      	sev
    __WFE();
 8002a32:	bf20      	wfe
    __WFE();
 8002a34:	bf20      	wfe
  }
 
  /* Reset SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8002a36:	4b0e      	ldr	r3, [pc, #56]	; (8002a70 <HAL_PWR_EnterSTOPMode+0xb4>)
 8002a38:	691a      	ldr	r2, [r3, #16]
 8002a3a:	4b0d      	ldr	r3, [pc, #52]	; (8002a70 <HAL_PWR_EnterSTOPMode+0xb4>)
 8002a3c:	2104      	movs	r1, #4
 8002a3e:	438a      	bics	r2, r1
 8002a40:	611a      	str	r2, [r3, #16]

  if((ulpbit != 0) && (vrefinbit != 0))
 8002a42:	693b      	ldr	r3, [r7, #16]
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d009      	beq.n	8002a5c <HAL_PWR_EnterSTOPMode+0xa0>
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d006      	beq.n	8002a5c <HAL_PWR_EnterSTOPMode+0xa0>
  {
    SET_BIT(PWR->CR, PWR_CR_ULP);
 8002a4e:	4b05      	ldr	r3, [pc, #20]	; (8002a64 <HAL_PWR_EnterSTOPMode+0xa8>)
 8002a50:	681a      	ldr	r2, [r3, #0]
 8002a52:	4b04      	ldr	r3, [pc, #16]	; (8002a64 <HAL_PWR_EnterSTOPMode+0xa8>)
 8002a54:	2180      	movs	r1, #128	; 0x80
 8002a56:	0089      	lsls	r1, r1, #2
 8002a58:	430a      	orrs	r2, r1
 8002a5a:	601a      	str	r2, [r3, #0]
  }
}
 8002a5c:	46c0      	nop			; (mov r8, r8)
 8002a5e:	46bd      	mov	sp, r7
 8002a60:	b006      	add	sp, #24
 8002a62:	bd80      	pop	{r7, pc}
 8002a64:	40007000 	.word	0x40007000
 8002a68:	40010000 	.word	0x40010000
 8002a6c:	fffffdff 	.word	0xfffffdff
 8002a70:	e000ed00 	.word	0xe000ed00

08002a74 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002a74:	b5b0      	push	{r4, r5, r7, lr}
 8002a76:	b08a      	sub	sp, #40	; 0x28
 8002a78:	af00      	add	r7, sp, #0
 8002a7a:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d102      	bne.n	8002a88 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8002a82:	2301      	movs	r3, #1
 8002a84:	f000 fb5a 	bl	800313c <HAL_RCC_OscConfig+0x6c8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002a88:	4bce      	ldr	r3, [pc, #824]	; (8002dc4 <HAL_RCC_OscConfig+0x350>)
 8002a8a:	68db      	ldr	r3, [r3, #12]
 8002a8c:	220c      	movs	r2, #12
 8002a8e:	4013      	ands	r3, r2
 8002a90:	623b      	str	r3, [r7, #32]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002a92:	4bcc      	ldr	r3, [pc, #816]	; (8002dc4 <HAL_RCC_OscConfig+0x350>)
 8002a94:	68da      	ldr	r2, [r3, #12]
 8002a96:	2380      	movs	r3, #128	; 0x80
 8002a98:	025b      	lsls	r3, r3, #9
 8002a9a:	4013      	ands	r3, r2
 8002a9c:	61fb      	str	r3, [r7, #28]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	2201      	movs	r2, #1
 8002aa4:	4013      	ands	r3, r2
 8002aa6:	d100      	bne.n	8002aaa <HAL_RCC_OscConfig+0x36>
 8002aa8:	e07c      	b.n	8002ba4 <HAL_RCC_OscConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002aaa:	6a3b      	ldr	r3, [r7, #32]
 8002aac:	2b08      	cmp	r3, #8
 8002aae:	d007      	beq.n	8002ac0 <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002ab0:	6a3b      	ldr	r3, [r7, #32]
 8002ab2:	2b0c      	cmp	r3, #12
 8002ab4:	d111      	bne.n	8002ada <HAL_RCC_OscConfig+0x66>
 8002ab6:	69fa      	ldr	r2, [r7, #28]
 8002ab8:	2380      	movs	r3, #128	; 0x80
 8002aba:	025b      	lsls	r3, r3, #9
 8002abc:	429a      	cmp	r2, r3
 8002abe:	d10c      	bne.n	8002ada <HAL_RCC_OscConfig+0x66>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ac0:	4bc0      	ldr	r3, [pc, #768]	; (8002dc4 <HAL_RCC_OscConfig+0x350>)
 8002ac2:	681a      	ldr	r2, [r3, #0]
 8002ac4:	2380      	movs	r3, #128	; 0x80
 8002ac6:	029b      	lsls	r3, r3, #10
 8002ac8:	4013      	ands	r3, r2
 8002aca:	d100      	bne.n	8002ace <HAL_RCC_OscConfig+0x5a>
 8002acc:	e069      	b.n	8002ba2 <HAL_RCC_OscConfig+0x12e>
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	685b      	ldr	r3, [r3, #4]
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d165      	bne.n	8002ba2 <HAL_RCC_OscConfig+0x12e>
      {
        return HAL_ERROR;
 8002ad6:	2301      	movs	r3, #1
 8002ad8:	e330      	b.n	800313c <HAL_RCC_OscConfig+0x6c8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	685a      	ldr	r2, [r3, #4]
 8002ade:	2380      	movs	r3, #128	; 0x80
 8002ae0:	025b      	lsls	r3, r3, #9
 8002ae2:	429a      	cmp	r2, r3
 8002ae4:	d107      	bne.n	8002af6 <HAL_RCC_OscConfig+0x82>
 8002ae6:	4bb7      	ldr	r3, [pc, #732]	; (8002dc4 <HAL_RCC_OscConfig+0x350>)
 8002ae8:	681a      	ldr	r2, [r3, #0]
 8002aea:	4bb6      	ldr	r3, [pc, #728]	; (8002dc4 <HAL_RCC_OscConfig+0x350>)
 8002aec:	2180      	movs	r1, #128	; 0x80
 8002aee:	0249      	lsls	r1, r1, #9
 8002af0:	430a      	orrs	r2, r1
 8002af2:	601a      	str	r2, [r3, #0]
 8002af4:	e027      	b.n	8002b46 <HAL_RCC_OscConfig+0xd2>
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	685a      	ldr	r2, [r3, #4]
 8002afa:	23a0      	movs	r3, #160	; 0xa0
 8002afc:	02db      	lsls	r3, r3, #11
 8002afe:	429a      	cmp	r2, r3
 8002b00:	d10e      	bne.n	8002b20 <HAL_RCC_OscConfig+0xac>
 8002b02:	4bb0      	ldr	r3, [pc, #704]	; (8002dc4 <HAL_RCC_OscConfig+0x350>)
 8002b04:	681a      	ldr	r2, [r3, #0]
 8002b06:	4baf      	ldr	r3, [pc, #700]	; (8002dc4 <HAL_RCC_OscConfig+0x350>)
 8002b08:	2180      	movs	r1, #128	; 0x80
 8002b0a:	02c9      	lsls	r1, r1, #11
 8002b0c:	430a      	orrs	r2, r1
 8002b0e:	601a      	str	r2, [r3, #0]
 8002b10:	4bac      	ldr	r3, [pc, #688]	; (8002dc4 <HAL_RCC_OscConfig+0x350>)
 8002b12:	681a      	ldr	r2, [r3, #0]
 8002b14:	4bab      	ldr	r3, [pc, #684]	; (8002dc4 <HAL_RCC_OscConfig+0x350>)
 8002b16:	2180      	movs	r1, #128	; 0x80
 8002b18:	0249      	lsls	r1, r1, #9
 8002b1a:	430a      	orrs	r2, r1
 8002b1c:	601a      	str	r2, [r3, #0]
 8002b1e:	e012      	b.n	8002b46 <HAL_RCC_OscConfig+0xd2>
 8002b20:	4ba8      	ldr	r3, [pc, #672]	; (8002dc4 <HAL_RCC_OscConfig+0x350>)
 8002b22:	681a      	ldr	r2, [r3, #0]
 8002b24:	4ba7      	ldr	r3, [pc, #668]	; (8002dc4 <HAL_RCC_OscConfig+0x350>)
 8002b26:	49a8      	ldr	r1, [pc, #672]	; (8002dc8 <HAL_RCC_OscConfig+0x354>)
 8002b28:	400a      	ands	r2, r1
 8002b2a:	601a      	str	r2, [r3, #0]
 8002b2c:	4ba5      	ldr	r3, [pc, #660]	; (8002dc4 <HAL_RCC_OscConfig+0x350>)
 8002b2e:	681a      	ldr	r2, [r3, #0]
 8002b30:	2380      	movs	r3, #128	; 0x80
 8002b32:	025b      	lsls	r3, r3, #9
 8002b34:	4013      	ands	r3, r2
 8002b36:	60fb      	str	r3, [r7, #12]
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	4ba2      	ldr	r3, [pc, #648]	; (8002dc4 <HAL_RCC_OscConfig+0x350>)
 8002b3c:	681a      	ldr	r2, [r3, #0]
 8002b3e:	4ba1      	ldr	r3, [pc, #644]	; (8002dc4 <HAL_RCC_OscConfig+0x350>)
 8002b40:	49a2      	ldr	r1, [pc, #648]	; (8002dcc <HAL_RCC_OscConfig+0x358>)
 8002b42:	400a      	ands	r2, r1
 8002b44:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	685b      	ldr	r3, [r3, #4]
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d014      	beq.n	8002b78 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b4e:	f7ff f865 	bl	8001c1c <HAL_GetTick>
 8002b52:	0003      	movs	r3, r0
 8002b54:	61bb      	str	r3, [r7, #24]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002b56:	e008      	b.n	8002b6a <HAL_RCC_OscConfig+0xf6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002b58:	f7ff f860 	bl	8001c1c <HAL_GetTick>
 8002b5c:	0002      	movs	r2, r0
 8002b5e:	69bb      	ldr	r3, [r7, #24]
 8002b60:	1ad3      	subs	r3, r2, r3
 8002b62:	2b64      	cmp	r3, #100	; 0x64
 8002b64:	d901      	bls.n	8002b6a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002b66:	2303      	movs	r3, #3
 8002b68:	e2e8      	b.n	800313c <HAL_RCC_OscConfig+0x6c8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002b6a:	4b96      	ldr	r3, [pc, #600]	; (8002dc4 <HAL_RCC_OscConfig+0x350>)
 8002b6c:	681a      	ldr	r2, [r3, #0]
 8002b6e:	2380      	movs	r3, #128	; 0x80
 8002b70:	029b      	lsls	r3, r3, #10
 8002b72:	4013      	ands	r3, r2
 8002b74:	d0f0      	beq.n	8002b58 <HAL_RCC_OscConfig+0xe4>
 8002b76:	e015      	b.n	8002ba4 <HAL_RCC_OscConfig+0x130>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b78:	f7ff f850 	bl	8001c1c <HAL_GetTick>
 8002b7c:	0003      	movs	r3, r0
 8002b7e:	61bb      	str	r3, [r7, #24]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002b80:	e008      	b.n	8002b94 <HAL_RCC_OscConfig+0x120>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002b82:	f7ff f84b 	bl	8001c1c <HAL_GetTick>
 8002b86:	0002      	movs	r2, r0
 8002b88:	69bb      	ldr	r3, [r7, #24]
 8002b8a:	1ad3      	subs	r3, r2, r3
 8002b8c:	2b64      	cmp	r3, #100	; 0x64
 8002b8e:	d901      	bls.n	8002b94 <HAL_RCC_OscConfig+0x120>
          {
            return HAL_TIMEOUT;
 8002b90:	2303      	movs	r3, #3
 8002b92:	e2d3      	b.n	800313c <HAL_RCC_OscConfig+0x6c8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002b94:	4b8b      	ldr	r3, [pc, #556]	; (8002dc4 <HAL_RCC_OscConfig+0x350>)
 8002b96:	681a      	ldr	r2, [r3, #0]
 8002b98:	2380      	movs	r3, #128	; 0x80
 8002b9a:	029b      	lsls	r3, r3, #10
 8002b9c:	4013      	ands	r3, r2
 8002b9e:	d1f0      	bne.n	8002b82 <HAL_RCC_OscConfig+0x10e>
 8002ba0:	e000      	b.n	8002ba4 <HAL_RCC_OscConfig+0x130>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ba2:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	2202      	movs	r2, #2
 8002baa:	4013      	ands	r3, r2
 8002bac:	d100      	bne.n	8002bb0 <HAL_RCC_OscConfig+0x13c>
 8002bae:	e08b      	b.n	8002cc8 <HAL_RCC_OscConfig+0x254>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	68db      	ldr	r3, [r3, #12]
 8002bb4:	617b      	str	r3, [r7, #20]
      hsi_state &= ~RCC_CR_HSIOUTEN;
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002bb6:	6a3b      	ldr	r3, [r7, #32]
 8002bb8:	2b04      	cmp	r3, #4
 8002bba:	d005      	beq.n	8002bc8 <HAL_RCC_OscConfig+0x154>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002bbc:	6a3b      	ldr	r3, [r7, #32]
 8002bbe:	2b0c      	cmp	r3, #12
 8002bc0:	d13e      	bne.n	8002c40 <HAL_RCC_OscConfig+0x1cc>
 8002bc2:	69fb      	ldr	r3, [r7, #28]
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d13b      	bne.n	8002c40 <HAL_RCC_OscConfig+0x1cc>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 8002bc8:	4b7e      	ldr	r3, [pc, #504]	; (8002dc4 <HAL_RCC_OscConfig+0x350>)
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	2204      	movs	r2, #4
 8002bce:	4013      	ands	r3, r2
 8002bd0:	d004      	beq.n	8002bdc <HAL_RCC_OscConfig+0x168>
 8002bd2:	697b      	ldr	r3, [r7, #20]
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d101      	bne.n	8002bdc <HAL_RCC_OscConfig+0x168>
      {
        return HAL_ERROR;
 8002bd8:	2301      	movs	r3, #1
 8002bda:	e2af      	b.n	800313c <HAL_RCC_OscConfig+0x6c8>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002bdc:	4b79      	ldr	r3, [pc, #484]	; (8002dc4 <HAL_RCC_OscConfig+0x350>)
 8002bde:	685b      	ldr	r3, [r3, #4]
 8002be0:	4a7b      	ldr	r2, [pc, #492]	; (8002dd0 <HAL_RCC_OscConfig+0x35c>)
 8002be2:	4013      	ands	r3, r2
 8002be4:	0019      	movs	r1, r3
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	691b      	ldr	r3, [r3, #16]
 8002bea:	021a      	lsls	r2, r3, #8
 8002bec:	4b75      	ldr	r3, [pc, #468]	; (8002dc4 <HAL_RCC_OscConfig+0x350>)
 8002bee:	430a      	orrs	r2, r1
 8002bf0:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8002bf2:	4b74      	ldr	r3, [pc, #464]	; (8002dc4 <HAL_RCC_OscConfig+0x350>)
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	2209      	movs	r2, #9
 8002bf8:	4393      	bics	r3, r2
 8002bfa:	0019      	movs	r1, r3
 8002bfc:	4b71      	ldr	r3, [pc, #452]	; (8002dc4 <HAL_RCC_OscConfig+0x350>)
 8002bfe:	697a      	ldr	r2, [r7, #20]
 8002c00:	430a      	orrs	r2, r1
 8002c02:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002c04:	f000 fbe8 	bl	80033d8 <HAL_RCC_GetSysClockFreq>
 8002c08:	0001      	movs	r1, r0
 8002c0a:	4b6e      	ldr	r3, [pc, #440]	; (8002dc4 <HAL_RCC_OscConfig+0x350>)
 8002c0c:	68db      	ldr	r3, [r3, #12]
 8002c0e:	091b      	lsrs	r3, r3, #4
 8002c10:	220f      	movs	r2, #15
 8002c12:	4013      	ands	r3, r2
 8002c14:	4a6f      	ldr	r2, [pc, #444]	; (8002dd4 <HAL_RCC_OscConfig+0x360>)
 8002c16:	5cd3      	ldrb	r3, [r2, r3]
 8002c18:	000a      	movs	r2, r1
 8002c1a:	40da      	lsrs	r2, r3
 8002c1c:	4b6e      	ldr	r3, [pc, #440]	; (8002dd8 <HAL_RCC_OscConfig+0x364>)
 8002c1e:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 8002c20:	4b6e      	ldr	r3, [pc, #440]	; (8002ddc <HAL_RCC_OscConfig+0x368>)
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	2513      	movs	r5, #19
 8002c26:	197c      	adds	r4, r7, r5
 8002c28:	0018      	movs	r0, r3
 8002c2a:	f7fe ffb1 	bl	8001b90 <HAL_InitTick>
 8002c2e:	0003      	movs	r3, r0
 8002c30:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 8002c32:	197b      	adds	r3, r7, r5
 8002c34:	781b      	ldrb	r3, [r3, #0]
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d046      	beq.n	8002cc8 <HAL_RCC_OscConfig+0x254>
      {
        return status;
 8002c3a:	197b      	adds	r3, r7, r5
 8002c3c:	781b      	ldrb	r3, [r3, #0]
 8002c3e:	e27d      	b.n	800313c <HAL_RCC_OscConfig+0x6c8>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 8002c40:	697b      	ldr	r3, [r7, #20]
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d027      	beq.n	8002c96 <HAL_RCC_OscConfig+0x222>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8002c46:	4b5f      	ldr	r3, [pc, #380]	; (8002dc4 <HAL_RCC_OscConfig+0x350>)
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	2209      	movs	r2, #9
 8002c4c:	4393      	bics	r3, r2
 8002c4e:	0019      	movs	r1, r3
 8002c50:	4b5c      	ldr	r3, [pc, #368]	; (8002dc4 <HAL_RCC_OscConfig+0x350>)
 8002c52:	697a      	ldr	r2, [r7, #20]
 8002c54:	430a      	orrs	r2, r1
 8002c56:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c58:	f7fe ffe0 	bl	8001c1c <HAL_GetTick>
 8002c5c:	0003      	movs	r3, r0
 8002c5e:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002c60:	e008      	b.n	8002c74 <HAL_RCC_OscConfig+0x200>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002c62:	f7fe ffdb 	bl	8001c1c <HAL_GetTick>
 8002c66:	0002      	movs	r2, r0
 8002c68:	69bb      	ldr	r3, [r7, #24]
 8002c6a:	1ad3      	subs	r3, r2, r3
 8002c6c:	2b02      	cmp	r3, #2
 8002c6e:	d901      	bls.n	8002c74 <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 8002c70:	2303      	movs	r3, #3
 8002c72:	e263      	b.n	800313c <HAL_RCC_OscConfig+0x6c8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002c74:	4b53      	ldr	r3, [pc, #332]	; (8002dc4 <HAL_RCC_OscConfig+0x350>)
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	2204      	movs	r2, #4
 8002c7a:	4013      	ands	r3, r2
 8002c7c:	d0f1      	beq.n	8002c62 <HAL_RCC_OscConfig+0x1ee>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c7e:	4b51      	ldr	r3, [pc, #324]	; (8002dc4 <HAL_RCC_OscConfig+0x350>)
 8002c80:	685b      	ldr	r3, [r3, #4]
 8002c82:	4a53      	ldr	r2, [pc, #332]	; (8002dd0 <HAL_RCC_OscConfig+0x35c>)
 8002c84:	4013      	ands	r3, r2
 8002c86:	0019      	movs	r1, r3
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	691b      	ldr	r3, [r3, #16]
 8002c8c:	021a      	lsls	r2, r3, #8
 8002c8e:	4b4d      	ldr	r3, [pc, #308]	; (8002dc4 <HAL_RCC_OscConfig+0x350>)
 8002c90:	430a      	orrs	r2, r1
 8002c92:	605a      	str	r2, [r3, #4]
 8002c94:	e018      	b.n	8002cc8 <HAL_RCC_OscConfig+0x254>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002c96:	4b4b      	ldr	r3, [pc, #300]	; (8002dc4 <HAL_RCC_OscConfig+0x350>)
 8002c98:	681a      	ldr	r2, [r3, #0]
 8002c9a:	4b4a      	ldr	r3, [pc, #296]	; (8002dc4 <HAL_RCC_OscConfig+0x350>)
 8002c9c:	2101      	movs	r1, #1
 8002c9e:	438a      	bics	r2, r1
 8002ca0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ca2:	f7fe ffbb 	bl	8001c1c <HAL_GetTick>
 8002ca6:	0003      	movs	r3, r0
 8002ca8:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002caa:	e008      	b.n	8002cbe <HAL_RCC_OscConfig+0x24a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002cac:	f7fe ffb6 	bl	8001c1c <HAL_GetTick>
 8002cb0:	0002      	movs	r2, r0
 8002cb2:	69bb      	ldr	r3, [r7, #24]
 8002cb4:	1ad3      	subs	r3, r2, r3
 8002cb6:	2b02      	cmp	r3, #2
 8002cb8:	d901      	bls.n	8002cbe <HAL_RCC_OscConfig+0x24a>
          {
            return HAL_TIMEOUT;
 8002cba:	2303      	movs	r3, #3
 8002cbc:	e23e      	b.n	800313c <HAL_RCC_OscConfig+0x6c8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002cbe:	4b41      	ldr	r3, [pc, #260]	; (8002dc4 <HAL_RCC_OscConfig+0x350>)
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	2204      	movs	r2, #4
 8002cc4:	4013      	ands	r3, r2
 8002cc6:	d1f1      	bne.n	8002cac <HAL_RCC_OscConfig+0x238>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	2210      	movs	r2, #16
 8002cce:	4013      	ands	r3, r2
 8002cd0:	d100      	bne.n	8002cd4 <HAL_RCC_OscConfig+0x260>
 8002cd2:	e0a1      	b.n	8002e18 <HAL_RCC_OscConfig+0x3a4>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002cd4:	6a3b      	ldr	r3, [r7, #32]
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d140      	bne.n	8002d5c <HAL_RCC_OscConfig+0x2e8>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002cda:	4b3a      	ldr	r3, [pc, #232]	; (8002dc4 <HAL_RCC_OscConfig+0x350>)
 8002cdc:	681a      	ldr	r2, [r3, #0]
 8002cde:	2380      	movs	r3, #128	; 0x80
 8002ce0:	009b      	lsls	r3, r3, #2
 8002ce2:	4013      	ands	r3, r2
 8002ce4:	d005      	beq.n	8002cf2 <HAL_RCC_OscConfig+0x27e>
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	699b      	ldr	r3, [r3, #24]
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d101      	bne.n	8002cf2 <HAL_RCC_OscConfig+0x27e>
      {
        return HAL_ERROR;
 8002cee:	2301      	movs	r3, #1
 8002cf0:	e224      	b.n	800313c <HAL_RCC_OscConfig+0x6c8>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002cf2:	4b34      	ldr	r3, [pc, #208]	; (8002dc4 <HAL_RCC_OscConfig+0x350>)
 8002cf4:	685b      	ldr	r3, [r3, #4]
 8002cf6:	4a3a      	ldr	r2, [pc, #232]	; (8002de0 <HAL_RCC_OscConfig+0x36c>)
 8002cf8:	4013      	ands	r3, r2
 8002cfa:	0019      	movs	r1, r3
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	6a1a      	ldr	r2, [r3, #32]
 8002d00:	4b30      	ldr	r3, [pc, #192]	; (8002dc4 <HAL_RCC_OscConfig+0x350>)
 8002d02:	430a      	orrs	r2, r1
 8002d04:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002d06:	4b2f      	ldr	r3, [pc, #188]	; (8002dc4 <HAL_RCC_OscConfig+0x350>)
 8002d08:	685b      	ldr	r3, [r3, #4]
 8002d0a:	021b      	lsls	r3, r3, #8
 8002d0c:	0a19      	lsrs	r1, r3, #8
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	69db      	ldr	r3, [r3, #28]
 8002d12:	061a      	lsls	r2, r3, #24
 8002d14:	4b2b      	ldr	r3, [pc, #172]	; (8002dc4 <HAL_RCC_OscConfig+0x350>)
 8002d16:	430a      	orrs	r2, r1
 8002d18:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	6a1b      	ldr	r3, [r3, #32]
 8002d1e:	0b5b      	lsrs	r3, r3, #13
 8002d20:	3301      	adds	r3, #1
 8002d22:	2280      	movs	r2, #128	; 0x80
 8002d24:	0212      	lsls	r2, r2, #8
 8002d26:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8002d28:	4b26      	ldr	r3, [pc, #152]	; (8002dc4 <HAL_RCC_OscConfig+0x350>)
 8002d2a:	68db      	ldr	r3, [r3, #12]
 8002d2c:	091b      	lsrs	r3, r3, #4
 8002d2e:	210f      	movs	r1, #15
 8002d30:	400b      	ands	r3, r1
 8002d32:	4928      	ldr	r1, [pc, #160]	; (8002dd4 <HAL_RCC_OscConfig+0x360>)
 8002d34:	5ccb      	ldrb	r3, [r1, r3]
 8002d36:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8002d38:	4b27      	ldr	r3, [pc, #156]	; (8002dd8 <HAL_RCC_OscConfig+0x364>)
 8002d3a:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 8002d3c:	4b27      	ldr	r3, [pc, #156]	; (8002ddc <HAL_RCC_OscConfig+0x368>)
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	2513      	movs	r5, #19
 8002d42:	197c      	adds	r4, r7, r5
 8002d44:	0018      	movs	r0, r3
 8002d46:	f7fe ff23 	bl	8001b90 <HAL_InitTick>
 8002d4a:	0003      	movs	r3, r0
 8002d4c:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 8002d4e:	197b      	adds	r3, r7, r5
 8002d50:	781b      	ldrb	r3, [r3, #0]
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d060      	beq.n	8002e18 <HAL_RCC_OscConfig+0x3a4>
        {
          return status;
 8002d56:	197b      	adds	r3, r7, r5
 8002d58:	781b      	ldrb	r3, [r3, #0]
 8002d5a:	e1ef      	b.n	800313c <HAL_RCC_OscConfig+0x6c8>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	699b      	ldr	r3, [r3, #24]
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d03f      	beq.n	8002de4 <HAL_RCC_OscConfig+0x370>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002d64:	4b17      	ldr	r3, [pc, #92]	; (8002dc4 <HAL_RCC_OscConfig+0x350>)
 8002d66:	681a      	ldr	r2, [r3, #0]
 8002d68:	4b16      	ldr	r3, [pc, #88]	; (8002dc4 <HAL_RCC_OscConfig+0x350>)
 8002d6a:	2180      	movs	r1, #128	; 0x80
 8002d6c:	0049      	lsls	r1, r1, #1
 8002d6e:	430a      	orrs	r2, r1
 8002d70:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d72:	f7fe ff53 	bl	8001c1c <HAL_GetTick>
 8002d76:	0003      	movs	r3, r0
 8002d78:	61bb      	str	r3, [r7, #24]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8002d7a:	e008      	b.n	8002d8e <HAL_RCC_OscConfig+0x31a>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002d7c:	f7fe ff4e 	bl	8001c1c <HAL_GetTick>
 8002d80:	0002      	movs	r2, r0
 8002d82:	69bb      	ldr	r3, [r7, #24]
 8002d84:	1ad3      	subs	r3, r2, r3
 8002d86:	2b02      	cmp	r3, #2
 8002d88:	d901      	bls.n	8002d8e <HAL_RCC_OscConfig+0x31a>
          {
            return HAL_TIMEOUT;
 8002d8a:	2303      	movs	r3, #3
 8002d8c:	e1d6      	b.n	800313c <HAL_RCC_OscConfig+0x6c8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8002d8e:	4b0d      	ldr	r3, [pc, #52]	; (8002dc4 <HAL_RCC_OscConfig+0x350>)
 8002d90:	681a      	ldr	r2, [r3, #0]
 8002d92:	2380      	movs	r3, #128	; 0x80
 8002d94:	009b      	lsls	r3, r3, #2
 8002d96:	4013      	ands	r3, r2
 8002d98:	d0f0      	beq.n	8002d7c <HAL_RCC_OscConfig+0x308>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002d9a:	4b0a      	ldr	r3, [pc, #40]	; (8002dc4 <HAL_RCC_OscConfig+0x350>)
 8002d9c:	685b      	ldr	r3, [r3, #4]
 8002d9e:	4a10      	ldr	r2, [pc, #64]	; (8002de0 <HAL_RCC_OscConfig+0x36c>)
 8002da0:	4013      	ands	r3, r2
 8002da2:	0019      	movs	r1, r3
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	6a1a      	ldr	r2, [r3, #32]
 8002da8:	4b06      	ldr	r3, [pc, #24]	; (8002dc4 <HAL_RCC_OscConfig+0x350>)
 8002daa:	430a      	orrs	r2, r1
 8002dac:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002dae:	4b05      	ldr	r3, [pc, #20]	; (8002dc4 <HAL_RCC_OscConfig+0x350>)
 8002db0:	685b      	ldr	r3, [r3, #4]
 8002db2:	021b      	lsls	r3, r3, #8
 8002db4:	0a19      	lsrs	r1, r3, #8
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	69db      	ldr	r3, [r3, #28]
 8002dba:	061a      	lsls	r2, r3, #24
 8002dbc:	4b01      	ldr	r3, [pc, #4]	; (8002dc4 <HAL_RCC_OscConfig+0x350>)
 8002dbe:	430a      	orrs	r2, r1
 8002dc0:	605a      	str	r2, [r3, #4]
 8002dc2:	e029      	b.n	8002e18 <HAL_RCC_OscConfig+0x3a4>
 8002dc4:	40021000 	.word	0x40021000
 8002dc8:	fffeffff 	.word	0xfffeffff
 8002dcc:	fffbffff 	.word	0xfffbffff
 8002dd0:	ffffe0ff 	.word	0xffffe0ff
 8002dd4:	08006aa8 	.word	0x08006aa8
 8002dd8:	20000010 	.word	0x20000010
 8002ddc:	20000014 	.word	0x20000014
 8002de0:	ffff1fff 	.word	0xffff1fff
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002de4:	4bbe      	ldr	r3, [pc, #760]	; (80030e0 <HAL_RCC_OscConfig+0x66c>)
 8002de6:	681a      	ldr	r2, [r3, #0]
 8002de8:	4bbd      	ldr	r3, [pc, #756]	; (80030e0 <HAL_RCC_OscConfig+0x66c>)
 8002dea:	49be      	ldr	r1, [pc, #760]	; (80030e4 <HAL_RCC_OscConfig+0x670>)
 8002dec:	400a      	ands	r2, r1
 8002dee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002df0:	f7fe ff14 	bl	8001c1c <HAL_GetTick>
 8002df4:	0003      	movs	r3, r0
 8002df6:	61bb      	str	r3, [r7, #24]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8002df8:	e008      	b.n	8002e0c <HAL_RCC_OscConfig+0x398>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002dfa:	f7fe ff0f 	bl	8001c1c <HAL_GetTick>
 8002dfe:	0002      	movs	r2, r0
 8002e00:	69bb      	ldr	r3, [r7, #24]
 8002e02:	1ad3      	subs	r3, r2, r3
 8002e04:	2b02      	cmp	r3, #2
 8002e06:	d901      	bls.n	8002e0c <HAL_RCC_OscConfig+0x398>
          {
            return HAL_TIMEOUT;
 8002e08:	2303      	movs	r3, #3
 8002e0a:	e197      	b.n	800313c <HAL_RCC_OscConfig+0x6c8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8002e0c:	4bb4      	ldr	r3, [pc, #720]	; (80030e0 <HAL_RCC_OscConfig+0x66c>)
 8002e0e:	681a      	ldr	r2, [r3, #0]
 8002e10:	2380      	movs	r3, #128	; 0x80
 8002e12:	009b      	lsls	r3, r3, #2
 8002e14:	4013      	ands	r3, r2
 8002e16:	d1f0      	bne.n	8002dfa <HAL_RCC_OscConfig+0x386>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	2208      	movs	r2, #8
 8002e1e:	4013      	ands	r3, r2
 8002e20:	d036      	beq.n	8002e90 <HAL_RCC_OscConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	695b      	ldr	r3, [r3, #20]
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d019      	beq.n	8002e5e <HAL_RCC_OscConfig+0x3ea>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002e2a:	4bad      	ldr	r3, [pc, #692]	; (80030e0 <HAL_RCC_OscConfig+0x66c>)
 8002e2c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002e2e:	4bac      	ldr	r3, [pc, #688]	; (80030e0 <HAL_RCC_OscConfig+0x66c>)
 8002e30:	2101      	movs	r1, #1
 8002e32:	430a      	orrs	r2, r1
 8002e34:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002e36:	f7fe fef1 	bl	8001c1c <HAL_GetTick>
 8002e3a:	0003      	movs	r3, r0
 8002e3c:	61bb      	str	r3, [r7, #24]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002e3e:	e008      	b.n	8002e52 <HAL_RCC_OscConfig+0x3de>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002e40:	f7fe feec 	bl	8001c1c <HAL_GetTick>
 8002e44:	0002      	movs	r2, r0
 8002e46:	69bb      	ldr	r3, [r7, #24]
 8002e48:	1ad3      	subs	r3, r2, r3
 8002e4a:	2b02      	cmp	r3, #2
 8002e4c:	d901      	bls.n	8002e52 <HAL_RCC_OscConfig+0x3de>
        {
          return HAL_TIMEOUT;
 8002e4e:	2303      	movs	r3, #3
 8002e50:	e174      	b.n	800313c <HAL_RCC_OscConfig+0x6c8>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002e52:	4ba3      	ldr	r3, [pc, #652]	; (80030e0 <HAL_RCC_OscConfig+0x66c>)
 8002e54:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002e56:	2202      	movs	r2, #2
 8002e58:	4013      	ands	r3, r2
 8002e5a:	d0f1      	beq.n	8002e40 <HAL_RCC_OscConfig+0x3cc>
 8002e5c:	e018      	b.n	8002e90 <HAL_RCC_OscConfig+0x41c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002e5e:	4ba0      	ldr	r3, [pc, #640]	; (80030e0 <HAL_RCC_OscConfig+0x66c>)
 8002e60:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002e62:	4b9f      	ldr	r3, [pc, #636]	; (80030e0 <HAL_RCC_OscConfig+0x66c>)
 8002e64:	2101      	movs	r1, #1
 8002e66:	438a      	bics	r2, r1
 8002e68:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002e6a:	f7fe fed7 	bl	8001c1c <HAL_GetTick>
 8002e6e:	0003      	movs	r3, r0
 8002e70:	61bb      	str	r3, [r7, #24]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002e72:	e008      	b.n	8002e86 <HAL_RCC_OscConfig+0x412>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002e74:	f7fe fed2 	bl	8001c1c <HAL_GetTick>
 8002e78:	0002      	movs	r2, r0
 8002e7a:	69bb      	ldr	r3, [r7, #24]
 8002e7c:	1ad3      	subs	r3, r2, r3
 8002e7e:	2b02      	cmp	r3, #2
 8002e80:	d901      	bls.n	8002e86 <HAL_RCC_OscConfig+0x412>
        {
          return HAL_TIMEOUT;
 8002e82:	2303      	movs	r3, #3
 8002e84:	e15a      	b.n	800313c <HAL_RCC_OscConfig+0x6c8>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002e86:	4b96      	ldr	r3, [pc, #600]	; (80030e0 <HAL_RCC_OscConfig+0x66c>)
 8002e88:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002e8a:	2202      	movs	r2, #2
 8002e8c:	4013      	ands	r3, r2
 8002e8e:	d1f1      	bne.n	8002e74 <HAL_RCC_OscConfig+0x400>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	2204      	movs	r2, #4
 8002e96:	4013      	ands	r3, r2
 8002e98:	d100      	bne.n	8002e9c <HAL_RCC_OscConfig+0x428>
 8002e9a:	e0ae      	b.n	8002ffa <HAL_RCC_OscConfig+0x586>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002e9c:	2027      	movs	r0, #39	; 0x27
 8002e9e:	183b      	adds	r3, r7, r0
 8002ea0:	2200      	movs	r2, #0
 8002ea2:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002ea4:	4b8e      	ldr	r3, [pc, #568]	; (80030e0 <HAL_RCC_OscConfig+0x66c>)
 8002ea6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002ea8:	2380      	movs	r3, #128	; 0x80
 8002eaa:	055b      	lsls	r3, r3, #21
 8002eac:	4013      	ands	r3, r2
 8002eae:	d109      	bne.n	8002ec4 <HAL_RCC_OscConfig+0x450>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002eb0:	4b8b      	ldr	r3, [pc, #556]	; (80030e0 <HAL_RCC_OscConfig+0x66c>)
 8002eb2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002eb4:	4b8a      	ldr	r3, [pc, #552]	; (80030e0 <HAL_RCC_OscConfig+0x66c>)
 8002eb6:	2180      	movs	r1, #128	; 0x80
 8002eb8:	0549      	lsls	r1, r1, #21
 8002eba:	430a      	orrs	r2, r1
 8002ebc:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 8002ebe:	183b      	adds	r3, r7, r0
 8002ec0:	2201      	movs	r2, #1
 8002ec2:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ec4:	4b88      	ldr	r3, [pc, #544]	; (80030e8 <HAL_RCC_OscConfig+0x674>)
 8002ec6:	681a      	ldr	r2, [r3, #0]
 8002ec8:	2380      	movs	r3, #128	; 0x80
 8002eca:	005b      	lsls	r3, r3, #1
 8002ecc:	4013      	ands	r3, r2
 8002ece:	d11a      	bne.n	8002f06 <HAL_RCC_OscConfig+0x492>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002ed0:	4b85      	ldr	r3, [pc, #532]	; (80030e8 <HAL_RCC_OscConfig+0x674>)
 8002ed2:	681a      	ldr	r2, [r3, #0]
 8002ed4:	4b84      	ldr	r3, [pc, #528]	; (80030e8 <HAL_RCC_OscConfig+0x674>)
 8002ed6:	2180      	movs	r1, #128	; 0x80
 8002ed8:	0049      	lsls	r1, r1, #1
 8002eda:	430a      	orrs	r2, r1
 8002edc:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002ede:	f7fe fe9d 	bl	8001c1c <HAL_GetTick>
 8002ee2:	0003      	movs	r3, r0
 8002ee4:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ee6:	e008      	b.n	8002efa <HAL_RCC_OscConfig+0x486>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002ee8:	f7fe fe98 	bl	8001c1c <HAL_GetTick>
 8002eec:	0002      	movs	r2, r0
 8002eee:	69bb      	ldr	r3, [r7, #24]
 8002ef0:	1ad3      	subs	r3, r2, r3
 8002ef2:	2b64      	cmp	r3, #100	; 0x64
 8002ef4:	d901      	bls.n	8002efa <HAL_RCC_OscConfig+0x486>
        {
          return HAL_TIMEOUT;
 8002ef6:	2303      	movs	r3, #3
 8002ef8:	e120      	b.n	800313c <HAL_RCC_OscConfig+0x6c8>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002efa:	4b7b      	ldr	r3, [pc, #492]	; (80030e8 <HAL_RCC_OscConfig+0x674>)
 8002efc:	681a      	ldr	r2, [r3, #0]
 8002efe:	2380      	movs	r3, #128	; 0x80
 8002f00:	005b      	lsls	r3, r3, #1
 8002f02:	4013      	ands	r3, r2
 8002f04:	d0f0      	beq.n	8002ee8 <HAL_RCC_OscConfig+0x474>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	689a      	ldr	r2, [r3, #8]
 8002f0a:	2380      	movs	r3, #128	; 0x80
 8002f0c:	005b      	lsls	r3, r3, #1
 8002f0e:	429a      	cmp	r2, r3
 8002f10:	d107      	bne.n	8002f22 <HAL_RCC_OscConfig+0x4ae>
 8002f12:	4b73      	ldr	r3, [pc, #460]	; (80030e0 <HAL_RCC_OscConfig+0x66c>)
 8002f14:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002f16:	4b72      	ldr	r3, [pc, #456]	; (80030e0 <HAL_RCC_OscConfig+0x66c>)
 8002f18:	2180      	movs	r1, #128	; 0x80
 8002f1a:	0049      	lsls	r1, r1, #1
 8002f1c:	430a      	orrs	r2, r1
 8002f1e:	651a      	str	r2, [r3, #80]	; 0x50
 8002f20:	e031      	b.n	8002f86 <HAL_RCC_OscConfig+0x512>
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	689b      	ldr	r3, [r3, #8]
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d10c      	bne.n	8002f44 <HAL_RCC_OscConfig+0x4d0>
 8002f2a:	4b6d      	ldr	r3, [pc, #436]	; (80030e0 <HAL_RCC_OscConfig+0x66c>)
 8002f2c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002f2e:	4b6c      	ldr	r3, [pc, #432]	; (80030e0 <HAL_RCC_OscConfig+0x66c>)
 8002f30:	496c      	ldr	r1, [pc, #432]	; (80030e4 <HAL_RCC_OscConfig+0x670>)
 8002f32:	400a      	ands	r2, r1
 8002f34:	651a      	str	r2, [r3, #80]	; 0x50
 8002f36:	4b6a      	ldr	r3, [pc, #424]	; (80030e0 <HAL_RCC_OscConfig+0x66c>)
 8002f38:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002f3a:	4b69      	ldr	r3, [pc, #420]	; (80030e0 <HAL_RCC_OscConfig+0x66c>)
 8002f3c:	496b      	ldr	r1, [pc, #428]	; (80030ec <HAL_RCC_OscConfig+0x678>)
 8002f3e:	400a      	ands	r2, r1
 8002f40:	651a      	str	r2, [r3, #80]	; 0x50
 8002f42:	e020      	b.n	8002f86 <HAL_RCC_OscConfig+0x512>
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	689a      	ldr	r2, [r3, #8]
 8002f48:	23a0      	movs	r3, #160	; 0xa0
 8002f4a:	00db      	lsls	r3, r3, #3
 8002f4c:	429a      	cmp	r2, r3
 8002f4e:	d10e      	bne.n	8002f6e <HAL_RCC_OscConfig+0x4fa>
 8002f50:	4b63      	ldr	r3, [pc, #396]	; (80030e0 <HAL_RCC_OscConfig+0x66c>)
 8002f52:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002f54:	4b62      	ldr	r3, [pc, #392]	; (80030e0 <HAL_RCC_OscConfig+0x66c>)
 8002f56:	2180      	movs	r1, #128	; 0x80
 8002f58:	00c9      	lsls	r1, r1, #3
 8002f5a:	430a      	orrs	r2, r1
 8002f5c:	651a      	str	r2, [r3, #80]	; 0x50
 8002f5e:	4b60      	ldr	r3, [pc, #384]	; (80030e0 <HAL_RCC_OscConfig+0x66c>)
 8002f60:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002f62:	4b5f      	ldr	r3, [pc, #380]	; (80030e0 <HAL_RCC_OscConfig+0x66c>)
 8002f64:	2180      	movs	r1, #128	; 0x80
 8002f66:	0049      	lsls	r1, r1, #1
 8002f68:	430a      	orrs	r2, r1
 8002f6a:	651a      	str	r2, [r3, #80]	; 0x50
 8002f6c:	e00b      	b.n	8002f86 <HAL_RCC_OscConfig+0x512>
 8002f6e:	4b5c      	ldr	r3, [pc, #368]	; (80030e0 <HAL_RCC_OscConfig+0x66c>)
 8002f70:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002f72:	4b5b      	ldr	r3, [pc, #364]	; (80030e0 <HAL_RCC_OscConfig+0x66c>)
 8002f74:	495b      	ldr	r1, [pc, #364]	; (80030e4 <HAL_RCC_OscConfig+0x670>)
 8002f76:	400a      	ands	r2, r1
 8002f78:	651a      	str	r2, [r3, #80]	; 0x50
 8002f7a:	4b59      	ldr	r3, [pc, #356]	; (80030e0 <HAL_RCC_OscConfig+0x66c>)
 8002f7c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002f7e:	4b58      	ldr	r3, [pc, #352]	; (80030e0 <HAL_RCC_OscConfig+0x66c>)
 8002f80:	495a      	ldr	r1, [pc, #360]	; (80030ec <HAL_RCC_OscConfig+0x678>)
 8002f82:	400a      	ands	r2, r1
 8002f84:	651a      	str	r2, [r3, #80]	; 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	689b      	ldr	r3, [r3, #8]
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d015      	beq.n	8002fba <HAL_RCC_OscConfig+0x546>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f8e:	f7fe fe45 	bl	8001c1c <HAL_GetTick>
 8002f92:	0003      	movs	r3, r0
 8002f94:	61bb      	str	r3, [r7, #24]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002f96:	e009      	b.n	8002fac <HAL_RCC_OscConfig+0x538>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002f98:	f7fe fe40 	bl	8001c1c <HAL_GetTick>
 8002f9c:	0002      	movs	r2, r0
 8002f9e:	69bb      	ldr	r3, [r7, #24]
 8002fa0:	1ad3      	subs	r3, r2, r3
 8002fa2:	4a53      	ldr	r2, [pc, #332]	; (80030f0 <HAL_RCC_OscConfig+0x67c>)
 8002fa4:	4293      	cmp	r3, r2
 8002fa6:	d901      	bls.n	8002fac <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 8002fa8:	2303      	movs	r3, #3
 8002faa:	e0c7      	b.n	800313c <HAL_RCC_OscConfig+0x6c8>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002fac:	4b4c      	ldr	r3, [pc, #304]	; (80030e0 <HAL_RCC_OscConfig+0x66c>)
 8002fae:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002fb0:	2380      	movs	r3, #128	; 0x80
 8002fb2:	009b      	lsls	r3, r3, #2
 8002fb4:	4013      	ands	r3, r2
 8002fb6:	d0ef      	beq.n	8002f98 <HAL_RCC_OscConfig+0x524>
 8002fb8:	e014      	b.n	8002fe4 <HAL_RCC_OscConfig+0x570>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002fba:	f7fe fe2f 	bl	8001c1c <HAL_GetTick>
 8002fbe:	0003      	movs	r3, r0
 8002fc0:	61bb      	str	r3, [r7, #24]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002fc2:	e009      	b.n	8002fd8 <HAL_RCC_OscConfig+0x564>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002fc4:	f7fe fe2a 	bl	8001c1c <HAL_GetTick>
 8002fc8:	0002      	movs	r2, r0
 8002fca:	69bb      	ldr	r3, [r7, #24]
 8002fcc:	1ad3      	subs	r3, r2, r3
 8002fce:	4a48      	ldr	r2, [pc, #288]	; (80030f0 <HAL_RCC_OscConfig+0x67c>)
 8002fd0:	4293      	cmp	r3, r2
 8002fd2:	d901      	bls.n	8002fd8 <HAL_RCC_OscConfig+0x564>
        {
          return HAL_TIMEOUT;
 8002fd4:	2303      	movs	r3, #3
 8002fd6:	e0b1      	b.n	800313c <HAL_RCC_OscConfig+0x6c8>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002fd8:	4b41      	ldr	r3, [pc, #260]	; (80030e0 <HAL_RCC_OscConfig+0x66c>)
 8002fda:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002fdc:	2380      	movs	r3, #128	; 0x80
 8002fde:	009b      	lsls	r3, r3, #2
 8002fe0:	4013      	ands	r3, r2
 8002fe2:	d1ef      	bne.n	8002fc4 <HAL_RCC_OscConfig+0x550>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002fe4:	2327      	movs	r3, #39	; 0x27
 8002fe6:	18fb      	adds	r3, r7, r3
 8002fe8:	781b      	ldrb	r3, [r3, #0]
 8002fea:	2b01      	cmp	r3, #1
 8002fec:	d105      	bne.n	8002ffa <HAL_RCC_OscConfig+0x586>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002fee:	4b3c      	ldr	r3, [pc, #240]	; (80030e0 <HAL_RCC_OscConfig+0x66c>)
 8002ff0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002ff2:	4b3b      	ldr	r3, [pc, #236]	; (80030e0 <HAL_RCC_OscConfig+0x66c>)
 8002ff4:	493f      	ldr	r1, [pc, #252]	; (80030f4 <HAL_RCC_OscConfig+0x680>)
 8002ff6:	400a      	ands	r2, r1
 8002ff8:	639a      	str	r2, [r3, #56]	; 0x38
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d100      	bne.n	8003004 <HAL_RCC_OscConfig+0x590>
 8003002:	e09a      	b.n	800313a <HAL_RCC_OscConfig+0x6c6>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003004:	6a3b      	ldr	r3, [r7, #32]
 8003006:	2b0c      	cmp	r3, #12
 8003008:	d064      	beq.n	80030d4 <HAL_RCC_OscConfig+0x660>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800300e:	2b02      	cmp	r3, #2
 8003010:	d145      	bne.n	800309e <HAL_RCC_OscConfig+0x62a>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003012:	4b33      	ldr	r3, [pc, #204]	; (80030e0 <HAL_RCC_OscConfig+0x66c>)
 8003014:	681a      	ldr	r2, [r3, #0]
 8003016:	4b32      	ldr	r3, [pc, #200]	; (80030e0 <HAL_RCC_OscConfig+0x66c>)
 8003018:	4937      	ldr	r1, [pc, #220]	; (80030f8 <HAL_RCC_OscConfig+0x684>)
 800301a:	400a      	ands	r2, r1
 800301c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800301e:	f7fe fdfd 	bl	8001c1c <HAL_GetTick>
 8003022:	0003      	movs	r3, r0
 8003024:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8003026:	e008      	b.n	800303a <HAL_RCC_OscConfig+0x5c6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003028:	f7fe fdf8 	bl	8001c1c <HAL_GetTick>
 800302c:	0002      	movs	r2, r0
 800302e:	69bb      	ldr	r3, [r7, #24]
 8003030:	1ad3      	subs	r3, r2, r3
 8003032:	2b02      	cmp	r3, #2
 8003034:	d901      	bls.n	800303a <HAL_RCC_OscConfig+0x5c6>
          {
            return HAL_TIMEOUT;
 8003036:	2303      	movs	r3, #3
 8003038:	e080      	b.n	800313c <HAL_RCC_OscConfig+0x6c8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 800303a:	4b29      	ldr	r3, [pc, #164]	; (80030e0 <HAL_RCC_OscConfig+0x66c>)
 800303c:	681a      	ldr	r2, [r3, #0]
 800303e:	2380      	movs	r3, #128	; 0x80
 8003040:	049b      	lsls	r3, r3, #18
 8003042:	4013      	ands	r3, r2
 8003044:	d1f0      	bne.n	8003028 <HAL_RCC_OscConfig+0x5b4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003046:	4b26      	ldr	r3, [pc, #152]	; (80030e0 <HAL_RCC_OscConfig+0x66c>)
 8003048:	68db      	ldr	r3, [r3, #12]
 800304a:	4a2c      	ldr	r2, [pc, #176]	; (80030fc <HAL_RCC_OscConfig+0x688>)
 800304c:	4013      	ands	r3, r2
 800304e:	0019      	movs	r1, r3
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003058:	431a      	orrs	r2, r3
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800305e:	431a      	orrs	r2, r3
 8003060:	4b1f      	ldr	r3, [pc, #124]	; (80030e0 <HAL_RCC_OscConfig+0x66c>)
 8003062:	430a      	orrs	r2, r1
 8003064:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003066:	4b1e      	ldr	r3, [pc, #120]	; (80030e0 <HAL_RCC_OscConfig+0x66c>)
 8003068:	681a      	ldr	r2, [r3, #0]
 800306a:	4b1d      	ldr	r3, [pc, #116]	; (80030e0 <HAL_RCC_OscConfig+0x66c>)
 800306c:	2180      	movs	r1, #128	; 0x80
 800306e:	0449      	lsls	r1, r1, #17
 8003070:	430a      	orrs	r2, r1
 8003072:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003074:	f7fe fdd2 	bl	8001c1c <HAL_GetTick>
 8003078:	0003      	movs	r3, r0
 800307a:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 800307c:	e008      	b.n	8003090 <HAL_RCC_OscConfig+0x61c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800307e:	f7fe fdcd 	bl	8001c1c <HAL_GetTick>
 8003082:	0002      	movs	r2, r0
 8003084:	69bb      	ldr	r3, [r7, #24]
 8003086:	1ad3      	subs	r3, r2, r3
 8003088:	2b02      	cmp	r3, #2
 800308a:	d901      	bls.n	8003090 <HAL_RCC_OscConfig+0x61c>
          {
            return HAL_TIMEOUT;
 800308c:	2303      	movs	r3, #3
 800308e:	e055      	b.n	800313c <HAL_RCC_OscConfig+0x6c8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8003090:	4b13      	ldr	r3, [pc, #76]	; (80030e0 <HAL_RCC_OscConfig+0x66c>)
 8003092:	681a      	ldr	r2, [r3, #0]
 8003094:	2380      	movs	r3, #128	; 0x80
 8003096:	049b      	lsls	r3, r3, #18
 8003098:	4013      	ands	r3, r2
 800309a:	d0f0      	beq.n	800307e <HAL_RCC_OscConfig+0x60a>
 800309c:	e04d      	b.n	800313a <HAL_RCC_OscConfig+0x6c6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800309e:	4b10      	ldr	r3, [pc, #64]	; (80030e0 <HAL_RCC_OscConfig+0x66c>)
 80030a0:	681a      	ldr	r2, [r3, #0]
 80030a2:	4b0f      	ldr	r3, [pc, #60]	; (80030e0 <HAL_RCC_OscConfig+0x66c>)
 80030a4:	4914      	ldr	r1, [pc, #80]	; (80030f8 <HAL_RCC_OscConfig+0x684>)
 80030a6:	400a      	ands	r2, r1
 80030a8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030aa:	f7fe fdb7 	bl	8001c1c <HAL_GetTick>
 80030ae:	0003      	movs	r3, r0
 80030b0:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80030b2:	e008      	b.n	80030c6 <HAL_RCC_OscConfig+0x652>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80030b4:	f7fe fdb2 	bl	8001c1c <HAL_GetTick>
 80030b8:	0002      	movs	r2, r0
 80030ba:	69bb      	ldr	r3, [r7, #24]
 80030bc:	1ad3      	subs	r3, r2, r3
 80030be:	2b02      	cmp	r3, #2
 80030c0:	d901      	bls.n	80030c6 <HAL_RCC_OscConfig+0x652>
          {
            return HAL_TIMEOUT;
 80030c2:	2303      	movs	r3, #3
 80030c4:	e03a      	b.n	800313c <HAL_RCC_OscConfig+0x6c8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80030c6:	4b06      	ldr	r3, [pc, #24]	; (80030e0 <HAL_RCC_OscConfig+0x66c>)
 80030c8:	681a      	ldr	r2, [r3, #0]
 80030ca:	2380      	movs	r3, #128	; 0x80
 80030cc:	049b      	lsls	r3, r3, #18
 80030ce:	4013      	ands	r3, r2
 80030d0:	d1f0      	bne.n	80030b4 <HAL_RCC_OscConfig+0x640>
 80030d2:	e032      	b.n	800313a <HAL_RCC_OscConfig+0x6c6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030d8:	2b01      	cmp	r3, #1
 80030da:	d111      	bne.n	8003100 <HAL_RCC_OscConfig+0x68c>
      {
        return HAL_ERROR;
 80030dc:	2301      	movs	r3, #1
 80030de:	e02d      	b.n	800313c <HAL_RCC_OscConfig+0x6c8>
 80030e0:	40021000 	.word	0x40021000
 80030e4:	fffffeff 	.word	0xfffffeff
 80030e8:	40007000 	.word	0x40007000
 80030ec:	fffffbff 	.word	0xfffffbff
 80030f0:	00001388 	.word	0x00001388
 80030f4:	efffffff 	.word	0xefffffff
 80030f8:	feffffff 	.word	0xfeffffff
 80030fc:	ff02ffff 	.word	0xff02ffff
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003100:	4b10      	ldr	r3, [pc, #64]	; (8003144 <HAL_RCC_OscConfig+0x6d0>)
 8003102:	68db      	ldr	r3, [r3, #12]
 8003104:	61fb      	str	r3, [r7, #28]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003106:	69fa      	ldr	r2, [r7, #28]
 8003108:	2380      	movs	r3, #128	; 0x80
 800310a:	025b      	lsls	r3, r3, #9
 800310c:	401a      	ands	r2, r3
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003112:	429a      	cmp	r2, r3
 8003114:	d10f      	bne.n	8003136 <HAL_RCC_OscConfig+0x6c2>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8003116:	69fa      	ldr	r2, [r7, #28]
 8003118:	23f0      	movs	r3, #240	; 0xf0
 800311a:	039b      	lsls	r3, r3, #14
 800311c:	401a      	ands	r2, r3
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003122:	429a      	cmp	r2, r3
 8003124:	d107      	bne.n	8003136 <HAL_RCC_OscConfig+0x6c2>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8003126:	69fa      	ldr	r2, [r7, #28]
 8003128:	23c0      	movs	r3, #192	; 0xc0
 800312a:	041b      	lsls	r3, r3, #16
 800312c:	401a      	ands	r2, r3
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	6b1b      	ldr	r3, [r3, #48]	; 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8003132:	429a      	cmp	r2, r3
 8003134:	d001      	beq.n	800313a <HAL_RCC_OscConfig+0x6c6>
        {
          return HAL_ERROR;
 8003136:	2301      	movs	r3, #1
 8003138:	e000      	b.n	800313c <HAL_RCC_OscConfig+0x6c8>
        }
      }
    }
  }
  return HAL_OK;
 800313a:	2300      	movs	r3, #0
}
 800313c:	0018      	movs	r0, r3
 800313e:	46bd      	mov	sp, r7
 8003140:	b00a      	add	sp, #40	; 0x28
 8003142:	bdb0      	pop	{r4, r5, r7, pc}
 8003144:	40021000 	.word	0x40021000

08003148 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003148:	b5b0      	push	{r4, r5, r7, lr}
 800314a:	b084      	sub	sp, #16
 800314c:	af00      	add	r7, sp, #0
 800314e:	6078      	str	r0, [r7, #4]
 8003150:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	2b00      	cmp	r3, #0
 8003156:	d101      	bne.n	800315c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003158:	2301      	movs	r3, #1
 800315a:	e128      	b.n	80033ae <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800315c:	4b96      	ldr	r3, [pc, #600]	; (80033b8 <HAL_RCC_ClockConfig+0x270>)
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	2201      	movs	r2, #1
 8003162:	4013      	ands	r3, r2
 8003164:	683a      	ldr	r2, [r7, #0]
 8003166:	429a      	cmp	r2, r3
 8003168:	d91e      	bls.n	80031a8 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800316a:	4b93      	ldr	r3, [pc, #588]	; (80033b8 <HAL_RCC_ClockConfig+0x270>)
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	2201      	movs	r2, #1
 8003170:	4393      	bics	r3, r2
 8003172:	0019      	movs	r1, r3
 8003174:	4b90      	ldr	r3, [pc, #576]	; (80033b8 <HAL_RCC_ClockConfig+0x270>)
 8003176:	683a      	ldr	r2, [r7, #0]
 8003178:	430a      	orrs	r2, r1
 800317a:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800317c:	f7fe fd4e 	bl	8001c1c <HAL_GetTick>
 8003180:	0003      	movs	r3, r0
 8003182:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003184:	e009      	b.n	800319a <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003186:	f7fe fd49 	bl	8001c1c <HAL_GetTick>
 800318a:	0002      	movs	r2, r0
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	1ad3      	subs	r3, r2, r3
 8003190:	4a8a      	ldr	r2, [pc, #552]	; (80033bc <HAL_RCC_ClockConfig+0x274>)
 8003192:	4293      	cmp	r3, r2
 8003194:	d901      	bls.n	800319a <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8003196:	2303      	movs	r3, #3
 8003198:	e109      	b.n	80033ae <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800319a:	4b87      	ldr	r3, [pc, #540]	; (80033b8 <HAL_RCC_ClockConfig+0x270>)
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	2201      	movs	r2, #1
 80031a0:	4013      	ands	r3, r2
 80031a2:	683a      	ldr	r2, [r7, #0]
 80031a4:	429a      	cmp	r2, r3
 80031a6:	d1ee      	bne.n	8003186 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	2202      	movs	r2, #2
 80031ae:	4013      	ands	r3, r2
 80031b0:	d009      	beq.n	80031c6 <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80031b2:	4b83      	ldr	r3, [pc, #524]	; (80033c0 <HAL_RCC_ClockConfig+0x278>)
 80031b4:	68db      	ldr	r3, [r3, #12]
 80031b6:	22f0      	movs	r2, #240	; 0xf0
 80031b8:	4393      	bics	r3, r2
 80031ba:	0019      	movs	r1, r3
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	689a      	ldr	r2, [r3, #8]
 80031c0:	4b7f      	ldr	r3, [pc, #508]	; (80033c0 <HAL_RCC_ClockConfig+0x278>)
 80031c2:	430a      	orrs	r2, r1
 80031c4:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	2201      	movs	r2, #1
 80031cc:	4013      	ands	r3, r2
 80031ce:	d100      	bne.n	80031d2 <HAL_RCC_ClockConfig+0x8a>
 80031d0:	e089      	b.n	80032e6 <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	685b      	ldr	r3, [r3, #4]
 80031d6:	2b02      	cmp	r3, #2
 80031d8:	d107      	bne.n	80031ea <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80031da:	4b79      	ldr	r3, [pc, #484]	; (80033c0 <HAL_RCC_ClockConfig+0x278>)
 80031dc:	681a      	ldr	r2, [r3, #0]
 80031de:	2380      	movs	r3, #128	; 0x80
 80031e0:	029b      	lsls	r3, r3, #10
 80031e2:	4013      	ands	r3, r2
 80031e4:	d120      	bne.n	8003228 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 80031e6:	2301      	movs	r3, #1
 80031e8:	e0e1      	b.n	80033ae <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	685b      	ldr	r3, [r3, #4]
 80031ee:	2b03      	cmp	r3, #3
 80031f0:	d107      	bne.n	8003202 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80031f2:	4b73      	ldr	r3, [pc, #460]	; (80033c0 <HAL_RCC_ClockConfig+0x278>)
 80031f4:	681a      	ldr	r2, [r3, #0]
 80031f6:	2380      	movs	r3, #128	; 0x80
 80031f8:	049b      	lsls	r3, r3, #18
 80031fa:	4013      	ands	r3, r2
 80031fc:	d114      	bne.n	8003228 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 80031fe:	2301      	movs	r3, #1
 8003200:	e0d5      	b.n	80033ae <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	685b      	ldr	r3, [r3, #4]
 8003206:	2b01      	cmp	r3, #1
 8003208:	d106      	bne.n	8003218 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800320a:	4b6d      	ldr	r3, [pc, #436]	; (80033c0 <HAL_RCC_ClockConfig+0x278>)
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	2204      	movs	r2, #4
 8003210:	4013      	ands	r3, r2
 8003212:	d109      	bne.n	8003228 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8003214:	2301      	movs	r3, #1
 8003216:	e0ca      	b.n	80033ae <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8003218:	4b69      	ldr	r3, [pc, #420]	; (80033c0 <HAL_RCC_ClockConfig+0x278>)
 800321a:	681a      	ldr	r2, [r3, #0]
 800321c:	2380      	movs	r3, #128	; 0x80
 800321e:	009b      	lsls	r3, r3, #2
 8003220:	4013      	ands	r3, r2
 8003222:	d101      	bne.n	8003228 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8003224:	2301      	movs	r3, #1
 8003226:	e0c2      	b.n	80033ae <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003228:	4b65      	ldr	r3, [pc, #404]	; (80033c0 <HAL_RCC_ClockConfig+0x278>)
 800322a:	68db      	ldr	r3, [r3, #12]
 800322c:	2203      	movs	r2, #3
 800322e:	4393      	bics	r3, r2
 8003230:	0019      	movs	r1, r3
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	685a      	ldr	r2, [r3, #4]
 8003236:	4b62      	ldr	r3, [pc, #392]	; (80033c0 <HAL_RCC_ClockConfig+0x278>)
 8003238:	430a      	orrs	r2, r1
 800323a:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800323c:	f7fe fcee 	bl	8001c1c <HAL_GetTick>
 8003240:	0003      	movs	r3, r0
 8003242:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	685b      	ldr	r3, [r3, #4]
 8003248:	2b02      	cmp	r3, #2
 800324a:	d111      	bne.n	8003270 <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800324c:	e009      	b.n	8003262 <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800324e:	f7fe fce5 	bl	8001c1c <HAL_GetTick>
 8003252:	0002      	movs	r2, r0
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	1ad3      	subs	r3, r2, r3
 8003258:	4a58      	ldr	r2, [pc, #352]	; (80033bc <HAL_RCC_ClockConfig+0x274>)
 800325a:	4293      	cmp	r3, r2
 800325c:	d901      	bls.n	8003262 <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 800325e:	2303      	movs	r3, #3
 8003260:	e0a5      	b.n	80033ae <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8003262:	4b57      	ldr	r3, [pc, #348]	; (80033c0 <HAL_RCC_ClockConfig+0x278>)
 8003264:	68db      	ldr	r3, [r3, #12]
 8003266:	220c      	movs	r2, #12
 8003268:	4013      	ands	r3, r2
 800326a:	2b08      	cmp	r3, #8
 800326c:	d1ef      	bne.n	800324e <HAL_RCC_ClockConfig+0x106>
 800326e:	e03a      	b.n	80032e6 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	685b      	ldr	r3, [r3, #4]
 8003274:	2b03      	cmp	r3, #3
 8003276:	d111      	bne.n	800329c <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003278:	e009      	b.n	800328e <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800327a:	f7fe fccf 	bl	8001c1c <HAL_GetTick>
 800327e:	0002      	movs	r2, r0
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	1ad3      	subs	r3, r2, r3
 8003284:	4a4d      	ldr	r2, [pc, #308]	; (80033bc <HAL_RCC_ClockConfig+0x274>)
 8003286:	4293      	cmp	r3, r2
 8003288:	d901      	bls.n	800328e <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 800328a:	2303      	movs	r3, #3
 800328c:	e08f      	b.n	80033ae <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800328e:	4b4c      	ldr	r3, [pc, #304]	; (80033c0 <HAL_RCC_ClockConfig+0x278>)
 8003290:	68db      	ldr	r3, [r3, #12]
 8003292:	220c      	movs	r2, #12
 8003294:	4013      	ands	r3, r2
 8003296:	2b0c      	cmp	r3, #12
 8003298:	d1ef      	bne.n	800327a <HAL_RCC_ClockConfig+0x132>
 800329a:	e024      	b.n	80032e6 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	685b      	ldr	r3, [r3, #4]
 80032a0:	2b01      	cmp	r3, #1
 80032a2:	d11b      	bne.n	80032dc <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80032a4:	e009      	b.n	80032ba <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80032a6:	f7fe fcb9 	bl	8001c1c <HAL_GetTick>
 80032aa:	0002      	movs	r2, r0
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	1ad3      	subs	r3, r2, r3
 80032b0:	4a42      	ldr	r2, [pc, #264]	; (80033bc <HAL_RCC_ClockConfig+0x274>)
 80032b2:	4293      	cmp	r3, r2
 80032b4:	d901      	bls.n	80032ba <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 80032b6:	2303      	movs	r3, #3
 80032b8:	e079      	b.n	80033ae <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80032ba:	4b41      	ldr	r3, [pc, #260]	; (80033c0 <HAL_RCC_ClockConfig+0x278>)
 80032bc:	68db      	ldr	r3, [r3, #12]
 80032be:	220c      	movs	r2, #12
 80032c0:	4013      	ands	r3, r2
 80032c2:	2b04      	cmp	r3, #4
 80032c4:	d1ef      	bne.n	80032a6 <HAL_RCC_ClockConfig+0x15e>
 80032c6:	e00e      	b.n	80032e6 <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80032c8:	f7fe fca8 	bl	8001c1c <HAL_GetTick>
 80032cc:	0002      	movs	r2, r0
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	1ad3      	subs	r3, r2, r3
 80032d2:	4a3a      	ldr	r2, [pc, #232]	; (80033bc <HAL_RCC_ClockConfig+0x274>)
 80032d4:	4293      	cmp	r3, r2
 80032d6:	d901      	bls.n	80032dc <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 80032d8:	2303      	movs	r3, #3
 80032da:	e068      	b.n	80033ae <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 80032dc:	4b38      	ldr	r3, [pc, #224]	; (80033c0 <HAL_RCC_ClockConfig+0x278>)
 80032de:	68db      	ldr	r3, [r3, #12]
 80032e0:	220c      	movs	r2, #12
 80032e2:	4013      	ands	r3, r2
 80032e4:	d1f0      	bne.n	80032c8 <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80032e6:	4b34      	ldr	r3, [pc, #208]	; (80033b8 <HAL_RCC_ClockConfig+0x270>)
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	2201      	movs	r2, #1
 80032ec:	4013      	ands	r3, r2
 80032ee:	683a      	ldr	r2, [r7, #0]
 80032f0:	429a      	cmp	r2, r3
 80032f2:	d21e      	bcs.n	8003332 <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80032f4:	4b30      	ldr	r3, [pc, #192]	; (80033b8 <HAL_RCC_ClockConfig+0x270>)
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	2201      	movs	r2, #1
 80032fa:	4393      	bics	r3, r2
 80032fc:	0019      	movs	r1, r3
 80032fe:	4b2e      	ldr	r3, [pc, #184]	; (80033b8 <HAL_RCC_ClockConfig+0x270>)
 8003300:	683a      	ldr	r2, [r7, #0]
 8003302:	430a      	orrs	r2, r1
 8003304:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8003306:	f7fe fc89 	bl	8001c1c <HAL_GetTick>
 800330a:	0003      	movs	r3, r0
 800330c:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800330e:	e009      	b.n	8003324 <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003310:	f7fe fc84 	bl	8001c1c <HAL_GetTick>
 8003314:	0002      	movs	r2, r0
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	1ad3      	subs	r3, r2, r3
 800331a:	4a28      	ldr	r2, [pc, #160]	; (80033bc <HAL_RCC_ClockConfig+0x274>)
 800331c:	4293      	cmp	r3, r2
 800331e:	d901      	bls.n	8003324 <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 8003320:	2303      	movs	r3, #3
 8003322:	e044      	b.n	80033ae <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003324:	4b24      	ldr	r3, [pc, #144]	; (80033b8 <HAL_RCC_ClockConfig+0x270>)
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	2201      	movs	r2, #1
 800332a:	4013      	ands	r3, r2
 800332c:	683a      	ldr	r2, [r7, #0]
 800332e:	429a      	cmp	r2, r3
 8003330:	d1ee      	bne.n	8003310 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	2204      	movs	r2, #4
 8003338:	4013      	ands	r3, r2
 800333a:	d009      	beq.n	8003350 <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800333c:	4b20      	ldr	r3, [pc, #128]	; (80033c0 <HAL_RCC_ClockConfig+0x278>)
 800333e:	68db      	ldr	r3, [r3, #12]
 8003340:	4a20      	ldr	r2, [pc, #128]	; (80033c4 <HAL_RCC_ClockConfig+0x27c>)
 8003342:	4013      	ands	r3, r2
 8003344:	0019      	movs	r1, r3
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	68da      	ldr	r2, [r3, #12]
 800334a:	4b1d      	ldr	r3, [pc, #116]	; (80033c0 <HAL_RCC_ClockConfig+0x278>)
 800334c:	430a      	orrs	r2, r1
 800334e:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	2208      	movs	r2, #8
 8003356:	4013      	ands	r3, r2
 8003358:	d00a      	beq.n	8003370 <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800335a:	4b19      	ldr	r3, [pc, #100]	; (80033c0 <HAL_RCC_ClockConfig+0x278>)
 800335c:	68db      	ldr	r3, [r3, #12]
 800335e:	4a1a      	ldr	r2, [pc, #104]	; (80033c8 <HAL_RCC_ClockConfig+0x280>)
 8003360:	4013      	ands	r3, r2
 8003362:	0019      	movs	r1, r3
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	691b      	ldr	r3, [r3, #16]
 8003368:	00da      	lsls	r2, r3, #3
 800336a:	4b15      	ldr	r3, [pc, #84]	; (80033c0 <HAL_RCC_ClockConfig+0x278>)
 800336c:	430a      	orrs	r2, r1
 800336e:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003370:	f000 f832 	bl	80033d8 <HAL_RCC_GetSysClockFreq>
 8003374:	0001      	movs	r1, r0
 8003376:	4b12      	ldr	r3, [pc, #72]	; (80033c0 <HAL_RCC_ClockConfig+0x278>)
 8003378:	68db      	ldr	r3, [r3, #12]
 800337a:	091b      	lsrs	r3, r3, #4
 800337c:	220f      	movs	r2, #15
 800337e:	4013      	ands	r3, r2
 8003380:	4a12      	ldr	r2, [pc, #72]	; (80033cc <HAL_RCC_ClockConfig+0x284>)
 8003382:	5cd3      	ldrb	r3, [r2, r3]
 8003384:	000a      	movs	r2, r1
 8003386:	40da      	lsrs	r2, r3
 8003388:	4b11      	ldr	r3, [pc, #68]	; (80033d0 <HAL_RCC_ClockConfig+0x288>)
 800338a:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800338c:	4b11      	ldr	r3, [pc, #68]	; (80033d4 <HAL_RCC_ClockConfig+0x28c>)
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	250b      	movs	r5, #11
 8003392:	197c      	adds	r4, r7, r5
 8003394:	0018      	movs	r0, r3
 8003396:	f7fe fbfb 	bl	8001b90 <HAL_InitTick>
 800339a:	0003      	movs	r3, r0
 800339c:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 800339e:	197b      	adds	r3, r7, r5
 80033a0:	781b      	ldrb	r3, [r3, #0]
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d002      	beq.n	80033ac <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 80033a6:	197b      	adds	r3, r7, r5
 80033a8:	781b      	ldrb	r3, [r3, #0]
 80033aa:	e000      	b.n	80033ae <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 80033ac:	2300      	movs	r3, #0
}
 80033ae:	0018      	movs	r0, r3
 80033b0:	46bd      	mov	sp, r7
 80033b2:	b004      	add	sp, #16
 80033b4:	bdb0      	pop	{r4, r5, r7, pc}
 80033b6:	46c0      	nop			; (mov r8, r8)
 80033b8:	40022000 	.word	0x40022000
 80033bc:	00001388 	.word	0x00001388
 80033c0:	40021000 	.word	0x40021000
 80033c4:	fffff8ff 	.word	0xfffff8ff
 80033c8:	ffffc7ff 	.word	0xffffc7ff
 80033cc:	08006aa8 	.word	0x08006aa8
 80033d0:	20000010 	.word	0x20000010
 80033d4:	20000014 	.word	0x20000014

080033d8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80033d8:	b5b0      	push	{r4, r5, r7, lr}
 80033da:	b08e      	sub	sp, #56	; 0x38
 80033dc:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 80033de:	4b4c      	ldr	r3, [pc, #304]	; (8003510 <HAL_RCC_GetSysClockFreq+0x138>)
 80033e0:	68db      	ldr	r3, [r3, #12]
 80033e2:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80033e4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80033e6:	230c      	movs	r3, #12
 80033e8:	4013      	ands	r3, r2
 80033ea:	2b0c      	cmp	r3, #12
 80033ec:	d014      	beq.n	8003418 <HAL_RCC_GetSysClockFreq+0x40>
 80033ee:	d900      	bls.n	80033f2 <HAL_RCC_GetSysClockFreq+0x1a>
 80033f0:	e07b      	b.n	80034ea <HAL_RCC_GetSysClockFreq+0x112>
 80033f2:	2b04      	cmp	r3, #4
 80033f4:	d002      	beq.n	80033fc <HAL_RCC_GetSysClockFreq+0x24>
 80033f6:	2b08      	cmp	r3, #8
 80033f8:	d00b      	beq.n	8003412 <HAL_RCC_GetSysClockFreq+0x3a>
 80033fa:	e076      	b.n	80034ea <HAL_RCC_GetSysClockFreq+0x112>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 80033fc:	4b44      	ldr	r3, [pc, #272]	; (8003510 <HAL_RCC_GetSysClockFreq+0x138>)
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	2210      	movs	r2, #16
 8003402:	4013      	ands	r3, r2
 8003404:	d002      	beq.n	800340c <HAL_RCC_GetSysClockFreq+0x34>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 8003406:	4b43      	ldr	r3, [pc, #268]	; (8003514 <HAL_RCC_GetSysClockFreq+0x13c>)
 8003408:	633b      	str	r3, [r7, #48]	; 0x30
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 800340a:	e07c      	b.n	8003506 <HAL_RCC_GetSysClockFreq+0x12e>
        sysclockfreq =  HSI_VALUE;
 800340c:	4b42      	ldr	r3, [pc, #264]	; (8003518 <HAL_RCC_GetSysClockFreq+0x140>)
 800340e:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8003410:	e079      	b.n	8003506 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003412:	4b42      	ldr	r3, [pc, #264]	; (800351c <HAL_RCC_GetSysClockFreq+0x144>)
 8003414:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8003416:	e076      	b.n	8003506 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8003418:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800341a:	0c9a      	lsrs	r2, r3, #18
 800341c:	230f      	movs	r3, #15
 800341e:	401a      	ands	r2, r3
 8003420:	4b3f      	ldr	r3, [pc, #252]	; (8003520 <HAL_RCC_GetSysClockFreq+0x148>)
 8003422:	5c9b      	ldrb	r3, [r3, r2]
 8003424:	62bb      	str	r3, [r7, #40]	; 0x28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8003426:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003428:	0d9a      	lsrs	r2, r3, #22
 800342a:	2303      	movs	r3, #3
 800342c:	4013      	ands	r3, r2
 800342e:	3301      	adds	r3, #1
 8003430:	627b      	str	r3, [r7, #36]	; 0x24
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003432:	4b37      	ldr	r3, [pc, #220]	; (8003510 <HAL_RCC_GetSysClockFreq+0x138>)
 8003434:	68da      	ldr	r2, [r3, #12]
 8003436:	2380      	movs	r3, #128	; 0x80
 8003438:	025b      	lsls	r3, r3, #9
 800343a:	4013      	ands	r3, r2
 800343c:	d01a      	beq.n	8003474 <HAL_RCC_GetSysClockFreq+0x9c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 800343e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003440:	61bb      	str	r3, [r7, #24]
 8003442:	2300      	movs	r3, #0
 8003444:	61fb      	str	r3, [r7, #28]
 8003446:	4a35      	ldr	r2, [pc, #212]	; (800351c <HAL_RCC_GetSysClockFreq+0x144>)
 8003448:	2300      	movs	r3, #0
 800344a:	69b8      	ldr	r0, [r7, #24]
 800344c:	69f9      	ldr	r1, [r7, #28]
 800344e:	f7fd f83d 	bl	80004cc <__aeabi_lmul>
 8003452:	0002      	movs	r2, r0
 8003454:	000b      	movs	r3, r1
 8003456:	0010      	movs	r0, r2
 8003458:	0019      	movs	r1, r3
 800345a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800345c:	613b      	str	r3, [r7, #16]
 800345e:	2300      	movs	r3, #0
 8003460:	617b      	str	r3, [r7, #20]
 8003462:	693a      	ldr	r2, [r7, #16]
 8003464:	697b      	ldr	r3, [r7, #20]
 8003466:	f7fd f811 	bl	800048c <__aeabi_uldivmod>
 800346a:	0002      	movs	r2, r0
 800346c:	000b      	movs	r3, r1
 800346e:	0013      	movs	r3, r2
 8003470:	637b      	str	r3, [r7, #52]	; 0x34
 8003472:	e037      	b.n	80034e4 <HAL_RCC_GetSysClockFreq+0x10c>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8003474:	4b26      	ldr	r3, [pc, #152]	; (8003510 <HAL_RCC_GetSysClockFreq+0x138>)
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	2210      	movs	r2, #16
 800347a:	4013      	ands	r3, r2
 800347c:	d01a      	beq.n	80034b4 <HAL_RCC_GetSysClockFreq+0xdc>
        {
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 800347e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003480:	60bb      	str	r3, [r7, #8]
 8003482:	2300      	movs	r3, #0
 8003484:	60fb      	str	r3, [r7, #12]
 8003486:	4a23      	ldr	r2, [pc, #140]	; (8003514 <HAL_RCC_GetSysClockFreq+0x13c>)
 8003488:	2300      	movs	r3, #0
 800348a:	68b8      	ldr	r0, [r7, #8]
 800348c:	68f9      	ldr	r1, [r7, #12]
 800348e:	f7fd f81d 	bl	80004cc <__aeabi_lmul>
 8003492:	0002      	movs	r2, r0
 8003494:	000b      	movs	r3, r1
 8003496:	0010      	movs	r0, r2
 8003498:	0019      	movs	r1, r3
 800349a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800349c:	603b      	str	r3, [r7, #0]
 800349e:	2300      	movs	r3, #0
 80034a0:	607b      	str	r3, [r7, #4]
 80034a2:	683a      	ldr	r2, [r7, #0]
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	f7fc fff1 	bl	800048c <__aeabi_uldivmod>
 80034aa:	0002      	movs	r2, r0
 80034ac:	000b      	movs	r3, r1
 80034ae:	0013      	movs	r3, r2
 80034b0:	637b      	str	r3, [r7, #52]	; 0x34
 80034b2:	e017      	b.n	80034e4 <HAL_RCC_GetSysClockFreq+0x10c>
        }
        else
        {
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 80034b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80034b6:	0018      	movs	r0, r3
 80034b8:	2300      	movs	r3, #0
 80034ba:	0019      	movs	r1, r3
 80034bc:	4a16      	ldr	r2, [pc, #88]	; (8003518 <HAL_RCC_GetSysClockFreq+0x140>)
 80034be:	2300      	movs	r3, #0
 80034c0:	f7fd f804 	bl	80004cc <__aeabi_lmul>
 80034c4:	0002      	movs	r2, r0
 80034c6:	000b      	movs	r3, r1
 80034c8:	0010      	movs	r0, r2
 80034ca:	0019      	movs	r1, r3
 80034cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034ce:	001c      	movs	r4, r3
 80034d0:	2300      	movs	r3, #0
 80034d2:	001d      	movs	r5, r3
 80034d4:	0022      	movs	r2, r4
 80034d6:	002b      	movs	r3, r5
 80034d8:	f7fc ffd8 	bl	800048c <__aeabi_uldivmod>
 80034dc:	0002      	movs	r2, r0
 80034de:	000b      	movs	r3, r1
 80034e0:	0013      	movs	r3, r2
 80034e2:	637b      	str	r3, [r7, #52]	; 0x34
        }
      }
      sysclockfreq = pllvco;
 80034e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80034e6:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80034e8:	e00d      	b.n	8003506 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 80034ea:	4b09      	ldr	r3, [pc, #36]	; (8003510 <HAL_RCC_GetSysClockFreq+0x138>)
 80034ec:	685b      	ldr	r3, [r3, #4]
 80034ee:	0b5b      	lsrs	r3, r3, #13
 80034f0:	2207      	movs	r2, #7
 80034f2:	4013      	ands	r3, r2
 80034f4:	623b      	str	r3, [r7, #32]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 80034f6:	6a3b      	ldr	r3, [r7, #32]
 80034f8:	3301      	adds	r3, #1
 80034fa:	2280      	movs	r2, #128	; 0x80
 80034fc:	0212      	lsls	r2, r2, #8
 80034fe:	409a      	lsls	r2, r3
 8003500:	0013      	movs	r3, r2
 8003502:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8003504:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8003506:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8003508:	0018      	movs	r0, r3
 800350a:	46bd      	mov	sp, r7
 800350c:	b00e      	add	sp, #56	; 0x38
 800350e:	bdb0      	pop	{r4, r5, r7, pc}
 8003510:	40021000 	.word	0x40021000
 8003514:	003d0900 	.word	0x003d0900
 8003518:	00f42400 	.word	0x00f42400
 800351c:	007a1200 	.word	0x007a1200
 8003520:	08006ac0 	.word	0x08006ac0

08003524 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003524:	b580      	push	{r7, lr}
 8003526:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003528:	4b02      	ldr	r3, [pc, #8]	; (8003534 <HAL_RCC_GetHCLKFreq+0x10>)
 800352a:	681b      	ldr	r3, [r3, #0]
}
 800352c:	0018      	movs	r0, r3
 800352e:	46bd      	mov	sp, r7
 8003530:	bd80      	pop	{r7, pc}
 8003532:	46c0      	nop			; (mov r8, r8)
 8003534:	20000010 	.word	0x20000010

08003538 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003538:	b580      	push	{r7, lr}
 800353a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800353c:	f7ff fff2 	bl	8003524 <HAL_RCC_GetHCLKFreq>
 8003540:	0001      	movs	r1, r0
 8003542:	4b06      	ldr	r3, [pc, #24]	; (800355c <HAL_RCC_GetPCLK1Freq+0x24>)
 8003544:	68db      	ldr	r3, [r3, #12]
 8003546:	0a1b      	lsrs	r3, r3, #8
 8003548:	2207      	movs	r2, #7
 800354a:	4013      	ands	r3, r2
 800354c:	4a04      	ldr	r2, [pc, #16]	; (8003560 <HAL_RCC_GetPCLK1Freq+0x28>)
 800354e:	5cd3      	ldrb	r3, [r2, r3]
 8003550:	40d9      	lsrs	r1, r3
 8003552:	000b      	movs	r3, r1
}
 8003554:	0018      	movs	r0, r3
 8003556:	46bd      	mov	sp, r7
 8003558:	bd80      	pop	{r7, pc}
 800355a:	46c0      	nop			; (mov r8, r8)
 800355c:	40021000 	.word	0x40021000
 8003560:	08006ab8 	.word	0x08006ab8

08003564 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003564:	b580      	push	{r7, lr}
 8003566:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003568:	f7ff ffdc 	bl	8003524 <HAL_RCC_GetHCLKFreq>
 800356c:	0001      	movs	r1, r0
 800356e:	4b06      	ldr	r3, [pc, #24]	; (8003588 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003570:	68db      	ldr	r3, [r3, #12]
 8003572:	0adb      	lsrs	r3, r3, #11
 8003574:	2207      	movs	r2, #7
 8003576:	4013      	ands	r3, r2
 8003578:	4a04      	ldr	r2, [pc, #16]	; (800358c <HAL_RCC_GetPCLK2Freq+0x28>)
 800357a:	5cd3      	ldrb	r3, [r2, r3]
 800357c:	40d9      	lsrs	r1, r3
 800357e:	000b      	movs	r3, r1
}
 8003580:	0018      	movs	r0, r3
 8003582:	46bd      	mov	sp, r7
 8003584:	bd80      	pop	{r7, pc}
 8003586:	46c0      	nop			; (mov r8, r8)
 8003588:	40021000 	.word	0x40021000
 800358c:	08006ab8 	.word	0x08006ab8

08003590 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003590:	b580      	push	{r7, lr}
 8003592:	b086      	sub	sp, #24
 8003594:	af00      	add	r7, sp, #0
 8003596:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_reg;
  FlagStatus       pwrclkchanged = RESET;
 8003598:	2017      	movs	r0, #23
 800359a:	183b      	adds	r3, r7, r0
 800359c:	2200      	movs	r2, #0
 800359e:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	2220      	movs	r2, #32
 80035a6:	4013      	ands	r3, r2
 80035a8:	d100      	bne.n	80035ac <HAL_RCCEx_PeriphCLKConfig+0x1c>
 80035aa:	e0c7      	b.n	800373c <HAL_RCCEx_PeriphCLKConfig+0x1ac>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80035ac:	4b8b      	ldr	r3, [pc, #556]	; (80037dc <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 80035ae:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80035b0:	2380      	movs	r3, #128	; 0x80
 80035b2:	055b      	lsls	r3, r3, #21
 80035b4:	4013      	ands	r3, r2
 80035b6:	d109      	bne.n	80035cc <HAL_RCCEx_PeriphCLKConfig+0x3c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80035b8:	4b88      	ldr	r3, [pc, #544]	; (80037dc <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 80035ba:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80035bc:	4b87      	ldr	r3, [pc, #540]	; (80037dc <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 80035be:	2180      	movs	r1, #128	; 0x80
 80035c0:	0549      	lsls	r1, r1, #21
 80035c2:	430a      	orrs	r2, r1
 80035c4:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 80035c6:	183b      	adds	r3, r7, r0
 80035c8:	2201      	movs	r2, #1
 80035ca:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80035cc:	4b84      	ldr	r3, [pc, #528]	; (80037e0 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 80035ce:	681a      	ldr	r2, [r3, #0]
 80035d0:	2380      	movs	r3, #128	; 0x80
 80035d2:	005b      	lsls	r3, r3, #1
 80035d4:	4013      	ands	r3, r2
 80035d6:	d11a      	bne.n	800360e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80035d8:	4b81      	ldr	r3, [pc, #516]	; (80037e0 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 80035da:	681a      	ldr	r2, [r3, #0]
 80035dc:	4b80      	ldr	r3, [pc, #512]	; (80037e0 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 80035de:	2180      	movs	r1, #128	; 0x80
 80035e0:	0049      	lsls	r1, r1, #1
 80035e2:	430a      	orrs	r2, r1
 80035e4:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80035e6:	f7fe fb19 	bl	8001c1c <HAL_GetTick>
 80035ea:	0003      	movs	r3, r0
 80035ec:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80035ee:	e008      	b.n	8003602 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80035f0:	f7fe fb14 	bl	8001c1c <HAL_GetTick>
 80035f4:	0002      	movs	r2, r0
 80035f6:	693b      	ldr	r3, [r7, #16]
 80035f8:	1ad3      	subs	r3, r2, r3
 80035fa:	2b64      	cmp	r3, #100	; 0x64
 80035fc:	d901      	bls.n	8003602 <HAL_RCCEx_PeriphCLKConfig+0x72>
        {
          return HAL_TIMEOUT;
 80035fe:	2303      	movs	r3, #3
 8003600:	e0e8      	b.n	80037d4 <HAL_RCCEx_PeriphCLKConfig+0x244>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003602:	4b77      	ldr	r3, [pc, #476]	; (80037e0 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 8003604:	681a      	ldr	r2, [r3, #0]
 8003606:	2380      	movs	r3, #128	; 0x80
 8003608:	005b      	lsls	r3, r3, #1
 800360a:	4013      	ands	r3, r2
 800360c:	d0f0      	beq.n	80035f0 <HAL_RCCEx_PeriphCLKConfig+0x60>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 800360e:	4b73      	ldr	r3, [pc, #460]	; (80037dc <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8003610:	681a      	ldr	r2, [r3, #0]
 8003612:	23c0      	movs	r3, #192	; 0xc0
 8003614:	039b      	lsls	r3, r3, #14
 8003616:	4013      	ands	r3, r2
 8003618:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	685a      	ldr	r2, [r3, #4]
 800361e:	23c0      	movs	r3, #192	; 0xc0
 8003620:	039b      	lsls	r3, r3, #14
 8003622:	4013      	ands	r3, r2
 8003624:	68fa      	ldr	r2, [r7, #12]
 8003626:	429a      	cmp	r2, r3
 8003628:	d013      	beq.n	8003652 <HAL_RCCEx_PeriphCLKConfig+0xc2>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	685a      	ldr	r2, [r3, #4]
 800362e:	23c0      	movs	r3, #192	; 0xc0
 8003630:	029b      	lsls	r3, r3, #10
 8003632:	401a      	ands	r2, r3
 8003634:	23c0      	movs	r3, #192	; 0xc0
 8003636:	029b      	lsls	r3, r3, #10
 8003638:	429a      	cmp	r2, r3
 800363a:	d10a      	bne.n	8003652 <HAL_RCCEx_PeriphCLKConfig+0xc2>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800363c:	4b67      	ldr	r3, [pc, #412]	; (80037dc <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 800363e:	681a      	ldr	r2, [r3, #0]
 8003640:	2380      	movs	r3, #128	; 0x80
 8003642:	029b      	lsls	r3, r3, #10
 8003644:	401a      	ands	r2, r3
 8003646:	2380      	movs	r3, #128	; 0x80
 8003648:	029b      	lsls	r3, r3, #10
 800364a:	429a      	cmp	r2, r3
 800364c:	d101      	bne.n	8003652 <HAL_RCCEx_PeriphCLKConfig+0xc2>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 800364e:	2301      	movs	r3, #1
 8003650:	e0c0      	b.n	80037d4 <HAL_RCCEx_PeriphCLKConfig+0x244>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 8003652:	4b62      	ldr	r3, [pc, #392]	; (80037dc <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8003654:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003656:	23c0      	movs	r3, #192	; 0xc0
 8003658:	029b      	lsls	r3, r3, #10
 800365a:	4013      	ands	r3, r2
 800365c:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	2b00      	cmp	r3, #0
 8003662:	d03b      	beq.n	80036dc <HAL_RCCEx_PeriphCLKConfig+0x14c>
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	685a      	ldr	r2, [r3, #4]
 8003668:	23c0      	movs	r3, #192	; 0xc0
 800366a:	029b      	lsls	r3, r3, #10
 800366c:	4013      	ands	r3, r2
 800366e:	68fa      	ldr	r2, [r7, #12]
 8003670:	429a      	cmp	r2, r3
 8003672:	d033      	beq.n	80036dc <HAL_RCCEx_PeriphCLKConfig+0x14c>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	2220      	movs	r2, #32
 800367a:	4013      	ands	r3, r2
 800367c:	d02e      	beq.n	80036dc <HAL_RCCEx_PeriphCLKConfig+0x14c>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 800367e:	4b57      	ldr	r3, [pc, #348]	; (80037dc <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8003680:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003682:	4a58      	ldr	r2, [pc, #352]	; (80037e4 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8003684:	4013      	ands	r3, r2
 8003686:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003688:	4b54      	ldr	r3, [pc, #336]	; (80037dc <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 800368a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800368c:	4b53      	ldr	r3, [pc, #332]	; (80037dc <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 800368e:	2180      	movs	r1, #128	; 0x80
 8003690:	0309      	lsls	r1, r1, #12
 8003692:	430a      	orrs	r2, r1
 8003694:	651a      	str	r2, [r3, #80]	; 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003696:	4b51      	ldr	r3, [pc, #324]	; (80037dc <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8003698:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800369a:	4b50      	ldr	r3, [pc, #320]	; (80037dc <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 800369c:	4952      	ldr	r1, [pc, #328]	; (80037e8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800369e:	400a      	ands	r2, r1
 80036a0:	651a      	str	r2, [r3, #80]	; 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 80036a2:	4b4e      	ldr	r3, [pc, #312]	; (80037dc <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 80036a4:	68fa      	ldr	r2, [r7, #12]
 80036a6:	651a      	str	r2, [r3, #80]	; 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 80036a8:	68fa      	ldr	r2, [r7, #12]
 80036aa:	2380      	movs	r3, #128	; 0x80
 80036ac:	005b      	lsls	r3, r3, #1
 80036ae:	4013      	ands	r3, r2
 80036b0:	d014      	beq.n	80036dc <HAL_RCCEx_PeriphCLKConfig+0x14c>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80036b2:	f7fe fab3 	bl	8001c1c <HAL_GetTick>
 80036b6:	0003      	movs	r3, r0
 80036b8:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80036ba:	e009      	b.n	80036d0 <HAL_RCCEx_PeriphCLKConfig+0x140>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80036bc:	f7fe faae 	bl	8001c1c <HAL_GetTick>
 80036c0:	0002      	movs	r2, r0
 80036c2:	693b      	ldr	r3, [r7, #16]
 80036c4:	1ad3      	subs	r3, r2, r3
 80036c6:	4a49      	ldr	r2, [pc, #292]	; (80037ec <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 80036c8:	4293      	cmp	r3, r2
 80036ca:	d901      	bls.n	80036d0 <HAL_RCCEx_PeriphCLKConfig+0x140>
          {
            return HAL_TIMEOUT;
 80036cc:	2303      	movs	r3, #3
 80036ce:	e081      	b.n	80037d4 <HAL_RCCEx_PeriphCLKConfig+0x244>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80036d0:	4b42      	ldr	r3, [pc, #264]	; (80037dc <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 80036d2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80036d4:	2380      	movs	r3, #128	; 0x80
 80036d6:	009b      	lsls	r3, r3, #2
 80036d8:	4013      	ands	r3, r2
 80036da:	d0ef      	beq.n	80036bc <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      __HAL_RCC_LCD_CONFIG(PeriphClkInit->LCDClockSelection);
    } 
#endif /* LCD */

    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	2220      	movs	r2, #32
 80036e2:	4013      	ands	r3, r2
 80036e4:	d01f      	beq.n	8003726 <HAL_RCCEx_PeriphCLKConfig+0x196>
    {
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	685a      	ldr	r2, [r3, #4]
 80036ea:	23c0      	movs	r3, #192	; 0xc0
 80036ec:	029b      	lsls	r3, r3, #10
 80036ee:	401a      	ands	r2, r3
 80036f0:	23c0      	movs	r3, #192	; 0xc0
 80036f2:	029b      	lsls	r3, r3, #10
 80036f4:	429a      	cmp	r2, r3
 80036f6:	d10c      	bne.n	8003712 <HAL_RCCEx_PeriphCLKConfig+0x182>
 80036f8:	4b38      	ldr	r3, [pc, #224]	; (80037dc <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	4a3c      	ldr	r2, [pc, #240]	; (80037f0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80036fe:	4013      	ands	r3, r2
 8003700:	0019      	movs	r1, r3
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	685a      	ldr	r2, [r3, #4]
 8003706:	23c0      	movs	r3, #192	; 0xc0
 8003708:	039b      	lsls	r3, r3, #14
 800370a:	401a      	ands	r2, r3
 800370c:	4b33      	ldr	r3, [pc, #204]	; (80037dc <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 800370e:	430a      	orrs	r2, r1
 8003710:	601a      	str	r2, [r3, #0]
 8003712:	4b32      	ldr	r3, [pc, #200]	; (80037dc <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8003714:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	685a      	ldr	r2, [r3, #4]
 800371a:	23c0      	movs	r3, #192	; 0xc0
 800371c:	029b      	lsls	r3, r3, #10
 800371e:	401a      	ands	r2, r3
 8003720:	4b2e      	ldr	r3, [pc, #184]	; (80037dc <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8003722:	430a      	orrs	r2, r1
 8003724:	651a      	str	r2, [r3, #80]	; 0x50
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003726:	2317      	movs	r3, #23
 8003728:	18fb      	adds	r3, r7, r3
 800372a:	781b      	ldrb	r3, [r3, #0]
 800372c:	2b01      	cmp	r3, #1
 800372e:	d105      	bne.n	800373c <HAL_RCCEx_PeriphCLKConfig+0x1ac>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003730:	4b2a      	ldr	r3, [pc, #168]	; (80037dc <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8003732:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003734:	4b29      	ldr	r3, [pc, #164]	; (80037dc <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8003736:	492f      	ldr	r1, [pc, #188]	; (80037f4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003738:	400a      	ands	r2, r1
 800373a:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined (RCC_CCIPR_USART1SEL)
  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	2201      	movs	r2, #1
 8003742:	4013      	ands	r3, r2
 8003744:	d009      	beq.n	800375a <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003746:	4b25      	ldr	r3, [pc, #148]	; (80037dc <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8003748:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800374a:	2203      	movs	r2, #3
 800374c:	4393      	bics	r3, r2
 800374e:	0019      	movs	r1, r3
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	689a      	ldr	r2, [r3, #8]
 8003754:	4b21      	ldr	r3, [pc, #132]	; (80037dc <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8003756:	430a      	orrs	r2, r1
 8003758:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	2202      	movs	r2, #2
 8003760:	4013      	ands	r3, r2
 8003762:	d009      	beq.n	8003778 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003764:	4b1d      	ldr	r3, [pc, #116]	; (80037dc <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8003766:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003768:	220c      	movs	r2, #12
 800376a:	4393      	bics	r3, r2
 800376c:	0019      	movs	r1, r3
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	68da      	ldr	r2, [r3, #12]
 8003772:	4b1a      	ldr	r3, [pc, #104]	; (80037dc <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8003774:	430a      	orrs	r2, r1
 8003776:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	2204      	movs	r2, #4
 800377e:	4013      	ands	r3, r2
 8003780:	d009      	beq.n	8003796 <HAL_RCCEx_PeriphCLKConfig+0x206>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003782:	4b16      	ldr	r3, [pc, #88]	; (80037dc <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8003784:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003786:	4a1c      	ldr	r2, [pc, #112]	; (80037f8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003788:	4013      	ands	r3, r2
 800378a:	0019      	movs	r1, r3
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	691a      	ldr	r2, [r3, #16]
 8003790:	4b12      	ldr	r3, [pc, #72]	; (80037dc <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8003792:	430a      	orrs	r2, r1
 8003794:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	2208      	movs	r2, #8
 800379c:	4013      	ands	r3, r2
 800379e:	d009      	beq.n	80037b4 <HAL_RCCEx_PeriphCLKConfig+0x224>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80037a0:	4b0e      	ldr	r3, [pc, #56]	; (80037dc <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 80037a2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80037a4:	4a15      	ldr	r2, [pc, #84]	; (80037fc <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 80037a6:	4013      	ands	r3, r2
 80037a8:	0019      	movs	r1, r3
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	695a      	ldr	r2, [r3, #20]
 80037ae:	4b0b      	ldr	r3, [pc, #44]	; (80037dc <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 80037b0:	430a      	orrs	r2, r1
 80037b2:	64da      	str	r2, [r3, #76]	; 0x4c
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	2280      	movs	r2, #128	; 0x80
 80037ba:	4013      	ands	r3, r2
 80037bc:	d009      	beq.n	80037d2 <HAL_RCCEx_PeriphCLKConfig+0x242>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 80037be:	4b07      	ldr	r3, [pc, #28]	; (80037dc <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 80037c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80037c2:	4a0f      	ldr	r2, [pc, #60]	; (8003800 <HAL_RCCEx_PeriphCLKConfig+0x270>)
 80037c4:	4013      	ands	r3, r2
 80037c6:	0019      	movs	r1, r3
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	699a      	ldr	r2, [r3, #24]
 80037cc:	4b03      	ldr	r3, [pc, #12]	; (80037dc <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 80037ce:	430a      	orrs	r2, r1
 80037d0:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 80037d2:	2300      	movs	r3, #0
}
 80037d4:	0018      	movs	r0, r3
 80037d6:	46bd      	mov	sp, r7
 80037d8:	b006      	add	sp, #24
 80037da:	bd80      	pop	{r7, pc}
 80037dc:	40021000 	.word	0x40021000
 80037e0:	40007000 	.word	0x40007000
 80037e4:	fffcffff 	.word	0xfffcffff
 80037e8:	fff7ffff 	.word	0xfff7ffff
 80037ec:	00001388 	.word	0x00001388
 80037f0:	ffcfffff 	.word	0xffcfffff
 80037f4:	efffffff 	.word	0xefffffff
 80037f8:	fffff3ff 	.word	0xfffff3ff
 80037fc:	ffffcfff 	.word	0xffffcfff
 8003800:	fff3ffff 	.word	0xfff3ffff

08003804 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003804:	b580      	push	{r7, lr}
 8003806:	b082      	sub	sp, #8
 8003808:	af00      	add	r7, sp, #0
 800380a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	2b00      	cmp	r3, #0
 8003810:	d101      	bne.n	8003816 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003812:	2301      	movs	r3, #1
 8003814:	e083      	b.n	800391e <HAL_SPI_Init+0x11a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800381a:	2b00      	cmp	r3, #0
 800381c:	d109      	bne.n	8003832 <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	685a      	ldr	r2, [r3, #4]
 8003822:	2382      	movs	r3, #130	; 0x82
 8003824:	005b      	lsls	r3, r3, #1
 8003826:	429a      	cmp	r2, r3
 8003828:	d009      	beq.n	800383e <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	2200      	movs	r2, #0
 800382e:	61da      	str	r2, [r3, #28]
 8003830:	e005      	b.n	800383e <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	2200      	movs	r2, #0
 8003836:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	2200      	movs	r2, #0
 800383c:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	2200      	movs	r2, #0
 8003842:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	2251      	movs	r2, #81	; 0x51
 8003848:	5c9b      	ldrb	r3, [r3, r2]
 800384a:	b2db      	uxtb	r3, r3
 800384c:	2b00      	cmp	r3, #0
 800384e:	d107      	bne.n	8003860 <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	2250      	movs	r2, #80	; 0x50
 8003854:	2100      	movs	r1, #0
 8003856:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	0018      	movs	r0, r3
 800385c:	f7fe f87c 	bl	8001958 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	2251      	movs	r2, #81	; 0x51
 8003864:	2102      	movs	r1, #2
 8003866:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	681a      	ldr	r2, [r3, #0]
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	2140      	movs	r1, #64	; 0x40
 8003874:	438a      	bics	r2, r1
 8003876:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	685a      	ldr	r2, [r3, #4]
 800387c:	2382      	movs	r3, #130	; 0x82
 800387e:	005b      	lsls	r3, r3, #1
 8003880:	401a      	ands	r2, r3
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	6899      	ldr	r1, [r3, #8]
 8003886:	2384      	movs	r3, #132	; 0x84
 8003888:	021b      	lsls	r3, r3, #8
 800388a:	400b      	ands	r3, r1
 800388c:	431a      	orrs	r2, r3
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	68d9      	ldr	r1, [r3, #12]
 8003892:	2380      	movs	r3, #128	; 0x80
 8003894:	011b      	lsls	r3, r3, #4
 8003896:	400b      	ands	r3, r1
 8003898:	431a      	orrs	r2, r3
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	691b      	ldr	r3, [r3, #16]
 800389e:	2102      	movs	r1, #2
 80038a0:	400b      	ands	r3, r1
 80038a2:	431a      	orrs	r2, r3
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	695b      	ldr	r3, [r3, #20]
 80038a8:	2101      	movs	r1, #1
 80038aa:	400b      	ands	r3, r1
 80038ac:	431a      	orrs	r2, r3
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	6999      	ldr	r1, [r3, #24]
 80038b2:	2380      	movs	r3, #128	; 0x80
 80038b4:	009b      	lsls	r3, r3, #2
 80038b6:	400b      	ands	r3, r1
 80038b8:	431a      	orrs	r2, r3
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	69db      	ldr	r3, [r3, #28]
 80038be:	2138      	movs	r1, #56	; 0x38
 80038c0:	400b      	ands	r3, r1
 80038c2:	431a      	orrs	r2, r3
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	6a1b      	ldr	r3, [r3, #32]
 80038c8:	2180      	movs	r1, #128	; 0x80
 80038ca:	400b      	ands	r3, r1
 80038cc:	431a      	orrs	r2, r3
 80038ce:	0011      	movs	r1, r2
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80038d4:	2380      	movs	r3, #128	; 0x80
 80038d6:	019b      	lsls	r3, r3, #6
 80038d8:	401a      	ands	r2, r3
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	430a      	orrs	r2, r1
 80038e0:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	699b      	ldr	r3, [r3, #24]
 80038e6:	0c1b      	lsrs	r3, r3, #16
 80038e8:	2204      	movs	r2, #4
 80038ea:	4013      	ands	r3, r2
 80038ec:	0019      	movs	r1, r3
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038f2:	2210      	movs	r2, #16
 80038f4:	401a      	ands	r2, r3
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	430a      	orrs	r2, r1
 80038fc:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	69da      	ldr	r2, [r3, #28]
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	4907      	ldr	r1, [pc, #28]	; (8003928 <HAL_SPI_Init+0x124>)
 800390a:	400a      	ands	r2, r1
 800390c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	2200      	movs	r2, #0
 8003912:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	2251      	movs	r2, #81	; 0x51
 8003918:	2101      	movs	r1, #1
 800391a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800391c:	2300      	movs	r3, #0
}
 800391e:	0018      	movs	r0, r3
 8003920:	46bd      	mov	sp, r7
 8003922:	b002      	add	sp, #8
 8003924:	bd80      	pop	{r7, pc}
 8003926:	46c0      	nop			; (mov r8, r8)
 8003928:	fffff7ff 	.word	0xfffff7ff

0800392c <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800392c:	b580      	push	{r7, lr}
 800392e:	b088      	sub	sp, #32
 8003930:	af00      	add	r7, sp, #0
 8003932:	60f8      	str	r0, [r7, #12]
 8003934:	60b9      	str	r1, [r7, #8]
 8003936:	603b      	str	r3, [r7, #0]
 8003938:	1dbb      	adds	r3, r7, #6
 800393a:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800393c:	231f      	movs	r3, #31
 800393e:	18fb      	adds	r3, r7, r3
 8003940:	2200      	movs	r2, #0
 8003942:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	2250      	movs	r2, #80	; 0x50
 8003948:	5c9b      	ldrb	r3, [r3, r2]
 800394a:	2b01      	cmp	r3, #1
 800394c:	d101      	bne.n	8003952 <HAL_SPI_Transmit+0x26>
 800394e:	2302      	movs	r3, #2
 8003950:	e145      	b.n	8003bde <HAL_SPI_Transmit+0x2b2>
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	2250      	movs	r2, #80	; 0x50
 8003956:	2101      	movs	r1, #1
 8003958:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800395a:	f7fe f95f 	bl	8001c1c <HAL_GetTick>
 800395e:	0003      	movs	r3, r0
 8003960:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8003962:	2316      	movs	r3, #22
 8003964:	18fb      	adds	r3, r7, r3
 8003966:	1dba      	adds	r2, r7, #6
 8003968:	8812      	ldrh	r2, [r2, #0]
 800396a:	801a      	strh	r2, [r3, #0]

  if (hspi->State != HAL_SPI_STATE_READY)
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	2251      	movs	r2, #81	; 0x51
 8003970:	5c9b      	ldrb	r3, [r3, r2]
 8003972:	b2db      	uxtb	r3, r3
 8003974:	2b01      	cmp	r3, #1
 8003976:	d004      	beq.n	8003982 <HAL_SPI_Transmit+0x56>
  {
    errorcode = HAL_BUSY;
 8003978:	231f      	movs	r3, #31
 800397a:	18fb      	adds	r3, r7, r3
 800397c:	2202      	movs	r2, #2
 800397e:	701a      	strb	r2, [r3, #0]
    goto error;
 8003980:	e126      	b.n	8003bd0 <HAL_SPI_Transmit+0x2a4>
  }

  if ((pData == NULL) || (Size == 0U))
 8003982:	68bb      	ldr	r3, [r7, #8]
 8003984:	2b00      	cmp	r3, #0
 8003986:	d003      	beq.n	8003990 <HAL_SPI_Transmit+0x64>
 8003988:	1dbb      	adds	r3, r7, #6
 800398a:	881b      	ldrh	r3, [r3, #0]
 800398c:	2b00      	cmp	r3, #0
 800398e:	d104      	bne.n	800399a <HAL_SPI_Transmit+0x6e>
  {
    errorcode = HAL_ERROR;
 8003990:	231f      	movs	r3, #31
 8003992:	18fb      	adds	r3, r7, r3
 8003994:	2201      	movs	r2, #1
 8003996:	701a      	strb	r2, [r3, #0]
    goto error;
 8003998:	e11a      	b.n	8003bd0 <HAL_SPI_Transmit+0x2a4>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	2251      	movs	r2, #81	; 0x51
 800399e:	2103      	movs	r1, #3
 80039a0:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	2200      	movs	r2, #0
 80039a6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	68ba      	ldr	r2, [r7, #8]
 80039ac:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	1dba      	adds	r2, r7, #6
 80039b2:	8812      	ldrh	r2, [r2, #0]
 80039b4:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	1dba      	adds	r2, r7, #6
 80039ba:	8812      	ldrh	r2, [r2, #0]
 80039bc:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	2200      	movs	r2, #0
 80039c2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	2200      	movs	r2, #0
 80039c8:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	2200      	movs	r2, #0
 80039ce:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	2200      	movs	r2, #0
 80039d4:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	2200      	movs	r2, #0
 80039da:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	689a      	ldr	r2, [r3, #8]
 80039e0:	2380      	movs	r3, #128	; 0x80
 80039e2:	021b      	lsls	r3, r3, #8
 80039e4:	429a      	cmp	r2, r3
 80039e6:	d110      	bne.n	8003a0a <HAL_SPI_Transmit+0xde>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	681a      	ldr	r2, [r3, #0]
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	2140      	movs	r1, #64	; 0x40
 80039f4:	438a      	bics	r2, r1
 80039f6:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	681a      	ldr	r2, [r3, #0]
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	2180      	movs	r1, #128	; 0x80
 8003a04:	01c9      	lsls	r1, r1, #7
 8003a06:	430a      	orrs	r2, r1
 8003a08:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	2240      	movs	r2, #64	; 0x40
 8003a12:	4013      	ands	r3, r2
 8003a14:	2b40      	cmp	r3, #64	; 0x40
 8003a16:	d007      	beq.n	8003a28 <HAL_SPI_Transmit+0xfc>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	681a      	ldr	r2, [r3, #0]
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	2140      	movs	r1, #64	; 0x40
 8003a24:	430a      	orrs	r2, r1
 8003a26:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	68da      	ldr	r2, [r3, #12]
 8003a2c:	2380      	movs	r3, #128	; 0x80
 8003a2e:	011b      	lsls	r3, r3, #4
 8003a30:	429a      	cmp	r2, r3
 8003a32:	d152      	bne.n	8003ada <HAL_SPI_Transmit+0x1ae>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	685b      	ldr	r3, [r3, #4]
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	d004      	beq.n	8003a46 <HAL_SPI_Transmit+0x11a>
 8003a3c:	2316      	movs	r3, #22
 8003a3e:	18fb      	adds	r3, r7, r3
 8003a40:	881b      	ldrh	r3, [r3, #0]
 8003a42:	2b01      	cmp	r3, #1
 8003a44:	d143      	bne.n	8003ace <HAL_SPI_Transmit+0x1a2>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a4a:	881a      	ldrh	r2, [r3, #0]
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a56:	1c9a      	adds	r2, r3, #2
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003a60:	b29b      	uxth	r3, r3
 8003a62:	3b01      	subs	r3, #1
 8003a64:	b29a      	uxth	r2, r3
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003a6a:	e030      	b.n	8003ace <HAL_SPI_Transmit+0x1a2>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	689b      	ldr	r3, [r3, #8]
 8003a72:	2202      	movs	r2, #2
 8003a74:	4013      	ands	r3, r2
 8003a76:	2b02      	cmp	r3, #2
 8003a78:	d112      	bne.n	8003aa0 <HAL_SPI_Transmit+0x174>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a7e:	881a      	ldrh	r2, [r3, #0]
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a8a:	1c9a      	adds	r2, r3, #2
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003a94:	b29b      	uxth	r3, r3
 8003a96:	3b01      	subs	r3, #1
 8003a98:	b29a      	uxth	r2, r3
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	86da      	strh	r2, [r3, #54]	; 0x36
 8003a9e:	e016      	b.n	8003ace <HAL_SPI_Transmit+0x1a2>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003aa0:	f7fe f8bc 	bl	8001c1c <HAL_GetTick>
 8003aa4:	0002      	movs	r2, r0
 8003aa6:	69bb      	ldr	r3, [r7, #24]
 8003aa8:	1ad3      	subs	r3, r2, r3
 8003aaa:	683a      	ldr	r2, [r7, #0]
 8003aac:	429a      	cmp	r2, r3
 8003aae:	d802      	bhi.n	8003ab6 <HAL_SPI_Transmit+0x18a>
 8003ab0:	683b      	ldr	r3, [r7, #0]
 8003ab2:	3301      	adds	r3, #1
 8003ab4:	d102      	bne.n	8003abc <HAL_SPI_Transmit+0x190>
 8003ab6:	683b      	ldr	r3, [r7, #0]
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	d108      	bne.n	8003ace <HAL_SPI_Transmit+0x1a2>
        {
          errorcode = HAL_TIMEOUT;
 8003abc:	231f      	movs	r3, #31
 8003abe:	18fb      	adds	r3, r7, r3
 8003ac0:	2203      	movs	r2, #3
 8003ac2:	701a      	strb	r2, [r3, #0]
          hspi->State = HAL_SPI_STATE_READY;
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	2251      	movs	r2, #81	; 0x51
 8003ac8:	2101      	movs	r1, #1
 8003aca:	5499      	strb	r1, [r3, r2]
          goto error;
 8003acc:	e080      	b.n	8003bd0 <HAL_SPI_Transmit+0x2a4>
    while (hspi->TxXferCount > 0U)
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003ad2:	b29b      	uxth	r3, r3
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d1c9      	bne.n	8003a6c <HAL_SPI_Transmit+0x140>
 8003ad8:	e053      	b.n	8003b82 <HAL_SPI_Transmit+0x256>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	685b      	ldr	r3, [r3, #4]
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d004      	beq.n	8003aec <HAL_SPI_Transmit+0x1c0>
 8003ae2:	2316      	movs	r3, #22
 8003ae4:	18fb      	adds	r3, r7, r3
 8003ae6:	881b      	ldrh	r3, [r3, #0]
 8003ae8:	2b01      	cmp	r3, #1
 8003aea:	d145      	bne.n	8003b78 <HAL_SPI_Transmit+0x24c>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	330c      	adds	r3, #12
 8003af6:	7812      	ldrb	r2, [r2, #0]
 8003af8:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003afe:	1c5a      	adds	r2, r3, #1
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003b08:	b29b      	uxth	r3, r3
 8003b0a:	3b01      	subs	r3, #1
 8003b0c:	b29a      	uxth	r2, r3
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8003b12:	e031      	b.n	8003b78 <HAL_SPI_Transmit+0x24c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	689b      	ldr	r3, [r3, #8]
 8003b1a:	2202      	movs	r2, #2
 8003b1c:	4013      	ands	r3, r2
 8003b1e:	2b02      	cmp	r3, #2
 8003b20:	d113      	bne.n	8003b4a <HAL_SPI_Transmit+0x21e>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	330c      	adds	r3, #12
 8003b2c:	7812      	ldrb	r2, [r2, #0]
 8003b2e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b34:	1c5a      	adds	r2, r3, #1
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003b3e:	b29b      	uxth	r3, r3
 8003b40:	3b01      	subs	r3, #1
 8003b42:	b29a      	uxth	r2, r3
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	86da      	strh	r2, [r3, #54]	; 0x36
 8003b48:	e016      	b.n	8003b78 <HAL_SPI_Transmit+0x24c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003b4a:	f7fe f867 	bl	8001c1c <HAL_GetTick>
 8003b4e:	0002      	movs	r2, r0
 8003b50:	69bb      	ldr	r3, [r7, #24]
 8003b52:	1ad3      	subs	r3, r2, r3
 8003b54:	683a      	ldr	r2, [r7, #0]
 8003b56:	429a      	cmp	r2, r3
 8003b58:	d802      	bhi.n	8003b60 <HAL_SPI_Transmit+0x234>
 8003b5a:	683b      	ldr	r3, [r7, #0]
 8003b5c:	3301      	adds	r3, #1
 8003b5e:	d102      	bne.n	8003b66 <HAL_SPI_Transmit+0x23a>
 8003b60:	683b      	ldr	r3, [r7, #0]
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d108      	bne.n	8003b78 <HAL_SPI_Transmit+0x24c>
        {
          errorcode = HAL_TIMEOUT;
 8003b66:	231f      	movs	r3, #31
 8003b68:	18fb      	adds	r3, r7, r3
 8003b6a:	2203      	movs	r2, #3
 8003b6c:	701a      	strb	r2, [r3, #0]
          hspi->State = HAL_SPI_STATE_READY;
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	2251      	movs	r2, #81	; 0x51
 8003b72:	2101      	movs	r1, #1
 8003b74:	5499      	strb	r1, [r3, r2]
          goto error;
 8003b76:	e02b      	b.n	8003bd0 <HAL_SPI_Transmit+0x2a4>
    while (hspi->TxXferCount > 0U)
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003b7c:	b29b      	uxth	r3, r3
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d1c8      	bne.n	8003b14 <HAL_SPI_Transmit+0x1e8>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003b82:	69ba      	ldr	r2, [r7, #24]
 8003b84:	6839      	ldr	r1, [r7, #0]
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	0018      	movs	r0, r3
 8003b8a:	f000 fc1f 	bl	80043cc <SPI_EndRxTxTransaction>
 8003b8e:	1e03      	subs	r3, r0, #0
 8003b90:	d002      	beq.n	8003b98 <HAL_SPI_Transmit+0x26c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	2220      	movs	r2, #32
 8003b96:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	689b      	ldr	r3, [r3, #8]
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d10a      	bne.n	8003bb6 <HAL_SPI_Transmit+0x28a>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003ba0:	2300      	movs	r3, #0
 8003ba2:	613b      	str	r3, [r7, #16]
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	68db      	ldr	r3, [r3, #12]
 8003baa:	613b      	str	r3, [r7, #16]
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	689b      	ldr	r3, [r3, #8]
 8003bb2:	613b      	str	r3, [r7, #16]
 8003bb4:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d004      	beq.n	8003bc8 <HAL_SPI_Transmit+0x29c>
  {
    errorcode = HAL_ERROR;
 8003bbe:	231f      	movs	r3, #31
 8003bc0:	18fb      	adds	r3, r7, r3
 8003bc2:	2201      	movs	r2, #1
 8003bc4:	701a      	strb	r2, [r3, #0]
 8003bc6:	e003      	b.n	8003bd0 <HAL_SPI_Transmit+0x2a4>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	2251      	movs	r2, #81	; 0x51
 8003bcc:	2101      	movs	r1, #1
 8003bce:	5499      	strb	r1, [r3, r2]
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	2250      	movs	r2, #80	; 0x50
 8003bd4:	2100      	movs	r1, #0
 8003bd6:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8003bd8:	231f      	movs	r3, #31
 8003bda:	18fb      	adds	r3, r7, r3
 8003bdc:	781b      	ldrb	r3, [r3, #0]
}
 8003bde:	0018      	movs	r0, r3
 8003be0:	46bd      	mov	sp, r7
 8003be2:	b008      	add	sp, #32
 8003be4:	bd80      	pop	{r7, pc}
	...

08003be8 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003be8:	b590      	push	{r4, r7, lr}
 8003bea:	b089      	sub	sp, #36	; 0x24
 8003bec:	af02      	add	r7, sp, #8
 8003bee:	60f8      	str	r0, [r7, #12]
 8003bf0:	60b9      	str	r1, [r7, #8]
 8003bf2:	603b      	str	r3, [r7, #0]
 8003bf4:	1dbb      	adds	r3, r7, #6
 8003bf6:	801a      	strh	r2, [r3, #0]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003bf8:	2117      	movs	r1, #23
 8003bfa:	187b      	adds	r3, r7, r1
 8003bfc:	2200      	movs	r2, #0
 8003bfe:	701a      	strb	r2, [r3, #0]
    /* in this case, 16-bit access is performed on Data
       So, check Data is 16-bit aligned address */
    assert_param(IS_SPI_16BIT_ALIGNED_ADDRESS(pData));
  }

  if (hspi->State != HAL_SPI_STATE_READY)
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	2251      	movs	r2, #81	; 0x51
 8003c04:	5c9b      	ldrb	r3, [r3, r2]
 8003c06:	b2db      	uxtb	r3, r3
 8003c08:	2b01      	cmp	r3, #1
 8003c0a:	d003      	beq.n	8003c14 <HAL_SPI_Receive+0x2c>
  {
    errorcode = HAL_BUSY;
 8003c0c:	187b      	adds	r3, r7, r1
 8003c0e:	2202      	movs	r2, #2
 8003c10:	701a      	strb	r2, [r3, #0]
    goto error;
 8003c12:	e109      	b.n	8003e28 <HAL_SPI_Receive+0x240>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	685a      	ldr	r2, [r3, #4]
 8003c18:	2382      	movs	r3, #130	; 0x82
 8003c1a:	005b      	lsls	r3, r3, #1
 8003c1c:	429a      	cmp	r2, r3
 8003c1e:	d113      	bne.n	8003c48 <HAL_SPI_Receive+0x60>
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	689b      	ldr	r3, [r3, #8]
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	d10f      	bne.n	8003c48 <HAL_SPI_Receive+0x60>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	2251      	movs	r2, #81	; 0x51
 8003c2c:	2104      	movs	r1, #4
 8003c2e:	5499      	strb	r1, [r3, r2]
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8003c30:	1dbb      	adds	r3, r7, #6
 8003c32:	881c      	ldrh	r4, [r3, #0]
 8003c34:	68ba      	ldr	r2, [r7, #8]
 8003c36:	68b9      	ldr	r1, [r7, #8]
 8003c38:	68f8      	ldr	r0, [r7, #12]
 8003c3a:	683b      	ldr	r3, [r7, #0]
 8003c3c:	9300      	str	r3, [sp, #0]
 8003c3e:	0023      	movs	r3, r4
 8003c40:	f000 f900 	bl	8003e44 <HAL_SPI_TransmitReceive>
 8003c44:	0003      	movs	r3, r0
 8003c46:	e0f6      	b.n	8003e36 <HAL_SPI_Receive+0x24e>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	2250      	movs	r2, #80	; 0x50
 8003c4c:	5c9b      	ldrb	r3, [r3, r2]
 8003c4e:	2b01      	cmp	r3, #1
 8003c50:	d101      	bne.n	8003c56 <HAL_SPI_Receive+0x6e>
 8003c52:	2302      	movs	r3, #2
 8003c54:	e0ef      	b.n	8003e36 <HAL_SPI_Receive+0x24e>
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	2250      	movs	r2, #80	; 0x50
 8003c5a:	2101      	movs	r1, #1
 8003c5c:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003c5e:	f7fd ffdd 	bl	8001c1c <HAL_GetTick>
 8003c62:	0003      	movs	r3, r0
 8003c64:	613b      	str	r3, [r7, #16]

  if ((pData == NULL) || (Size == 0U))
 8003c66:	68bb      	ldr	r3, [r7, #8]
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	d003      	beq.n	8003c74 <HAL_SPI_Receive+0x8c>
 8003c6c:	1dbb      	adds	r3, r7, #6
 8003c6e:	881b      	ldrh	r3, [r3, #0]
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d104      	bne.n	8003c7e <HAL_SPI_Receive+0x96>
  {
    errorcode = HAL_ERROR;
 8003c74:	2317      	movs	r3, #23
 8003c76:	18fb      	adds	r3, r7, r3
 8003c78:	2201      	movs	r2, #1
 8003c7a:	701a      	strb	r2, [r3, #0]
    goto error;
 8003c7c:	e0d4      	b.n	8003e28 <HAL_SPI_Receive+0x240>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	2251      	movs	r2, #81	; 0x51
 8003c82:	2104      	movs	r1, #4
 8003c84:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	2200      	movs	r2, #0
 8003c8a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	68ba      	ldr	r2, [r7, #8]
 8003c90:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	1dba      	adds	r2, r7, #6
 8003c96:	8812      	ldrh	r2, [r2, #0]
 8003c98:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	1dba      	adds	r2, r7, #6
 8003c9e:	8812      	ldrh	r2, [r2, #0]
 8003ca0:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	2200      	movs	r2, #0
 8003ca6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	2200      	movs	r2, #0
 8003cac:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	2200      	movs	r2, #0
 8003cb2:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	2200      	movs	r2, #0
 8003cb8:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	2200      	movs	r2, #0
 8003cbe:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	689a      	ldr	r2, [r3, #8]
 8003cc4:	2380      	movs	r3, #128	; 0x80
 8003cc6:	021b      	lsls	r3, r3, #8
 8003cc8:	429a      	cmp	r2, r3
 8003cca:	d10f      	bne.n	8003cec <HAL_SPI_Receive+0x104>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	681a      	ldr	r2, [r3, #0]
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	2140      	movs	r1, #64	; 0x40
 8003cd8:	438a      	bics	r2, r1
 8003cda:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	681a      	ldr	r2, [r3, #0]
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	4956      	ldr	r1, [pc, #344]	; (8003e40 <HAL_SPI_Receive+0x258>)
 8003ce8:	400a      	ands	r2, r1
 8003cea:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	2240      	movs	r2, #64	; 0x40
 8003cf4:	4013      	ands	r3, r2
 8003cf6:	2b40      	cmp	r3, #64	; 0x40
 8003cf8:	d007      	beq.n	8003d0a <HAL_SPI_Receive+0x122>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	681a      	ldr	r2, [r3, #0]
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	2140      	movs	r1, #64	; 0x40
 8003d06:	430a      	orrs	r2, r1
 8003d08:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	68db      	ldr	r3, [r3, #12]
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d000      	beq.n	8003d14 <HAL_SPI_Receive+0x12c>
 8003d12:	e06c      	b.n	8003dee <HAL_SPI_Receive+0x206>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8003d14:	e033      	b.n	8003d7e <HAL_SPI_Receive+0x196>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	689b      	ldr	r3, [r3, #8]
 8003d1c:	2201      	movs	r2, #1
 8003d1e:	4013      	ands	r3, r2
 8003d20:	2b01      	cmp	r3, #1
 8003d22:	d115      	bne.n	8003d50 <HAL_SPI_Receive+0x168>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	330c      	adds	r3, #12
 8003d2a:	001a      	movs	r2, r3
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d30:	7812      	ldrb	r2, [r2, #0]
 8003d32:	b2d2      	uxtb	r2, r2
 8003d34:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d3a:	1c5a      	adds	r2, r3, #1
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003d44:	b29b      	uxth	r3, r3
 8003d46:	3b01      	subs	r3, #1
 8003d48:	b29a      	uxth	r2, r3
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003d4e:	e016      	b.n	8003d7e <HAL_SPI_Receive+0x196>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003d50:	f7fd ff64 	bl	8001c1c <HAL_GetTick>
 8003d54:	0002      	movs	r2, r0
 8003d56:	693b      	ldr	r3, [r7, #16]
 8003d58:	1ad3      	subs	r3, r2, r3
 8003d5a:	683a      	ldr	r2, [r7, #0]
 8003d5c:	429a      	cmp	r2, r3
 8003d5e:	d802      	bhi.n	8003d66 <HAL_SPI_Receive+0x17e>
 8003d60:	683b      	ldr	r3, [r7, #0]
 8003d62:	3301      	adds	r3, #1
 8003d64:	d102      	bne.n	8003d6c <HAL_SPI_Receive+0x184>
 8003d66:	683b      	ldr	r3, [r7, #0]
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d108      	bne.n	8003d7e <HAL_SPI_Receive+0x196>
        {
          errorcode = HAL_TIMEOUT;
 8003d6c:	2317      	movs	r3, #23
 8003d6e:	18fb      	adds	r3, r7, r3
 8003d70:	2203      	movs	r2, #3
 8003d72:	701a      	strb	r2, [r3, #0]
          hspi->State = HAL_SPI_STATE_READY;
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	2251      	movs	r2, #81	; 0x51
 8003d78:	2101      	movs	r1, #1
 8003d7a:	5499      	strb	r1, [r3, r2]
          goto error;
 8003d7c:	e054      	b.n	8003e28 <HAL_SPI_Receive+0x240>
    while (hspi->RxXferCount > 0U)
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003d82:	b29b      	uxth	r3, r3
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d1c6      	bne.n	8003d16 <HAL_SPI_Receive+0x12e>
 8003d88:	e036      	b.n	8003df8 <HAL_SPI_Receive+0x210>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	689b      	ldr	r3, [r3, #8]
 8003d90:	2201      	movs	r2, #1
 8003d92:	4013      	ands	r3, r2
 8003d94:	2b01      	cmp	r3, #1
 8003d96:	d113      	bne.n	8003dc0 <HAL_SPI_Receive+0x1d8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	68da      	ldr	r2, [r3, #12]
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003da2:	b292      	uxth	r2, r2
 8003da4:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003daa:	1c9a      	adds	r2, r3, #2
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003db4:	b29b      	uxth	r3, r3
 8003db6:	3b01      	subs	r3, #1
 8003db8:	b29a      	uxth	r2, r3
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003dbe:	e016      	b.n	8003dee <HAL_SPI_Receive+0x206>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003dc0:	f7fd ff2c 	bl	8001c1c <HAL_GetTick>
 8003dc4:	0002      	movs	r2, r0
 8003dc6:	693b      	ldr	r3, [r7, #16]
 8003dc8:	1ad3      	subs	r3, r2, r3
 8003dca:	683a      	ldr	r2, [r7, #0]
 8003dcc:	429a      	cmp	r2, r3
 8003dce:	d802      	bhi.n	8003dd6 <HAL_SPI_Receive+0x1ee>
 8003dd0:	683b      	ldr	r3, [r7, #0]
 8003dd2:	3301      	adds	r3, #1
 8003dd4:	d102      	bne.n	8003ddc <HAL_SPI_Receive+0x1f4>
 8003dd6:	683b      	ldr	r3, [r7, #0]
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d108      	bne.n	8003dee <HAL_SPI_Receive+0x206>
        {
          errorcode = HAL_TIMEOUT;
 8003ddc:	2317      	movs	r3, #23
 8003dde:	18fb      	adds	r3, r7, r3
 8003de0:	2203      	movs	r2, #3
 8003de2:	701a      	strb	r2, [r3, #0]
          hspi->State = HAL_SPI_STATE_READY;
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	2251      	movs	r2, #81	; 0x51
 8003de8:	2101      	movs	r1, #1
 8003dea:	5499      	strb	r1, [r3, r2]
          goto error;
 8003dec:	e01c      	b.n	8003e28 <HAL_SPI_Receive+0x240>
    while (hspi->RxXferCount > 0U)
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003df2:	b29b      	uxth	r3, r3
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	d1c8      	bne.n	8003d8a <HAL_SPI_Receive+0x1a2>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003df8:	693a      	ldr	r2, [r7, #16]
 8003dfa:	6839      	ldr	r1, [r7, #0]
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	0018      	movs	r0, r3
 8003e00:	f000 fa7a 	bl	80042f8 <SPI_EndRxTransaction>
 8003e04:	1e03      	subs	r3, r0, #0
 8003e06:	d002      	beq.n	8003e0e <HAL_SPI_Receive+0x226>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	2220      	movs	r2, #32
 8003e0c:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d004      	beq.n	8003e20 <HAL_SPI_Receive+0x238>
  {
    errorcode = HAL_ERROR;
 8003e16:	2317      	movs	r3, #23
 8003e18:	18fb      	adds	r3, r7, r3
 8003e1a:	2201      	movs	r2, #1
 8003e1c:	701a      	strb	r2, [r3, #0]
 8003e1e:	e003      	b.n	8003e28 <HAL_SPI_Receive+0x240>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	2251      	movs	r2, #81	; 0x51
 8003e24:	2101      	movs	r1, #1
 8003e26:	5499      	strb	r1, [r3, r2]
  }

error :
  __HAL_UNLOCK(hspi);
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	2250      	movs	r2, #80	; 0x50
 8003e2c:	2100      	movs	r1, #0
 8003e2e:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8003e30:	2317      	movs	r3, #23
 8003e32:	18fb      	adds	r3, r7, r3
 8003e34:	781b      	ldrb	r3, [r3, #0]
}
 8003e36:	0018      	movs	r0, r3
 8003e38:	46bd      	mov	sp, r7
 8003e3a:	b007      	add	sp, #28
 8003e3c:	bd90      	pop	{r4, r7, pc}
 8003e3e:	46c0      	nop			; (mov r8, r8)
 8003e40:	ffffbfff 	.word	0xffffbfff

08003e44 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8003e44:	b580      	push	{r7, lr}
 8003e46:	b08c      	sub	sp, #48	; 0x30
 8003e48:	af00      	add	r7, sp, #0
 8003e4a:	60f8      	str	r0, [r7, #12]
 8003e4c:	60b9      	str	r1, [r7, #8]
 8003e4e:	607a      	str	r2, [r7, #4]
 8003e50:	001a      	movs	r2, r3
 8003e52:	1cbb      	adds	r3, r7, #2
 8003e54:	801a      	strh	r2, [r3, #0]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8003e56:	2301      	movs	r3, #1
 8003e58:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8003e5a:	232b      	movs	r3, #43	; 0x2b
 8003e5c:	18fb      	adds	r3, r7, r3
 8003e5e:	2200      	movs	r2, #0
 8003e60:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	2250      	movs	r2, #80	; 0x50
 8003e66:	5c9b      	ldrb	r3, [r3, r2]
 8003e68:	2b01      	cmp	r3, #1
 8003e6a:	d101      	bne.n	8003e70 <HAL_SPI_TransmitReceive+0x2c>
 8003e6c:	2302      	movs	r3, #2
 8003e6e:	e1b0      	b.n	80041d2 <HAL_SPI_TransmitReceive+0x38e>
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	2250      	movs	r2, #80	; 0x50
 8003e74:	2101      	movs	r1, #1
 8003e76:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003e78:	f7fd fed0 	bl	8001c1c <HAL_GetTick>
 8003e7c:	0003      	movs	r3, r0
 8003e7e:	627b      	str	r3, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8003e80:	2023      	movs	r0, #35	; 0x23
 8003e82:	183b      	adds	r3, r7, r0
 8003e84:	68fa      	ldr	r2, [r7, #12]
 8003e86:	2151      	movs	r1, #81	; 0x51
 8003e88:	5c52      	ldrb	r2, [r2, r1]
 8003e8a:	701a      	strb	r2, [r3, #0]
  tmp_mode            = hspi->Init.Mode;
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	685b      	ldr	r3, [r3, #4]
 8003e90:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8003e92:	231a      	movs	r3, #26
 8003e94:	18fb      	adds	r3, r7, r3
 8003e96:	1cba      	adds	r2, r7, #2
 8003e98:	8812      	ldrh	r2, [r2, #0]
 8003e9a:	801a      	strh	r2, [r3, #0]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8003e9c:	183b      	adds	r3, r7, r0
 8003e9e:	781b      	ldrb	r3, [r3, #0]
 8003ea0:	2b01      	cmp	r3, #1
 8003ea2:	d011      	beq.n	8003ec8 <HAL_SPI_TransmitReceive+0x84>
 8003ea4:	69fa      	ldr	r2, [r7, #28]
 8003ea6:	2382      	movs	r3, #130	; 0x82
 8003ea8:	005b      	lsls	r3, r3, #1
 8003eaa:	429a      	cmp	r2, r3
 8003eac:	d107      	bne.n	8003ebe <HAL_SPI_TransmitReceive+0x7a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	689b      	ldr	r3, [r3, #8]
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d103      	bne.n	8003ebe <HAL_SPI_TransmitReceive+0x7a>
 8003eb6:	183b      	adds	r3, r7, r0
 8003eb8:	781b      	ldrb	r3, [r3, #0]
 8003eba:	2b04      	cmp	r3, #4
 8003ebc:	d004      	beq.n	8003ec8 <HAL_SPI_TransmitReceive+0x84>
  {
    errorcode = HAL_BUSY;
 8003ebe:	232b      	movs	r3, #43	; 0x2b
 8003ec0:	18fb      	adds	r3, r7, r3
 8003ec2:	2202      	movs	r2, #2
 8003ec4:	701a      	strb	r2, [r3, #0]
    goto error;
 8003ec6:	e17d      	b.n	80041c4 <HAL_SPI_TransmitReceive+0x380>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003ec8:	68bb      	ldr	r3, [r7, #8]
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d006      	beq.n	8003edc <HAL_SPI_TransmitReceive+0x98>
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d003      	beq.n	8003edc <HAL_SPI_TransmitReceive+0x98>
 8003ed4:	1cbb      	adds	r3, r7, #2
 8003ed6:	881b      	ldrh	r3, [r3, #0]
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d104      	bne.n	8003ee6 <HAL_SPI_TransmitReceive+0xa2>
  {
    errorcode = HAL_ERROR;
 8003edc:	232b      	movs	r3, #43	; 0x2b
 8003ede:	18fb      	adds	r3, r7, r3
 8003ee0:	2201      	movs	r2, #1
 8003ee2:	701a      	strb	r2, [r3, #0]
    goto error;
 8003ee4:	e16e      	b.n	80041c4 <HAL_SPI_TransmitReceive+0x380>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	2251      	movs	r2, #81	; 0x51
 8003eea:	5c9b      	ldrb	r3, [r3, r2]
 8003eec:	b2db      	uxtb	r3, r3
 8003eee:	2b04      	cmp	r3, #4
 8003ef0:	d003      	beq.n	8003efa <HAL_SPI_TransmitReceive+0xb6>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	2251      	movs	r2, #81	; 0x51
 8003ef6:	2105      	movs	r1, #5
 8003ef8:	5499      	strb	r1, [r3, r2]
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	2200      	movs	r2, #0
 8003efe:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	687a      	ldr	r2, [r7, #4]
 8003f04:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	1cba      	adds	r2, r7, #2
 8003f0a:	8812      	ldrh	r2, [r2, #0]
 8003f0c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	1cba      	adds	r2, r7, #2
 8003f12:	8812      	ldrh	r2, [r2, #0]
 8003f14:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	68ba      	ldr	r2, [r7, #8]
 8003f1a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	1cba      	adds	r2, r7, #2
 8003f20:	8812      	ldrh	r2, [r2, #0]
 8003f22:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	1cba      	adds	r2, r7, #2
 8003f28:	8812      	ldrh	r2, [r2, #0]
 8003f2a:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	2200      	movs	r2, #0
 8003f30:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	2200      	movs	r2, #0
 8003f36:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	2240      	movs	r2, #64	; 0x40
 8003f40:	4013      	ands	r3, r2
 8003f42:	2b40      	cmp	r3, #64	; 0x40
 8003f44:	d007      	beq.n	8003f56 <HAL_SPI_TransmitReceive+0x112>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	681a      	ldr	r2, [r3, #0]
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	2140      	movs	r1, #64	; 0x40
 8003f52:	430a      	orrs	r2, r1
 8003f54:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	68da      	ldr	r2, [r3, #12]
 8003f5a:	2380      	movs	r3, #128	; 0x80
 8003f5c:	011b      	lsls	r3, r3, #4
 8003f5e:	429a      	cmp	r2, r3
 8003f60:	d000      	beq.n	8003f64 <HAL_SPI_TransmitReceive+0x120>
 8003f62:	e07f      	b.n	8004064 <HAL_SPI_TransmitReceive+0x220>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	685b      	ldr	r3, [r3, #4]
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	d005      	beq.n	8003f78 <HAL_SPI_TransmitReceive+0x134>
 8003f6c:	231a      	movs	r3, #26
 8003f6e:	18fb      	adds	r3, r7, r3
 8003f70:	881b      	ldrh	r3, [r3, #0]
 8003f72:	2b01      	cmp	r3, #1
 8003f74:	d000      	beq.n	8003f78 <HAL_SPI_TransmitReceive+0x134>
 8003f76:	e06a      	b.n	800404e <HAL_SPI_TransmitReceive+0x20a>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f7c:	881a      	ldrh	r2, [r3, #0]
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f88:	1c9a      	adds	r2, r3, #2
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003f92:	b29b      	uxth	r3, r3
 8003f94:	3b01      	subs	r3, #1
 8003f96:	b29a      	uxth	r2, r3
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003f9c:	e057      	b.n	800404e <HAL_SPI_TransmitReceive+0x20a>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	689b      	ldr	r3, [r3, #8]
 8003fa4:	2202      	movs	r2, #2
 8003fa6:	4013      	ands	r3, r2
 8003fa8:	2b02      	cmp	r3, #2
 8003faa:	d11b      	bne.n	8003fe4 <HAL_SPI_TransmitReceive+0x1a0>
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003fb0:	b29b      	uxth	r3, r3
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d016      	beq.n	8003fe4 <HAL_SPI_TransmitReceive+0x1a0>
 8003fb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003fb8:	2b01      	cmp	r3, #1
 8003fba:	d113      	bne.n	8003fe4 <HAL_SPI_TransmitReceive+0x1a0>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fc0:	881a      	ldrh	r2, [r3, #0]
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fcc:	1c9a      	adds	r2, r3, #2
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003fd6:	b29b      	uxth	r3, r3
 8003fd8:	3b01      	subs	r3, #1
 8003fda:	b29a      	uxth	r2, r3
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003fe0:	2300      	movs	r3, #0
 8003fe2:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	689b      	ldr	r3, [r3, #8]
 8003fea:	2201      	movs	r2, #1
 8003fec:	4013      	ands	r3, r2
 8003fee:	2b01      	cmp	r3, #1
 8003ff0:	d119      	bne.n	8004026 <HAL_SPI_TransmitReceive+0x1e2>
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003ff6:	b29b      	uxth	r3, r3
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	d014      	beq.n	8004026 <HAL_SPI_TransmitReceive+0x1e2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	68da      	ldr	r2, [r3, #12]
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004006:	b292      	uxth	r2, r2
 8004008:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800400e:	1c9a      	adds	r2, r3, #2
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004018:	b29b      	uxth	r3, r3
 800401a:	3b01      	subs	r3, #1
 800401c:	b29a      	uxth	r2, r3
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004022:	2301      	movs	r3, #1
 8004024:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8004026:	f7fd fdf9 	bl	8001c1c <HAL_GetTick>
 800402a:	0002      	movs	r2, r0
 800402c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800402e:	1ad3      	subs	r3, r2, r3
 8004030:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004032:	429a      	cmp	r2, r3
 8004034:	d80b      	bhi.n	800404e <HAL_SPI_TransmitReceive+0x20a>
 8004036:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004038:	3301      	adds	r3, #1
 800403a:	d008      	beq.n	800404e <HAL_SPI_TransmitReceive+0x20a>
      {
        errorcode = HAL_TIMEOUT;
 800403c:	232b      	movs	r3, #43	; 0x2b
 800403e:	18fb      	adds	r3, r7, r3
 8004040:	2203      	movs	r2, #3
 8004042:	701a      	strb	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	2251      	movs	r2, #81	; 0x51
 8004048:	2101      	movs	r1, #1
 800404a:	5499      	strb	r1, [r3, r2]
        goto error;
 800404c:	e0ba      	b.n	80041c4 <HAL_SPI_TransmitReceive+0x380>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004052:	b29b      	uxth	r3, r3
 8004054:	2b00      	cmp	r3, #0
 8004056:	d1a2      	bne.n	8003f9e <HAL_SPI_TransmitReceive+0x15a>
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800405c:	b29b      	uxth	r3, r3
 800405e:	2b00      	cmp	r3, #0
 8004060:	d19d      	bne.n	8003f9e <HAL_SPI_TransmitReceive+0x15a>
 8004062:	e083      	b.n	800416c <HAL_SPI_TransmitReceive+0x328>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	685b      	ldr	r3, [r3, #4]
 8004068:	2b00      	cmp	r3, #0
 800406a:	d005      	beq.n	8004078 <HAL_SPI_TransmitReceive+0x234>
 800406c:	231a      	movs	r3, #26
 800406e:	18fb      	adds	r3, r7, r3
 8004070:	881b      	ldrh	r3, [r3, #0]
 8004072:	2b01      	cmp	r3, #1
 8004074:	d000      	beq.n	8004078 <HAL_SPI_TransmitReceive+0x234>
 8004076:	e06f      	b.n	8004158 <HAL_SPI_TransmitReceive+0x314>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	330c      	adds	r3, #12
 8004082:	7812      	ldrb	r2, [r2, #0]
 8004084:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800408a:	1c5a      	adds	r2, r3, #1
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004094:	b29b      	uxth	r3, r3
 8004096:	3b01      	subs	r3, #1
 8004098:	b29a      	uxth	r2, r3
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800409e:	e05b      	b.n	8004158 <HAL_SPI_TransmitReceive+0x314>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	689b      	ldr	r3, [r3, #8]
 80040a6:	2202      	movs	r2, #2
 80040a8:	4013      	ands	r3, r2
 80040aa:	2b02      	cmp	r3, #2
 80040ac:	d11c      	bne.n	80040e8 <HAL_SPI_TransmitReceive+0x2a4>
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80040b2:	b29b      	uxth	r3, r3
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	d017      	beq.n	80040e8 <HAL_SPI_TransmitReceive+0x2a4>
 80040b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80040ba:	2b01      	cmp	r3, #1
 80040bc:	d114      	bne.n	80040e8 <HAL_SPI_TransmitReceive+0x2a4>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	330c      	adds	r3, #12
 80040c8:	7812      	ldrb	r2, [r2, #0]
 80040ca:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040d0:	1c5a      	adds	r2, r3, #1
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80040da:	b29b      	uxth	r3, r3
 80040dc:	3b01      	subs	r3, #1
 80040de:	b29a      	uxth	r2, r3
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80040e4:	2300      	movs	r3, #0
 80040e6:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	689b      	ldr	r3, [r3, #8]
 80040ee:	2201      	movs	r2, #1
 80040f0:	4013      	ands	r3, r2
 80040f2:	2b01      	cmp	r3, #1
 80040f4:	d119      	bne.n	800412a <HAL_SPI_TransmitReceive+0x2e6>
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80040fa:	b29b      	uxth	r3, r3
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d014      	beq.n	800412a <HAL_SPI_TransmitReceive+0x2e6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	68da      	ldr	r2, [r3, #12]
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800410a:	b2d2      	uxtb	r2, r2
 800410c:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004112:	1c5a      	adds	r2, r3, #1
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800411c:	b29b      	uxth	r3, r3
 800411e:	3b01      	subs	r3, #1
 8004120:	b29a      	uxth	r2, r3
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004126:	2301      	movs	r3, #1
 8004128:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800412a:	f7fd fd77 	bl	8001c1c <HAL_GetTick>
 800412e:	0002      	movs	r2, r0
 8004130:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004132:	1ad3      	subs	r3, r2, r3
 8004134:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004136:	429a      	cmp	r2, r3
 8004138:	d802      	bhi.n	8004140 <HAL_SPI_TransmitReceive+0x2fc>
 800413a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800413c:	3301      	adds	r3, #1
 800413e:	d102      	bne.n	8004146 <HAL_SPI_TransmitReceive+0x302>
 8004140:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004142:	2b00      	cmp	r3, #0
 8004144:	d108      	bne.n	8004158 <HAL_SPI_TransmitReceive+0x314>
      {
        errorcode = HAL_TIMEOUT;
 8004146:	232b      	movs	r3, #43	; 0x2b
 8004148:	18fb      	adds	r3, r7, r3
 800414a:	2203      	movs	r2, #3
 800414c:	701a      	strb	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	2251      	movs	r2, #81	; 0x51
 8004152:	2101      	movs	r1, #1
 8004154:	5499      	strb	r1, [r3, r2]
        goto error;
 8004156:	e035      	b.n	80041c4 <HAL_SPI_TransmitReceive+0x380>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800415c:	b29b      	uxth	r3, r3
 800415e:	2b00      	cmp	r3, #0
 8004160:	d19e      	bne.n	80040a0 <HAL_SPI_TransmitReceive+0x25c>
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004166:	b29b      	uxth	r3, r3
 8004168:	2b00      	cmp	r3, #0
 800416a:	d199      	bne.n	80040a0 <HAL_SPI_TransmitReceive+0x25c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800416c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800416e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	0018      	movs	r0, r3
 8004174:	f000 f92a 	bl	80043cc <SPI_EndRxTxTransaction>
 8004178:	1e03      	subs	r3, r0, #0
 800417a:	d007      	beq.n	800418c <HAL_SPI_TransmitReceive+0x348>
  {
    errorcode = HAL_ERROR;
 800417c:	232b      	movs	r3, #43	; 0x2b
 800417e:	18fb      	adds	r3, r7, r3
 8004180:	2201      	movs	r2, #1
 8004182:	701a      	strb	r2, [r3, #0]
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	2220      	movs	r2, #32
 8004188:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 800418a:	e01b      	b.n	80041c4 <HAL_SPI_TransmitReceive+0x380>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	689b      	ldr	r3, [r3, #8]
 8004190:	2b00      	cmp	r3, #0
 8004192:	d10a      	bne.n	80041aa <HAL_SPI_TransmitReceive+0x366>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004194:	2300      	movs	r3, #0
 8004196:	617b      	str	r3, [r7, #20]
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	68db      	ldr	r3, [r3, #12]
 800419e:	617b      	str	r3, [r7, #20]
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	689b      	ldr	r3, [r3, #8]
 80041a6:	617b      	str	r3, [r7, #20]
 80041a8:	697b      	ldr	r3, [r7, #20]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d004      	beq.n	80041bc <HAL_SPI_TransmitReceive+0x378>
  {
    errorcode = HAL_ERROR;
 80041b2:	232b      	movs	r3, #43	; 0x2b
 80041b4:	18fb      	adds	r3, r7, r3
 80041b6:	2201      	movs	r2, #1
 80041b8:	701a      	strb	r2, [r3, #0]
 80041ba:	e003      	b.n	80041c4 <HAL_SPI_TransmitReceive+0x380>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	2251      	movs	r2, #81	; 0x51
 80041c0:	2101      	movs	r1, #1
 80041c2:	5499      	strb	r1, [r3, r2]
  }
  
error :
  __HAL_UNLOCK(hspi);
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	2250      	movs	r2, #80	; 0x50
 80041c8:	2100      	movs	r1, #0
 80041ca:	5499      	strb	r1, [r3, r2]
  return errorcode;
 80041cc:	232b      	movs	r3, #43	; 0x2b
 80041ce:	18fb      	adds	r3, r7, r3
 80041d0:	781b      	ldrb	r3, [r3, #0]
}
 80041d2:	0018      	movs	r0, r3
 80041d4:	46bd      	mov	sp, r7
 80041d6:	b00c      	add	sp, #48	; 0x30
 80041d8:	bd80      	pop	{r7, pc}
	...

080041dc <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80041dc:	b580      	push	{r7, lr}
 80041de:	b088      	sub	sp, #32
 80041e0:	af00      	add	r7, sp, #0
 80041e2:	60f8      	str	r0, [r7, #12]
 80041e4:	60b9      	str	r1, [r7, #8]
 80041e6:	603b      	str	r3, [r7, #0]
 80041e8:	1dfb      	adds	r3, r7, #7
 80041ea:	701a      	strb	r2, [r3, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80041ec:	f7fd fd16 	bl	8001c1c <HAL_GetTick>
 80041f0:	0002      	movs	r2, r0
 80041f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041f4:	1a9b      	subs	r3, r3, r2
 80041f6:	683a      	ldr	r2, [r7, #0]
 80041f8:	18d3      	adds	r3, r2, r3
 80041fa:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80041fc:	f7fd fd0e 	bl	8001c1c <HAL_GetTick>
 8004200:	0003      	movs	r3, r0
 8004202:	61bb      	str	r3, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004204:	4b3a      	ldr	r3, [pc, #232]	; (80042f0 <SPI_WaitFlagStateUntilTimeout+0x114>)
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	015b      	lsls	r3, r3, #5
 800420a:	0d1b      	lsrs	r3, r3, #20
 800420c:	69fa      	ldr	r2, [r7, #28]
 800420e:	4353      	muls	r3, r2
 8004210:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004212:	e058      	b.n	80042c6 <SPI_WaitFlagStateUntilTimeout+0xea>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004214:	683b      	ldr	r3, [r7, #0]
 8004216:	3301      	adds	r3, #1
 8004218:	d055      	beq.n	80042c6 <SPI_WaitFlagStateUntilTimeout+0xea>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800421a:	f7fd fcff 	bl	8001c1c <HAL_GetTick>
 800421e:	0002      	movs	r2, r0
 8004220:	69bb      	ldr	r3, [r7, #24]
 8004222:	1ad3      	subs	r3, r2, r3
 8004224:	69fa      	ldr	r2, [r7, #28]
 8004226:	429a      	cmp	r2, r3
 8004228:	d902      	bls.n	8004230 <SPI_WaitFlagStateUntilTimeout+0x54>
 800422a:	69fb      	ldr	r3, [r7, #28]
 800422c:	2b00      	cmp	r3, #0
 800422e:	d142      	bne.n	80042b6 <SPI_WaitFlagStateUntilTimeout+0xda>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	685a      	ldr	r2, [r3, #4]
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	21e0      	movs	r1, #224	; 0xe0
 800423c:	438a      	bics	r2, r1
 800423e:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	685a      	ldr	r2, [r3, #4]
 8004244:	2382      	movs	r3, #130	; 0x82
 8004246:	005b      	lsls	r3, r3, #1
 8004248:	429a      	cmp	r2, r3
 800424a:	d113      	bne.n	8004274 <SPI_WaitFlagStateUntilTimeout+0x98>
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	689a      	ldr	r2, [r3, #8]
 8004250:	2380      	movs	r3, #128	; 0x80
 8004252:	021b      	lsls	r3, r3, #8
 8004254:	429a      	cmp	r2, r3
 8004256:	d005      	beq.n	8004264 <SPI_WaitFlagStateUntilTimeout+0x88>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	689a      	ldr	r2, [r3, #8]
 800425c:	2380      	movs	r3, #128	; 0x80
 800425e:	00db      	lsls	r3, r3, #3
 8004260:	429a      	cmp	r2, r3
 8004262:	d107      	bne.n	8004274 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	681a      	ldr	r2, [r3, #0]
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	2140      	movs	r1, #64	; 0x40
 8004270:	438a      	bics	r2, r1
 8004272:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004278:	2380      	movs	r3, #128	; 0x80
 800427a:	019b      	lsls	r3, r3, #6
 800427c:	429a      	cmp	r2, r3
 800427e:	d110      	bne.n	80042a2 <SPI_WaitFlagStateUntilTimeout+0xc6>
        {
          SPI_RESET_CRC(hspi);
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	681a      	ldr	r2, [r3, #0]
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	491a      	ldr	r1, [pc, #104]	; (80042f4 <SPI_WaitFlagStateUntilTimeout+0x118>)
 800428c:	400a      	ands	r2, r1
 800428e:	601a      	str	r2, [r3, #0]
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	681a      	ldr	r2, [r3, #0]
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	2180      	movs	r1, #128	; 0x80
 800429c:	0189      	lsls	r1, r1, #6
 800429e:	430a      	orrs	r2, r1
 80042a0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	2251      	movs	r2, #81	; 0x51
 80042a6:	2101      	movs	r1, #1
 80042a8:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	2250      	movs	r2, #80	; 0x50
 80042ae:	2100      	movs	r1, #0
 80042b0:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80042b2:	2303      	movs	r3, #3
 80042b4:	e017      	b.n	80042e6 <SPI_WaitFlagStateUntilTimeout+0x10a>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80042b6:	697b      	ldr	r3, [r7, #20]
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	d101      	bne.n	80042c0 <SPI_WaitFlagStateUntilTimeout+0xe4>
      {
        tmp_timeout = 0U;
 80042bc:	2300      	movs	r3, #0
 80042be:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80042c0:	697b      	ldr	r3, [r7, #20]
 80042c2:	3b01      	subs	r3, #1
 80042c4:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	689b      	ldr	r3, [r3, #8]
 80042cc:	68ba      	ldr	r2, [r7, #8]
 80042ce:	4013      	ands	r3, r2
 80042d0:	68ba      	ldr	r2, [r7, #8]
 80042d2:	1ad3      	subs	r3, r2, r3
 80042d4:	425a      	negs	r2, r3
 80042d6:	4153      	adcs	r3, r2
 80042d8:	b2db      	uxtb	r3, r3
 80042da:	001a      	movs	r2, r3
 80042dc:	1dfb      	adds	r3, r7, #7
 80042de:	781b      	ldrb	r3, [r3, #0]
 80042e0:	429a      	cmp	r2, r3
 80042e2:	d197      	bne.n	8004214 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80042e4:	2300      	movs	r3, #0
}
 80042e6:	0018      	movs	r0, r3
 80042e8:	46bd      	mov	sp, r7
 80042ea:	b008      	add	sp, #32
 80042ec:	bd80      	pop	{r7, pc}
 80042ee:	46c0      	nop			; (mov r8, r8)
 80042f0:	20000010 	.word	0x20000010
 80042f4:	ffffdfff 	.word	0xffffdfff

080042f8 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80042f8:	b580      	push	{r7, lr}
 80042fa:	b086      	sub	sp, #24
 80042fc:	af02      	add	r7, sp, #8
 80042fe:	60f8      	str	r0, [r7, #12]
 8004300:	60b9      	str	r1, [r7, #8]
 8004302:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	685a      	ldr	r2, [r3, #4]
 8004308:	2382      	movs	r3, #130	; 0x82
 800430a:	005b      	lsls	r3, r3, #1
 800430c:	429a      	cmp	r2, r3
 800430e:	d113      	bne.n	8004338 <SPI_EndRxTransaction+0x40>
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	689a      	ldr	r2, [r3, #8]
 8004314:	2380      	movs	r3, #128	; 0x80
 8004316:	021b      	lsls	r3, r3, #8
 8004318:	429a      	cmp	r2, r3
 800431a:	d005      	beq.n	8004328 <SPI_EndRxTransaction+0x30>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	689a      	ldr	r2, [r3, #8]
 8004320:	2380      	movs	r3, #128	; 0x80
 8004322:	00db      	lsls	r3, r3, #3
 8004324:	429a      	cmp	r2, r3
 8004326:	d107      	bne.n	8004338 <SPI_EndRxTransaction+0x40>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	681a      	ldr	r2, [r3, #0]
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	2140      	movs	r1, #64	; 0x40
 8004334:	438a      	bics	r2, r1
 8004336:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	685a      	ldr	r2, [r3, #4]
 800433c:	2382      	movs	r3, #130	; 0x82
 800433e:	005b      	lsls	r3, r3, #1
 8004340:	429a      	cmp	r2, r3
 8004342:	d12b      	bne.n	800439c <SPI_EndRxTransaction+0xa4>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	689a      	ldr	r2, [r3, #8]
 8004348:	2380      	movs	r3, #128	; 0x80
 800434a:	00db      	lsls	r3, r3, #3
 800434c:	429a      	cmp	r2, r3
 800434e:	d012      	beq.n	8004376 <SPI_EndRxTransaction+0x7e>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004350:	68ba      	ldr	r2, [r7, #8]
 8004352:	68f8      	ldr	r0, [r7, #12]
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	9300      	str	r3, [sp, #0]
 8004358:	0013      	movs	r3, r2
 800435a:	2200      	movs	r2, #0
 800435c:	2180      	movs	r1, #128	; 0x80
 800435e:	f7ff ff3d 	bl	80041dc <SPI_WaitFlagStateUntilTimeout>
 8004362:	1e03      	subs	r3, r0, #0
 8004364:	d02d      	beq.n	80043c2 <SPI_EndRxTransaction+0xca>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800436a:	2220      	movs	r2, #32
 800436c:	431a      	orrs	r2, r3
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8004372:	2303      	movs	r3, #3
 8004374:	e026      	b.n	80043c4 <SPI_EndRxTransaction+0xcc>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8004376:	68ba      	ldr	r2, [r7, #8]
 8004378:	68f8      	ldr	r0, [r7, #12]
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	9300      	str	r3, [sp, #0]
 800437e:	0013      	movs	r3, r2
 8004380:	2200      	movs	r2, #0
 8004382:	2101      	movs	r1, #1
 8004384:	f7ff ff2a 	bl	80041dc <SPI_WaitFlagStateUntilTimeout>
 8004388:	1e03      	subs	r3, r0, #0
 800438a:	d01a      	beq.n	80043c2 <SPI_EndRxTransaction+0xca>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004390:	2220      	movs	r2, #32
 8004392:	431a      	orrs	r2, r3
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8004398:	2303      	movs	r3, #3
 800439a:	e013      	b.n	80043c4 <SPI_EndRxTransaction+0xcc>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800439c:	68ba      	ldr	r2, [r7, #8]
 800439e:	68f8      	ldr	r0, [r7, #12]
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	9300      	str	r3, [sp, #0]
 80043a4:	0013      	movs	r3, r2
 80043a6:	2200      	movs	r2, #0
 80043a8:	2101      	movs	r1, #1
 80043aa:	f7ff ff17 	bl	80041dc <SPI_WaitFlagStateUntilTimeout>
 80043ae:	1e03      	subs	r3, r0, #0
 80043b0:	d007      	beq.n	80043c2 <SPI_EndRxTransaction+0xca>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80043b6:	2220      	movs	r2, #32
 80043b8:	431a      	orrs	r2, r3
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80043be:	2303      	movs	r3, #3
 80043c0:	e000      	b.n	80043c4 <SPI_EndRxTransaction+0xcc>
    }
  }
  return HAL_OK;
 80043c2:	2300      	movs	r3, #0
}
 80043c4:	0018      	movs	r0, r3
 80043c6:	46bd      	mov	sp, r7
 80043c8:	b004      	add	sp, #16
 80043ca:	bd80      	pop	{r7, pc}

080043cc <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80043cc:	b580      	push	{r7, lr}
 80043ce:	b088      	sub	sp, #32
 80043d0:	af02      	add	r7, sp, #8
 80043d2:	60f8      	str	r0, [r7, #12]
 80043d4:	60b9      	str	r1, [r7, #8]
 80043d6:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80043d8:	4b1d      	ldr	r3, [pc, #116]	; (8004450 <SPI_EndRxTxTransaction+0x84>)
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	491d      	ldr	r1, [pc, #116]	; (8004454 <SPI_EndRxTxTransaction+0x88>)
 80043de:	0018      	movs	r0, r3
 80043e0:	f7fb fea4 	bl	800012c <__udivsi3>
 80043e4:	0003      	movs	r3, r0
 80043e6:	001a      	movs	r2, r3
 80043e8:	0013      	movs	r3, r2
 80043ea:	015b      	lsls	r3, r3, #5
 80043ec:	1a9b      	subs	r3, r3, r2
 80043ee:	009b      	lsls	r3, r3, #2
 80043f0:	189b      	adds	r3, r3, r2
 80043f2:	00db      	lsls	r3, r3, #3
 80043f4:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	685a      	ldr	r2, [r3, #4]
 80043fa:	2382      	movs	r3, #130	; 0x82
 80043fc:	005b      	lsls	r3, r3, #1
 80043fe:	429a      	cmp	r2, r3
 8004400:	d112      	bne.n	8004428 <SPI_EndRxTxTransaction+0x5c>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004402:	68ba      	ldr	r2, [r7, #8]
 8004404:	68f8      	ldr	r0, [r7, #12]
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	9300      	str	r3, [sp, #0]
 800440a:	0013      	movs	r3, r2
 800440c:	2200      	movs	r2, #0
 800440e:	2180      	movs	r1, #128	; 0x80
 8004410:	f7ff fee4 	bl	80041dc <SPI_WaitFlagStateUntilTimeout>
 8004414:	1e03      	subs	r3, r0, #0
 8004416:	d016      	beq.n	8004446 <SPI_EndRxTxTransaction+0x7a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800441c:	2220      	movs	r2, #32
 800441e:	431a      	orrs	r2, r3
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8004424:	2303      	movs	r3, #3
 8004426:	e00f      	b.n	8004448 <SPI_EndRxTxTransaction+0x7c>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8004428:	697b      	ldr	r3, [r7, #20]
 800442a:	2b00      	cmp	r3, #0
 800442c:	d00a      	beq.n	8004444 <SPI_EndRxTxTransaction+0x78>
      {
        break;
      }
      count--;
 800442e:	697b      	ldr	r3, [r7, #20]
 8004430:	3b01      	subs	r3, #1
 8004432:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	689b      	ldr	r3, [r3, #8]
 800443a:	2280      	movs	r2, #128	; 0x80
 800443c:	4013      	ands	r3, r2
 800443e:	2b80      	cmp	r3, #128	; 0x80
 8004440:	d0f2      	beq.n	8004428 <SPI_EndRxTxTransaction+0x5c>
 8004442:	e000      	b.n	8004446 <SPI_EndRxTxTransaction+0x7a>
        break;
 8004444:	46c0      	nop			; (mov r8, r8)
  }

  return HAL_OK;
 8004446:	2300      	movs	r3, #0
}
 8004448:	0018      	movs	r0, r3
 800444a:	46bd      	mov	sp, r7
 800444c:	b006      	add	sp, #24
 800444e:	bd80      	pop	{r7, pc}
 8004450:	20000010 	.word	0x20000010
 8004454:	016e3600 	.word	0x016e3600

08004458 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004458:	b580      	push	{r7, lr}
 800445a:	b082      	sub	sp, #8
 800445c:	af00      	add	r7, sp, #0
 800445e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	2b00      	cmp	r3, #0
 8004464:	d101      	bne.n	800446a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004466:	2301      	movs	r3, #1
 8004468:	e032      	b.n	80044d0 <HAL_TIM_Base_Init+0x78>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_PRESCALER(htim->Init.Prescaler));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	2239      	movs	r2, #57	; 0x39
 800446e:	5c9b      	ldrb	r3, [r3, r2]
 8004470:	b2db      	uxtb	r3, r3
 8004472:	2b00      	cmp	r3, #0
 8004474:	d107      	bne.n	8004486 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	2238      	movs	r2, #56	; 0x38
 800447a:	2100      	movs	r1, #0
 800447c:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	0018      	movs	r0, r3
 8004482:	f7fd faad 	bl	80019e0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	2239      	movs	r2, #57	; 0x39
 800448a:	2102      	movs	r1, #2
 800448c:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	681a      	ldr	r2, [r3, #0]
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	3304      	adds	r3, #4
 8004496:	0019      	movs	r1, r3
 8004498:	0010      	movs	r0, r2
 800449a:	f000 f81d 	bl	80044d8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	223e      	movs	r2, #62	; 0x3e
 80044a2:	2101      	movs	r1, #1
 80044a4:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	223a      	movs	r2, #58	; 0x3a
 80044aa:	2101      	movs	r1, #1
 80044ac:	5499      	strb	r1, [r3, r2]
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	223b      	movs	r2, #59	; 0x3b
 80044b2:	2101      	movs	r1, #1
 80044b4:	5499      	strb	r1, [r3, r2]
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	223c      	movs	r2, #60	; 0x3c
 80044ba:	2101      	movs	r1, #1
 80044bc:	5499      	strb	r1, [r3, r2]
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	223d      	movs	r2, #61	; 0x3d
 80044c2:	2101      	movs	r1, #1
 80044c4:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	2239      	movs	r2, #57	; 0x39
 80044ca:	2101      	movs	r1, #1
 80044cc:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80044ce:	2300      	movs	r3, #0
}
 80044d0:	0018      	movs	r0, r3
 80044d2:	46bd      	mov	sp, r7
 80044d4:	b002      	add	sp, #8
 80044d6:	bd80      	pop	{r7, pc}

080044d8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
static void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80044d8:	b580      	push	{r7, lr}
 80044da:	b084      	sub	sp, #16
 80044dc:	af00      	add	r7, sp, #0
 80044de:	6078      	str	r0, [r7, #4]
 80044e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80044e8:	687a      	ldr	r2, [r7, #4]
 80044ea:	2380      	movs	r3, #128	; 0x80
 80044ec:	05db      	lsls	r3, r3, #23
 80044ee:	429a      	cmp	r2, r3
 80044f0:	d007      	beq.n	8004502 <TIM_Base_SetConfig+0x2a>
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	4a1f      	ldr	r2, [pc, #124]	; (8004574 <TIM_Base_SetConfig+0x9c>)
 80044f6:	4293      	cmp	r3, r2
 80044f8:	d003      	beq.n	8004502 <TIM_Base_SetConfig+0x2a>
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	4a1e      	ldr	r2, [pc, #120]	; (8004578 <TIM_Base_SetConfig+0xa0>)
 80044fe:	4293      	cmp	r3, r2
 8004500:	d108      	bne.n	8004514 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	2270      	movs	r2, #112	; 0x70
 8004506:	4393      	bics	r3, r2
 8004508:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800450a:	683b      	ldr	r3, [r7, #0]
 800450c:	685b      	ldr	r3, [r3, #4]
 800450e:	68fa      	ldr	r2, [r7, #12]
 8004510:	4313      	orrs	r3, r2
 8004512:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004514:	687a      	ldr	r2, [r7, #4]
 8004516:	2380      	movs	r3, #128	; 0x80
 8004518:	05db      	lsls	r3, r3, #23
 800451a:	429a      	cmp	r2, r3
 800451c:	d007      	beq.n	800452e <TIM_Base_SetConfig+0x56>
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	4a14      	ldr	r2, [pc, #80]	; (8004574 <TIM_Base_SetConfig+0x9c>)
 8004522:	4293      	cmp	r3, r2
 8004524:	d003      	beq.n	800452e <TIM_Base_SetConfig+0x56>
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	4a13      	ldr	r2, [pc, #76]	; (8004578 <TIM_Base_SetConfig+0xa0>)
 800452a:	4293      	cmp	r3, r2
 800452c:	d108      	bne.n	8004540 <TIM_Base_SetConfig+0x68>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	4a12      	ldr	r2, [pc, #72]	; (800457c <TIM_Base_SetConfig+0xa4>)
 8004532:	4013      	ands	r3, r2
 8004534:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004536:	683b      	ldr	r3, [r7, #0]
 8004538:	68db      	ldr	r3, [r3, #12]
 800453a:	68fa      	ldr	r2, [r7, #12]
 800453c:	4313      	orrs	r3, r2
 800453e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	2280      	movs	r2, #128	; 0x80
 8004544:	4393      	bics	r3, r2
 8004546:	001a      	movs	r2, r3
 8004548:	683b      	ldr	r3, [r7, #0]
 800454a:	691b      	ldr	r3, [r3, #16]
 800454c:	4313      	orrs	r3, r2
 800454e:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	68fa      	ldr	r2, [r7, #12]
 8004554:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004556:	683b      	ldr	r3, [r7, #0]
 8004558:	689a      	ldr	r2, [r3, #8]
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800455e:	683b      	ldr	r3, [r7, #0]
 8004560:	681a      	ldr	r2, [r3, #0]
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	629a      	str	r2, [r3, #40]	; 0x28

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	2201      	movs	r2, #1
 800456a:	615a      	str	r2, [r3, #20]
}
 800456c:	46c0      	nop			; (mov r8, r8)
 800456e:	46bd      	mov	sp, r7
 8004570:	b004      	add	sp, #16
 8004572:	bd80      	pop	{r7, pc}
 8004574:	40010800 	.word	0x40010800
 8004578:	40011400 	.word	0x40011400
 800457c:	fffffcff 	.word	0xfffffcff

08004580 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004580:	b580      	push	{r7, lr}
 8004582:	b084      	sub	sp, #16
 8004584:	af00      	add	r7, sp, #0
 8004586:	6078      	str	r0, [r7, #4]
 8004588:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	2238      	movs	r2, #56	; 0x38
 800458e:	5c9b      	ldrb	r3, [r3, r2]
 8004590:	2b01      	cmp	r3, #1
 8004592:	d101      	bne.n	8004598 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004594:	2302      	movs	r3, #2
 8004596:	e042      	b.n	800461e <HAL_TIMEx_MasterConfigSynchronization+0x9e>
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	2238      	movs	r2, #56	; 0x38
 800459c:	2101      	movs	r1, #1
 800459e:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	2239      	movs	r2, #57	; 0x39
 80045a4:	2102      	movs	r1, #2
 80045a6:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	685b      	ldr	r3, [r3, #4]
 80045ae:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	689b      	ldr	r3, [r3, #8]
 80045b6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	2270      	movs	r2, #112	; 0x70
 80045bc:	4393      	bics	r3, r2
 80045be:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80045c0:	683b      	ldr	r3, [r7, #0]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	68fa      	ldr	r2, [r7, #12]
 80045c6:	4313      	orrs	r3, r2
 80045c8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	68fa      	ldr	r2, [r7, #12]
 80045d0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	681a      	ldr	r2, [r3, #0]
 80045d6:	2380      	movs	r3, #128	; 0x80
 80045d8:	05db      	lsls	r3, r3, #23
 80045da:	429a      	cmp	r2, r3
 80045dc:	d009      	beq.n	80045f2 <HAL_TIMEx_MasterConfigSynchronization+0x72>
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	4a11      	ldr	r2, [pc, #68]	; (8004628 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 80045e4:	4293      	cmp	r3, r2
 80045e6:	d004      	beq.n	80045f2 <HAL_TIMEx_MasterConfigSynchronization+0x72>
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	4a0f      	ldr	r2, [pc, #60]	; (800462c <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 80045ee:	4293      	cmp	r3, r2
 80045f0:	d10c      	bne.n	800460c <HAL_TIMEx_MasterConfigSynchronization+0x8c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80045f2:	68bb      	ldr	r3, [r7, #8]
 80045f4:	2280      	movs	r2, #128	; 0x80
 80045f6:	4393      	bics	r3, r2
 80045f8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80045fa:	683b      	ldr	r3, [r7, #0]
 80045fc:	685b      	ldr	r3, [r3, #4]
 80045fe:	68ba      	ldr	r2, [r7, #8]
 8004600:	4313      	orrs	r3, r2
 8004602:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	68ba      	ldr	r2, [r7, #8]
 800460a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	2239      	movs	r2, #57	; 0x39
 8004610:	2101      	movs	r1, #1
 8004612:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	2238      	movs	r2, #56	; 0x38
 8004618:	2100      	movs	r1, #0
 800461a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800461c:	2300      	movs	r3, #0
}
 800461e:	0018      	movs	r0, r3
 8004620:	46bd      	mov	sp, r7
 8004622:	b004      	add	sp, #16
 8004624:	bd80      	pop	{r7, pc}
 8004626:	46c0      	nop			; (mov r8, r8)
 8004628:	40010800 	.word	0x40010800
 800462c:	40011400 	.word	0x40011400

08004630 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004630:	b580      	push	{r7, lr}
 8004632:	b082      	sub	sp, #8
 8004634:	af00      	add	r7, sp, #0
 8004636:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	2b00      	cmp	r3, #0
 800463c:	d101      	bne.n	8004642 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800463e:	2301      	movs	r3, #1
 8004640:	e044      	b.n	80046cc <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004646:	2b00      	cmp	r3, #0
 8004648:	d107      	bne.n	800465a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	2278      	movs	r2, #120	; 0x78
 800464e:	2100      	movs	r1, #0
 8004650:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	0018      	movs	r0, r3
 8004656:	f7fd f939 	bl	80018cc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	2224      	movs	r2, #36	; 0x24
 800465e:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	681a      	ldr	r2, [r3, #0]
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	2101      	movs	r1, #1
 800466c:	438a      	bics	r2, r1
 800466e:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	0018      	movs	r0, r3
 8004674:	f000 f8d0 	bl	8004818 <UART_SetConfig>
 8004678:	0003      	movs	r3, r0
 800467a:	2b01      	cmp	r3, #1
 800467c:	d101      	bne.n	8004682 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800467e:	2301      	movs	r3, #1
 8004680:	e024      	b.n	80046cc <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004686:	2b00      	cmp	r3, #0
 8004688:	d003      	beq.n	8004692 <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	0018      	movs	r0, r3
 800468e:	f000 fb47 	bl	8004d20 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	685a      	ldr	r2, [r3, #4]
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	490d      	ldr	r1, [pc, #52]	; (80046d4 <HAL_UART_Init+0xa4>)
 800469e:	400a      	ands	r2, r1
 80046a0:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	689a      	ldr	r2, [r3, #8]
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	212a      	movs	r1, #42	; 0x2a
 80046ae:	438a      	bics	r2, r1
 80046b0:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	681a      	ldr	r2, [r3, #0]
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	2101      	movs	r1, #1
 80046be:	430a      	orrs	r2, r1
 80046c0:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	0018      	movs	r0, r3
 80046c6:	f000 fbdf 	bl	8004e88 <UART_CheckIdleState>
 80046ca:	0003      	movs	r3, r0
}
 80046cc:	0018      	movs	r0, r3
 80046ce:	46bd      	mov	sp, r7
 80046d0:	b002      	add	sp, #8
 80046d2:	bd80      	pop	{r7, pc}
 80046d4:	ffffb7ff 	.word	0xffffb7ff

080046d8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80046d8:	b580      	push	{r7, lr}
 80046da:	b08a      	sub	sp, #40	; 0x28
 80046dc:	af02      	add	r7, sp, #8
 80046de:	60f8      	str	r0, [r7, #12]
 80046e0:	60b9      	str	r1, [r7, #8]
 80046e2:	603b      	str	r3, [r7, #0]
 80046e4:	1dbb      	adds	r3, r7, #6
 80046e6:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80046ec:	2b20      	cmp	r3, #32
 80046ee:	d000      	beq.n	80046f2 <HAL_UART_Transmit+0x1a>
 80046f0:	e08c      	b.n	800480c <HAL_UART_Transmit+0x134>
  {
    if ((pData == NULL) || (Size == 0U))
 80046f2:	68bb      	ldr	r3, [r7, #8]
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	d003      	beq.n	8004700 <HAL_UART_Transmit+0x28>
 80046f8:	1dbb      	adds	r3, r7, #6
 80046fa:	881b      	ldrh	r3, [r3, #0]
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	d101      	bne.n	8004704 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8004700:	2301      	movs	r3, #1
 8004702:	e084      	b.n	800480e <HAL_UART_Transmit+0x136>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	689a      	ldr	r2, [r3, #8]
 8004708:	2380      	movs	r3, #128	; 0x80
 800470a:	015b      	lsls	r3, r3, #5
 800470c:	429a      	cmp	r2, r3
 800470e:	d109      	bne.n	8004724 <HAL_UART_Transmit+0x4c>
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	691b      	ldr	r3, [r3, #16]
 8004714:	2b00      	cmp	r3, #0
 8004716:	d105      	bne.n	8004724 <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8004718:	68bb      	ldr	r3, [r7, #8]
 800471a:	2201      	movs	r2, #1
 800471c:	4013      	ands	r3, r2
 800471e:	d001      	beq.n	8004724 <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 8004720:	2301      	movs	r3, #1
 8004722:	e074      	b.n	800480e <HAL_UART_Transmit+0x136>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	2284      	movs	r2, #132	; 0x84
 8004728:	2100      	movs	r1, #0
 800472a:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	2221      	movs	r2, #33	; 0x21
 8004730:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004732:	f7fd fa73 	bl	8001c1c <HAL_GetTick>
 8004736:	0003      	movs	r3, r0
 8004738:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	1dba      	adds	r2, r7, #6
 800473e:	2150      	movs	r1, #80	; 0x50
 8004740:	8812      	ldrh	r2, [r2, #0]
 8004742:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	1dba      	adds	r2, r7, #6
 8004748:	2152      	movs	r1, #82	; 0x52
 800474a:	8812      	ldrh	r2, [r2, #0]
 800474c:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	689a      	ldr	r2, [r3, #8]
 8004752:	2380      	movs	r3, #128	; 0x80
 8004754:	015b      	lsls	r3, r3, #5
 8004756:	429a      	cmp	r2, r3
 8004758:	d108      	bne.n	800476c <HAL_UART_Transmit+0x94>
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	691b      	ldr	r3, [r3, #16]
 800475e:	2b00      	cmp	r3, #0
 8004760:	d104      	bne.n	800476c <HAL_UART_Transmit+0x94>
    {
      pdata8bits  = NULL;
 8004762:	2300      	movs	r3, #0
 8004764:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004766:	68bb      	ldr	r3, [r7, #8]
 8004768:	61bb      	str	r3, [r7, #24]
 800476a:	e003      	b.n	8004774 <HAL_UART_Transmit+0x9c>
    }
    else
    {
      pdata8bits  = pData;
 800476c:	68bb      	ldr	r3, [r7, #8]
 800476e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004770:	2300      	movs	r3, #0
 8004772:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004774:	e02f      	b.n	80047d6 <HAL_UART_Transmit+0xfe>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004776:	697a      	ldr	r2, [r7, #20]
 8004778:	68f8      	ldr	r0, [r7, #12]
 800477a:	683b      	ldr	r3, [r7, #0]
 800477c:	9300      	str	r3, [sp, #0]
 800477e:	0013      	movs	r3, r2
 8004780:	2200      	movs	r2, #0
 8004782:	2180      	movs	r1, #128	; 0x80
 8004784:	f000 fc28 	bl	8004fd8 <UART_WaitOnFlagUntilTimeout>
 8004788:	1e03      	subs	r3, r0, #0
 800478a:	d004      	beq.n	8004796 <HAL_UART_Transmit+0xbe>
      {

        huart->gState = HAL_UART_STATE_READY;
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	2220      	movs	r2, #32
 8004790:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8004792:	2303      	movs	r3, #3
 8004794:	e03b      	b.n	800480e <HAL_UART_Transmit+0x136>
      }
      if (pdata8bits == NULL)
 8004796:	69fb      	ldr	r3, [r7, #28]
 8004798:	2b00      	cmp	r3, #0
 800479a:	d10b      	bne.n	80047b4 <HAL_UART_Transmit+0xdc>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800479c:	69bb      	ldr	r3, [r7, #24]
 800479e:	881b      	ldrh	r3, [r3, #0]
 80047a0:	001a      	movs	r2, r3
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	05d2      	lsls	r2, r2, #23
 80047a8:	0dd2      	lsrs	r2, r2, #23
 80047aa:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80047ac:	69bb      	ldr	r3, [r7, #24]
 80047ae:	3302      	adds	r3, #2
 80047b0:	61bb      	str	r3, [r7, #24]
 80047b2:	e007      	b.n	80047c4 <HAL_UART_Transmit+0xec>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80047b4:	69fb      	ldr	r3, [r7, #28]
 80047b6:	781a      	ldrb	r2, [r3, #0]
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80047be:	69fb      	ldr	r3, [r7, #28]
 80047c0:	3301      	adds	r3, #1
 80047c2:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	2252      	movs	r2, #82	; 0x52
 80047c8:	5a9b      	ldrh	r3, [r3, r2]
 80047ca:	b29b      	uxth	r3, r3
 80047cc:	3b01      	subs	r3, #1
 80047ce:	b299      	uxth	r1, r3
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	2252      	movs	r2, #82	; 0x52
 80047d4:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	2252      	movs	r2, #82	; 0x52
 80047da:	5a9b      	ldrh	r3, [r3, r2]
 80047dc:	b29b      	uxth	r3, r3
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d1c9      	bne.n	8004776 <HAL_UART_Transmit+0x9e>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80047e2:	697a      	ldr	r2, [r7, #20]
 80047e4:	68f8      	ldr	r0, [r7, #12]
 80047e6:	683b      	ldr	r3, [r7, #0]
 80047e8:	9300      	str	r3, [sp, #0]
 80047ea:	0013      	movs	r3, r2
 80047ec:	2200      	movs	r2, #0
 80047ee:	2140      	movs	r1, #64	; 0x40
 80047f0:	f000 fbf2 	bl	8004fd8 <UART_WaitOnFlagUntilTimeout>
 80047f4:	1e03      	subs	r3, r0, #0
 80047f6:	d004      	beq.n	8004802 <HAL_UART_Transmit+0x12a>
    {
      huart->gState = HAL_UART_STATE_READY;
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	2220      	movs	r2, #32
 80047fc:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 80047fe:	2303      	movs	r3, #3
 8004800:	e005      	b.n	800480e <HAL_UART_Transmit+0x136>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	2220      	movs	r2, #32
 8004806:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8004808:	2300      	movs	r3, #0
 800480a:	e000      	b.n	800480e <HAL_UART_Transmit+0x136>
  }
  else
  {
    return HAL_BUSY;
 800480c:	2302      	movs	r3, #2
  }
}
 800480e:	0018      	movs	r0, r3
 8004810:	46bd      	mov	sp, r7
 8004812:	b008      	add	sp, #32
 8004814:	bd80      	pop	{r7, pc}
	...

08004818 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004818:	b5b0      	push	{r4, r5, r7, lr}
 800481a:	b08e      	sub	sp, #56	; 0x38
 800481c:	af00      	add	r7, sp, #0
 800481e:	61f8      	str	r0, [r7, #28]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004820:	231a      	movs	r3, #26
 8004822:	2218      	movs	r2, #24
 8004824:	189b      	adds	r3, r3, r2
 8004826:	19db      	adds	r3, r3, r7
 8004828:	2200      	movs	r2, #0
 800482a:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800482c:	69fb      	ldr	r3, [r7, #28]
 800482e:	689a      	ldr	r2, [r3, #8]
 8004830:	69fb      	ldr	r3, [r7, #28]
 8004832:	691b      	ldr	r3, [r3, #16]
 8004834:	431a      	orrs	r2, r3
 8004836:	69fb      	ldr	r3, [r7, #28]
 8004838:	695b      	ldr	r3, [r3, #20]
 800483a:	431a      	orrs	r2, r3
 800483c:	69fb      	ldr	r3, [r7, #28]
 800483e:	69db      	ldr	r3, [r3, #28]
 8004840:	4313      	orrs	r3, r2
 8004842:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004844:	69fb      	ldr	r3, [r7, #28]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	4ac6      	ldr	r2, [pc, #792]	; (8004b64 <UART_SetConfig+0x34c>)
 800484c:	4013      	ands	r3, r2
 800484e:	0019      	movs	r1, r3
 8004850:	69fb      	ldr	r3, [r7, #28]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004856:	430a      	orrs	r2, r1
 8004858:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800485a:	69fb      	ldr	r3, [r7, #28]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	685b      	ldr	r3, [r3, #4]
 8004860:	4ac1      	ldr	r2, [pc, #772]	; (8004b68 <UART_SetConfig+0x350>)
 8004862:	4013      	ands	r3, r2
 8004864:	0019      	movs	r1, r3
 8004866:	69fb      	ldr	r3, [r7, #28]
 8004868:	68da      	ldr	r2, [r3, #12]
 800486a:	69fb      	ldr	r3, [r7, #28]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	430a      	orrs	r2, r1
 8004870:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004872:	69fb      	ldr	r3, [r7, #28]
 8004874:	699b      	ldr	r3, [r3, #24]
 8004876:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004878:	69fb      	ldr	r3, [r7, #28]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	4abb      	ldr	r2, [pc, #748]	; (8004b6c <UART_SetConfig+0x354>)
 800487e:	4293      	cmp	r3, r2
 8004880:	d004      	beq.n	800488c <UART_SetConfig+0x74>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004882:	69fb      	ldr	r3, [r7, #28]
 8004884:	6a1b      	ldr	r3, [r3, #32]
 8004886:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004888:	4313      	orrs	r3, r2
 800488a:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800488c:	69fb      	ldr	r3, [r7, #28]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	689b      	ldr	r3, [r3, #8]
 8004892:	4ab7      	ldr	r2, [pc, #732]	; (8004b70 <UART_SetConfig+0x358>)
 8004894:	4013      	ands	r3, r2
 8004896:	0019      	movs	r1, r3
 8004898:	69fb      	ldr	r3, [r7, #28]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800489e:	430a      	orrs	r2, r1
 80048a0:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80048a2:	69fb      	ldr	r3, [r7, #28]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	4ab3      	ldr	r2, [pc, #716]	; (8004b74 <UART_SetConfig+0x35c>)
 80048a8:	4293      	cmp	r3, r2
 80048aa:	d131      	bne.n	8004910 <UART_SetConfig+0xf8>
 80048ac:	4bb2      	ldr	r3, [pc, #712]	; (8004b78 <UART_SetConfig+0x360>)
 80048ae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80048b0:	2203      	movs	r2, #3
 80048b2:	4013      	ands	r3, r2
 80048b4:	2b03      	cmp	r3, #3
 80048b6:	d01d      	beq.n	80048f4 <UART_SetConfig+0xdc>
 80048b8:	d823      	bhi.n	8004902 <UART_SetConfig+0xea>
 80048ba:	2b02      	cmp	r3, #2
 80048bc:	d00c      	beq.n	80048d8 <UART_SetConfig+0xc0>
 80048be:	d820      	bhi.n	8004902 <UART_SetConfig+0xea>
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	d002      	beq.n	80048ca <UART_SetConfig+0xb2>
 80048c4:	2b01      	cmp	r3, #1
 80048c6:	d00e      	beq.n	80048e6 <UART_SetConfig+0xce>
 80048c8:	e01b      	b.n	8004902 <UART_SetConfig+0xea>
 80048ca:	231b      	movs	r3, #27
 80048cc:	2218      	movs	r2, #24
 80048ce:	189b      	adds	r3, r3, r2
 80048d0:	19db      	adds	r3, r3, r7
 80048d2:	2201      	movs	r2, #1
 80048d4:	701a      	strb	r2, [r3, #0]
 80048d6:	e09c      	b.n	8004a12 <UART_SetConfig+0x1fa>
 80048d8:	231b      	movs	r3, #27
 80048da:	2218      	movs	r2, #24
 80048dc:	189b      	adds	r3, r3, r2
 80048de:	19db      	adds	r3, r3, r7
 80048e0:	2202      	movs	r2, #2
 80048e2:	701a      	strb	r2, [r3, #0]
 80048e4:	e095      	b.n	8004a12 <UART_SetConfig+0x1fa>
 80048e6:	231b      	movs	r3, #27
 80048e8:	2218      	movs	r2, #24
 80048ea:	189b      	adds	r3, r3, r2
 80048ec:	19db      	adds	r3, r3, r7
 80048ee:	2204      	movs	r2, #4
 80048f0:	701a      	strb	r2, [r3, #0]
 80048f2:	e08e      	b.n	8004a12 <UART_SetConfig+0x1fa>
 80048f4:	231b      	movs	r3, #27
 80048f6:	2218      	movs	r2, #24
 80048f8:	189b      	adds	r3, r3, r2
 80048fa:	19db      	adds	r3, r3, r7
 80048fc:	2208      	movs	r2, #8
 80048fe:	701a      	strb	r2, [r3, #0]
 8004900:	e087      	b.n	8004a12 <UART_SetConfig+0x1fa>
 8004902:	231b      	movs	r3, #27
 8004904:	2218      	movs	r2, #24
 8004906:	189b      	adds	r3, r3, r2
 8004908:	19db      	adds	r3, r3, r7
 800490a:	2210      	movs	r2, #16
 800490c:	701a      	strb	r2, [r3, #0]
 800490e:	e080      	b.n	8004a12 <UART_SetConfig+0x1fa>
 8004910:	69fb      	ldr	r3, [r7, #28]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	4a99      	ldr	r2, [pc, #612]	; (8004b7c <UART_SetConfig+0x364>)
 8004916:	4293      	cmp	r3, r2
 8004918:	d131      	bne.n	800497e <UART_SetConfig+0x166>
 800491a:	4b97      	ldr	r3, [pc, #604]	; (8004b78 <UART_SetConfig+0x360>)
 800491c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800491e:	220c      	movs	r2, #12
 8004920:	4013      	ands	r3, r2
 8004922:	2b0c      	cmp	r3, #12
 8004924:	d01d      	beq.n	8004962 <UART_SetConfig+0x14a>
 8004926:	d823      	bhi.n	8004970 <UART_SetConfig+0x158>
 8004928:	2b08      	cmp	r3, #8
 800492a:	d00c      	beq.n	8004946 <UART_SetConfig+0x12e>
 800492c:	d820      	bhi.n	8004970 <UART_SetConfig+0x158>
 800492e:	2b00      	cmp	r3, #0
 8004930:	d002      	beq.n	8004938 <UART_SetConfig+0x120>
 8004932:	2b04      	cmp	r3, #4
 8004934:	d00e      	beq.n	8004954 <UART_SetConfig+0x13c>
 8004936:	e01b      	b.n	8004970 <UART_SetConfig+0x158>
 8004938:	231b      	movs	r3, #27
 800493a:	2218      	movs	r2, #24
 800493c:	189b      	adds	r3, r3, r2
 800493e:	19db      	adds	r3, r3, r7
 8004940:	2200      	movs	r2, #0
 8004942:	701a      	strb	r2, [r3, #0]
 8004944:	e065      	b.n	8004a12 <UART_SetConfig+0x1fa>
 8004946:	231b      	movs	r3, #27
 8004948:	2218      	movs	r2, #24
 800494a:	189b      	adds	r3, r3, r2
 800494c:	19db      	adds	r3, r3, r7
 800494e:	2202      	movs	r2, #2
 8004950:	701a      	strb	r2, [r3, #0]
 8004952:	e05e      	b.n	8004a12 <UART_SetConfig+0x1fa>
 8004954:	231b      	movs	r3, #27
 8004956:	2218      	movs	r2, #24
 8004958:	189b      	adds	r3, r3, r2
 800495a:	19db      	adds	r3, r3, r7
 800495c:	2204      	movs	r2, #4
 800495e:	701a      	strb	r2, [r3, #0]
 8004960:	e057      	b.n	8004a12 <UART_SetConfig+0x1fa>
 8004962:	231b      	movs	r3, #27
 8004964:	2218      	movs	r2, #24
 8004966:	189b      	adds	r3, r3, r2
 8004968:	19db      	adds	r3, r3, r7
 800496a:	2208      	movs	r2, #8
 800496c:	701a      	strb	r2, [r3, #0]
 800496e:	e050      	b.n	8004a12 <UART_SetConfig+0x1fa>
 8004970:	231b      	movs	r3, #27
 8004972:	2218      	movs	r2, #24
 8004974:	189b      	adds	r3, r3, r2
 8004976:	19db      	adds	r3, r3, r7
 8004978:	2210      	movs	r2, #16
 800497a:	701a      	strb	r2, [r3, #0]
 800497c:	e049      	b.n	8004a12 <UART_SetConfig+0x1fa>
 800497e:	69fb      	ldr	r3, [r7, #28]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	4a7a      	ldr	r2, [pc, #488]	; (8004b6c <UART_SetConfig+0x354>)
 8004984:	4293      	cmp	r3, r2
 8004986:	d13e      	bne.n	8004a06 <UART_SetConfig+0x1ee>
 8004988:	4b7b      	ldr	r3, [pc, #492]	; (8004b78 <UART_SetConfig+0x360>)
 800498a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800498c:	23c0      	movs	r3, #192	; 0xc0
 800498e:	011b      	lsls	r3, r3, #4
 8004990:	4013      	ands	r3, r2
 8004992:	22c0      	movs	r2, #192	; 0xc0
 8004994:	0112      	lsls	r2, r2, #4
 8004996:	4293      	cmp	r3, r2
 8004998:	d027      	beq.n	80049ea <UART_SetConfig+0x1d2>
 800499a:	22c0      	movs	r2, #192	; 0xc0
 800499c:	0112      	lsls	r2, r2, #4
 800499e:	4293      	cmp	r3, r2
 80049a0:	d82a      	bhi.n	80049f8 <UART_SetConfig+0x1e0>
 80049a2:	2280      	movs	r2, #128	; 0x80
 80049a4:	0112      	lsls	r2, r2, #4
 80049a6:	4293      	cmp	r3, r2
 80049a8:	d011      	beq.n	80049ce <UART_SetConfig+0x1b6>
 80049aa:	2280      	movs	r2, #128	; 0x80
 80049ac:	0112      	lsls	r2, r2, #4
 80049ae:	4293      	cmp	r3, r2
 80049b0:	d822      	bhi.n	80049f8 <UART_SetConfig+0x1e0>
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d004      	beq.n	80049c0 <UART_SetConfig+0x1a8>
 80049b6:	2280      	movs	r2, #128	; 0x80
 80049b8:	00d2      	lsls	r2, r2, #3
 80049ba:	4293      	cmp	r3, r2
 80049bc:	d00e      	beq.n	80049dc <UART_SetConfig+0x1c4>
 80049be:	e01b      	b.n	80049f8 <UART_SetConfig+0x1e0>
 80049c0:	231b      	movs	r3, #27
 80049c2:	2218      	movs	r2, #24
 80049c4:	189b      	adds	r3, r3, r2
 80049c6:	19db      	adds	r3, r3, r7
 80049c8:	2200      	movs	r2, #0
 80049ca:	701a      	strb	r2, [r3, #0]
 80049cc:	e021      	b.n	8004a12 <UART_SetConfig+0x1fa>
 80049ce:	231b      	movs	r3, #27
 80049d0:	2218      	movs	r2, #24
 80049d2:	189b      	adds	r3, r3, r2
 80049d4:	19db      	adds	r3, r3, r7
 80049d6:	2202      	movs	r2, #2
 80049d8:	701a      	strb	r2, [r3, #0]
 80049da:	e01a      	b.n	8004a12 <UART_SetConfig+0x1fa>
 80049dc:	231b      	movs	r3, #27
 80049de:	2218      	movs	r2, #24
 80049e0:	189b      	adds	r3, r3, r2
 80049e2:	19db      	adds	r3, r3, r7
 80049e4:	2204      	movs	r2, #4
 80049e6:	701a      	strb	r2, [r3, #0]
 80049e8:	e013      	b.n	8004a12 <UART_SetConfig+0x1fa>
 80049ea:	231b      	movs	r3, #27
 80049ec:	2218      	movs	r2, #24
 80049ee:	189b      	adds	r3, r3, r2
 80049f0:	19db      	adds	r3, r3, r7
 80049f2:	2208      	movs	r2, #8
 80049f4:	701a      	strb	r2, [r3, #0]
 80049f6:	e00c      	b.n	8004a12 <UART_SetConfig+0x1fa>
 80049f8:	231b      	movs	r3, #27
 80049fa:	2218      	movs	r2, #24
 80049fc:	189b      	adds	r3, r3, r2
 80049fe:	19db      	adds	r3, r3, r7
 8004a00:	2210      	movs	r2, #16
 8004a02:	701a      	strb	r2, [r3, #0]
 8004a04:	e005      	b.n	8004a12 <UART_SetConfig+0x1fa>
 8004a06:	231b      	movs	r3, #27
 8004a08:	2218      	movs	r2, #24
 8004a0a:	189b      	adds	r3, r3, r2
 8004a0c:	19db      	adds	r3, r3, r7
 8004a0e:	2210      	movs	r2, #16
 8004a10:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004a12:	69fb      	ldr	r3, [r7, #28]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	4a55      	ldr	r2, [pc, #340]	; (8004b6c <UART_SetConfig+0x354>)
 8004a18:	4293      	cmp	r3, r2
 8004a1a:	d000      	beq.n	8004a1e <UART_SetConfig+0x206>
 8004a1c:	e084      	b.n	8004b28 <UART_SetConfig+0x310>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004a1e:	231b      	movs	r3, #27
 8004a20:	2218      	movs	r2, #24
 8004a22:	189b      	adds	r3, r3, r2
 8004a24:	19db      	adds	r3, r3, r7
 8004a26:	781b      	ldrb	r3, [r3, #0]
 8004a28:	2b08      	cmp	r3, #8
 8004a2a:	d01d      	beq.n	8004a68 <UART_SetConfig+0x250>
 8004a2c:	dc20      	bgt.n	8004a70 <UART_SetConfig+0x258>
 8004a2e:	2b04      	cmp	r3, #4
 8004a30:	d015      	beq.n	8004a5e <UART_SetConfig+0x246>
 8004a32:	dc1d      	bgt.n	8004a70 <UART_SetConfig+0x258>
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	d002      	beq.n	8004a3e <UART_SetConfig+0x226>
 8004a38:	2b02      	cmp	r3, #2
 8004a3a:	d005      	beq.n	8004a48 <UART_SetConfig+0x230>
 8004a3c:	e018      	b.n	8004a70 <UART_SetConfig+0x258>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004a3e:	f7fe fd7b 	bl	8003538 <HAL_RCC_GetPCLK1Freq>
 8004a42:	0003      	movs	r3, r0
 8004a44:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004a46:	e01c      	b.n	8004a82 <UART_SetConfig+0x26a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004a48:	4b4b      	ldr	r3, [pc, #300]	; (8004b78 <UART_SetConfig+0x360>)
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	2210      	movs	r2, #16
 8004a4e:	4013      	ands	r3, r2
 8004a50:	d002      	beq.n	8004a58 <UART_SetConfig+0x240>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8004a52:	4b4b      	ldr	r3, [pc, #300]	; (8004b80 <UART_SetConfig+0x368>)
 8004a54:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8004a56:	e014      	b.n	8004a82 <UART_SetConfig+0x26a>
          pclk = (uint32_t) HSI_VALUE;
 8004a58:	4b4a      	ldr	r3, [pc, #296]	; (8004b84 <UART_SetConfig+0x36c>)
 8004a5a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004a5c:	e011      	b.n	8004a82 <UART_SetConfig+0x26a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004a5e:	f7fe fcbb 	bl	80033d8 <HAL_RCC_GetSysClockFreq>
 8004a62:	0003      	movs	r3, r0
 8004a64:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004a66:	e00c      	b.n	8004a82 <UART_SetConfig+0x26a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004a68:	2380      	movs	r3, #128	; 0x80
 8004a6a:	021b      	lsls	r3, r3, #8
 8004a6c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004a6e:	e008      	b.n	8004a82 <UART_SetConfig+0x26a>
      default:
        pclk = 0U;
 8004a70:	2300      	movs	r3, #0
 8004a72:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8004a74:	231a      	movs	r3, #26
 8004a76:	2218      	movs	r2, #24
 8004a78:	189b      	adds	r3, r3, r2
 8004a7a:	19db      	adds	r3, r3, r7
 8004a7c:	2201      	movs	r2, #1
 8004a7e:	701a      	strb	r2, [r3, #0]
        break;
 8004a80:	46c0      	nop			; (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004a82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	d100      	bne.n	8004a8a <UART_SetConfig+0x272>
 8004a88:	e132      	b.n	8004cf0 <UART_SetConfig+0x4d8>
    {
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004a8a:	69fb      	ldr	r3, [r7, #28]
 8004a8c:	685a      	ldr	r2, [r3, #4]
 8004a8e:	0013      	movs	r3, r2
 8004a90:	005b      	lsls	r3, r3, #1
 8004a92:	189b      	adds	r3, r3, r2
 8004a94:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004a96:	429a      	cmp	r2, r3
 8004a98:	d305      	bcc.n	8004aa6 <UART_SetConfig+0x28e>
          (pclk > (4096U * huart->Init.BaudRate)))
 8004a9a:	69fb      	ldr	r3, [r7, #28]
 8004a9c:	685b      	ldr	r3, [r3, #4]
 8004a9e:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004aa0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004aa2:	429a      	cmp	r2, r3
 8004aa4:	d906      	bls.n	8004ab4 <UART_SetConfig+0x29c>
      {
        ret = HAL_ERROR;
 8004aa6:	231a      	movs	r3, #26
 8004aa8:	2218      	movs	r2, #24
 8004aaa:	189b      	adds	r3, r3, r2
 8004aac:	19db      	adds	r3, r3, r7
 8004aae:	2201      	movs	r2, #1
 8004ab0:	701a      	strb	r2, [r3, #0]
 8004ab2:	e11d      	b.n	8004cf0 <UART_SetConfig+0x4d8>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8004ab4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ab6:	613b      	str	r3, [r7, #16]
 8004ab8:	2300      	movs	r3, #0
 8004aba:	617b      	str	r3, [r7, #20]
 8004abc:	6939      	ldr	r1, [r7, #16]
 8004abe:	697a      	ldr	r2, [r7, #20]
 8004ac0:	000b      	movs	r3, r1
 8004ac2:	0e1b      	lsrs	r3, r3, #24
 8004ac4:	0010      	movs	r0, r2
 8004ac6:	0205      	lsls	r5, r0, #8
 8004ac8:	431d      	orrs	r5, r3
 8004aca:	000b      	movs	r3, r1
 8004acc:	021c      	lsls	r4, r3, #8
 8004ace:	69fb      	ldr	r3, [r7, #28]
 8004ad0:	685b      	ldr	r3, [r3, #4]
 8004ad2:	085b      	lsrs	r3, r3, #1
 8004ad4:	60bb      	str	r3, [r7, #8]
 8004ad6:	2300      	movs	r3, #0
 8004ad8:	60fb      	str	r3, [r7, #12]
 8004ada:	68b8      	ldr	r0, [r7, #8]
 8004adc:	68f9      	ldr	r1, [r7, #12]
 8004ade:	1900      	adds	r0, r0, r4
 8004ae0:	4169      	adcs	r1, r5
 8004ae2:	69fb      	ldr	r3, [r7, #28]
 8004ae4:	685b      	ldr	r3, [r3, #4]
 8004ae6:	603b      	str	r3, [r7, #0]
 8004ae8:	2300      	movs	r3, #0
 8004aea:	607b      	str	r3, [r7, #4]
 8004aec:	683a      	ldr	r2, [r7, #0]
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	f7fb fccc 	bl	800048c <__aeabi_uldivmod>
 8004af4:	0002      	movs	r2, r0
 8004af6:	000b      	movs	r3, r1
 8004af8:	0013      	movs	r3, r2
 8004afa:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004afc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004afe:	23c0      	movs	r3, #192	; 0xc0
 8004b00:	009b      	lsls	r3, r3, #2
 8004b02:	429a      	cmp	r2, r3
 8004b04:	d309      	bcc.n	8004b1a <UART_SetConfig+0x302>
 8004b06:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004b08:	2380      	movs	r3, #128	; 0x80
 8004b0a:	035b      	lsls	r3, r3, #13
 8004b0c:	429a      	cmp	r2, r3
 8004b0e:	d204      	bcs.n	8004b1a <UART_SetConfig+0x302>
        {
          huart->Instance->BRR = usartdiv;
 8004b10:	69fb      	ldr	r3, [r7, #28]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004b16:	60da      	str	r2, [r3, #12]
 8004b18:	e0ea      	b.n	8004cf0 <UART_SetConfig+0x4d8>
        }
        else
        {
          ret = HAL_ERROR;
 8004b1a:	231a      	movs	r3, #26
 8004b1c:	2218      	movs	r2, #24
 8004b1e:	189b      	adds	r3, r3, r2
 8004b20:	19db      	adds	r3, r3, r7
 8004b22:	2201      	movs	r2, #1
 8004b24:	701a      	strb	r2, [r3, #0]
 8004b26:	e0e3      	b.n	8004cf0 <UART_SetConfig+0x4d8>
        }
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004b28:	69fb      	ldr	r3, [r7, #28]
 8004b2a:	69da      	ldr	r2, [r3, #28]
 8004b2c:	2380      	movs	r3, #128	; 0x80
 8004b2e:	021b      	lsls	r3, r3, #8
 8004b30:	429a      	cmp	r2, r3
 8004b32:	d000      	beq.n	8004b36 <UART_SetConfig+0x31e>
 8004b34:	e085      	b.n	8004c42 <UART_SetConfig+0x42a>
  {
    switch (clocksource)
 8004b36:	231b      	movs	r3, #27
 8004b38:	2218      	movs	r2, #24
 8004b3a:	189b      	adds	r3, r3, r2
 8004b3c:	19db      	adds	r3, r3, r7
 8004b3e:	781b      	ldrb	r3, [r3, #0]
 8004b40:	2b08      	cmp	r3, #8
 8004b42:	d837      	bhi.n	8004bb4 <UART_SetConfig+0x39c>
 8004b44:	009a      	lsls	r2, r3, #2
 8004b46:	4b10      	ldr	r3, [pc, #64]	; (8004b88 <UART_SetConfig+0x370>)
 8004b48:	18d3      	adds	r3, r2, r3
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004b4e:	f7fe fcf3 	bl	8003538 <HAL_RCC_GetPCLK1Freq>
 8004b52:	0003      	movs	r3, r0
 8004b54:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004b56:	e036      	b.n	8004bc6 <UART_SetConfig+0x3ae>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004b58:	f7fe fd04 	bl	8003564 <HAL_RCC_GetPCLK2Freq>
 8004b5c:	0003      	movs	r3, r0
 8004b5e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004b60:	e031      	b.n	8004bc6 <UART_SetConfig+0x3ae>
 8004b62:	46c0      	nop			; (mov r8, r8)
 8004b64:	efff69f3 	.word	0xefff69f3
 8004b68:	ffffcfff 	.word	0xffffcfff
 8004b6c:	40004800 	.word	0x40004800
 8004b70:	fffff4ff 	.word	0xfffff4ff
 8004b74:	40013800 	.word	0x40013800
 8004b78:	40021000 	.word	0x40021000
 8004b7c:	40004400 	.word	0x40004400
 8004b80:	003d0900 	.word	0x003d0900
 8004b84:	00f42400 	.word	0x00f42400
 8004b88:	08006acc 	.word	0x08006acc
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004b8c:	4b60      	ldr	r3, [pc, #384]	; (8004d10 <UART_SetConfig+0x4f8>)
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	2210      	movs	r2, #16
 8004b92:	4013      	ands	r3, r2
 8004b94:	d002      	beq.n	8004b9c <UART_SetConfig+0x384>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8004b96:	4b5f      	ldr	r3, [pc, #380]	; (8004d14 <UART_SetConfig+0x4fc>)
 8004b98:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8004b9a:	e014      	b.n	8004bc6 <UART_SetConfig+0x3ae>
          pclk = (uint32_t) HSI_VALUE;
 8004b9c:	4b5e      	ldr	r3, [pc, #376]	; (8004d18 <UART_SetConfig+0x500>)
 8004b9e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004ba0:	e011      	b.n	8004bc6 <UART_SetConfig+0x3ae>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004ba2:	f7fe fc19 	bl	80033d8 <HAL_RCC_GetSysClockFreq>
 8004ba6:	0003      	movs	r3, r0
 8004ba8:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004baa:	e00c      	b.n	8004bc6 <UART_SetConfig+0x3ae>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004bac:	2380      	movs	r3, #128	; 0x80
 8004bae:	021b      	lsls	r3, r3, #8
 8004bb0:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004bb2:	e008      	b.n	8004bc6 <UART_SetConfig+0x3ae>
      default:
        pclk = 0U;
 8004bb4:	2300      	movs	r3, #0
 8004bb6:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8004bb8:	231a      	movs	r3, #26
 8004bba:	2218      	movs	r2, #24
 8004bbc:	189b      	adds	r3, r3, r2
 8004bbe:	19db      	adds	r3, r3, r7
 8004bc0:	2201      	movs	r2, #1
 8004bc2:	701a      	strb	r2, [r3, #0]
        break;
 8004bc4:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004bc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004bc8:	2b00      	cmp	r3, #0
 8004bca:	d100      	bne.n	8004bce <UART_SetConfig+0x3b6>
 8004bcc:	e090      	b.n	8004cf0 <UART_SetConfig+0x4d8>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004bce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004bd0:	005a      	lsls	r2, r3, #1
 8004bd2:	69fb      	ldr	r3, [r7, #28]
 8004bd4:	685b      	ldr	r3, [r3, #4]
 8004bd6:	085b      	lsrs	r3, r3, #1
 8004bd8:	18d2      	adds	r2, r2, r3
 8004bda:	69fb      	ldr	r3, [r7, #28]
 8004bdc:	685b      	ldr	r3, [r3, #4]
 8004bde:	0019      	movs	r1, r3
 8004be0:	0010      	movs	r0, r2
 8004be2:	f7fb faa3 	bl	800012c <__udivsi3>
 8004be6:	0003      	movs	r3, r0
 8004be8:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004bea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004bec:	2b0f      	cmp	r3, #15
 8004bee:	d921      	bls.n	8004c34 <UART_SetConfig+0x41c>
 8004bf0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004bf2:	2380      	movs	r3, #128	; 0x80
 8004bf4:	025b      	lsls	r3, r3, #9
 8004bf6:	429a      	cmp	r2, r3
 8004bf8:	d21c      	bcs.n	8004c34 <UART_SetConfig+0x41c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004bfa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004bfc:	b29a      	uxth	r2, r3
 8004bfe:	200e      	movs	r0, #14
 8004c00:	2418      	movs	r4, #24
 8004c02:	1903      	adds	r3, r0, r4
 8004c04:	19db      	adds	r3, r3, r7
 8004c06:	210f      	movs	r1, #15
 8004c08:	438a      	bics	r2, r1
 8004c0a:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004c0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c0e:	085b      	lsrs	r3, r3, #1
 8004c10:	b29b      	uxth	r3, r3
 8004c12:	2207      	movs	r2, #7
 8004c14:	4013      	ands	r3, r2
 8004c16:	b299      	uxth	r1, r3
 8004c18:	1903      	adds	r3, r0, r4
 8004c1a:	19db      	adds	r3, r3, r7
 8004c1c:	1902      	adds	r2, r0, r4
 8004c1e:	19d2      	adds	r2, r2, r7
 8004c20:	8812      	ldrh	r2, [r2, #0]
 8004c22:	430a      	orrs	r2, r1
 8004c24:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8004c26:	69fb      	ldr	r3, [r7, #28]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	1902      	adds	r2, r0, r4
 8004c2c:	19d2      	adds	r2, r2, r7
 8004c2e:	8812      	ldrh	r2, [r2, #0]
 8004c30:	60da      	str	r2, [r3, #12]
 8004c32:	e05d      	b.n	8004cf0 <UART_SetConfig+0x4d8>
      }
      else
      {
        ret = HAL_ERROR;
 8004c34:	231a      	movs	r3, #26
 8004c36:	2218      	movs	r2, #24
 8004c38:	189b      	adds	r3, r3, r2
 8004c3a:	19db      	adds	r3, r3, r7
 8004c3c:	2201      	movs	r2, #1
 8004c3e:	701a      	strb	r2, [r3, #0]
 8004c40:	e056      	b.n	8004cf0 <UART_SetConfig+0x4d8>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004c42:	231b      	movs	r3, #27
 8004c44:	2218      	movs	r2, #24
 8004c46:	189b      	adds	r3, r3, r2
 8004c48:	19db      	adds	r3, r3, r7
 8004c4a:	781b      	ldrb	r3, [r3, #0]
 8004c4c:	2b08      	cmp	r3, #8
 8004c4e:	d822      	bhi.n	8004c96 <UART_SetConfig+0x47e>
 8004c50:	009a      	lsls	r2, r3, #2
 8004c52:	4b32      	ldr	r3, [pc, #200]	; (8004d1c <UART_SetConfig+0x504>)
 8004c54:	18d3      	adds	r3, r2, r3
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004c5a:	f7fe fc6d 	bl	8003538 <HAL_RCC_GetPCLK1Freq>
 8004c5e:	0003      	movs	r3, r0
 8004c60:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004c62:	e021      	b.n	8004ca8 <UART_SetConfig+0x490>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004c64:	f7fe fc7e 	bl	8003564 <HAL_RCC_GetPCLK2Freq>
 8004c68:	0003      	movs	r3, r0
 8004c6a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004c6c:	e01c      	b.n	8004ca8 <UART_SetConfig+0x490>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004c6e:	4b28      	ldr	r3, [pc, #160]	; (8004d10 <UART_SetConfig+0x4f8>)
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	2210      	movs	r2, #16
 8004c74:	4013      	ands	r3, r2
 8004c76:	d002      	beq.n	8004c7e <UART_SetConfig+0x466>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8004c78:	4b26      	ldr	r3, [pc, #152]	; (8004d14 <UART_SetConfig+0x4fc>)
 8004c7a:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8004c7c:	e014      	b.n	8004ca8 <UART_SetConfig+0x490>
          pclk = (uint32_t) HSI_VALUE;
 8004c7e:	4b26      	ldr	r3, [pc, #152]	; (8004d18 <UART_SetConfig+0x500>)
 8004c80:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004c82:	e011      	b.n	8004ca8 <UART_SetConfig+0x490>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004c84:	f7fe fba8 	bl	80033d8 <HAL_RCC_GetSysClockFreq>
 8004c88:	0003      	movs	r3, r0
 8004c8a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004c8c:	e00c      	b.n	8004ca8 <UART_SetConfig+0x490>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004c8e:	2380      	movs	r3, #128	; 0x80
 8004c90:	021b      	lsls	r3, r3, #8
 8004c92:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004c94:	e008      	b.n	8004ca8 <UART_SetConfig+0x490>
      default:
        pclk = 0U;
 8004c96:	2300      	movs	r3, #0
 8004c98:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8004c9a:	231a      	movs	r3, #26
 8004c9c:	2218      	movs	r2, #24
 8004c9e:	189b      	adds	r3, r3, r2
 8004ca0:	19db      	adds	r3, r3, r7
 8004ca2:	2201      	movs	r2, #1
 8004ca4:	701a      	strb	r2, [r3, #0]
        break;
 8004ca6:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8004ca8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	d020      	beq.n	8004cf0 <UART_SetConfig+0x4d8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004cae:	69fb      	ldr	r3, [r7, #28]
 8004cb0:	685b      	ldr	r3, [r3, #4]
 8004cb2:	085a      	lsrs	r2, r3, #1
 8004cb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004cb6:	18d2      	adds	r2, r2, r3
 8004cb8:	69fb      	ldr	r3, [r7, #28]
 8004cba:	685b      	ldr	r3, [r3, #4]
 8004cbc:	0019      	movs	r1, r3
 8004cbe:	0010      	movs	r0, r2
 8004cc0:	f7fb fa34 	bl	800012c <__udivsi3>
 8004cc4:	0003      	movs	r3, r0
 8004cc6:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004cc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004cca:	2b0f      	cmp	r3, #15
 8004ccc:	d90a      	bls.n	8004ce4 <UART_SetConfig+0x4cc>
 8004cce:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004cd0:	2380      	movs	r3, #128	; 0x80
 8004cd2:	025b      	lsls	r3, r3, #9
 8004cd4:	429a      	cmp	r2, r3
 8004cd6:	d205      	bcs.n	8004ce4 <UART_SetConfig+0x4cc>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004cd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004cda:	b29a      	uxth	r2, r3
 8004cdc:	69fb      	ldr	r3, [r7, #28]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	60da      	str	r2, [r3, #12]
 8004ce2:	e005      	b.n	8004cf0 <UART_SetConfig+0x4d8>
      }
      else
      {
        ret = HAL_ERROR;
 8004ce4:	231a      	movs	r3, #26
 8004ce6:	2218      	movs	r2, #24
 8004ce8:	189b      	adds	r3, r3, r2
 8004cea:	19db      	adds	r3, r3, r7
 8004cec:	2201      	movs	r2, #1
 8004cee:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004cf0:	69fb      	ldr	r3, [r7, #28]
 8004cf2:	2200      	movs	r2, #0
 8004cf4:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8004cf6:	69fb      	ldr	r3, [r7, #28]
 8004cf8:	2200      	movs	r2, #0
 8004cfa:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8004cfc:	231a      	movs	r3, #26
 8004cfe:	2218      	movs	r2, #24
 8004d00:	189b      	adds	r3, r3, r2
 8004d02:	19db      	adds	r3, r3, r7
 8004d04:	781b      	ldrb	r3, [r3, #0]
}
 8004d06:	0018      	movs	r0, r3
 8004d08:	46bd      	mov	sp, r7
 8004d0a:	b00e      	add	sp, #56	; 0x38
 8004d0c:	bdb0      	pop	{r4, r5, r7, pc}
 8004d0e:	46c0      	nop			; (mov r8, r8)
 8004d10:	40021000 	.word	0x40021000
 8004d14:	003d0900 	.word	0x003d0900
 8004d18:	00f42400 	.word	0x00f42400
 8004d1c:	08006af0 	.word	0x08006af0

08004d20 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004d20:	b580      	push	{r7, lr}
 8004d22:	b082      	sub	sp, #8
 8004d24:	af00      	add	r7, sp, #0
 8004d26:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d2c:	2201      	movs	r2, #1
 8004d2e:	4013      	ands	r3, r2
 8004d30:	d00b      	beq.n	8004d4a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	685b      	ldr	r3, [r3, #4]
 8004d38:	4a4a      	ldr	r2, [pc, #296]	; (8004e64 <UART_AdvFeatureConfig+0x144>)
 8004d3a:	4013      	ands	r3, r2
 8004d3c:	0019      	movs	r1, r3
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	430a      	orrs	r2, r1
 8004d48:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d4e:	2202      	movs	r2, #2
 8004d50:	4013      	ands	r3, r2
 8004d52:	d00b      	beq.n	8004d6c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	685b      	ldr	r3, [r3, #4]
 8004d5a:	4a43      	ldr	r2, [pc, #268]	; (8004e68 <UART_AdvFeatureConfig+0x148>)
 8004d5c:	4013      	ands	r3, r2
 8004d5e:	0019      	movs	r1, r3
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	430a      	orrs	r2, r1
 8004d6a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d70:	2204      	movs	r2, #4
 8004d72:	4013      	ands	r3, r2
 8004d74:	d00b      	beq.n	8004d8e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	685b      	ldr	r3, [r3, #4]
 8004d7c:	4a3b      	ldr	r2, [pc, #236]	; (8004e6c <UART_AdvFeatureConfig+0x14c>)
 8004d7e:	4013      	ands	r3, r2
 8004d80:	0019      	movs	r1, r3
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	430a      	orrs	r2, r1
 8004d8c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d92:	2208      	movs	r2, #8
 8004d94:	4013      	ands	r3, r2
 8004d96:	d00b      	beq.n	8004db0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	685b      	ldr	r3, [r3, #4]
 8004d9e:	4a34      	ldr	r2, [pc, #208]	; (8004e70 <UART_AdvFeatureConfig+0x150>)
 8004da0:	4013      	ands	r3, r2
 8004da2:	0019      	movs	r1, r3
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	430a      	orrs	r2, r1
 8004dae:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004db4:	2210      	movs	r2, #16
 8004db6:	4013      	ands	r3, r2
 8004db8:	d00b      	beq.n	8004dd2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	689b      	ldr	r3, [r3, #8]
 8004dc0:	4a2c      	ldr	r2, [pc, #176]	; (8004e74 <UART_AdvFeatureConfig+0x154>)
 8004dc2:	4013      	ands	r3, r2
 8004dc4:	0019      	movs	r1, r3
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	430a      	orrs	r2, r1
 8004dd0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dd6:	2220      	movs	r2, #32
 8004dd8:	4013      	ands	r3, r2
 8004dda:	d00b      	beq.n	8004df4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	689b      	ldr	r3, [r3, #8]
 8004de2:	4a25      	ldr	r2, [pc, #148]	; (8004e78 <UART_AdvFeatureConfig+0x158>)
 8004de4:	4013      	ands	r3, r2
 8004de6:	0019      	movs	r1, r3
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	430a      	orrs	r2, r1
 8004df2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004df8:	2240      	movs	r2, #64	; 0x40
 8004dfa:	4013      	ands	r3, r2
 8004dfc:	d01d      	beq.n	8004e3a <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	685b      	ldr	r3, [r3, #4]
 8004e04:	4a1d      	ldr	r2, [pc, #116]	; (8004e7c <UART_AdvFeatureConfig+0x15c>)
 8004e06:	4013      	ands	r3, r2
 8004e08:	0019      	movs	r1, r3
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	430a      	orrs	r2, r1
 8004e14:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004e1a:	2380      	movs	r3, #128	; 0x80
 8004e1c:	035b      	lsls	r3, r3, #13
 8004e1e:	429a      	cmp	r2, r3
 8004e20:	d10b      	bne.n	8004e3a <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	685b      	ldr	r3, [r3, #4]
 8004e28:	4a15      	ldr	r2, [pc, #84]	; (8004e80 <UART_AdvFeatureConfig+0x160>)
 8004e2a:	4013      	ands	r3, r2
 8004e2c:	0019      	movs	r1, r3
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	430a      	orrs	r2, r1
 8004e38:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e3e:	2280      	movs	r2, #128	; 0x80
 8004e40:	4013      	ands	r3, r2
 8004e42:	d00b      	beq.n	8004e5c <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	685b      	ldr	r3, [r3, #4]
 8004e4a:	4a0e      	ldr	r2, [pc, #56]	; (8004e84 <UART_AdvFeatureConfig+0x164>)
 8004e4c:	4013      	ands	r3, r2
 8004e4e:	0019      	movs	r1, r3
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	430a      	orrs	r2, r1
 8004e5a:	605a      	str	r2, [r3, #4]
  }
}
 8004e5c:	46c0      	nop			; (mov r8, r8)
 8004e5e:	46bd      	mov	sp, r7
 8004e60:	b002      	add	sp, #8
 8004e62:	bd80      	pop	{r7, pc}
 8004e64:	fffdffff 	.word	0xfffdffff
 8004e68:	fffeffff 	.word	0xfffeffff
 8004e6c:	fffbffff 	.word	0xfffbffff
 8004e70:	ffff7fff 	.word	0xffff7fff
 8004e74:	ffffefff 	.word	0xffffefff
 8004e78:	ffffdfff 	.word	0xffffdfff
 8004e7c:	ffefffff 	.word	0xffefffff
 8004e80:	ff9fffff 	.word	0xff9fffff
 8004e84:	fff7ffff 	.word	0xfff7ffff

08004e88 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004e88:	b580      	push	{r7, lr}
 8004e8a:	b092      	sub	sp, #72	; 0x48
 8004e8c:	af02      	add	r7, sp, #8
 8004e8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	2284      	movs	r2, #132	; 0x84
 8004e94:	2100      	movs	r1, #0
 8004e96:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004e98:	f7fc fec0 	bl	8001c1c <HAL_GetTick>
 8004e9c:	0003      	movs	r3, r0
 8004e9e:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	2208      	movs	r2, #8
 8004ea8:	4013      	ands	r3, r2
 8004eaa:	2b08      	cmp	r3, #8
 8004eac:	d12c      	bne.n	8004f08 <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004eae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004eb0:	2280      	movs	r2, #128	; 0x80
 8004eb2:	0391      	lsls	r1, r2, #14
 8004eb4:	6878      	ldr	r0, [r7, #4]
 8004eb6:	4a46      	ldr	r2, [pc, #280]	; (8004fd0 <UART_CheckIdleState+0x148>)
 8004eb8:	9200      	str	r2, [sp, #0]
 8004eba:	2200      	movs	r2, #0
 8004ebc:	f000 f88c 	bl	8004fd8 <UART_WaitOnFlagUntilTimeout>
 8004ec0:	1e03      	subs	r3, r0, #0
 8004ec2:	d021      	beq.n	8004f08 <UART_CheckIdleState+0x80>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004ec4:	f3ef 8310 	mrs	r3, PRIMASK
 8004ec8:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8004eca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8004ecc:	63bb      	str	r3, [r7, #56]	; 0x38
 8004ece:	2301      	movs	r3, #1
 8004ed0:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004ed2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ed4:	f383 8810 	msr	PRIMASK, r3
}
 8004ed8:	46c0      	nop			; (mov r8, r8)
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	681a      	ldr	r2, [r3, #0]
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	2180      	movs	r1, #128	; 0x80
 8004ee6:	438a      	bics	r2, r1
 8004ee8:	601a      	str	r2, [r3, #0]
 8004eea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004eec:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004eee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ef0:	f383 8810 	msr	PRIMASK, r3
}
 8004ef4:	46c0      	nop			; (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	2220      	movs	r2, #32
 8004efa:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	2278      	movs	r2, #120	; 0x78
 8004f00:	2100      	movs	r1, #0
 8004f02:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004f04:	2303      	movs	r3, #3
 8004f06:	e05f      	b.n	8004fc8 <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	2204      	movs	r2, #4
 8004f10:	4013      	ands	r3, r2
 8004f12:	2b04      	cmp	r3, #4
 8004f14:	d146      	bne.n	8004fa4 <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004f16:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004f18:	2280      	movs	r2, #128	; 0x80
 8004f1a:	03d1      	lsls	r1, r2, #15
 8004f1c:	6878      	ldr	r0, [r7, #4]
 8004f1e:	4a2c      	ldr	r2, [pc, #176]	; (8004fd0 <UART_CheckIdleState+0x148>)
 8004f20:	9200      	str	r2, [sp, #0]
 8004f22:	2200      	movs	r2, #0
 8004f24:	f000 f858 	bl	8004fd8 <UART_WaitOnFlagUntilTimeout>
 8004f28:	1e03      	subs	r3, r0, #0
 8004f2a:	d03b      	beq.n	8004fa4 <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004f2c:	f3ef 8310 	mrs	r3, PRIMASK
 8004f30:	60fb      	str	r3, [r7, #12]
  return(result);
 8004f32:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004f34:	637b      	str	r3, [r7, #52]	; 0x34
 8004f36:	2301      	movs	r3, #1
 8004f38:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004f3a:	693b      	ldr	r3, [r7, #16]
 8004f3c:	f383 8810 	msr	PRIMASK, r3
}
 8004f40:	46c0      	nop			; (mov r8, r8)
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	681a      	ldr	r2, [r3, #0]
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	4921      	ldr	r1, [pc, #132]	; (8004fd4 <UART_CheckIdleState+0x14c>)
 8004f4e:	400a      	ands	r2, r1
 8004f50:	601a      	str	r2, [r3, #0]
 8004f52:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004f54:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004f56:	697b      	ldr	r3, [r7, #20]
 8004f58:	f383 8810 	msr	PRIMASK, r3
}
 8004f5c:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004f5e:	f3ef 8310 	mrs	r3, PRIMASK
 8004f62:	61bb      	str	r3, [r7, #24]
  return(result);
 8004f64:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004f66:	633b      	str	r3, [r7, #48]	; 0x30
 8004f68:	2301      	movs	r3, #1
 8004f6a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004f6c:	69fb      	ldr	r3, [r7, #28]
 8004f6e:	f383 8810 	msr	PRIMASK, r3
}
 8004f72:	46c0      	nop			; (mov r8, r8)
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	689a      	ldr	r2, [r3, #8]
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	2101      	movs	r1, #1
 8004f80:	438a      	bics	r2, r1
 8004f82:	609a      	str	r2, [r3, #8]
 8004f84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f86:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004f88:	6a3b      	ldr	r3, [r7, #32]
 8004f8a:	f383 8810 	msr	PRIMASK, r3
}
 8004f8e:	46c0      	nop			; (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	2280      	movs	r2, #128	; 0x80
 8004f94:	2120      	movs	r1, #32
 8004f96:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	2278      	movs	r2, #120	; 0x78
 8004f9c:	2100      	movs	r1, #0
 8004f9e:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004fa0:	2303      	movs	r3, #3
 8004fa2:	e011      	b.n	8004fc8 <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	2220      	movs	r2, #32
 8004fa8:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	2280      	movs	r2, #128	; 0x80
 8004fae:	2120      	movs	r1, #32
 8004fb0:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	2200      	movs	r2, #0
 8004fb6:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	2200      	movs	r2, #0
 8004fbc:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	2278      	movs	r2, #120	; 0x78
 8004fc2:	2100      	movs	r1, #0
 8004fc4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004fc6:	2300      	movs	r3, #0
}
 8004fc8:	0018      	movs	r0, r3
 8004fca:	46bd      	mov	sp, r7
 8004fcc:	b010      	add	sp, #64	; 0x40
 8004fce:	bd80      	pop	{r7, pc}
 8004fd0:	01ffffff 	.word	0x01ffffff
 8004fd4:	fffffedf 	.word	0xfffffedf

08004fd8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004fd8:	b580      	push	{r7, lr}
 8004fda:	b084      	sub	sp, #16
 8004fdc:	af00      	add	r7, sp, #0
 8004fde:	60f8      	str	r0, [r7, #12]
 8004fe0:	60b9      	str	r1, [r7, #8]
 8004fe2:	603b      	str	r3, [r7, #0]
 8004fe4:	1dfb      	adds	r3, r7, #7
 8004fe6:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004fe8:	e04b      	b.n	8005082 <UART_WaitOnFlagUntilTimeout+0xaa>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004fea:	69bb      	ldr	r3, [r7, #24]
 8004fec:	3301      	adds	r3, #1
 8004fee:	d048      	beq.n	8005082 <UART_WaitOnFlagUntilTimeout+0xaa>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004ff0:	f7fc fe14 	bl	8001c1c <HAL_GetTick>
 8004ff4:	0002      	movs	r2, r0
 8004ff6:	683b      	ldr	r3, [r7, #0]
 8004ff8:	1ad3      	subs	r3, r2, r3
 8004ffa:	69ba      	ldr	r2, [r7, #24]
 8004ffc:	429a      	cmp	r2, r3
 8004ffe:	d302      	bcc.n	8005006 <UART_WaitOnFlagUntilTimeout+0x2e>
 8005000:	69bb      	ldr	r3, [r7, #24]
 8005002:	2b00      	cmp	r3, #0
 8005004:	d101      	bne.n	800500a <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 8005006:	2303      	movs	r3, #3
 8005008:	e04b      	b.n	80050a2 <UART_WaitOnFlagUntilTimeout+0xca>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	2204      	movs	r2, #4
 8005012:	4013      	ands	r3, r2
 8005014:	d035      	beq.n	8005082 <UART_WaitOnFlagUntilTimeout+0xaa>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	69db      	ldr	r3, [r3, #28]
 800501c:	2208      	movs	r2, #8
 800501e:	4013      	ands	r3, r2
 8005020:	2b08      	cmp	r3, #8
 8005022:	d111      	bne.n	8005048 <UART_WaitOnFlagUntilTimeout+0x70>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	2208      	movs	r2, #8
 800502a:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	0018      	movs	r0, r3
 8005030:	f000 f83c 	bl	80050ac <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	2284      	movs	r2, #132	; 0x84
 8005038:	2108      	movs	r1, #8
 800503a:	5099      	str	r1, [r3, r2]

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	2278      	movs	r2, #120	; 0x78
 8005040:	2100      	movs	r1, #0
 8005042:	5499      	strb	r1, [r3, r2]

           return HAL_ERROR;
 8005044:	2301      	movs	r3, #1
 8005046:	e02c      	b.n	80050a2 <UART_WaitOnFlagUntilTimeout+0xca>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	69da      	ldr	r2, [r3, #28]
 800504e:	2380      	movs	r3, #128	; 0x80
 8005050:	011b      	lsls	r3, r3, #4
 8005052:	401a      	ands	r2, r3
 8005054:	2380      	movs	r3, #128	; 0x80
 8005056:	011b      	lsls	r3, r3, #4
 8005058:	429a      	cmp	r2, r3
 800505a:	d112      	bne.n	8005082 <UART_WaitOnFlagUntilTimeout+0xaa>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	2280      	movs	r2, #128	; 0x80
 8005062:	0112      	lsls	r2, r2, #4
 8005064:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	0018      	movs	r0, r3
 800506a:	f000 f81f 	bl	80050ac <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	2284      	movs	r2, #132	; 0x84
 8005072:	2120      	movs	r1, #32
 8005074:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	2278      	movs	r2, #120	; 0x78
 800507a:	2100      	movs	r1, #0
 800507c:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 800507e:	2303      	movs	r3, #3
 8005080:	e00f      	b.n	80050a2 <UART_WaitOnFlagUntilTimeout+0xca>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	69db      	ldr	r3, [r3, #28]
 8005088:	68ba      	ldr	r2, [r7, #8]
 800508a:	4013      	ands	r3, r2
 800508c:	68ba      	ldr	r2, [r7, #8]
 800508e:	1ad3      	subs	r3, r2, r3
 8005090:	425a      	negs	r2, r3
 8005092:	4153      	adcs	r3, r2
 8005094:	b2db      	uxtb	r3, r3
 8005096:	001a      	movs	r2, r3
 8005098:	1dfb      	adds	r3, r7, #7
 800509a:	781b      	ldrb	r3, [r3, #0]
 800509c:	429a      	cmp	r2, r3
 800509e:	d0a4      	beq.n	8004fea <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80050a0:	2300      	movs	r3, #0
}
 80050a2:	0018      	movs	r0, r3
 80050a4:	46bd      	mov	sp, r7
 80050a6:	b004      	add	sp, #16
 80050a8:	bd80      	pop	{r7, pc}
	...

080050ac <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80050ac:	b580      	push	{r7, lr}
 80050ae:	b08e      	sub	sp, #56	; 0x38
 80050b0:	af00      	add	r7, sp, #0
 80050b2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80050b4:	f3ef 8310 	mrs	r3, PRIMASK
 80050b8:	617b      	str	r3, [r7, #20]
  return(result);
 80050ba:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80050bc:	637b      	str	r3, [r7, #52]	; 0x34
 80050be:	2301      	movs	r3, #1
 80050c0:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80050c2:	69bb      	ldr	r3, [r7, #24]
 80050c4:	f383 8810 	msr	PRIMASK, r3
}
 80050c8:	46c0      	nop			; (mov r8, r8)
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	681a      	ldr	r2, [r3, #0]
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	4926      	ldr	r1, [pc, #152]	; (8005170 <UART_EndRxTransfer+0xc4>)
 80050d6:	400a      	ands	r2, r1
 80050d8:	601a      	str	r2, [r3, #0]
 80050da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80050dc:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80050de:	69fb      	ldr	r3, [r7, #28]
 80050e0:	f383 8810 	msr	PRIMASK, r3
}
 80050e4:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80050e6:	f3ef 8310 	mrs	r3, PRIMASK
 80050ea:	623b      	str	r3, [r7, #32]
  return(result);
 80050ec:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80050ee:	633b      	str	r3, [r7, #48]	; 0x30
 80050f0:	2301      	movs	r3, #1
 80050f2:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80050f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050f6:	f383 8810 	msr	PRIMASK, r3
}
 80050fa:	46c0      	nop			; (mov r8, r8)
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	689a      	ldr	r2, [r3, #8]
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	2101      	movs	r1, #1
 8005108:	438a      	bics	r2, r1
 800510a:	609a      	str	r2, [r3, #8]
 800510c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800510e:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005110:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005112:	f383 8810 	msr	PRIMASK, r3
}
 8005116:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800511c:	2b01      	cmp	r3, #1
 800511e:	d118      	bne.n	8005152 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005120:	f3ef 8310 	mrs	r3, PRIMASK
 8005124:	60bb      	str	r3, [r7, #8]
  return(result);
 8005126:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005128:	62fb      	str	r3, [r7, #44]	; 0x2c
 800512a:	2301      	movs	r3, #1
 800512c:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	f383 8810 	msr	PRIMASK, r3
}
 8005134:	46c0      	nop			; (mov r8, r8)
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	681a      	ldr	r2, [r3, #0]
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	2110      	movs	r1, #16
 8005142:	438a      	bics	r2, r1
 8005144:	601a      	str	r2, [r3, #0]
 8005146:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005148:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800514a:	693b      	ldr	r3, [r7, #16]
 800514c:	f383 8810 	msr	PRIMASK, r3
}
 8005150:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	2280      	movs	r2, #128	; 0x80
 8005156:	2120      	movs	r1, #32
 8005158:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	2200      	movs	r2, #0
 800515e:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	2200      	movs	r2, #0
 8005164:	669a      	str	r2, [r3, #104]	; 0x68
}
 8005166:	46c0      	nop			; (mov r8, r8)
 8005168:	46bd      	mov	sp, r7
 800516a:	b00e      	add	sp, #56	; 0x38
 800516c:	bd80      	pop	{r7, pc}
 800516e:	46c0      	nop			; (mov r8, r8)
 8005170:	fffffedf 	.word	0xfffffedf

08005174 <nRF24_CSN_Select>:

//#define Debug


void nRF24_CSN_Select(uint16_t Sel_CSN_Pin)
{
 8005174:	b580      	push	{r7, lr}
 8005176:	b082      	sub	sp, #8
 8005178:	af00      	add	r7, sp, #0
 800517a:	0002      	movs	r2, r0
 800517c:	1dbb      	adds	r3, r7, #6
 800517e:	801a      	strh	r2, [r3, #0]
	switch (Sel_CSN_Pin)
 8005180:	1dbb      	adds	r3, r7, #6
 8005182:	881b      	ldrh	r3, [r3, #0]
 8005184:	2b08      	cmp	r3, #8
 8005186:	d107      	bne.n	8005198 <nRF24_CSN_Select+0x24>
	{
		case nRF_CSN_Pin:
			HAL_GPIO_WritePin(GPIOA, nRF_CSN_Pin, GPIO_PIN_RESET);
 8005188:	23a0      	movs	r3, #160	; 0xa0
 800518a:	05db      	lsls	r3, r3, #23
 800518c:	2200      	movs	r2, #0
 800518e:	2108      	movs	r1, #8
 8005190:	0018      	movs	r0, r3
 8005192:	f7fd fbda 	bl	800294a <HAL_GPIO_WritePin>
			break;
 8005196:	e000      	b.n	800519a <nRF24_CSN_Select+0x26>
		default:
			break;
 8005198:	46c0      	nop			; (mov r8, r8)
	}
}
 800519a:	46c0      	nop			; (mov r8, r8)
 800519c:	46bd      	mov	sp, r7
 800519e:	b002      	add	sp, #8
 80051a0:	bd80      	pop	{r7, pc}

080051a2 <nRF24_CSN_UnSelect>:

void nRF24_CSN_UnSelect(uint16_t Sel_CSN_Pin)
{
 80051a2:	b580      	push	{r7, lr}
 80051a4:	b082      	sub	sp, #8
 80051a6:	af00      	add	r7, sp, #0
 80051a8:	0002      	movs	r2, r0
 80051aa:	1dbb      	adds	r3, r7, #6
 80051ac:	801a      	strh	r2, [r3, #0]
	switch (Sel_CSN_Pin)
 80051ae:	1dbb      	adds	r3, r7, #6
 80051b0:	881b      	ldrh	r3, [r3, #0]
 80051b2:	2b08      	cmp	r3, #8
 80051b4:	d107      	bne.n	80051c6 <nRF24_CSN_UnSelect+0x24>
	{
		case nRF_CSN_Pin:
			HAL_GPIO_WritePin(GPIOA, nRF_CSN_Pin, GPIO_PIN_SET);
 80051b6:	23a0      	movs	r3, #160	; 0xa0
 80051b8:	05db      	lsls	r3, r3, #23
 80051ba:	2201      	movs	r2, #1
 80051bc:	2108      	movs	r1, #8
 80051be:	0018      	movs	r0, r3
 80051c0:	f7fd fbc3 	bl	800294a <HAL_GPIO_WritePin>
			break;
 80051c4:	e000      	b.n	80051c8 <nRF24_CSN_UnSelect+0x26>
		default:
			break;
 80051c6:	46c0      	nop			; (mov r8, r8)
	}
}
 80051c8:	46c0      	nop			; (mov r8, r8)
 80051ca:	46bd      	mov	sp, r7
 80051cc:	b002      	add	sp, #8
 80051ce:	bd80      	pop	{r7, pc}

080051d0 <nRF24_CE_Enable>:

void nRF24_CE_Enable(uint16_t Sel_CE_Pin)
{
 80051d0:	b580      	push	{r7, lr}
 80051d2:	b082      	sub	sp, #8
 80051d4:	af00      	add	r7, sp, #0
 80051d6:	0002      	movs	r2, r0
 80051d8:	1dbb      	adds	r3, r7, #6
 80051da:	801a      	strh	r2, [r3, #0]
	switch (Sel_CE_Pin)
 80051dc:	1dbb      	adds	r3, r7, #6
 80051de:	881b      	ldrh	r3, [r3, #0]
 80051e0:	2b04      	cmp	r3, #4
 80051e2:	d106      	bne.n	80051f2 <nRF24_CE_Enable+0x22>
	{
		case nRF_CE_Pin:
			HAL_GPIO_WritePin(nRF_CE_GPIO_Port, nRF_CE_Pin, GPIO_PIN_SET);
 80051e4:	4b05      	ldr	r3, [pc, #20]	; (80051fc <nRF24_CE_Enable+0x2c>)
 80051e6:	2201      	movs	r2, #1
 80051e8:	2104      	movs	r1, #4
 80051ea:	0018      	movs	r0, r3
 80051ec:	f7fd fbad 	bl	800294a <HAL_GPIO_WritePin>
			break;
 80051f0:	e000      	b.n	80051f4 <nRF24_CE_Enable+0x24>
		default:
			break;
 80051f2:	46c0      	nop			; (mov r8, r8)
	}
}
 80051f4:	46c0      	nop			; (mov r8, r8)
 80051f6:	46bd      	mov	sp, r7
 80051f8:	b002      	add	sp, #8
 80051fa:	bd80      	pop	{r7, pc}
 80051fc:	50000400 	.word	0x50000400

08005200 <nRF24_CE_Disable>:

void nRF24_CE_Disable(uint16_t Sel_CE_Pin)
{
 8005200:	b580      	push	{r7, lr}
 8005202:	b082      	sub	sp, #8
 8005204:	af00      	add	r7, sp, #0
 8005206:	0002      	movs	r2, r0
 8005208:	1dbb      	adds	r3, r7, #6
 800520a:	801a      	strh	r2, [r3, #0]
	switch (Sel_CE_Pin)
 800520c:	1dbb      	adds	r3, r7, #6
 800520e:	881b      	ldrh	r3, [r3, #0]
 8005210:	2b04      	cmp	r3, #4
 8005212:	d106      	bne.n	8005222 <nRF24_CE_Disable+0x22>
	{
		case nRF_CE_Pin:
			HAL_GPIO_WritePin(nRF_CE_GPIO_Port, nRF_CE_Pin, GPIO_PIN_RESET);
 8005214:	4b05      	ldr	r3, [pc, #20]	; (800522c <nRF24_CE_Disable+0x2c>)
 8005216:	2200      	movs	r2, #0
 8005218:	2104      	movs	r1, #4
 800521a:	0018      	movs	r0, r3
 800521c:	f7fd fb95 	bl	800294a <HAL_GPIO_WritePin>
			break;
 8005220:	e000      	b.n	8005224 <nRF24_CE_Disable+0x24>
		default:
			break;
 8005222:	46c0      	nop			; (mov r8, r8)
	}
}
 8005224:	46c0      	nop			; (mov r8, r8)
 8005226:	46bd      	mov	sp, r7
 8005228:	b002      	add	sp, #8
 800522a:	bd80      	pop	{r7, pc}
 800522c:	50000400 	.word	0x50000400

08005230 <nRF24_WriteReg>:
// input:
//   Sel_CSN_Pin - Select the RF Module
//   reg - number of register to write
//   data - value to write
void nRF24_WriteReg(uint16_t Sel_CSN_Pin, uint8_t reg, uint8_t data)
{
 8005230:	b590      	push	{r4, r7, lr}
 8005232:	b085      	sub	sp, #20
 8005234:	af00      	add	r7, sp, #0
 8005236:	0004      	movs	r4, r0
 8005238:	0008      	movs	r0, r1
 800523a:	0011      	movs	r1, r2
 800523c:	1dbb      	adds	r3, r7, #6
 800523e:	1c22      	adds	r2, r4, #0
 8005240:	801a      	strh	r2, [r3, #0]
 8005242:	1d7b      	adds	r3, r7, #5
 8005244:	1c02      	adds	r2, r0, #0
 8005246:	701a      	strb	r2, [r3, #0]
 8005248:	1d3b      	adds	r3, r7, #4
 800524a:	1c0a      	adds	r2, r1, #0
 800524c:	701a      	strb	r2, [r3, #0]
	uint8_t buf[2];
	buf[0] = reg | 1<<5;                                       //Set the 6th bit of the reg to make it a write command
 800524e:	1d7b      	adds	r3, r7, #5
 8005250:	781b      	ldrb	r3, [r3, #0]
 8005252:	2220      	movs	r2, #32
 8005254:	4313      	orrs	r3, r2
 8005256:	b2da      	uxtb	r2, r3
 8005258:	240c      	movs	r4, #12
 800525a:	193b      	adds	r3, r7, r4
 800525c:	701a      	strb	r2, [r3, #0]
	buf[1] = data;
 800525e:	193b      	adds	r3, r7, r4
 8005260:	1d3a      	adds	r2, r7, #4
 8005262:	7812      	ldrb	r2, [r2, #0]
 8005264:	705a      	strb	r2, [r3, #1]

	switch(Sel_CSN_Pin)
 8005266:	1dbb      	adds	r3, r7, #6
 8005268:	881b      	ldrh	r3, [r3, #0]
 800526a:	2b08      	cmp	r3, #8
 800526c:	d10d      	bne.n	800528a <nRF24_WriteReg+0x5a>
	{
	case nRF_CSN_Pin:
		nRF24_CSN_Select(nRF_CSN_Pin);                         //Pull CSN pin low to select the nRF24 on SPI BUS
 800526e:	2008      	movs	r0, #8
 8005270:	f7ff ff80 	bl	8005174 <nRF24_CSN_Select>
		HAL_SPI_Transmit(&hspi1, buf, 2, 1000);                //Write command and register address (001AAAAA) and then the data to be written
 8005274:	23fa      	movs	r3, #250	; 0xfa
 8005276:	009b      	lsls	r3, r3, #2
 8005278:	1939      	adds	r1, r7, r4
 800527a:	4806      	ldr	r0, [pc, #24]	; (8005294 <nRF24_WriteReg+0x64>)
 800527c:	2202      	movs	r2, #2
 800527e:	f7fe fb55 	bl	800392c <HAL_SPI_Transmit>
		nRF24_CSN_UnSelect(nRF_CSN_Pin);                       //Pull CSN pin high to unselect the nRF24 on SPI BUS
 8005282:	2008      	movs	r0, #8
 8005284:	f7ff ff8d 	bl	80051a2 <nRF24_CSN_UnSelect>
		break;
 8005288:	e000      	b.n	800528c <nRF24_WriteReg+0x5c>
	default:
		break;
 800528a:	46c0      	nop			; (mov r8, r8)
	}
}
 800528c:	46c0      	nop			; (mov r8, r8)
 800528e:	46bd      	mov	sp, r7
 8005290:	b005      	add	sp, #20
 8005292:	bd90      	pop	{r4, r7, pc}
 8005294:	20000180 	.word	0x20000180

08005298 <nRF24_WriteMBReg>:
//   Sel_CSN_Pin - Select the RF Module
//   reg - number of register to write
//   data - pointer to the buffer with data to write
//   size - number of bytes to write
void nRF24_WriteMBReg(uint16_t Sel_CSN_Pin, uint8_t reg, uint8_t *data, uint8_t size)
{
 8005298:	b590      	push	{r4, r7, lr}
 800529a:	b085      	sub	sp, #20
 800529c:	af00      	add	r7, sp, #0
 800529e:	0004      	movs	r4, r0
 80052a0:	0008      	movs	r0, r1
 80052a2:	603a      	str	r2, [r7, #0]
 80052a4:	0019      	movs	r1, r3
 80052a6:	1dbb      	adds	r3, r7, #6
 80052a8:	1c22      	adds	r2, r4, #0
 80052aa:	801a      	strh	r2, [r3, #0]
 80052ac:	1d7b      	adds	r3, r7, #5
 80052ae:	1c02      	adds	r2, r0, #0
 80052b0:	701a      	strb	r2, [r3, #0]
 80052b2:	1d3b      	adds	r3, r7, #4
 80052b4:	1c0a      	adds	r2, r1, #0
 80052b6:	701a      	strb	r2, [r3, #0]
	uint8_t buf[2];
	buf[0] = reg | 1<<5;                                       //Set the 6th bit of the reg to make it a write command
 80052b8:	1d7b      	adds	r3, r7, #5
 80052ba:	781b      	ldrb	r3, [r3, #0]
 80052bc:	2220      	movs	r2, #32
 80052be:	4313      	orrs	r3, r2
 80052c0:	b2da      	uxtb	r2, r3
 80052c2:	240c      	movs	r4, #12
 80052c4:	193b      	adds	r3, r7, r4
 80052c6:	701a      	strb	r2, [r3, #0]
//	buf[1] = data;

	switch(Sel_CSN_Pin)
 80052c8:	1dbb      	adds	r3, r7, #6
 80052ca:	881b      	ldrh	r3, [r3, #0]
 80052cc:	2b08      	cmp	r3, #8
 80052ce:	d116      	bne.n	80052fe <nRF24_WriteMBReg+0x66>
	{
	case nRF_CSN_Pin:
		nRF24_CSN_Select(nRF_CSN_Pin);                         //Pull CSN pin low to select the nRF24 on SPI BUS
 80052d0:	2008      	movs	r0, #8
 80052d2:	f7ff ff4f 	bl	8005174 <nRF24_CSN_Select>
		HAL_SPI_Transmit(&hspi1, buf, 1, 1000);                //Write command and register address (001AAAAA)
 80052d6:	23fa      	movs	r3, #250	; 0xfa
 80052d8:	009b      	lsls	r3, r3, #2
 80052da:	1939      	adds	r1, r7, r4
 80052dc:	480a      	ldr	r0, [pc, #40]	; (8005308 <nRF24_WriteMBReg+0x70>)
 80052de:	2201      	movs	r2, #1
 80052e0:	f7fe fb24 	bl	800392c <HAL_SPI_Transmit>
		HAL_SPI_Transmit(&hspi1, data, size, 1000);            //Send the data to be written in that address
 80052e4:	1d3b      	adds	r3, r7, #4
 80052e6:	781b      	ldrb	r3, [r3, #0]
 80052e8:	b29a      	uxth	r2, r3
 80052ea:	23fa      	movs	r3, #250	; 0xfa
 80052ec:	009b      	lsls	r3, r3, #2
 80052ee:	6839      	ldr	r1, [r7, #0]
 80052f0:	4805      	ldr	r0, [pc, #20]	; (8005308 <nRF24_WriteMBReg+0x70>)
 80052f2:	f7fe fb1b 	bl	800392c <HAL_SPI_Transmit>
		nRF24_CSN_UnSelect(nRF_CSN_Pin);                       //Pull CSN pin high to unselect the nRF24 on SPI BUS
 80052f6:	2008      	movs	r0, #8
 80052f8:	f7ff ff53 	bl	80051a2 <nRF24_CSN_UnSelect>
		break;
 80052fc:	e000      	b.n	8005300 <nRF24_WriteMBReg+0x68>
	default:
		break;
 80052fe:	46c0      	nop			; (mov r8, r8)
	}
}
 8005300:	46c0      	nop			; (mov r8, r8)
 8005302:	46bd      	mov	sp, r7
 8005304:	b005      	add	sp, #20
 8005306:	bd90      	pop	{r4, r7, pc}
 8005308:	20000180 	.word	0x20000180

0800530c <nRF24_ReadReg>:
// Reads a value of register
// input:
//   Sel_CSN_Pin - Select the RF Module
//   reg - number of register to read
// return: value of register
uint8_t nRF24_ReadReg(uint16_t Sel_CSN_Pin, uint8_t reg) {
 800530c:	b590      	push	{r4, r7, lr}
 800530e:	b085      	sub	sp, #20
 8005310:	af00      	add	r7, sp, #0
 8005312:	0002      	movs	r2, r0
 8005314:	1dbb      	adds	r3, r7, #6
 8005316:	801a      	strh	r2, [r3, #0]
 8005318:	1d7b      	adds	r3, r7, #5
 800531a:	1c0a      	adds	r2, r1, #0
 800531c:	701a      	strb	r2, [r3, #0]

	uint8_t data = 0;
 800531e:	240f      	movs	r4, #15
 8005320:	193b      	adds	r3, r7, r4
 8005322:	2200      	movs	r2, #0
 8005324:	701a      	strb	r2, [r3, #0]

	switch(Sel_CSN_Pin)
 8005326:	1dbb      	adds	r3, r7, #6
 8005328:	881b      	ldrh	r3, [r3, #0]
 800532a:	2b08      	cmp	r3, #8
 800532c:	d114      	bne.n	8005358 <nRF24_ReadReg+0x4c>
	{
	case nRF_CSN_Pin:
		nRF24_CSN_Select(nRF_CSN_Pin);                       //Pull CSN pin low to select the nRF24 on SPI BUS
 800532e:	2008      	movs	r0, #8
 8005330:	f7ff ff20 	bl	8005174 <nRF24_CSN_Select>
		HAL_SPI_Transmit(&hspi1, &reg, 1, 1000);               //Sending the read command and register address (000AAAAA)
 8005334:	23fa      	movs	r3, #250	; 0xfa
 8005336:	009b      	lsls	r3, r3, #2
 8005338:	1d79      	adds	r1, r7, #5
 800533a:	480b      	ldr	r0, [pc, #44]	; (8005368 <nRF24_ReadReg+0x5c>)
 800533c:	2201      	movs	r2, #1
 800533e:	f7fe faf5 	bl	800392c <HAL_SPI_Transmit>
		HAL_SPI_Receive(&hspi1, &data, 1, 1000);               //Reading the one byte received
 8005342:	23fa      	movs	r3, #250	; 0xfa
 8005344:	009b      	lsls	r3, r3, #2
 8005346:	1939      	adds	r1, r7, r4
 8005348:	4807      	ldr	r0, [pc, #28]	; (8005368 <nRF24_ReadReg+0x5c>)
 800534a:	2201      	movs	r2, #1
 800534c:	f7fe fc4c 	bl	8003be8 <HAL_SPI_Receive>
		nRF24_CSN_UnSelect(nRF_CSN_Pin);                       //Pull CSN pin high to unselect the nRF24 on SPI BUS
 8005350:	2008      	movs	r0, #8
 8005352:	f7ff ff26 	bl	80051a2 <nRF24_CSN_UnSelect>
		break;
 8005356:	e000      	b.n	800535a <nRF24_ReadReg+0x4e>
	default:
        break;
 8005358:	46c0      	nop			; (mov r8, r8)
	}

	return data;
 800535a:	230f      	movs	r3, #15
 800535c:	18fb      	adds	r3, r7, r3
 800535e:	781b      	ldrb	r3, [r3, #0]
}
 8005360:	0018      	movs	r0, r3
 8005362:	46bd      	mov	sp, r7
 8005364:	b005      	add	sp, #20
 8005366:	bd90      	pop	{r4, r7, pc}
 8005368:	20000180 	.word	0x20000180

0800536c <nRF24_ReadMBReg>:
// Reads multiple bytes starting from a particular register
// input:
//   reg - number of register to write
//   data - pointer to the buffer with data to write
//   size - number of bytes to write
void nRF24_ReadMBReg(uint16_t Sel_CSN_Pin, uint8_t reg, uint8_t *data, uint8_t size) {
 800536c:	b590      	push	{r4, r7, lr}
 800536e:	b083      	sub	sp, #12
 8005370:	af00      	add	r7, sp, #0
 8005372:	0004      	movs	r4, r0
 8005374:	0008      	movs	r0, r1
 8005376:	603a      	str	r2, [r7, #0]
 8005378:	0019      	movs	r1, r3
 800537a:	1dbb      	adds	r3, r7, #6
 800537c:	1c22      	adds	r2, r4, #0
 800537e:	801a      	strh	r2, [r3, #0]
 8005380:	1d7b      	adds	r3, r7, #5
 8005382:	1c02      	adds	r2, r0, #0
 8005384:	701a      	strb	r2, [r3, #0]
 8005386:	1d3b      	adds	r3, r7, #4
 8005388:	1c0a      	adds	r2, r1, #0
 800538a:	701a      	strb	r2, [r3, #0]

	switch(Sel_CSN_Pin)
 800538c:	1dbb      	adds	r3, r7, #6
 800538e:	881b      	ldrh	r3, [r3, #0]
 8005390:	2b08      	cmp	r3, #8
 8005392:	d116      	bne.n	80053c2 <nRF24_ReadMBReg+0x56>
	{
	case nRF_CSN_Pin:
		nRF24_CSN_Select(nRF_CSN_Pin);                      //Pull CSN pin low to select the nRF24 on SPI BUS
 8005394:	2008      	movs	r0, #8
 8005396:	f7ff feed 	bl	8005174 <nRF24_CSN_Select>
		HAL_SPI_Transmit(&hspi1, &reg, 1, 1000);       //Sending the read command and register address (000AAAAA)
 800539a:	23fa      	movs	r3, #250	; 0xfa
 800539c:	009b      	lsls	r3, r3, #2
 800539e:	1d79      	adds	r1, r7, #5
 80053a0:	480a      	ldr	r0, [pc, #40]	; (80053cc <nRF24_ReadMBReg+0x60>)
 80053a2:	2201      	movs	r2, #1
 80053a4:	f7fe fac2 	bl	800392c <HAL_SPI_Transmit>
		HAL_SPI_Receive(&hspi1, data, size, 1000);     //Reading the received bytes
 80053a8:	1d3b      	adds	r3, r7, #4
 80053aa:	781b      	ldrb	r3, [r3, #0]
 80053ac:	b29a      	uxth	r2, r3
 80053ae:	23fa      	movs	r3, #250	; 0xfa
 80053b0:	009b      	lsls	r3, r3, #2
 80053b2:	6839      	ldr	r1, [r7, #0]
 80053b4:	4805      	ldr	r0, [pc, #20]	; (80053cc <nRF24_ReadMBReg+0x60>)
 80053b6:	f7fe fc17 	bl	8003be8 <HAL_SPI_Receive>
		nRF24_CSN_UnSelect(nRF_CSN_Pin);		              //Pull CSN pin low to select the nRF24 on SPI BUS
 80053ba:	2008      	movs	r0, #8
 80053bc:	f7ff fef1 	bl	80051a2 <nRF24_CSN_UnSelect>
		break;
 80053c0:	e000      	b.n	80053c4 <nRF24_ReadMBReg+0x58>
	default:
		break;
 80053c2:	46c0      	nop			; (mov r8, r8)
	}
}
 80053c4:	46c0      	nop			; (mov r8, r8)
 80053c6:	46bd      	mov	sp, r7
 80053c8:	b003      	add	sp, #12
 80053ca:	bd90      	pop	{r4, r7, pc}
 80053cc:	20000180 	.word	0x20000180

080053d0 <nRF24_Reset>:
// Reset all the nRF24's registers
// input:
//   Sel_CSN_Pin - Select the RF Module
//   reg - number of register to write
void nRF24_Reset(uint16_t Sel_CSN_Pin, uint8_t Reg)
{
 80053d0:	b580      	push	{r7, lr}
 80053d2:	b082      	sub	sp, #8
 80053d4:	af00      	add	r7, sp, #0
 80053d6:	0002      	movs	r2, r0
 80053d8:	1dbb      	adds	r3, r7, #6
 80053da:	801a      	strh	r2, [r3, #0]
 80053dc:	1d7b      	adds	r3, r7, #5
 80053de:	1c0a      	adds	r2, r1, #0
 80053e0:	701a      	strb	r2, [r3, #0]
	switch(Sel_CSN_Pin)
 80053e2:	1dbb      	adds	r3, r7, #6
 80053e4:	881b      	ldrh	r3, [r3, #0]
 80053e6:	2b08      	cmp	r3, #8
 80053e8:	d113      	bne.n	8005412 <nRF24_Reset+0x42>
	{
	case nRF_CSN_Pin:
		if(Reg == nRF24_REG_STATUS)
 80053ea:	1d7b      	adds	r3, r7, #5
 80053ec:	781b      	ldrb	r3, [r3, #0]
 80053ee:	2b07      	cmp	r3, #7
 80053f0:	d105      	bne.n	80053fe <nRF24_Reset+0x2e>
		{
			nRF24_WriteReg(nRF_CSN_Pin, nRF24_REG_STATUS, 0x70);
 80053f2:	2270      	movs	r2, #112	; 0x70
 80053f4:	2107      	movs	r1, #7
 80053f6:	2008      	movs	r0, #8
 80053f8:	f7ff ff1a 	bl	8005230 <nRF24_WriteReg>
		}
		else if(Reg == nRF24_REG_FIFO_STATUS)
		{
			nRF24_WriteReg(nRF_CSN_Pin, nRF24_REG_FIFO_STATUS, 0x11);
		}
		break;
 80053fc:	e00b      	b.n	8005416 <nRF24_Reset+0x46>
		else if(Reg == nRF24_REG_FIFO_STATUS)
 80053fe:	1d7b      	adds	r3, r7, #5
 8005400:	781b      	ldrb	r3, [r3, #0]
 8005402:	2b17      	cmp	r3, #23
 8005404:	d107      	bne.n	8005416 <nRF24_Reset+0x46>
			nRF24_WriteReg(nRF_CSN_Pin, nRF24_REG_FIFO_STATUS, 0x11);
 8005406:	2211      	movs	r2, #17
 8005408:	2117      	movs	r1, #23
 800540a:	2008      	movs	r0, #8
 800540c:	f7ff ff10 	bl	8005230 <nRF24_WriteReg>
		break;
 8005410:	e001      	b.n	8005416 <nRF24_Reset+0x46>
	default:
		break;
 8005412:	46c0      	nop			; (mov r8, r8)
 8005414:	e000      	b.n	8005418 <nRF24_Reset+0x48>
		break;
 8005416:	46c0      	nop			; (mov r8, r8)
	}
}
 8005418:	46c0      	nop			; (mov r8, r8)
 800541a:	46bd      	mov	sp, r7
 800541c:	b002      	add	sp, #8
 800541e:	bd80      	pop	{r7, pc}

08005420 <nRF24_Module_Setup>:

void nRF24_Module_Setup(uint16_t Sel_CSN_Pin, uint8_t mode, uint8_t RF_Ch, uint8_t *Tx_Addr, uint8_t *Rx_Addr, uint8_t RF_Setup, uint8_t Payloadsize)
{
 8005420:	b590      	push	{r4, r7, lr}
 8005422:	b089      	sub	sp, #36	; 0x24
 8005424:	af00      	add	r7, sp, #0
 8005426:	0004      	movs	r4, r0
 8005428:	0008      	movs	r0, r1
 800542a:	0011      	movs	r1, r2
 800542c:	603b      	str	r3, [r7, #0]
 800542e:	1dbb      	adds	r3, r7, #6
 8005430:	1c22      	adds	r2, r4, #0
 8005432:	801a      	strh	r2, [r3, #0]
 8005434:	1d7b      	adds	r3, r7, #5
 8005436:	1c02      	adds	r2, r0, #0
 8005438:	701a      	strb	r2, [r3, #0]
 800543a:	1d3b      	adds	r3, r7, #4
 800543c:	1c0a      	adds	r2, r1, #0
 800543e:	701a      	strb	r2, [r3, #0]
	Pipe3_Addr = Cat_Mod_Pipe[0][0][3];
	Pipe4_Addr = Cat_Mod_Pipe[0][0][4];
	Pipe5_Addr = Cat_Mod_Pipe[0][0][5];*/

	uint8_t rx_addr_p0[5],rx_addr_p1[5],rx_addr_p2,rx_addr_p3,rx_addr_p4,rx_addr_p5;
	rx_addr_p0[0] = *Rx_Addr;
 8005440:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005442:	781a      	ldrb	r2, [r3, #0]
 8005444:	2114      	movs	r1, #20
 8005446:	187b      	adds	r3, r7, r1
 8005448:	701a      	strb	r2, [r3, #0]
	rx_addr_p0[1] = *(Rx_Addr+1);
 800544a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800544c:	785a      	ldrb	r2, [r3, #1]
 800544e:	187b      	adds	r3, r7, r1
 8005450:	705a      	strb	r2, [r3, #1]
	rx_addr_p0[2] = *(Rx_Addr+2);
 8005452:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005454:	789a      	ldrb	r2, [r3, #2]
 8005456:	187b      	adds	r3, r7, r1
 8005458:	709a      	strb	r2, [r3, #2]
	rx_addr_p0[3] = *(Rx_Addr+3);
 800545a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800545c:	78da      	ldrb	r2, [r3, #3]
 800545e:	187b      	adds	r3, r7, r1
 8005460:	70da      	strb	r2, [r3, #3]
	rx_addr_p0[4] = *(Rx_Addr+4);
 8005462:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005464:	791a      	ldrb	r2, [r3, #4]
 8005466:	187b      	adds	r3, r7, r1
 8005468:	711a      	strb	r2, [r3, #4]
	rx_addr_p1[0] = (*Rx_Addr)+1;
 800546a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800546c:	781b      	ldrb	r3, [r3, #0]
 800546e:	3301      	adds	r3, #1
 8005470:	b2da      	uxtb	r2, r3
 8005472:	210c      	movs	r1, #12
 8005474:	187b      	adds	r3, r7, r1
 8005476:	701a      	strb	r2, [r3, #0]
	rx_addr_p1[1] = *(Rx_Addr+1);
 8005478:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800547a:	785a      	ldrb	r2, [r3, #1]
 800547c:	187b      	adds	r3, r7, r1
 800547e:	705a      	strb	r2, [r3, #1]
	rx_addr_p1[2] = *(Rx_Addr+2);
 8005480:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005482:	789a      	ldrb	r2, [r3, #2]
 8005484:	187b      	adds	r3, r7, r1
 8005486:	709a      	strb	r2, [r3, #2]
	rx_addr_p1[3] = *(Rx_Addr+3);
 8005488:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800548a:	78da      	ldrb	r2, [r3, #3]
 800548c:	187b      	adds	r3, r7, r1
 800548e:	70da      	strb	r2, [r3, #3]
	rx_addr_p1[4] = *(Rx_Addr+4);
 8005490:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005492:	791a      	ldrb	r2, [r3, #4]
 8005494:	187b      	adds	r3, r7, r1
 8005496:	711a      	strb	r2, [r3, #4]
	rx_addr_p2 = rx_addr_p1[0]+1;
 8005498:	187b      	adds	r3, r7, r1
 800549a:	781a      	ldrb	r2, [r3, #0]
 800549c:	211f      	movs	r1, #31
 800549e:	187b      	adds	r3, r7, r1
 80054a0:	3201      	adds	r2, #1
 80054a2:	701a      	strb	r2, [r3, #0]
	rx_addr_p3 = rx_addr_p2+1;
 80054a4:	201e      	movs	r0, #30
 80054a6:	183b      	adds	r3, r7, r0
 80054a8:	187a      	adds	r2, r7, r1
 80054aa:	7812      	ldrb	r2, [r2, #0]
 80054ac:	3201      	adds	r2, #1
 80054ae:	701a      	strb	r2, [r3, #0]
	rx_addr_p4 = rx_addr_p3+1;
 80054b0:	211d      	movs	r1, #29
 80054b2:	187b      	adds	r3, r7, r1
 80054b4:	183a      	adds	r2, r7, r0
 80054b6:	7812      	ldrb	r2, [r2, #0]
 80054b8:	3201      	adds	r2, #1
 80054ba:	701a      	strb	r2, [r3, #0]
	rx_addr_p5 = rx_addr_p4+1;
 80054bc:	231c      	movs	r3, #28
 80054be:	18fb      	adds	r3, r7, r3
 80054c0:	187a      	adds	r2, r7, r1
 80054c2:	7812      	ldrb	r2, [r2, #0]
 80054c4:	3201      	adds	r2, #1
 80054c6:	701a      	strb	r2, [r3, #0]

	switch(Sel_CSN_Pin)
 80054c8:	1dbb      	adds	r3, r7, #6
 80054ca:	881b      	ldrh	r3, [r3, #0]
 80054cc:	2b08      	cmp	r3, #8
 80054ce:	d000      	beq.n	80054d2 <nRF24_Module_Setup+0xb2>
 80054d0:	e138      	b.n	8005744 <nRF24_Module_Setup+0x324>
	{
	case nRF_CSN_Pin:

		switch(mode)
 80054d2:	1d7b      	adds	r3, r7, #5
 80054d4:	781b      	ldrb	r3, [r3, #0]
 80054d6:	2b05      	cmp	r3, #5
 80054d8:	d864      	bhi.n	80055a4 <nRF24_Module_Setup+0x184>
 80054da:	009a      	lsls	r2, r3, #2
 80054dc:	4b9c      	ldr	r3, [pc, #624]	; (8005750 <nRF24_Module_Setup+0x330>)
 80054de:	18d3      	adds	r3, r2, r3
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	469f      	mov	pc, r3
		{
	    case Receiver_Mode_AA:
			nRF24_WriteReg(nRF_CSN_Pin, nRF24_REG_CONFIG, 0x09);                      //PRIM_RX=1, PWR_UP=0, EN_CRC=1
 80054e4:	2209      	movs	r2, #9
 80054e6:	2100      	movs	r1, #0
 80054e8:	2008      	movs	r0, #8
 80054ea:	f7ff fea1 	bl	8005230 <nRF24_WriteReg>
			nRF24_WriteReg(nRF_CSN_Pin, nRF24_REG_EN_AA, 0x3F);                       //Enable AA for all pipes
 80054ee:	223f      	movs	r2, #63	; 0x3f
 80054f0:	2101      	movs	r1, #1
 80054f2:	2008      	movs	r0, #8
 80054f4:	f7ff fe9c 	bl	8005230 <nRF24_WriteReg>
			nRF24_WriteReg(nRF_CSN_Pin, nRF24_REG_EN_RXADDR, 0x3F);                   //Enable RX addresses for all pipes
 80054f8:	223f      	movs	r2, #63	; 0x3f
 80054fa:	2102      	movs	r1, #2
 80054fc:	2008      	movs	r0, #8
 80054fe:	f7ff fe97 	bl	8005230 <nRF24_WriteReg>
			break;
 8005502:	e04f      	b.n	80055a4 <nRF24_Module_Setup+0x184>
	    case Receiver_Mode_noAA_CRC:
			nRF24_WriteReg(nRF_CSN_Pin, nRF24_REG_CONFIG, 0x09);                      //PRIM_RX=1, PWR_UP=0, EN_CRC=1
 8005504:	2209      	movs	r2, #9
 8005506:	2100      	movs	r1, #0
 8005508:	2008      	movs	r0, #8
 800550a:	f7ff fe91 	bl	8005230 <nRF24_WriteReg>
			nRF24_WriteReg(nRF_CSN_Pin, nRF24_REG_EN_AA, 0x00);                       //Disable AA for all pipes
 800550e:	2200      	movs	r2, #0
 8005510:	2101      	movs	r1, #1
 8005512:	2008      	movs	r0, #8
 8005514:	f7ff fe8c 	bl	8005230 <nRF24_WriteReg>
			nRF24_WriteReg(nRF_CSN_Pin, nRF24_REG_EN_RXADDR, 0x3F);                   //Enable RX addresses for all pipes
 8005518:	223f      	movs	r2, #63	; 0x3f
 800551a:	2102      	movs	r1, #2
 800551c:	2008      	movs	r0, #8
 800551e:	f7ff fe87 	bl	8005230 <nRF24_WriteReg>
			break;
 8005522:	e03f      	b.n	80055a4 <nRF24_Module_Setup+0x184>
	    case Receiver_Mode_noAA_noCRC:
			nRF24_WriteReg(nRF_CSN_Pin, nRF24_REG_CONFIG, 0x01);                      //PRIM_RX=1, PWR_UP=0, EN_CRC=0
 8005524:	2201      	movs	r2, #1
 8005526:	2100      	movs	r1, #0
 8005528:	2008      	movs	r0, #8
 800552a:	f7ff fe81 	bl	8005230 <nRF24_WriteReg>
			nRF24_WriteReg(nRF_CSN_Pin, nRF24_REG_EN_AA, 0x00);                       //Disable AA for all pipes
 800552e:	2200      	movs	r2, #0
 8005530:	2101      	movs	r1, #1
 8005532:	2008      	movs	r0, #8
 8005534:	f7ff fe7c 	bl	8005230 <nRF24_WriteReg>
			nRF24_WriteReg(nRF_CSN_Pin, nRF24_REG_EN_RXADDR, 0x3F);                   //Enable RX addresses for all pipes
 8005538:	223f      	movs	r2, #63	; 0x3f
 800553a:	2102      	movs	r1, #2
 800553c:	2008      	movs	r0, #8
 800553e:	f7ff fe77 	bl	8005230 <nRF24_WriteReg>
			break;
 8005542:	e02f      	b.n	80055a4 <nRF24_Module_Setup+0x184>
	    case Transmitter_Mode_AA:
			nRF24_WriteReg(nRF_CSN_Pin, nRF24_REG_CONFIG, 0x08);                      //PRIM_RX=0, PWR_UP=0, EN_CRC=1
 8005544:	2208      	movs	r2, #8
 8005546:	2100      	movs	r1, #0
 8005548:	2008      	movs	r0, #8
 800554a:	f7ff fe71 	bl	8005230 <nRF24_WriteReg>
			nRF24_WriteReg(nRF_CSN_Pin, nRF24_REG_EN_AA, 0x3F);                       //Enable AA for all pipes
 800554e:	223f      	movs	r2, #63	; 0x3f
 8005550:	2101      	movs	r1, #1
 8005552:	2008      	movs	r0, #8
 8005554:	f7ff fe6c 	bl	8005230 <nRF24_WriteReg>
			nRF24_WriteReg(nRF_CSN_Pin, nRF24_REG_EN_RXADDR, 0x01);                   //Enable RX addresses for pipe0
 8005558:	2201      	movs	r2, #1
 800555a:	2102      	movs	r1, #2
 800555c:	2008      	movs	r0, #8
 800555e:	f7ff fe67 	bl	8005230 <nRF24_WriteReg>
			break;
 8005562:	e01f      	b.n	80055a4 <nRF24_Module_Setup+0x184>
	    case Transmitter_Mode_noAA_CRC:
			nRF24_WriteReg(nRF_CSN_Pin, nRF24_REG_CONFIG, 0x08);                      //PRIM_RX=0, PWR_UP=0, EN_CRC=1
 8005564:	2208      	movs	r2, #8
 8005566:	2100      	movs	r1, #0
 8005568:	2008      	movs	r0, #8
 800556a:	f7ff fe61 	bl	8005230 <nRF24_WriteReg>
			nRF24_WriteReg(nRF_CSN_Pin, nRF24_REG_EN_AA, 0x00);                       //Disable AA for all pipes
 800556e:	2200      	movs	r2, #0
 8005570:	2101      	movs	r1, #1
 8005572:	2008      	movs	r0, #8
 8005574:	f7ff fe5c 	bl	8005230 <nRF24_WriteReg>
			nRF24_WriteReg(nRF_CSN_Pin, nRF24_REG_EN_RXADDR, 0x01);                   //Enable RX addresses for pipe0
 8005578:	2201      	movs	r2, #1
 800557a:	2102      	movs	r1, #2
 800557c:	2008      	movs	r0, #8
 800557e:	f7ff fe57 	bl	8005230 <nRF24_WriteReg>
			break;
 8005582:	e00f      	b.n	80055a4 <nRF24_Module_Setup+0x184>
	    case Transmitter_Mode_noAA_noCRC:
			nRF24_WriteReg(nRF_CSN_Pin, nRF24_REG_CONFIG, 0x00);                      //PRIM_RX=0, PWR_UP=0, EN_CRC=0
 8005584:	2200      	movs	r2, #0
 8005586:	2100      	movs	r1, #0
 8005588:	2008      	movs	r0, #8
 800558a:	f7ff fe51 	bl	8005230 <nRF24_WriteReg>
			nRF24_WriteReg(nRF_CSN_Pin, nRF24_REG_EN_AA, 0x00);                       //Disable AA for all pipes
 800558e:	2200      	movs	r2, #0
 8005590:	2101      	movs	r1, #1
 8005592:	2008      	movs	r0, #8
 8005594:	f7ff fe4c 	bl	8005230 <nRF24_WriteReg>
			nRF24_WriteReg(nRF_CSN_Pin, nRF24_REG_EN_RXADDR, 0x01);                   //Enable RX addresses for pipe0
 8005598:	2201      	movs	r2, #1
 800559a:	2102      	movs	r1, #2
 800559c:	2008      	movs	r0, #8
 800559e:	f7ff fe47 	bl	8005230 <nRF24_WriteReg>
			break;
 80055a2:	46c0      	nop			; (mov r8, r8)
		}

		nRF24_WriteReg(nRF_CSN_Pin, nRF24_REG_SETUP_AW, 0x03);                        //5 Bytes Length Address
 80055a4:	2203      	movs	r2, #3
 80055a6:	2103      	movs	r1, #3
 80055a8:	2008      	movs	r0, #8
 80055aa:	f7ff fe41 	bl	8005230 <nRF24_WriteReg>
		nRF24_WriteReg(nRF_CSN_Pin, nRF24_REG_SETUP_RETR, 0x8A);                      //ARD=2000us, ARC=10
 80055ae:	228a      	movs	r2, #138	; 0x8a
 80055b0:	2104      	movs	r1, #4
 80055b2:	2008      	movs	r0, #8
 80055b4:	f7ff fe3c 	bl	8005230 <nRF24_WriteReg>
		nRF24_WriteReg(nRF_CSN_Pin, nRF24_REG_RF_CH, RF_Ch);                          //Set the Frequency Channel to 2
 80055b8:	1d3b      	adds	r3, r7, #4
 80055ba:	781b      	ldrb	r3, [r3, #0]
 80055bc:	001a      	movs	r2, r3
 80055be:	2105      	movs	r1, #5
 80055c0:	2008      	movs	r0, #8
 80055c2:	f7ff fe35 	bl	8005230 <nRF24_WriteReg>

		switch(RF_Setup)
 80055c6:	2334      	movs	r3, #52	; 0x34
 80055c8:	18fb      	adds	r3, r7, r3
 80055ca:	781b      	ldrb	r3, [r3, #0]
 80055cc:	2b07      	cmp	r3, #7
 80055ce:	d834      	bhi.n	800563a <nRF24_Module_Setup+0x21a>
 80055d0:	009a      	lsls	r2, r3, #2
 80055d2:	4b60      	ldr	r3, [pc, #384]	; (8005754 <nRF24_Module_Setup+0x334>)
 80055d4:	18d3      	adds	r3, r2, r3
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	469f      	mov	pc, r3
		{
	    case MBPS1_Minus18dBm:
	    	nRF24_WriteReg(nRF_CSN_Pin, nRF24_REG_RF_SETUP, 0x01);                    //-18dBm, 1MBPS, LNA_HCURR=1
 80055da:	2201      	movs	r2, #1
 80055dc:	2106      	movs	r1, #6
 80055de:	2008      	movs	r0, #8
 80055e0:	f7ff fe26 	bl	8005230 <nRF24_WriteReg>
	    	break;
 80055e4:	e029      	b.n	800563a <nRF24_Module_Setup+0x21a>
	    case MBPS1_Minus12dBm:
	    	nRF24_WriteReg(nRF_CSN_Pin, nRF24_REG_RF_SETUP, 0x03);                    //-12dBm, 1MBPS, LNA_HCURR=1
 80055e6:	2203      	movs	r2, #3
 80055e8:	2106      	movs	r1, #6
 80055ea:	2008      	movs	r0, #8
 80055ec:	f7ff fe20 	bl	8005230 <nRF24_WriteReg>
	    	break;
 80055f0:	e023      	b.n	800563a <nRF24_Module_Setup+0x21a>
	    case MBPS1_Minus6dBm:
	    	nRF24_WriteReg(nRF_CSN_Pin, nRF24_REG_RF_SETUP, 0x05);                    //-6dBm, 1MBPS, LNA_HCURR=1
 80055f2:	2205      	movs	r2, #5
 80055f4:	2106      	movs	r1, #6
 80055f6:	2008      	movs	r0, #8
 80055f8:	f7ff fe1a 	bl	8005230 <nRF24_WriteReg>
	    	break;
 80055fc:	e01d      	b.n	800563a <nRF24_Module_Setup+0x21a>
	    case MBPS1_0dBm:
	    	nRF24_WriteReg(nRF_CSN_Pin, nRF24_REG_RF_SETUP, 0x07);                    //0dBm, 1MBPS, LNA_HCURR=1
 80055fe:	2207      	movs	r2, #7
 8005600:	2106      	movs	r1, #6
 8005602:	2008      	movs	r0, #8
 8005604:	f7ff fe14 	bl	8005230 <nRF24_WriteReg>
	    	break;
 8005608:	e017      	b.n	800563a <nRF24_Module_Setup+0x21a>
	    case MBPS2_Minus18dBm:
	    	nRF24_WriteReg(nRF_CSN_Pin, nRF24_REG_RF_SETUP, 0x09);                    //-18dBm, 2MBPS, LNA_HCURR=1
 800560a:	2209      	movs	r2, #9
 800560c:	2106      	movs	r1, #6
 800560e:	2008      	movs	r0, #8
 8005610:	f7ff fe0e 	bl	8005230 <nRF24_WriteReg>
	    	break;
 8005614:	e011      	b.n	800563a <nRF24_Module_Setup+0x21a>
	    case MBPS2_Minus12dBm:
	    	nRF24_WriteReg(nRF_CSN_Pin, nRF24_REG_RF_SETUP, 0x0B);                    //-12dBm, 2MBPS, LNA_HCURR=1
 8005616:	220b      	movs	r2, #11
 8005618:	2106      	movs	r1, #6
 800561a:	2008      	movs	r0, #8
 800561c:	f7ff fe08 	bl	8005230 <nRF24_WriteReg>
	    	break;
 8005620:	e00b      	b.n	800563a <nRF24_Module_Setup+0x21a>
	    case MBPS2_Minus6dBm:
	    	nRF24_WriteReg(nRF_CSN_Pin, nRF24_REG_RF_SETUP, 0x0D);                    //-6dBm, 2MBPS, LNA_HCURR=1
 8005622:	220d      	movs	r2, #13
 8005624:	2106      	movs	r1, #6
 8005626:	2008      	movs	r0, #8
 8005628:	f7ff fe02 	bl	8005230 <nRF24_WriteReg>
	    	break;
 800562c:	e005      	b.n	800563a <nRF24_Module_Setup+0x21a>
	    case MBPS2_0dBm:
	    	nRF24_WriteReg(nRF_CSN_Pin, nRF24_REG_RF_SETUP, 0x0F);                    //0dBm, 2MBPS, LNA_HCURR=1
 800562e:	220f      	movs	r2, #15
 8005630:	2106      	movs	r1, #6
 8005632:	2008      	movs	r0, #8
 8005634:	f7ff fdfc 	bl	8005230 <nRF24_WriteReg>
	    	break;
 8005638:	46c0      	nop			; (mov r8, r8)
		}

		if((mode==Transmitter_Mode_AA)||(mode==Transmitter_Mode_noAA_CRC)||(mode==Transmitter_Mode_noAA_noCRC))
 800563a:	1d7b      	adds	r3, r7, #5
 800563c:	781b      	ldrb	r3, [r3, #0]
 800563e:	2b03      	cmp	r3, #3
 8005640:	d007      	beq.n	8005652 <nRF24_Module_Setup+0x232>
 8005642:	1d7b      	adds	r3, r7, #5
 8005644:	781b      	ldrb	r3, [r3, #0]
 8005646:	2b04      	cmp	r3, #4
 8005648:	d003      	beq.n	8005652 <nRF24_Module_Setup+0x232>
 800564a:	1d7b      	adds	r3, r7, #5
 800564c:	781b      	ldrb	r3, [r3, #0]
 800564e:	2b05      	cmp	r3, #5
 8005650:	d10c      	bne.n	800566c <nRF24_Module_Setup+0x24c>
		{
			nRF24_WriteMBReg(nRF_CSN_Pin, nRF24_REG_RX_ADDR_P0, Tx_Addr, 5);          //Set the Pipe0 address to {0x53, 0x52, 0x36, 0x34, 0x00}
 8005652:	683a      	ldr	r2, [r7, #0]
 8005654:	2305      	movs	r3, #5
 8005656:	210a      	movs	r1, #10
 8005658:	2008      	movs	r0, #8
 800565a:	f7ff fe1d 	bl	8005298 <nRF24_WriteMBReg>
			nRF24_WriteMBReg(nRF_CSN_Pin, nRF24_REG_TX_ADDR, Tx_Addr, 5);             //Set the TX address to {0x53, 0x52, 0x36, 0x34, 0x00}
 800565e:	683a      	ldr	r2, [r7, #0]
 8005660:	2305      	movs	r3, #5
 8005662:	2110      	movs	r1, #16
 8005664:	2008      	movs	r0, #8
 8005666:	f7ff fe17 	bl	8005298 <nRF24_WriteMBReg>
 800566a:	e03f      	b.n	80056ec <nRF24_Module_Setup+0x2cc>
		}
		else if((mode==Receiver_Mode_AA)||(mode==Receiver_Mode_noAA_CRC)||(mode==Receiver_Mode_noAA_noCRC))
 800566c:	1d7b      	adds	r3, r7, #5
 800566e:	781b      	ldrb	r3, [r3, #0]
 8005670:	2b00      	cmp	r3, #0
 8005672:	d007      	beq.n	8005684 <nRF24_Module_Setup+0x264>
 8005674:	1d7b      	adds	r3, r7, #5
 8005676:	781b      	ldrb	r3, [r3, #0]
 8005678:	2b01      	cmp	r3, #1
 800567a:	d003      	beq.n	8005684 <nRF24_Module_Setup+0x264>
 800567c:	1d7b      	adds	r3, r7, #5
 800567e:	781b      	ldrb	r3, [r3, #0]
 8005680:	2b02      	cmp	r3, #2
 8005682:	d133      	bne.n	80056ec <nRF24_Module_Setup+0x2cc>
		{
			nRF24_WriteMBReg(nRF_CSN_Pin, nRF24_REG_RX_ADDR_P0, rx_addr_p0, 5);       //Set the Pipe0 address
 8005684:	2314      	movs	r3, #20
 8005686:	18fa      	adds	r2, r7, r3
 8005688:	2305      	movs	r3, #5
 800568a:	210a      	movs	r1, #10
 800568c:	2008      	movs	r0, #8
 800568e:	f7ff fe03 	bl	8005298 <nRF24_WriteMBReg>
			nRF24_WriteMBReg(nRF_CSN_Pin, nRF24_REG_RX_ADDR_P1, rx_addr_p1, 5);       //Set the Pipe1 address
 8005692:	230c      	movs	r3, #12
 8005694:	18fa      	adds	r2, r7, r3
 8005696:	2305      	movs	r3, #5
 8005698:	210b      	movs	r1, #11
 800569a:	2008      	movs	r0, #8
 800569c:	f7ff fdfc 	bl	8005298 <nRF24_WriteMBReg>
			nRF24_WriteReg(nRF_CSN_Pin, nRF24_REG_RX_ADDR_P2, rx_addr_p2);            //Set the Pipe2 address
 80056a0:	231f      	movs	r3, #31
 80056a2:	18fb      	adds	r3, r7, r3
 80056a4:	781b      	ldrb	r3, [r3, #0]
 80056a6:	001a      	movs	r2, r3
 80056a8:	210c      	movs	r1, #12
 80056aa:	2008      	movs	r0, #8
 80056ac:	f7ff fdc0 	bl	8005230 <nRF24_WriteReg>
			nRF24_WriteReg(nRF_CSN_Pin, nRF24_REG_RX_ADDR_P3, rx_addr_p3);            //Set the Pipe3 address
 80056b0:	231e      	movs	r3, #30
 80056b2:	18fb      	adds	r3, r7, r3
 80056b4:	781b      	ldrb	r3, [r3, #0]
 80056b6:	001a      	movs	r2, r3
 80056b8:	210d      	movs	r1, #13
 80056ba:	2008      	movs	r0, #8
 80056bc:	f7ff fdb8 	bl	8005230 <nRF24_WriteReg>
			nRF24_WriteReg(nRF_CSN_Pin, nRF24_REG_RX_ADDR_P4, rx_addr_p4);            //Set the Pipe4 address
 80056c0:	231d      	movs	r3, #29
 80056c2:	18fb      	adds	r3, r7, r3
 80056c4:	781b      	ldrb	r3, [r3, #0]
 80056c6:	001a      	movs	r2, r3
 80056c8:	210e      	movs	r1, #14
 80056ca:	2008      	movs	r0, #8
 80056cc:	f7ff fdb0 	bl	8005230 <nRF24_WriteReg>
			nRF24_WriteReg(nRF_CSN_Pin, nRF24_REG_RX_ADDR_P5, rx_addr_p5);            //Set the Pipe5 address
 80056d0:	231c      	movs	r3, #28
 80056d2:	18fb      	adds	r3, r7, r3
 80056d4:	781b      	ldrb	r3, [r3, #0]
 80056d6:	001a      	movs	r2, r3
 80056d8:	210f      	movs	r1, #15
 80056da:	2008      	movs	r0, #8
 80056dc:	f7ff fda8 	bl	8005230 <nRF24_WriteReg>
			nRF24_WriteMBReg(nRF_CSN_Pin, nRF24_REG_TX_ADDR, Tx_Addr, 5);             //Set the TX address
 80056e0:	683a      	ldr	r2, [r7, #0]
 80056e2:	2305      	movs	r3, #5
 80056e4:	2110      	movs	r1, #16
 80056e6:	2008      	movs	r0, #8
 80056e8:	f7ff fdd6 	bl	8005298 <nRF24_WriteMBReg>
		}


		nRF24_WriteReg(nRF_CSN_Pin, nRF24_REG_RX_PW_P0, Payloadsize);                 //Set the Pipe0 Payload size
 80056ec:	2438      	movs	r4, #56	; 0x38
 80056ee:	193b      	adds	r3, r7, r4
 80056f0:	781b      	ldrb	r3, [r3, #0]
 80056f2:	001a      	movs	r2, r3
 80056f4:	2111      	movs	r1, #17
 80056f6:	2008      	movs	r0, #8
 80056f8:	f7ff fd9a 	bl	8005230 <nRF24_WriteReg>
		nRF24_WriteReg(nRF_CSN_Pin, nRF24_REG_RX_PW_P1, Payloadsize);                 //Set the Pipe1 Payload size
 80056fc:	193b      	adds	r3, r7, r4
 80056fe:	781b      	ldrb	r3, [r3, #0]
 8005700:	001a      	movs	r2, r3
 8005702:	2112      	movs	r1, #18
 8005704:	2008      	movs	r0, #8
 8005706:	f7ff fd93 	bl	8005230 <nRF24_WriteReg>
		nRF24_WriteReg(nRF_CSN_Pin, nRF24_REG_RX_PW_P2, Payloadsize);                 //Set the Pipe2 Payload size
 800570a:	193b      	adds	r3, r7, r4
 800570c:	781b      	ldrb	r3, [r3, #0]
 800570e:	001a      	movs	r2, r3
 8005710:	2113      	movs	r1, #19
 8005712:	2008      	movs	r0, #8
 8005714:	f7ff fd8c 	bl	8005230 <nRF24_WriteReg>
		nRF24_WriteReg(nRF_CSN_Pin, nRF24_REG_RX_PW_P3, Payloadsize);                 //Set the Pipe3 Payload size
 8005718:	193b      	adds	r3, r7, r4
 800571a:	781b      	ldrb	r3, [r3, #0]
 800571c:	001a      	movs	r2, r3
 800571e:	2114      	movs	r1, #20
 8005720:	2008      	movs	r0, #8
 8005722:	f7ff fd85 	bl	8005230 <nRF24_WriteReg>
		nRF24_WriteReg(nRF_CSN_Pin, nRF24_REG_RX_PW_P4, Payloadsize);                 //Set the Pipe4 Payload size
 8005726:	193b      	adds	r3, r7, r4
 8005728:	781b      	ldrb	r3, [r3, #0]
 800572a:	001a      	movs	r2, r3
 800572c:	2115      	movs	r1, #21
 800572e:	2008      	movs	r0, #8
 8005730:	f7ff fd7e 	bl	8005230 <nRF24_WriteReg>
		nRF24_WriteReg(nRF_CSN_Pin, nRF24_REG_RX_PW_P5, Payloadsize);                 //Set the Pipe5 Payload size
 8005734:	193b      	adds	r3, r7, r4
 8005736:	781b      	ldrb	r3, [r3, #0]
 8005738:	001a      	movs	r2, r3
 800573a:	2116      	movs	r1, #22
 800573c:	2008      	movs	r0, #8
 800573e:	f7ff fd77 	bl	8005230 <nRF24_WriteReg>
		break;
 8005742:	e000      	b.n	8005746 <nRF24_Module_Setup+0x326>
    default:
    	break;
 8005744:	46c0      	nop			; (mov r8, r8)
	}
}
 8005746:	46c0      	nop			; (mov r8, r8)
 8005748:	46bd      	mov	sp, r7
 800574a:	b009      	add	sp, #36	; 0x24
 800574c:	bd90      	pop	{r4, r7, pc}
 800574e:	46c0      	nop			; (mov r8, r8)
 8005750:	08006b14 	.word	0x08006b14
 8005754:	08006b2c 	.word	0x08006b2c

08005758 <nRF24_Transmit>:


uint8_t nRF24_Transmit(uint16_t Sel_CSN_Pin, uint8_t *data, uint8_t Payload_Size)
{
 8005758:	b5f0      	push	{r4, r5, r6, r7, lr}
 800575a:	b085      	sub	sp, #20
 800575c:	af00      	add	r7, sp, #0
 800575e:	6039      	str	r1, [r7, #0]
 8005760:	0011      	movs	r1, r2
 8005762:	1dbb      	adds	r3, r7, #6
 8005764:	1c02      	adds	r2, r0, #0
 8005766:	801a      	strh	r2, [r3, #0]
 8005768:	1d7b      	adds	r3, r7, #5
 800576a:	1c0a      	adds	r2, r1, #0
 800576c:	701a      	strb	r2, [r3, #0]
	uint8_t cmdtosend = 0;
 800576e:	250d      	movs	r5, #13
 8005770:	197b      	adds	r3, r7, r5
 8005772:	2200      	movs	r2, #0
 8005774:	701a      	strb	r2, [r3, #0]
	uint8_t STATUS_Register = 0;
 8005776:	240f      	movs	r4, #15
 8005778:	193b      	adds	r3, r7, r4
 800577a:	2200      	movs	r2, #0
 800577c:	701a      	strb	r2, [r3, #0]
    uint8_t Tr_Success = 0;
 800577e:	260e      	movs	r6, #14
 8005780:	19bb      	adds	r3, r7, r6
 8005782:	2200      	movs	r2, #0
 8005784:	701a      	strb	r2, [r3, #0]
	switch(Sel_CSN_Pin)
 8005786:	1dbb      	adds	r3, r7, #6
 8005788:	881b      	ldrh	r3, [r3, #0]
 800578a:	2b08      	cmp	r3, #8
 800578c:	d162      	bne.n	8005854 <nRF24_Transmit+0xfc>
	{
	case nRF_CSN_Pin:

		nRF24_CSN_Select(nRF_CSN_Pin);                                                   //Pull CSN pin low to select the module1 on SPI BUS
 800578e:	2008      	movs	r0, #8
 8005790:	f7ff fcf0 	bl	8005174 <nRF24_CSN_Select>

		cmdtosend = nRF24_CMD_W_TX_PAYLOAD;                                                //Payload transmit command
 8005794:	197b      	adds	r3, r7, r5
 8005796:	22a0      	movs	r2, #160	; 0xa0
 8005798:	701a      	strb	r2, [r3, #0]
		HAL_SPI_Transmit(&hspi1, &cmdtosend, 1, 100);
 800579a:	1979      	adds	r1, r7, r5
 800579c:	4830      	ldr	r0, [pc, #192]	; (8005860 <nRF24_Transmit+0x108>)
 800579e:	2364      	movs	r3, #100	; 0x64
 80057a0:	2201      	movs	r2, #1
 80057a2:	f7fe f8c3 	bl	800392c <HAL_SPI_Transmit>
		HAL_SPI_Transmit(&hspi1, data, Payload_Size, 100);
 80057a6:	1d7b      	adds	r3, r7, #5
 80057a8:	781b      	ldrb	r3, [r3, #0]
 80057aa:	b29a      	uxth	r2, r3
 80057ac:	6839      	ldr	r1, [r7, #0]
 80057ae:	482c      	ldr	r0, [pc, #176]	; (8005860 <nRF24_Transmit+0x108>)
 80057b0:	2364      	movs	r3, #100	; 0x64
 80057b2:	f7fe f8bb 	bl	800392c <HAL_SPI_Transmit>

		nRF24_Power(nRF_CSN_Pin,Power_Up);
 80057b6:	2101      	movs	r1, #1
 80057b8:	2008      	movs	r0, #8
 80057ba:	f000 f8c7 	bl	800594c <nRF24_Power>
		HAL_Delay(1);
 80057be:	2001      	movs	r0, #1
 80057c0:	f7fc fa36 	bl	8001c30 <HAL_Delay>
		nRF24_CE_Enable(nRF_CE_Pin);                                                    //Enable the module1
 80057c4:	2004      	movs	r0, #4
 80057c6:	f7ff fd03 	bl	80051d0 <nRF24_CE_Enable>
		HAL_Delay(1);
 80057ca:	2001      	movs	r0, #1
 80057cc:	f7fc fa30 	bl	8001c30 <HAL_Delay>
		nRF24_CE_Disable(nRF_CE_Pin);                                   //Disable the chip
 80057d0:	2004      	movs	r0, #4
 80057d2:	f7ff fd15 	bl	8005200 <nRF24_CE_Disable>
		HAL_Delay(1);
 80057d6:	2001      	movs	r0, #1
 80057d8:	f7fc fa2a 	bl	8001c30 <HAL_Delay>
		nRF24_Power(nRF_CSN_Pin,Power_Down);
 80057dc:	2100      	movs	r1, #0
 80057de:	2008      	movs	r0, #8
 80057e0:	f000 f8b4 	bl	800594c <nRF24_Power>

		STATUS_Register = nRF24_ReadReg(nRF_CSN_Pin, nRF24_REG_STATUS);             //Reading the STATUS register
 80057e4:	0025      	movs	r5, r4
 80057e6:	193c      	adds	r4, r7, r4
 80057e8:	2107      	movs	r1, #7
 80057ea:	2008      	movs	r0, #8
 80057ec:	f7ff fd8e 	bl	800530c <nRF24_ReadReg>
 80057f0:	0003      	movs	r3, r0
 80057f2:	7023      	strb	r3, [r4, #0]
		if((STATUS_Register & (1<<5)) != 0)                                  //check TX_EMPTY flag to be 1 along with Reserved pin to be 0
 80057f4:	0028      	movs	r0, r5
 80057f6:	183b      	adds	r3, r7, r0
 80057f8:	781b      	ldrb	r3, [r3, #0]
 80057fa:	2220      	movs	r2, #32
 80057fc:	4013      	ands	r3, r2
 80057fe:	d00f      	beq.n	8005820 <nRF24_Transmit+0xc8>
		{
#ifndef Debug
			HAL_UART_Transmit(&hlpuart1, (uint8_t *)"Data Transmitted Successfully\n",30,100);
#endif
			//Remove the interrupt pin
			STATUS_Register = STATUS_Register | (1<<5);     //Write 1 to TX_DS to reset it
 8005800:	183b      	adds	r3, r7, r0
 8005802:	183a      	adds	r2, r7, r0
 8005804:	7812      	ldrb	r2, [r2, #0]
 8005806:	2120      	movs	r1, #32
 8005808:	430a      	orrs	r2, r1
 800580a:	701a      	strb	r2, [r3, #0]
			nRF24_WriteReg(nRF_CSN_Pin, nRF24_REG_STATUS, STATUS_Register);
 800580c:	183b      	adds	r3, r7, r0
 800580e:	781b      	ldrb	r3, [r3, #0]
 8005810:	001a      	movs	r2, r3
 8005812:	2107      	movs	r1, #7
 8005814:	2008      	movs	r0, #8
 8005816:	f7ff fd0b 	bl	8005230 <nRF24_WriteReg>

			Tr_Success = 1;
 800581a:	19bb      	adds	r3, r7, r6
 800581c:	2201      	movs	r2, #1
 800581e:	701a      	strb	r2, [r3, #0]
			}
		if((STATUS_Register & (1<<4)) != 0)                                  //check TX_EMPTY flag to be 1 along with Reserved pin to be 0
 8005820:	200f      	movs	r0, #15
 8005822:	183b      	adds	r3, r7, r0
 8005824:	781b      	ldrb	r3, [r3, #0]
 8005826:	2210      	movs	r2, #16
 8005828:	4013      	ands	r3, r2
 800582a:	d00c      	beq.n	8005846 <nRF24_Transmit+0xee>
		{
#ifndef Debug
			HAL_UART_Transmit(&hlpuart1, (uint8_t *)"Maximum Retry Reached\n",22,100);
#endif
			//Remove the interrupt pin
			STATUS_Register = STATUS_Register | (1<<4);   //Write 1 to MAX_RT to reset it
 800582c:	183b      	adds	r3, r7, r0
 800582e:	183a      	adds	r2, r7, r0
 8005830:	7812      	ldrb	r2, [r2, #0]
 8005832:	2110      	movs	r1, #16
 8005834:	430a      	orrs	r2, r1
 8005836:	701a      	strb	r2, [r3, #0]
			nRF24_WriteReg(nRF_CSN_Pin, nRF24_REG_STATUS, STATUS_Register);
 8005838:	183b      	adds	r3, r7, r0
 800583a:	781b      	ldrb	r3, [r3, #0]
 800583c:	001a      	movs	r2, r3
 800583e:	2107      	movs	r1, #7
 8005840:	2008      	movs	r0, #8
 8005842:	f7ff fcf5 	bl	8005230 <nRF24_WriteReg>
		}

	    nRF24_CSN_UnSelect(nRF_CSN_Pin);
 8005846:	2008      	movs	r0, #8
 8005848:	f7ff fcab 	bl	80051a2 <nRF24_CSN_UnSelect>
	    return Tr_Success;
 800584c:	230e      	movs	r3, #14
 800584e:	18fb      	adds	r3, r7, r3
 8005850:	781b      	ldrb	r3, [r3, #0]
 8005852:	e000      	b.n	8005856 <nRF24_Transmit+0xfe>

	default:
		return 0;
 8005854:	2300      	movs	r3, #0
	}
}
 8005856:	0018      	movs	r0, r3
 8005858:	46bd      	mov	sp, r7
 800585a:	b005      	add	sp, #20
 800585c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800585e:	46c0      	nop			; (mov r8, r8)
 8005860:	20000180 	.word	0x20000180

08005864 <nRF24_ReadAllRegs>:
}


// Read all the Register data
void nRF24_ReadAllRegs (uint16_t Sel_CSN_Pin, uint8_t *data)
{
 8005864:	b590      	push	{r4, r7, lr}
 8005866:	b085      	sub	sp, #20
 8005868:	af00      	add	r7, sp, #0
 800586a:	0002      	movs	r2, r0
 800586c:	6039      	str	r1, [r7, #0]
 800586e:	1dbb      	adds	r3, r7, #6
 8005870:	801a      	strh	r2, [r3, #0]
	switch(Sel_CSN_Pin)
 8005872:	1dbb      	adds	r3, r7, #6
 8005874:	881b      	ldrh	r3, [r3, #0]
 8005876:	2b08      	cmp	r3, #8
 8005878:	d163      	bne.n	8005942 <nRF24_ReadAllRegs+0xde>
	{

	case nRF_CSN_Pin:

		for (int i=0; i<10; i++)
 800587a:	2300      	movs	r3, #0
 800587c:	60fb      	str	r3, [r7, #12]
 800587e:	e00c      	b.n	800589a <nRF24_ReadAllRegs+0x36>
		{
			data[i] = nRF24_ReadReg(nRF_CSN_Pin, i);
 8005880:	68fb      	ldr	r3, [r7, #12]
 8005882:	b2d9      	uxtb	r1, r3
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	683a      	ldr	r2, [r7, #0]
 8005888:	18d4      	adds	r4, r2, r3
 800588a:	2008      	movs	r0, #8
 800588c:	f7ff fd3e 	bl	800530c <nRF24_ReadReg>
 8005890:	0003      	movs	r3, r0
 8005892:	7023      	strb	r3, [r4, #0]
		for (int i=0; i<10; i++)
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	3301      	adds	r3, #1
 8005898:	60fb      	str	r3, [r7, #12]
 800589a:	68fb      	ldr	r3, [r7, #12]
 800589c:	2b09      	cmp	r3, #9
 800589e:	ddef      	ble.n	8005880 <nRF24_ReadAllRegs+0x1c>
		}

		nRF24_ReadMBReg(nRF_CSN_Pin, nRF24_REG_RX_ADDR_P0, &data[10], 5);
 80058a0:	683b      	ldr	r3, [r7, #0]
 80058a2:	330a      	adds	r3, #10
 80058a4:	001a      	movs	r2, r3
 80058a6:	2305      	movs	r3, #5
 80058a8:	210a      	movs	r1, #10
 80058aa:	2008      	movs	r0, #8
 80058ac:	f7ff fd5e 	bl	800536c <nRF24_ReadMBReg>

		nRF24_ReadMBReg(nRF_CSN_Pin, nRF24_REG_RX_ADDR_P1, &data[15], 5);
 80058b0:	683b      	ldr	r3, [r7, #0]
 80058b2:	330f      	adds	r3, #15
 80058b4:	001a      	movs	r2, r3
 80058b6:	2305      	movs	r3, #5
 80058b8:	210b      	movs	r1, #11
 80058ba:	2008      	movs	r0, #8
 80058bc:	f7ff fd56 	bl	800536c <nRF24_ReadMBReg>

		data[20] = nRF24_ReadReg(nRF_CSN_Pin, nRF24_REG_RX_ADDR_P2);
 80058c0:	683b      	ldr	r3, [r7, #0]
 80058c2:	3314      	adds	r3, #20
 80058c4:	001c      	movs	r4, r3
 80058c6:	210c      	movs	r1, #12
 80058c8:	2008      	movs	r0, #8
 80058ca:	f7ff fd1f 	bl	800530c <nRF24_ReadReg>
 80058ce:	0003      	movs	r3, r0
 80058d0:	7023      	strb	r3, [r4, #0]
		data[20] = nRF24_ReadReg(nRF_CSN_Pin, nRF24_REG_RX_ADDR_P3);
 80058d2:	683b      	ldr	r3, [r7, #0]
 80058d4:	3314      	adds	r3, #20
 80058d6:	001c      	movs	r4, r3
 80058d8:	210d      	movs	r1, #13
 80058da:	2008      	movs	r0, #8
 80058dc:	f7ff fd16 	bl	800530c <nRF24_ReadReg>
 80058e0:	0003      	movs	r3, r0
 80058e2:	7023      	strb	r3, [r4, #0]
		data[20] = nRF24_ReadReg(nRF_CSN_Pin, nRF24_REG_RX_ADDR_P4);
 80058e4:	683b      	ldr	r3, [r7, #0]
 80058e6:	3314      	adds	r3, #20
 80058e8:	001c      	movs	r4, r3
 80058ea:	210e      	movs	r1, #14
 80058ec:	2008      	movs	r0, #8
 80058ee:	f7ff fd0d 	bl	800530c <nRF24_ReadReg>
 80058f2:	0003      	movs	r3, r0
 80058f4:	7023      	strb	r3, [r4, #0]
		data[20] = nRF24_ReadReg(nRF_CSN_Pin, nRF24_REG_RX_ADDR_P5);
 80058f6:	683b      	ldr	r3, [r7, #0]
 80058f8:	3314      	adds	r3, #20
 80058fa:	001c      	movs	r4, r3
 80058fc:	210f      	movs	r1, #15
 80058fe:	2008      	movs	r0, #8
 8005900:	f7ff fd04 	bl	800530c <nRF24_ReadReg>
 8005904:	0003      	movs	r3, r0
 8005906:	7023      	strb	r3, [r4, #0]

		nRF24_ReadMBReg(nRF_CSN_Pin, nRF24_REG_TX_ADDR, &data[24], 5);
 8005908:	683b      	ldr	r3, [r7, #0]
 800590a:	3318      	adds	r3, #24
 800590c:	001a      	movs	r2, r3
 800590e:	2305      	movs	r3, #5
 8005910:	2110      	movs	r1, #16
 8005912:	2008      	movs	r0, #8
 8005914:	f7ff fd2a 	bl	800536c <nRF24_ReadMBReg>

		for (int i=29; i<38; i++)
 8005918:	231d      	movs	r3, #29
 800591a:	60bb      	str	r3, [r7, #8]
 800591c:	e00e      	b.n	800593c <nRF24_ReadAllRegs+0xd8>
		{
			data[i] = nRF24_ReadReg(nRF_CSN_Pin, (i-12));
 800591e:	68bb      	ldr	r3, [r7, #8]
 8005920:	b2db      	uxtb	r3, r3
 8005922:	3b0c      	subs	r3, #12
 8005924:	b2d9      	uxtb	r1, r3
 8005926:	68bb      	ldr	r3, [r7, #8]
 8005928:	683a      	ldr	r2, [r7, #0]
 800592a:	18d4      	adds	r4, r2, r3
 800592c:	2008      	movs	r0, #8
 800592e:	f7ff fced 	bl	800530c <nRF24_ReadReg>
 8005932:	0003      	movs	r3, r0
 8005934:	7023      	strb	r3, [r4, #0]
		for (int i=29; i<38; i++)
 8005936:	68bb      	ldr	r3, [r7, #8]
 8005938:	3301      	adds	r3, #1
 800593a:	60bb      	str	r3, [r7, #8]
 800593c:	68bb      	ldr	r3, [r7, #8]
 800593e:	2b25      	cmp	r3, #37	; 0x25
 8005940:	dded      	ble.n	800591e <nRF24_ReadAllRegs+0xba>
		}

	default:
		break;
 8005942:	46c0      	nop			; (mov r8, r8)

	}
}
 8005944:	46c0      	nop			; (mov r8, r8)
 8005946:	46bd      	mov	sp, r7
 8005948:	b005      	add	sp, #20
 800594a:	bd90      	pop	{r4, r7, pc}

0800594c <nRF24_Power>:

void nRF24_Power(uint16_t Sel_CSN_Pin, uint8_t On_Off_Cmd)
{
 800594c:	b5b0      	push	{r4, r5, r7, lr}
 800594e:	b084      	sub	sp, #16
 8005950:	af00      	add	r7, sp, #0
 8005952:	0002      	movs	r2, r0
 8005954:	1dbb      	adds	r3, r7, #6
 8005956:	801a      	strh	r2, [r3, #0]
 8005958:	1d7b      	adds	r3, r7, #5
 800595a:	1c0a      	adds	r2, r1, #0
 800595c:	701a      	strb	r2, [r3, #0]
	uint8_t Temp_Reg;

	switch(Sel_CSN_Pin)
 800595e:	1dbb      	adds	r3, r7, #6
 8005960:	881b      	ldrh	r3, [r3, #0]
 8005962:	2b08      	cmp	r3, #8
 8005964:	d12c      	bne.n	80059c0 <nRF24_Power+0x74>
	{
	case nRF_CSN_Pin:
		Temp_Reg = nRF24_ReadReg(nRF_CSN_Pin, nRF24_REG_CONFIG);
 8005966:	250f      	movs	r5, #15
 8005968:	197c      	adds	r4, r7, r5
 800596a:	2100      	movs	r1, #0
 800596c:	2008      	movs	r0, #8
 800596e:	f7ff fccd 	bl	800530c <nRF24_ReadReg>
 8005972:	0003      	movs	r3, r0
 8005974:	7023      	strb	r3, [r4, #0]

		if(On_Off_Cmd == 1)
 8005976:	1d7b      	adds	r3, r7, #5
 8005978:	781b      	ldrb	r3, [r3, #0]
 800597a:	2b01      	cmp	r3, #1
 800597c:	d10d      	bne.n	800599a <nRF24_Power+0x4e>
		{
			Temp_Reg = Temp_Reg | (1<<1);
 800597e:	197b      	adds	r3, r7, r5
 8005980:	197a      	adds	r2, r7, r5
 8005982:	7812      	ldrb	r2, [r2, #0]
 8005984:	2102      	movs	r1, #2
 8005986:	430a      	orrs	r2, r1
 8005988:	701a      	strb	r2, [r3, #0]
			nRF24_WriteReg(nRF_CSN_Pin, nRF24_REG_CONFIG, Temp_Reg);
 800598a:	197b      	adds	r3, r7, r5
 800598c:	781b      	ldrb	r3, [r3, #0]
 800598e:	001a      	movs	r2, r3
 8005990:	2100      	movs	r1, #0
 8005992:	2008      	movs	r0, #8
 8005994:	f7ff fc4c 	bl	8005230 <nRF24_WriteReg>
		else if(On_Off_Cmd == 0)
		{
			Temp_Reg = Temp_Reg & 0x7D;
			nRF24_WriteReg(nRF_CSN_Pin, nRF24_REG_CONFIG, Temp_Reg);
		}
		break;
 8005998:	e014      	b.n	80059c4 <nRF24_Power+0x78>
		else if(On_Off_Cmd == 0)
 800599a:	1d7b      	adds	r3, r7, #5
 800599c:	781b      	ldrb	r3, [r3, #0]
 800599e:	2b00      	cmp	r3, #0
 80059a0:	d110      	bne.n	80059c4 <nRF24_Power+0x78>
			Temp_Reg = Temp_Reg & 0x7D;
 80059a2:	200f      	movs	r0, #15
 80059a4:	183b      	adds	r3, r7, r0
 80059a6:	183a      	adds	r2, r7, r0
 80059a8:	7812      	ldrb	r2, [r2, #0]
 80059aa:	217d      	movs	r1, #125	; 0x7d
 80059ac:	400a      	ands	r2, r1
 80059ae:	701a      	strb	r2, [r3, #0]
			nRF24_WriteReg(nRF_CSN_Pin, nRF24_REG_CONFIG, Temp_Reg);
 80059b0:	183b      	adds	r3, r7, r0
 80059b2:	781b      	ldrb	r3, [r3, #0]
 80059b4:	001a      	movs	r2, r3
 80059b6:	2100      	movs	r1, #0
 80059b8:	2008      	movs	r0, #8
 80059ba:	f7ff fc39 	bl	8005230 <nRF24_WriteReg>
		break;
 80059be:	e001      	b.n	80059c4 <nRF24_Power+0x78>
	default:
		break;
 80059c0:	46c0      	nop			; (mov r8, r8)
 80059c2:	e000      	b.n	80059c6 <nRF24_Power+0x7a>
		break;
 80059c4:	46c0      	nop			; (mov r8, r8)
	}
}
 80059c6:	46c0      	nop			; (mov r8, r8)
 80059c8:	46bd      	mov	sp, r7
 80059ca:	b004      	add	sp, #16
 80059cc:	bdb0      	pop	{r4, r5, r7, pc}
	...

080059d0 <nRF24_Register_Display>:

}


void nRF24_Register_Display(uint16_t Sel_CSN_Pin)
{
 80059d0:	b590      	push	{r4, r7, lr}
 80059d2:	b08d      	sub	sp, #52	; 0x34
 80059d4:	af00      	add	r7, sp, #0
 80059d6:	0002      	movs	r2, r0
 80059d8:	1dbb      	adds	r3, r7, #6
 80059da:	801a      	strh	r2, [r3, #0]
	uint8_t Reg_Data[40];

	switch(Sel_CSN_Pin)
 80059dc:	1dbb      	adds	r3, r7, #6
 80059de:	881b      	ldrh	r3, [r3, #0]
 80059e0:	2b08      	cmp	r3, #8
 80059e2:	d114      	bne.n	8005a0e <nRF24_Register_Display+0x3e>
	{
	case nRF_CSN_Pin:
		nRF24_ReadAllRegs(nRF_CSN_Pin, Reg_Data);
 80059e4:	2308      	movs	r3, #8
 80059e6:	18fb      	adds	r3, r7, r3
 80059e8:	0019      	movs	r1, r3
 80059ea:	2008      	movs	r0, #8
 80059ec:	f7ff ff3a 	bl	8005864 <nRF24_ReadAllRegs>
		HAL_UART_Transmit(&hlpuart1, (uint8_t*)"Module1 Registers\n",18, HAL_MAX_DELAY);
 80059f0:	2301      	movs	r3, #1
 80059f2:	425b      	negs	r3, r3
 80059f4:	49b6      	ldr	r1, [pc, #728]	; (8005cd0 <nRF24_Register_Display+0x300>)
 80059f6:	48b7      	ldr	r0, [pc, #732]	; (8005cd4 <nRF24_Register_Display+0x304>)
 80059f8:	2212      	movs	r2, #18
 80059fa:	f7fe fe6d 	bl	80046d8 <HAL_UART_Transmit>
		HAL_UART_Transmit(&hlpuart1, (uint8_t*)"******************\n",19, HAL_MAX_DELAY);
 80059fe:	2301      	movs	r3, #1
 8005a00:	425b      	negs	r3, r3
 8005a02:	49b5      	ldr	r1, [pc, #724]	; (8005cd8 <nRF24_Register_Display+0x308>)
 8005a04:	48b3      	ldr	r0, [pc, #716]	; (8005cd4 <nRF24_Register_Display+0x304>)
 8005a06:	2213      	movs	r2, #19
 8005a08:	f7fe fe66 	bl	80046d8 <HAL_UART_Transmit>
		break;
 8005a0c:	e000      	b.n	8005a10 <nRF24_Register_Display+0x40>
	default:
		break;
 8005a0e:	46c0      	nop			; (mov r8, r8)
	}

		HAL_UART_Transmit(&hlpuart1, (uint8_t*)"CONFIG:",7, HAL_MAX_DELAY);
 8005a10:	2301      	movs	r3, #1
 8005a12:	425b      	negs	r3, r3
 8005a14:	49b1      	ldr	r1, [pc, #708]	; (8005cdc <nRF24_Register_Display+0x30c>)
 8005a16:	48af      	ldr	r0, [pc, #700]	; (8005cd4 <nRF24_Register_Display+0x304>)
 8005a18:	2207      	movs	r2, #7
 8005a1a:	f7fe fe5d 	bl	80046d8 <HAL_UART_Transmit>
		nRF24_sendRegisterValue(Reg_Data[0]);
 8005a1e:	2408      	movs	r4, #8
 8005a20:	193b      	adds	r3, r7, r4
 8005a22:	781b      	ldrb	r3, [r3, #0]
 8005a24:	0018      	movs	r0, r3
 8005a26:	f000 f989 	bl	8005d3c <nRF24_sendRegisterValue>
		HAL_UART_Transmit(&hlpuart1, (uint8_t*)"EN_AA_reg:",10, HAL_MAX_DELAY);
 8005a2a:	2301      	movs	r3, #1
 8005a2c:	425b      	negs	r3, r3
 8005a2e:	49ac      	ldr	r1, [pc, #688]	; (8005ce0 <nRF24_Register_Display+0x310>)
 8005a30:	48a8      	ldr	r0, [pc, #672]	; (8005cd4 <nRF24_Register_Display+0x304>)
 8005a32:	220a      	movs	r2, #10
 8005a34:	f7fe fe50 	bl	80046d8 <HAL_UART_Transmit>
		nRF24_sendRegisterValue(Reg_Data[1]);
 8005a38:	193b      	adds	r3, r7, r4
 8005a3a:	785b      	ldrb	r3, [r3, #1]
 8005a3c:	0018      	movs	r0, r3
 8005a3e:	f000 f97d 	bl	8005d3c <nRF24_sendRegisterValue>
		HAL_UART_Transmit(&hlpuart1, (uint8_t*)"EN_RXADR_reg:",13, HAL_MAX_DELAY);
 8005a42:	2301      	movs	r3, #1
 8005a44:	425b      	negs	r3, r3
 8005a46:	49a7      	ldr	r1, [pc, #668]	; (8005ce4 <nRF24_Register_Display+0x314>)
 8005a48:	48a2      	ldr	r0, [pc, #648]	; (8005cd4 <nRF24_Register_Display+0x304>)
 8005a4a:	220d      	movs	r2, #13
 8005a4c:	f7fe fe44 	bl	80046d8 <HAL_UART_Transmit>
		nRF24_sendRegisterValue(Reg_Data[2]);
 8005a50:	193b      	adds	r3, r7, r4
 8005a52:	789b      	ldrb	r3, [r3, #2]
 8005a54:	0018      	movs	r0, r3
 8005a56:	f000 f971 	bl	8005d3c <nRF24_sendRegisterValue>
		HAL_UART_Transmit(&hlpuart1, (uint8_t*)"SETUP_AW_reg:",13, HAL_MAX_DELAY);
 8005a5a:	2301      	movs	r3, #1
 8005a5c:	425b      	negs	r3, r3
 8005a5e:	49a2      	ldr	r1, [pc, #648]	; (8005ce8 <nRF24_Register_Display+0x318>)
 8005a60:	489c      	ldr	r0, [pc, #624]	; (8005cd4 <nRF24_Register_Display+0x304>)
 8005a62:	220d      	movs	r2, #13
 8005a64:	f7fe fe38 	bl	80046d8 <HAL_UART_Transmit>
		nRF24_sendRegisterValue(Reg_Data[3]);
 8005a68:	193b      	adds	r3, r7, r4
 8005a6a:	78db      	ldrb	r3, [r3, #3]
 8005a6c:	0018      	movs	r0, r3
 8005a6e:	f000 f965 	bl	8005d3c <nRF24_sendRegisterValue>
		HAL_UART_Transmit(&hlpuart1, (uint8_t*)"SETUP_RETR_reg:",15, HAL_MAX_DELAY);
 8005a72:	2301      	movs	r3, #1
 8005a74:	425b      	negs	r3, r3
 8005a76:	499d      	ldr	r1, [pc, #628]	; (8005cec <nRF24_Register_Display+0x31c>)
 8005a78:	4896      	ldr	r0, [pc, #600]	; (8005cd4 <nRF24_Register_Display+0x304>)
 8005a7a:	220f      	movs	r2, #15
 8005a7c:	f7fe fe2c 	bl	80046d8 <HAL_UART_Transmit>
		nRF24_sendRegisterValue(Reg_Data[4]);
 8005a80:	193b      	adds	r3, r7, r4
 8005a82:	791b      	ldrb	r3, [r3, #4]
 8005a84:	0018      	movs	r0, r3
 8005a86:	f000 f959 	bl	8005d3c <nRF24_sendRegisterValue>
		HAL_UART_Transmit(&hlpuart1, (uint8_t*)"RF_CH_reg:",10, HAL_MAX_DELAY);
 8005a8a:	2301      	movs	r3, #1
 8005a8c:	425b      	negs	r3, r3
 8005a8e:	4998      	ldr	r1, [pc, #608]	; (8005cf0 <nRF24_Register_Display+0x320>)
 8005a90:	4890      	ldr	r0, [pc, #576]	; (8005cd4 <nRF24_Register_Display+0x304>)
 8005a92:	220a      	movs	r2, #10
 8005a94:	f7fe fe20 	bl	80046d8 <HAL_UART_Transmit>
		nRF24_sendRegisterValue(Reg_Data[5]);
 8005a98:	193b      	adds	r3, r7, r4
 8005a9a:	795b      	ldrb	r3, [r3, #5]
 8005a9c:	0018      	movs	r0, r3
 8005a9e:	f000 f94d 	bl	8005d3c <nRF24_sendRegisterValue>
		HAL_UART_Transmit(&hlpuart1, (uint8_t*)"RF_SETUP_reg:",13, HAL_MAX_DELAY);
 8005aa2:	2301      	movs	r3, #1
 8005aa4:	425b      	negs	r3, r3
 8005aa6:	4993      	ldr	r1, [pc, #588]	; (8005cf4 <nRF24_Register_Display+0x324>)
 8005aa8:	488a      	ldr	r0, [pc, #552]	; (8005cd4 <nRF24_Register_Display+0x304>)
 8005aaa:	220d      	movs	r2, #13
 8005aac:	f7fe fe14 	bl	80046d8 <HAL_UART_Transmit>
		nRF24_sendRegisterValue(Reg_Data[6]);
 8005ab0:	193b      	adds	r3, r7, r4
 8005ab2:	799b      	ldrb	r3, [r3, #6]
 8005ab4:	0018      	movs	r0, r3
 8005ab6:	f000 f941 	bl	8005d3c <nRF24_sendRegisterValue>
		HAL_UART_Transmit(&hlpuart1, (uint8_t*)"RF_STATUS_reg:",14, HAL_MAX_DELAY);
 8005aba:	2301      	movs	r3, #1
 8005abc:	425b      	negs	r3, r3
 8005abe:	498e      	ldr	r1, [pc, #568]	; (8005cf8 <nRF24_Register_Display+0x328>)
 8005ac0:	4884      	ldr	r0, [pc, #528]	; (8005cd4 <nRF24_Register_Display+0x304>)
 8005ac2:	220e      	movs	r2, #14
 8005ac4:	f7fe fe08 	bl	80046d8 <HAL_UART_Transmit>
		nRF24_sendRegisterValue(Reg_Data[7]);
 8005ac8:	193b      	adds	r3, r7, r4
 8005aca:	79db      	ldrb	r3, [r3, #7]
 8005acc:	0018      	movs	r0, r3
 8005ace:	f000 f935 	bl	8005d3c <nRF24_sendRegisterValue>
		HAL_UART_Transmit(&hlpuart1, (uint8_t*)"OBSERVE_TX_reg:",15, HAL_MAX_DELAY);
 8005ad2:	2301      	movs	r3, #1
 8005ad4:	425b      	negs	r3, r3
 8005ad6:	4989      	ldr	r1, [pc, #548]	; (8005cfc <nRF24_Register_Display+0x32c>)
 8005ad8:	487e      	ldr	r0, [pc, #504]	; (8005cd4 <nRF24_Register_Display+0x304>)
 8005ada:	220f      	movs	r2, #15
 8005adc:	f7fe fdfc 	bl	80046d8 <HAL_UART_Transmit>
		nRF24_sendRegisterValue(Reg_Data[8]);
 8005ae0:	193b      	adds	r3, r7, r4
 8005ae2:	7a1b      	ldrb	r3, [r3, #8]
 8005ae4:	0018      	movs	r0, r3
 8005ae6:	f000 f929 	bl	8005d3c <nRF24_sendRegisterValue>
		HAL_UART_Transmit(&hlpuart1, (uint8_t*)"RX_ADR_P0_reg:\n",15, HAL_MAX_DELAY);
 8005aea:	2301      	movs	r3, #1
 8005aec:	425b      	negs	r3, r3
 8005aee:	4984      	ldr	r1, [pc, #528]	; (8005d00 <nRF24_Register_Display+0x330>)
 8005af0:	4878      	ldr	r0, [pc, #480]	; (8005cd4 <nRF24_Register_Display+0x304>)
 8005af2:	220f      	movs	r2, #15
 8005af4:	f7fe fdf0 	bl	80046d8 <HAL_UART_Transmit>
		nRF24_sendRegisterValue(Reg_Data[10]);
 8005af8:	193b      	adds	r3, r7, r4
 8005afa:	7a9b      	ldrb	r3, [r3, #10]
 8005afc:	0018      	movs	r0, r3
 8005afe:	f000 f91d 	bl	8005d3c <nRF24_sendRegisterValue>
		nRF24_sendRegisterValue(Reg_Data[11]);
 8005b02:	193b      	adds	r3, r7, r4
 8005b04:	7adb      	ldrb	r3, [r3, #11]
 8005b06:	0018      	movs	r0, r3
 8005b08:	f000 f918 	bl	8005d3c <nRF24_sendRegisterValue>
		nRF24_sendRegisterValue(Reg_Data[12]);
 8005b0c:	193b      	adds	r3, r7, r4
 8005b0e:	7b1b      	ldrb	r3, [r3, #12]
 8005b10:	0018      	movs	r0, r3
 8005b12:	f000 f913 	bl	8005d3c <nRF24_sendRegisterValue>
		nRF24_sendRegisterValue(Reg_Data[13]);
 8005b16:	193b      	adds	r3, r7, r4
 8005b18:	7b5b      	ldrb	r3, [r3, #13]
 8005b1a:	0018      	movs	r0, r3
 8005b1c:	f000 f90e 	bl	8005d3c <nRF24_sendRegisterValue>
		nRF24_sendRegisterValue(Reg_Data[14]);
 8005b20:	193b      	adds	r3, r7, r4
 8005b22:	7b9b      	ldrb	r3, [r3, #14]
 8005b24:	0018      	movs	r0, r3
 8005b26:	f000 f909 	bl	8005d3c <nRF24_sendRegisterValue>
		HAL_UART_Transmit(&hlpuart1, (uint8_t*)"RX_ADR_P1_reg:\n",15, HAL_MAX_DELAY);
 8005b2a:	2301      	movs	r3, #1
 8005b2c:	425b      	negs	r3, r3
 8005b2e:	4975      	ldr	r1, [pc, #468]	; (8005d04 <nRF24_Register_Display+0x334>)
 8005b30:	4868      	ldr	r0, [pc, #416]	; (8005cd4 <nRF24_Register_Display+0x304>)
 8005b32:	220f      	movs	r2, #15
 8005b34:	f7fe fdd0 	bl	80046d8 <HAL_UART_Transmit>
		nRF24_sendRegisterValue(Reg_Data[15]);
 8005b38:	193b      	adds	r3, r7, r4
 8005b3a:	7bdb      	ldrb	r3, [r3, #15]
 8005b3c:	0018      	movs	r0, r3
 8005b3e:	f000 f8fd 	bl	8005d3c <nRF24_sendRegisterValue>
		nRF24_sendRegisterValue(Reg_Data[16]);
 8005b42:	193b      	adds	r3, r7, r4
 8005b44:	7c1b      	ldrb	r3, [r3, #16]
 8005b46:	0018      	movs	r0, r3
 8005b48:	f000 f8f8 	bl	8005d3c <nRF24_sendRegisterValue>
		nRF24_sendRegisterValue(Reg_Data[17]);
 8005b4c:	193b      	adds	r3, r7, r4
 8005b4e:	7c5b      	ldrb	r3, [r3, #17]
 8005b50:	0018      	movs	r0, r3
 8005b52:	f000 f8f3 	bl	8005d3c <nRF24_sendRegisterValue>
		nRF24_sendRegisterValue(Reg_Data[18]);
 8005b56:	193b      	adds	r3, r7, r4
 8005b58:	7c9b      	ldrb	r3, [r3, #18]
 8005b5a:	0018      	movs	r0, r3
 8005b5c:	f000 f8ee 	bl	8005d3c <nRF24_sendRegisterValue>
		nRF24_sendRegisterValue(Reg_Data[19]);
 8005b60:	193b      	adds	r3, r7, r4
 8005b62:	7cdb      	ldrb	r3, [r3, #19]
 8005b64:	0018      	movs	r0, r3
 8005b66:	f000 f8e9 	bl	8005d3c <nRF24_sendRegisterValue>
		HAL_UART_Transmit(&hlpuart1, (uint8_t*)"RX_ADR_P2_reg:",15, HAL_MAX_DELAY);
 8005b6a:	2301      	movs	r3, #1
 8005b6c:	425b      	negs	r3, r3
 8005b6e:	4966      	ldr	r1, [pc, #408]	; (8005d08 <nRF24_Register_Display+0x338>)
 8005b70:	4858      	ldr	r0, [pc, #352]	; (8005cd4 <nRF24_Register_Display+0x304>)
 8005b72:	220f      	movs	r2, #15
 8005b74:	f7fe fdb0 	bl	80046d8 <HAL_UART_Transmit>
		nRF24_sendRegisterValue(Reg_Data[20]);
 8005b78:	193b      	adds	r3, r7, r4
 8005b7a:	7d1b      	ldrb	r3, [r3, #20]
 8005b7c:	0018      	movs	r0, r3
 8005b7e:	f000 f8dd 	bl	8005d3c <nRF24_sendRegisterValue>
		HAL_UART_Transmit(&hlpuart1, (uint8_t*)"RX_ADR_P3_reg:",15, HAL_MAX_DELAY);
 8005b82:	2301      	movs	r3, #1
 8005b84:	425b      	negs	r3, r3
 8005b86:	4961      	ldr	r1, [pc, #388]	; (8005d0c <nRF24_Register_Display+0x33c>)
 8005b88:	4852      	ldr	r0, [pc, #328]	; (8005cd4 <nRF24_Register_Display+0x304>)
 8005b8a:	220f      	movs	r2, #15
 8005b8c:	f7fe fda4 	bl	80046d8 <HAL_UART_Transmit>
		nRF24_sendRegisterValue(Reg_Data[21]);
 8005b90:	193b      	adds	r3, r7, r4
 8005b92:	7d5b      	ldrb	r3, [r3, #21]
 8005b94:	0018      	movs	r0, r3
 8005b96:	f000 f8d1 	bl	8005d3c <nRF24_sendRegisterValue>
		HAL_UART_Transmit(&hlpuart1, (uint8_t*)"RX_ADR_P4_reg:",15, HAL_MAX_DELAY);
 8005b9a:	2301      	movs	r3, #1
 8005b9c:	425b      	negs	r3, r3
 8005b9e:	495c      	ldr	r1, [pc, #368]	; (8005d10 <nRF24_Register_Display+0x340>)
 8005ba0:	484c      	ldr	r0, [pc, #304]	; (8005cd4 <nRF24_Register_Display+0x304>)
 8005ba2:	220f      	movs	r2, #15
 8005ba4:	f7fe fd98 	bl	80046d8 <HAL_UART_Transmit>
		nRF24_sendRegisterValue(Reg_Data[22]);
 8005ba8:	193b      	adds	r3, r7, r4
 8005baa:	7d9b      	ldrb	r3, [r3, #22]
 8005bac:	0018      	movs	r0, r3
 8005bae:	f000 f8c5 	bl	8005d3c <nRF24_sendRegisterValue>
		HAL_UART_Transmit(&hlpuart1, (uint8_t*)"RX_ADR_P5_reg:",15, HAL_MAX_DELAY);
 8005bb2:	2301      	movs	r3, #1
 8005bb4:	425b      	negs	r3, r3
 8005bb6:	4957      	ldr	r1, [pc, #348]	; (8005d14 <nRF24_Register_Display+0x344>)
 8005bb8:	4846      	ldr	r0, [pc, #280]	; (8005cd4 <nRF24_Register_Display+0x304>)
 8005bba:	220f      	movs	r2, #15
 8005bbc:	f7fe fd8c 	bl	80046d8 <HAL_UART_Transmit>
		nRF24_sendRegisterValue(Reg_Data[23]);
 8005bc0:	193b      	adds	r3, r7, r4
 8005bc2:	7ddb      	ldrb	r3, [r3, #23]
 8005bc4:	0018      	movs	r0, r3
 8005bc6:	f000 f8b9 	bl	8005d3c <nRF24_sendRegisterValue>
		HAL_UART_Transmit(&hlpuart1, (uint8_t*)"TX_ADR_reg:\n",12, HAL_MAX_DELAY);
 8005bca:	2301      	movs	r3, #1
 8005bcc:	425b      	negs	r3, r3
 8005bce:	4952      	ldr	r1, [pc, #328]	; (8005d18 <nRF24_Register_Display+0x348>)
 8005bd0:	4840      	ldr	r0, [pc, #256]	; (8005cd4 <nRF24_Register_Display+0x304>)
 8005bd2:	220c      	movs	r2, #12
 8005bd4:	f7fe fd80 	bl	80046d8 <HAL_UART_Transmit>
		nRF24_sendRegisterValue(Reg_Data[24]);
 8005bd8:	193b      	adds	r3, r7, r4
 8005bda:	7e1b      	ldrb	r3, [r3, #24]
 8005bdc:	0018      	movs	r0, r3
 8005bde:	f000 f8ad 	bl	8005d3c <nRF24_sendRegisterValue>
		nRF24_sendRegisterValue(Reg_Data[25]);
 8005be2:	193b      	adds	r3, r7, r4
 8005be4:	7e5b      	ldrb	r3, [r3, #25]
 8005be6:	0018      	movs	r0, r3
 8005be8:	f000 f8a8 	bl	8005d3c <nRF24_sendRegisterValue>
		nRF24_sendRegisterValue(Reg_Data[26]);
 8005bec:	193b      	adds	r3, r7, r4
 8005bee:	7e9b      	ldrb	r3, [r3, #26]
 8005bf0:	0018      	movs	r0, r3
 8005bf2:	f000 f8a3 	bl	8005d3c <nRF24_sendRegisterValue>
		nRF24_sendRegisterValue(Reg_Data[27]);
 8005bf6:	193b      	adds	r3, r7, r4
 8005bf8:	7edb      	ldrb	r3, [r3, #27]
 8005bfa:	0018      	movs	r0, r3
 8005bfc:	f000 f89e 	bl	8005d3c <nRF24_sendRegisterValue>
		nRF24_sendRegisterValue(Reg_Data[28]);
 8005c00:	193b      	adds	r3, r7, r4
 8005c02:	7f1b      	ldrb	r3, [r3, #28]
 8005c04:	0018      	movs	r0, r3
 8005c06:	f000 f899 	bl	8005d3c <nRF24_sendRegisterValue>
		HAL_UART_Transmit(&hlpuart1, (uint8_t*)"RX_PW_P0_reg:",13, HAL_MAX_DELAY);
 8005c0a:	2301      	movs	r3, #1
 8005c0c:	425b      	negs	r3, r3
 8005c0e:	4943      	ldr	r1, [pc, #268]	; (8005d1c <nRF24_Register_Display+0x34c>)
 8005c10:	4830      	ldr	r0, [pc, #192]	; (8005cd4 <nRF24_Register_Display+0x304>)
 8005c12:	220d      	movs	r2, #13
 8005c14:	f7fe fd60 	bl	80046d8 <HAL_UART_Transmit>
		nRF24_sendRegisterValue(Reg_Data[29]);
 8005c18:	193b      	adds	r3, r7, r4
 8005c1a:	7f5b      	ldrb	r3, [r3, #29]
 8005c1c:	0018      	movs	r0, r3
 8005c1e:	f000 f88d 	bl	8005d3c <nRF24_sendRegisterValue>
		HAL_UART_Transmit(&hlpuart1, (uint8_t*)"RX_PW_P1_reg:",13, HAL_MAX_DELAY);
 8005c22:	2301      	movs	r3, #1
 8005c24:	425b      	negs	r3, r3
 8005c26:	493e      	ldr	r1, [pc, #248]	; (8005d20 <nRF24_Register_Display+0x350>)
 8005c28:	482a      	ldr	r0, [pc, #168]	; (8005cd4 <nRF24_Register_Display+0x304>)
 8005c2a:	220d      	movs	r2, #13
 8005c2c:	f7fe fd54 	bl	80046d8 <HAL_UART_Transmit>
		nRF24_sendRegisterValue(Reg_Data[30]);
 8005c30:	193b      	adds	r3, r7, r4
 8005c32:	7f9b      	ldrb	r3, [r3, #30]
 8005c34:	0018      	movs	r0, r3
 8005c36:	f000 f881 	bl	8005d3c <nRF24_sendRegisterValue>
		HAL_UART_Transmit(&hlpuart1, (uint8_t*)"RX_PW_P2_reg:",13, HAL_MAX_DELAY);
 8005c3a:	2301      	movs	r3, #1
 8005c3c:	425b      	negs	r3, r3
 8005c3e:	4939      	ldr	r1, [pc, #228]	; (8005d24 <nRF24_Register_Display+0x354>)
 8005c40:	4824      	ldr	r0, [pc, #144]	; (8005cd4 <nRF24_Register_Display+0x304>)
 8005c42:	220d      	movs	r2, #13
 8005c44:	f7fe fd48 	bl	80046d8 <HAL_UART_Transmit>
		nRF24_sendRegisterValue(Reg_Data[31]);
 8005c48:	193b      	adds	r3, r7, r4
 8005c4a:	7fdb      	ldrb	r3, [r3, #31]
 8005c4c:	0018      	movs	r0, r3
 8005c4e:	f000 f875 	bl	8005d3c <nRF24_sendRegisterValue>
		HAL_UART_Transmit(&hlpuart1, (uint8_t*)"RX_PW_P3_reg:",13, HAL_MAX_DELAY);
 8005c52:	2301      	movs	r3, #1
 8005c54:	425b      	negs	r3, r3
 8005c56:	4934      	ldr	r1, [pc, #208]	; (8005d28 <nRF24_Register_Display+0x358>)
 8005c58:	481e      	ldr	r0, [pc, #120]	; (8005cd4 <nRF24_Register_Display+0x304>)
 8005c5a:	220d      	movs	r2, #13
 8005c5c:	f7fe fd3c 	bl	80046d8 <HAL_UART_Transmit>
		nRF24_sendRegisterValue(Reg_Data[32]);
 8005c60:	193b      	adds	r3, r7, r4
 8005c62:	2220      	movs	r2, #32
 8005c64:	5c9b      	ldrb	r3, [r3, r2]
 8005c66:	0018      	movs	r0, r3
 8005c68:	f000 f868 	bl	8005d3c <nRF24_sendRegisterValue>
		HAL_UART_Transmit(&hlpuart1, (uint8_t*)"RX_PW_P4_reg:",13, HAL_MAX_DELAY);
 8005c6c:	2301      	movs	r3, #1
 8005c6e:	425b      	negs	r3, r3
 8005c70:	492e      	ldr	r1, [pc, #184]	; (8005d2c <nRF24_Register_Display+0x35c>)
 8005c72:	4818      	ldr	r0, [pc, #96]	; (8005cd4 <nRF24_Register_Display+0x304>)
 8005c74:	220d      	movs	r2, #13
 8005c76:	f7fe fd2f 	bl	80046d8 <HAL_UART_Transmit>
		nRF24_sendRegisterValue(Reg_Data[33]);
 8005c7a:	193b      	adds	r3, r7, r4
 8005c7c:	2221      	movs	r2, #33	; 0x21
 8005c7e:	5c9b      	ldrb	r3, [r3, r2]
 8005c80:	0018      	movs	r0, r3
 8005c82:	f000 f85b 	bl	8005d3c <nRF24_sendRegisterValue>
		HAL_UART_Transmit(&hlpuart1, (uint8_t*)"RX_PW_P5_reg:",13, HAL_MAX_DELAY);
 8005c86:	2301      	movs	r3, #1
 8005c88:	425b      	negs	r3, r3
 8005c8a:	4929      	ldr	r1, [pc, #164]	; (8005d30 <nRF24_Register_Display+0x360>)
 8005c8c:	4811      	ldr	r0, [pc, #68]	; (8005cd4 <nRF24_Register_Display+0x304>)
 8005c8e:	220d      	movs	r2, #13
 8005c90:	f7fe fd22 	bl	80046d8 <HAL_UART_Transmit>
		nRF24_sendRegisterValue(Reg_Data[34]);
 8005c94:	193b      	adds	r3, r7, r4
 8005c96:	2222      	movs	r2, #34	; 0x22
 8005c98:	5c9b      	ldrb	r3, [r3, r2]
 8005c9a:	0018      	movs	r0, r3
 8005c9c:	f000 f84e 	bl	8005d3c <nRF24_sendRegisterValue>
		HAL_UART_Transmit(&hlpuart1, (uint8_t*)"FIFO_STATUS_reg:",16, HAL_MAX_DELAY);
 8005ca0:	2301      	movs	r3, #1
 8005ca2:	425b      	negs	r3, r3
 8005ca4:	4923      	ldr	r1, [pc, #140]	; (8005d34 <nRF24_Register_Display+0x364>)
 8005ca6:	480b      	ldr	r0, [pc, #44]	; (8005cd4 <nRF24_Register_Display+0x304>)
 8005ca8:	2210      	movs	r2, #16
 8005caa:	f7fe fd15 	bl	80046d8 <HAL_UART_Transmit>
		nRF24_sendRegisterValue(Reg_Data[35]);
 8005cae:	193b      	adds	r3, r7, r4
 8005cb0:	2223      	movs	r2, #35	; 0x23
 8005cb2:	5c9b      	ldrb	r3, [r3, r2]
 8005cb4:	0018      	movs	r0, r3
 8005cb6:	f000 f841 	bl	8005d3c <nRF24_sendRegisterValue>
		HAL_UART_Transmit(&hlpuart1, (uint8_t*)"******************\n\n",20, HAL_MAX_DELAY);
 8005cba:	2301      	movs	r3, #1
 8005cbc:	425b      	negs	r3, r3
 8005cbe:	491e      	ldr	r1, [pc, #120]	; (8005d38 <nRF24_Register_Display+0x368>)
 8005cc0:	4804      	ldr	r0, [pc, #16]	; (8005cd4 <nRF24_Register_Display+0x304>)
 8005cc2:	2214      	movs	r2, #20
 8005cc4:	f7fe fd08 	bl	80046d8 <HAL_UART_Transmit>
}
 8005cc8:	46c0      	nop			; (mov r8, r8)
 8005cca:	46bd      	mov	sp, r7
 8005ccc:	b00d      	add	sp, #52	; 0x34
 8005cce:	bd90      	pop	{r4, r7, pc}
 8005cd0:	08006838 	.word	0x08006838
 8005cd4:	200000f8 	.word	0x200000f8
 8005cd8:	0800684c 	.word	0x0800684c
 8005cdc:	08006860 	.word	0x08006860
 8005ce0:	08006868 	.word	0x08006868
 8005ce4:	08006874 	.word	0x08006874
 8005ce8:	08006884 	.word	0x08006884
 8005cec:	08006894 	.word	0x08006894
 8005cf0:	080068a4 	.word	0x080068a4
 8005cf4:	080068b0 	.word	0x080068b0
 8005cf8:	080068c0 	.word	0x080068c0
 8005cfc:	080068d0 	.word	0x080068d0
 8005d00:	080068e0 	.word	0x080068e0
 8005d04:	080068f0 	.word	0x080068f0
 8005d08:	08006900 	.word	0x08006900
 8005d0c:	08006910 	.word	0x08006910
 8005d10:	08006920 	.word	0x08006920
 8005d14:	08006930 	.word	0x08006930
 8005d18:	08006940 	.word	0x08006940
 8005d1c:	08006950 	.word	0x08006950
 8005d20:	08006960 	.word	0x08006960
 8005d24:	08006970 	.word	0x08006970
 8005d28:	08006980 	.word	0x08006980
 8005d2c:	08006990 	.word	0x08006990
 8005d30:	080069a0 	.word	0x080069a0
 8005d34:	080069b0 	.word	0x080069b0
 8005d38:	080069c4 	.word	0x080069c4

08005d3c <nRF24_sendRegisterValue>:


void nRF24_sendRegisterValue(uint8_t value)
{
 8005d3c:	b590      	push	{r4, r7, lr}
 8005d3e:	b087      	sub	sp, #28
 8005d40:	af00      	add	r7, sp, #0
 8005d42:	0002      	movs	r2, r0
 8005d44:	1dfb      	adds	r3, r7, #7
 8005d46:	701a      	strb	r2, [r3, #0]
  char buffer[10];
  sprintf(buffer, "0x%02X\r\n", value); // Convert value to hexadecimal string
 8005d48:	1dfb      	adds	r3, r7, #7
 8005d4a:	781a      	ldrb	r2, [r3, #0]
 8005d4c:	490a      	ldr	r1, [pc, #40]	; (8005d78 <nRF24_sendRegisterValue+0x3c>)
 8005d4e:	240c      	movs	r4, #12
 8005d50:	193b      	adds	r3, r7, r4
 8005d52:	0018      	movs	r0, r3
 8005d54:	f000 f846 	bl	8005de4 <siprintf>
  HAL_UART_Transmit(&hlpuart1, (uint8_t*)buffer, strlen(buffer), HAL_MAX_DELAY);
 8005d58:	193b      	adds	r3, r7, r4
 8005d5a:	0018      	movs	r0, r3
 8005d5c:	f7fa f9d4 	bl	8000108 <strlen>
 8005d60:	0003      	movs	r3, r0
 8005d62:	b29a      	uxth	r2, r3
 8005d64:	2301      	movs	r3, #1
 8005d66:	425b      	negs	r3, r3
 8005d68:	1939      	adds	r1, r7, r4
 8005d6a:	4804      	ldr	r0, [pc, #16]	; (8005d7c <nRF24_sendRegisterValue+0x40>)
 8005d6c:	f7fe fcb4 	bl	80046d8 <HAL_UART_Transmit>
}
 8005d70:	46c0      	nop			; (mov r8, r8)
 8005d72:	46bd      	mov	sp, r7
 8005d74:	b007      	add	sp, #28
 8005d76:	bd90      	pop	{r4, r7, pc}
 8005d78:	080069dc 	.word	0x080069dc
 8005d7c:	200000f8 	.word	0x200000f8

08005d80 <__errno>:
 8005d80:	4b01      	ldr	r3, [pc, #4]	; (8005d88 <__errno+0x8>)
 8005d82:	6818      	ldr	r0, [r3, #0]
 8005d84:	4770      	bx	lr
 8005d86:	46c0      	nop			; (mov r8, r8)
 8005d88:	2000001c 	.word	0x2000001c

08005d8c <__libc_init_array>:
 8005d8c:	b570      	push	{r4, r5, r6, lr}
 8005d8e:	2600      	movs	r6, #0
 8005d90:	4d0c      	ldr	r5, [pc, #48]	; (8005dc4 <__libc_init_array+0x38>)
 8005d92:	4c0d      	ldr	r4, [pc, #52]	; (8005dc8 <__libc_init_array+0x3c>)
 8005d94:	1b64      	subs	r4, r4, r5
 8005d96:	10a4      	asrs	r4, r4, #2
 8005d98:	42a6      	cmp	r6, r4
 8005d9a:	d109      	bne.n	8005db0 <__libc_init_array+0x24>
 8005d9c:	2600      	movs	r6, #0
 8005d9e:	f000 fc8b 	bl	80066b8 <_init>
 8005da2:	4d0a      	ldr	r5, [pc, #40]	; (8005dcc <__libc_init_array+0x40>)
 8005da4:	4c0a      	ldr	r4, [pc, #40]	; (8005dd0 <__libc_init_array+0x44>)
 8005da6:	1b64      	subs	r4, r4, r5
 8005da8:	10a4      	asrs	r4, r4, #2
 8005daa:	42a6      	cmp	r6, r4
 8005dac:	d105      	bne.n	8005dba <__libc_init_array+0x2e>
 8005dae:	bd70      	pop	{r4, r5, r6, pc}
 8005db0:	00b3      	lsls	r3, r6, #2
 8005db2:	58eb      	ldr	r3, [r5, r3]
 8005db4:	4798      	blx	r3
 8005db6:	3601      	adds	r6, #1
 8005db8:	e7ee      	b.n	8005d98 <__libc_init_array+0xc>
 8005dba:	00b3      	lsls	r3, r6, #2
 8005dbc:	58eb      	ldr	r3, [r5, r3]
 8005dbe:	4798      	blx	r3
 8005dc0:	3601      	adds	r6, #1
 8005dc2:	e7f2      	b.n	8005daa <__libc_init_array+0x1e>
 8005dc4:	08006b88 	.word	0x08006b88
 8005dc8:	08006b88 	.word	0x08006b88
 8005dcc:	08006b88 	.word	0x08006b88
 8005dd0:	08006b8c 	.word	0x08006b8c

08005dd4 <memset>:
 8005dd4:	0003      	movs	r3, r0
 8005dd6:	1882      	adds	r2, r0, r2
 8005dd8:	4293      	cmp	r3, r2
 8005dda:	d100      	bne.n	8005dde <memset+0xa>
 8005ddc:	4770      	bx	lr
 8005dde:	7019      	strb	r1, [r3, #0]
 8005de0:	3301      	adds	r3, #1
 8005de2:	e7f9      	b.n	8005dd8 <memset+0x4>

08005de4 <siprintf>:
 8005de4:	b40e      	push	{r1, r2, r3}
 8005de6:	b500      	push	{lr}
 8005de8:	490b      	ldr	r1, [pc, #44]	; (8005e18 <siprintf+0x34>)
 8005dea:	b09c      	sub	sp, #112	; 0x70
 8005dec:	ab1d      	add	r3, sp, #116	; 0x74
 8005dee:	9002      	str	r0, [sp, #8]
 8005df0:	9006      	str	r0, [sp, #24]
 8005df2:	9107      	str	r1, [sp, #28]
 8005df4:	9104      	str	r1, [sp, #16]
 8005df6:	4809      	ldr	r0, [pc, #36]	; (8005e1c <siprintf+0x38>)
 8005df8:	4909      	ldr	r1, [pc, #36]	; (8005e20 <siprintf+0x3c>)
 8005dfa:	cb04      	ldmia	r3!, {r2}
 8005dfc:	9105      	str	r1, [sp, #20]
 8005dfe:	6800      	ldr	r0, [r0, #0]
 8005e00:	a902      	add	r1, sp, #8
 8005e02:	9301      	str	r3, [sp, #4]
 8005e04:	f000 f870 	bl	8005ee8 <_svfiprintf_r>
 8005e08:	2300      	movs	r3, #0
 8005e0a:	9a02      	ldr	r2, [sp, #8]
 8005e0c:	7013      	strb	r3, [r2, #0]
 8005e0e:	b01c      	add	sp, #112	; 0x70
 8005e10:	bc08      	pop	{r3}
 8005e12:	b003      	add	sp, #12
 8005e14:	4718      	bx	r3
 8005e16:	46c0      	nop			; (mov r8, r8)
 8005e18:	7fffffff 	.word	0x7fffffff
 8005e1c:	2000001c 	.word	0x2000001c
 8005e20:	ffff0208 	.word	0xffff0208

08005e24 <__ssputs_r>:
 8005e24:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005e26:	688e      	ldr	r6, [r1, #8]
 8005e28:	b085      	sub	sp, #20
 8005e2a:	0007      	movs	r7, r0
 8005e2c:	000c      	movs	r4, r1
 8005e2e:	9203      	str	r2, [sp, #12]
 8005e30:	9301      	str	r3, [sp, #4]
 8005e32:	429e      	cmp	r6, r3
 8005e34:	d83c      	bhi.n	8005eb0 <__ssputs_r+0x8c>
 8005e36:	2390      	movs	r3, #144	; 0x90
 8005e38:	898a      	ldrh	r2, [r1, #12]
 8005e3a:	00db      	lsls	r3, r3, #3
 8005e3c:	421a      	tst	r2, r3
 8005e3e:	d034      	beq.n	8005eaa <__ssputs_r+0x86>
 8005e40:	6909      	ldr	r1, [r1, #16]
 8005e42:	6823      	ldr	r3, [r4, #0]
 8005e44:	6960      	ldr	r0, [r4, #20]
 8005e46:	1a5b      	subs	r3, r3, r1
 8005e48:	9302      	str	r3, [sp, #8]
 8005e4a:	2303      	movs	r3, #3
 8005e4c:	4343      	muls	r3, r0
 8005e4e:	0fdd      	lsrs	r5, r3, #31
 8005e50:	18ed      	adds	r5, r5, r3
 8005e52:	9b01      	ldr	r3, [sp, #4]
 8005e54:	9802      	ldr	r0, [sp, #8]
 8005e56:	3301      	adds	r3, #1
 8005e58:	181b      	adds	r3, r3, r0
 8005e5a:	106d      	asrs	r5, r5, #1
 8005e5c:	42ab      	cmp	r3, r5
 8005e5e:	d900      	bls.n	8005e62 <__ssputs_r+0x3e>
 8005e60:	001d      	movs	r5, r3
 8005e62:	0553      	lsls	r3, r2, #21
 8005e64:	d532      	bpl.n	8005ecc <__ssputs_r+0xa8>
 8005e66:	0029      	movs	r1, r5
 8005e68:	0038      	movs	r0, r7
 8005e6a:	f000 fb53 	bl	8006514 <_malloc_r>
 8005e6e:	1e06      	subs	r6, r0, #0
 8005e70:	d109      	bne.n	8005e86 <__ssputs_r+0x62>
 8005e72:	230c      	movs	r3, #12
 8005e74:	603b      	str	r3, [r7, #0]
 8005e76:	2340      	movs	r3, #64	; 0x40
 8005e78:	2001      	movs	r0, #1
 8005e7a:	89a2      	ldrh	r2, [r4, #12]
 8005e7c:	4240      	negs	r0, r0
 8005e7e:	4313      	orrs	r3, r2
 8005e80:	81a3      	strh	r3, [r4, #12]
 8005e82:	b005      	add	sp, #20
 8005e84:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005e86:	9a02      	ldr	r2, [sp, #8]
 8005e88:	6921      	ldr	r1, [r4, #16]
 8005e8a:	f000 faba 	bl	8006402 <memcpy>
 8005e8e:	89a3      	ldrh	r3, [r4, #12]
 8005e90:	4a14      	ldr	r2, [pc, #80]	; (8005ee4 <__ssputs_r+0xc0>)
 8005e92:	401a      	ands	r2, r3
 8005e94:	2380      	movs	r3, #128	; 0x80
 8005e96:	4313      	orrs	r3, r2
 8005e98:	81a3      	strh	r3, [r4, #12]
 8005e9a:	9b02      	ldr	r3, [sp, #8]
 8005e9c:	6126      	str	r6, [r4, #16]
 8005e9e:	18f6      	adds	r6, r6, r3
 8005ea0:	6026      	str	r6, [r4, #0]
 8005ea2:	6165      	str	r5, [r4, #20]
 8005ea4:	9e01      	ldr	r6, [sp, #4]
 8005ea6:	1aed      	subs	r5, r5, r3
 8005ea8:	60a5      	str	r5, [r4, #8]
 8005eaa:	9b01      	ldr	r3, [sp, #4]
 8005eac:	429e      	cmp	r6, r3
 8005eae:	d900      	bls.n	8005eb2 <__ssputs_r+0x8e>
 8005eb0:	9e01      	ldr	r6, [sp, #4]
 8005eb2:	0032      	movs	r2, r6
 8005eb4:	9903      	ldr	r1, [sp, #12]
 8005eb6:	6820      	ldr	r0, [r4, #0]
 8005eb8:	f000 faac 	bl	8006414 <memmove>
 8005ebc:	68a3      	ldr	r3, [r4, #8]
 8005ebe:	2000      	movs	r0, #0
 8005ec0:	1b9b      	subs	r3, r3, r6
 8005ec2:	60a3      	str	r3, [r4, #8]
 8005ec4:	6823      	ldr	r3, [r4, #0]
 8005ec6:	199e      	adds	r6, r3, r6
 8005ec8:	6026      	str	r6, [r4, #0]
 8005eca:	e7da      	b.n	8005e82 <__ssputs_r+0x5e>
 8005ecc:	002a      	movs	r2, r5
 8005ece:	0038      	movs	r0, r7
 8005ed0:	f000 fb96 	bl	8006600 <_realloc_r>
 8005ed4:	1e06      	subs	r6, r0, #0
 8005ed6:	d1e0      	bne.n	8005e9a <__ssputs_r+0x76>
 8005ed8:	0038      	movs	r0, r7
 8005eda:	6921      	ldr	r1, [r4, #16]
 8005edc:	f000 faae 	bl	800643c <_free_r>
 8005ee0:	e7c7      	b.n	8005e72 <__ssputs_r+0x4e>
 8005ee2:	46c0      	nop			; (mov r8, r8)
 8005ee4:	fffffb7f 	.word	0xfffffb7f

08005ee8 <_svfiprintf_r>:
 8005ee8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005eea:	b0a1      	sub	sp, #132	; 0x84
 8005eec:	9003      	str	r0, [sp, #12]
 8005eee:	001d      	movs	r5, r3
 8005ef0:	898b      	ldrh	r3, [r1, #12]
 8005ef2:	000f      	movs	r7, r1
 8005ef4:	0016      	movs	r6, r2
 8005ef6:	061b      	lsls	r3, r3, #24
 8005ef8:	d511      	bpl.n	8005f1e <_svfiprintf_r+0x36>
 8005efa:	690b      	ldr	r3, [r1, #16]
 8005efc:	2b00      	cmp	r3, #0
 8005efe:	d10e      	bne.n	8005f1e <_svfiprintf_r+0x36>
 8005f00:	2140      	movs	r1, #64	; 0x40
 8005f02:	f000 fb07 	bl	8006514 <_malloc_r>
 8005f06:	6038      	str	r0, [r7, #0]
 8005f08:	6138      	str	r0, [r7, #16]
 8005f0a:	2800      	cmp	r0, #0
 8005f0c:	d105      	bne.n	8005f1a <_svfiprintf_r+0x32>
 8005f0e:	230c      	movs	r3, #12
 8005f10:	9a03      	ldr	r2, [sp, #12]
 8005f12:	3801      	subs	r0, #1
 8005f14:	6013      	str	r3, [r2, #0]
 8005f16:	b021      	add	sp, #132	; 0x84
 8005f18:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005f1a:	2340      	movs	r3, #64	; 0x40
 8005f1c:	617b      	str	r3, [r7, #20]
 8005f1e:	2300      	movs	r3, #0
 8005f20:	ac08      	add	r4, sp, #32
 8005f22:	6163      	str	r3, [r4, #20]
 8005f24:	3320      	adds	r3, #32
 8005f26:	7663      	strb	r3, [r4, #25]
 8005f28:	3310      	adds	r3, #16
 8005f2a:	76a3      	strb	r3, [r4, #26]
 8005f2c:	9507      	str	r5, [sp, #28]
 8005f2e:	0035      	movs	r5, r6
 8005f30:	782b      	ldrb	r3, [r5, #0]
 8005f32:	2b00      	cmp	r3, #0
 8005f34:	d001      	beq.n	8005f3a <_svfiprintf_r+0x52>
 8005f36:	2b25      	cmp	r3, #37	; 0x25
 8005f38:	d147      	bne.n	8005fca <_svfiprintf_r+0xe2>
 8005f3a:	1bab      	subs	r3, r5, r6
 8005f3c:	9305      	str	r3, [sp, #20]
 8005f3e:	42b5      	cmp	r5, r6
 8005f40:	d00c      	beq.n	8005f5c <_svfiprintf_r+0x74>
 8005f42:	0032      	movs	r2, r6
 8005f44:	0039      	movs	r1, r7
 8005f46:	9803      	ldr	r0, [sp, #12]
 8005f48:	f7ff ff6c 	bl	8005e24 <__ssputs_r>
 8005f4c:	1c43      	adds	r3, r0, #1
 8005f4e:	d100      	bne.n	8005f52 <_svfiprintf_r+0x6a>
 8005f50:	e0ae      	b.n	80060b0 <_svfiprintf_r+0x1c8>
 8005f52:	6962      	ldr	r2, [r4, #20]
 8005f54:	9b05      	ldr	r3, [sp, #20]
 8005f56:	4694      	mov	ip, r2
 8005f58:	4463      	add	r3, ip
 8005f5a:	6163      	str	r3, [r4, #20]
 8005f5c:	782b      	ldrb	r3, [r5, #0]
 8005f5e:	2b00      	cmp	r3, #0
 8005f60:	d100      	bne.n	8005f64 <_svfiprintf_r+0x7c>
 8005f62:	e0a5      	b.n	80060b0 <_svfiprintf_r+0x1c8>
 8005f64:	2201      	movs	r2, #1
 8005f66:	2300      	movs	r3, #0
 8005f68:	4252      	negs	r2, r2
 8005f6a:	6062      	str	r2, [r4, #4]
 8005f6c:	a904      	add	r1, sp, #16
 8005f6e:	3254      	adds	r2, #84	; 0x54
 8005f70:	1852      	adds	r2, r2, r1
 8005f72:	1c6e      	adds	r6, r5, #1
 8005f74:	6023      	str	r3, [r4, #0]
 8005f76:	60e3      	str	r3, [r4, #12]
 8005f78:	60a3      	str	r3, [r4, #8]
 8005f7a:	7013      	strb	r3, [r2, #0]
 8005f7c:	65a3      	str	r3, [r4, #88]	; 0x58
 8005f7e:	2205      	movs	r2, #5
 8005f80:	7831      	ldrb	r1, [r6, #0]
 8005f82:	4854      	ldr	r0, [pc, #336]	; (80060d4 <_svfiprintf_r+0x1ec>)
 8005f84:	f000 fa32 	bl	80063ec <memchr>
 8005f88:	1c75      	adds	r5, r6, #1
 8005f8a:	2800      	cmp	r0, #0
 8005f8c:	d11f      	bne.n	8005fce <_svfiprintf_r+0xe6>
 8005f8e:	6822      	ldr	r2, [r4, #0]
 8005f90:	06d3      	lsls	r3, r2, #27
 8005f92:	d504      	bpl.n	8005f9e <_svfiprintf_r+0xb6>
 8005f94:	2353      	movs	r3, #83	; 0x53
 8005f96:	a904      	add	r1, sp, #16
 8005f98:	185b      	adds	r3, r3, r1
 8005f9a:	2120      	movs	r1, #32
 8005f9c:	7019      	strb	r1, [r3, #0]
 8005f9e:	0713      	lsls	r3, r2, #28
 8005fa0:	d504      	bpl.n	8005fac <_svfiprintf_r+0xc4>
 8005fa2:	2353      	movs	r3, #83	; 0x53
 8005fa4:	a904      	add	r1, sp, #16
 8005fa6:	185b      	adds	r3, r3, r1
 8005fa8:	212b      	movs	r1, #43	; 0x2b
 8005faa:	7019      	strb	r1, [r3, #0]
 8005fac:	7833      	ldrb	r3, [r6, #0]
 8005fae:	2b2a      	cmp	r3, #42	; 0x2a
 8005fb0:	d016      	beq.n	8005fe0 <_svfiprintf_r+0xf8>
 8005fb2:	0035      	movs	r5, r6
 8005fb4:	2100      	movs	r1, #0
 8005fb6:	200a      	movs	r0, #10
 8005fb8:	68e3      	ldr	r3, [r4, #12]
 8005fba:	782a      	ldrb	r2, [r5, #0]
 8005fbc:	1c6e      	adds	r6, r5, #1
 8005fbe:	3a30      	subs	r2, #48	; 0x30
 8005fc0:	2a09      	cmp	r2, #9
 8005fc2:	d94e      	bls.n	8006062 <_svfiprintf_r+0x17a>
 8005fc4:	2900      	cmp	r1, #0
 8005fc6:	d111      	bne.n	8005fec <_svfiprintf_r+0x104>
 8005fc8:	e017      	b.n	8005ffa <_svfiprintf_r+0x112>
 8005fca:	3501      	adds	r5, #1
 8005fcc:	e7b0      	b.n	8005f30 <_svfiprintf_r+0x48>
 8005fce:	4b41      	ldr	r3, [pc, #260]	; (80060d4 <_svfiprintf_r+0x1ec>)
 8005fd0:	6822      	ldr	r2, [r4, #0]
 8005fd2:	1ac0      	subs	r0, r0, r3
 8005fd4:	2301      	movs	r3, #1
 8005fd6:	4083      	lsls	r3, r0
 8005fd8:	4313      	orrs	r3, r2
 8005fda:	002e      	movs	r6, r5
 8005fdc:	6023      	str	r3, [r4, #0]
 8005fde:	e7ce      	b.n	8005f7e <_svfiprintf_r+0x96>
 8005fe0:	9b07      	ldr	r3, [sp, #28]
 8005fe2:	1d19      	adds	r1, r3, #4
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	9107      	str	r1, [sp, #28]
 8005fe8:	2b00      	cmp	r3, #0
 8005fea:	db01      	blt.n	8005ff0 <_svfiprintf_r+0x108>
 8005fec:	930b      	str	r3, [sp, #44]	; 0x2c
 8005fee:	e004      	b.n	8005ffa <_svfiprintf_r+0x112>
 8005ff0:	425b      	negs	r3, r3
 8005ff2:	60e3      	str	r3, [r4, #12]
 8005ff4:	2302      	movs	r3, #2
 8005ff6:	4313      	orrs	r3, r2
 8005ff8:	6023      	str	r3, [r4, #0]
 8005ffa:	782b      	ldrb	r3, [r5, #0]
 8005ffc:	2b2e      	cmp	r3, #46	; 0x2e
 8005ffe:	d10a      	bne.n	8006016 <_svfiprintf_r+0x12e>
 8006000:	786b      	ldrb	r3, [r5, #1]
 8006002:	2b2a      	cmp	r3, #42	; 0x2a
 8006004:	d135      	bne.n	8006072 <_svfiprintf_r+0x18a>
 8006006:	9b07      	ldr	r3, [sp, #28]
 8006008:	3502      	adds	r5, #2
 800600a:	1d1a      	adds	r2, r3, #4
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	9207      	str	r2, [sp, #28]
 8006010:	2b00      	cmp	r3, #0
 8006012:	db2b      	blt.n	800606c <_svfiprintf_r+0x184>
 8006014:	9309      	str	r3, [sp, #36]	; 0x24
 8006016:	4e30      	ldr	r6, [pc, #192]	; (80060d8 <_svfiprintf_r+0x1f0>)
 8006018:	2203      	movs	r2, #3
 800601a:	0030      	movs	r0, r6
 800601c:	7829      	ldrb	r1, [r5, #0]
 800601e:	f000 f9e5 	bl	80063ec <memchr>
 8006022:	2800      	cmp	r0, #0
 8006024:	d006      	beq.n	8006034 <_svfiprintf_r+0x14c>
 8006026:	2340      	movs	r3, #64	; 0x40
 8006028:	1b80      	subs	r0, r0, r6
 800602a:	4083      	lsls	r3, r0
 800602c:	6822      	ldr	r2, [r4, #0]
 800602e:	3501      	adds	r5, #1
 8006030:	4313      	orrs	r3, r2
 8006032:	6023      	str	r3, [r4, #0]
 8006034:	7829      	ldrb	r1, [r5, #0]
 8006036:	2206      	movs	r2, #6
 8006038:	4828      	ldr	r0, [pc, #160]	; (80060dc <_svfiprintf_r+0x1f4>)
 800603a:	1c6e      	adds	r6, r5, #1
 800603c:	7621      	strb	r1, [r4, #24]
 800603e:	f000 f9d5 	bl	80063ec <memchr>
 8006042:	2800      	cmp	r0, #0
 8006044:	d03c      	beq.n	80060c0 <_svfiprintf_r+0x1d8>
 8006046:	4b26      	ldr	r3, [pc, #152]	; (80060e0 <_svfiprintf_r+0x1f8>)
 8006048:	2b00      	cmp	r3, #0
 800604a:	d125      	bne.n	8006098 <_svfiprintf_r+0x1b0>
 800604c:	2207      	movs	r2, #7
 800604e:	9b07      	ldr	r3, [sp, #28]
 8006050:	3307      	adds	r3, #7
 8006052:	4393      	bics	r3, r2
 8006054:	3308      	adds	r3, #8
 8006056:	9307      	str	r3, [sp, #28]
 8006058:	6963      	ldr	r3, [r4, #20]
 800605a:	9a04      	ldr	r2, [sp, #16]
 800605c:	189b      	adds	r3, r3, r2
 800605e:	6163      	str	r3, [r4, #20]
 8006060:	e765      	b.n	8005f2e <_svfiprintf_r+0x46>
 8006062:	4343      	muls	r3, r0
 8006064:	0035      	movs	r5, r6
 8006066:	2101      	movs	r1, #1
 8006068:	189b      	adds	r3, r3, r2
 800606a:	e7a6      	b.n	8005fba <_svfiprintf_r+0xd2>
 800606c:	2301      	movs	r3, #1
 800606e:	425b      	negs	r3, r3
 8006070:	e7d0      	b.n	8006014 <_svfiprintf_r+0x12c>
 8006072:	2300      	movs	r3, #0
 8006074:	200a      	movs	r0, #10
 8006076:	001a      	movs	r2, r3
 8006078:	3501      	adds	r5, #1
 800607a:	6063      	str	r3, [r4, #4]
 800607c:	7829      	ldrb	r1, [r5, #0]
 800607e:	1c6e      	adds	r6, r5, #1
 8006080:	3930      	subs	r1, #48	; 0x30
 8006082:	2909      	cmp	r1, #9
 8006084:	d903      	bls.n	800608e <_svfiprintf_r+0x1a6>
 8006086:	2b00      	cmp	r3, #0
 8006088:	d0c5      	beq.n	8006016 <_svfiprintf_r+0x12e>
 800608a:	9209      	str	r2, [sp, #36]	; 0x24
 800608c:	e7c3      	b.n	8006016 <_svfiprintf_r+0x12e>
 800608e:	4342      	muls	r2, r0
 8006090:	0035      	movs	r5, r6
 8006092:	2301      	movs	r3, #1
 8006094:	1852      	adds	r2, r2, r1
 8006096:	e7f1      	b.n	800607c <_svfiprintf_r+0x194>
 8006098:	ab07      	add	r3, sp, #28
 800609a:	9300      	str	r3, [sp, #0]
 800609c:	003a      	movs	r2, r7
 800609e:	0021      	movs	r1, r4
 80060a0:	4b10      	ldr	r3, [pc, #64]	; (80060e4 <_svfiprintf_r+0x1fc>)
 80060a2:	9803      	ldr	r0, [sp, #12]
 80060a4:	e000      	b.n	80060a8 <_svfiprintf_r+0x1c0>
 80060a6:	bf00      	nop
 80060a8:	9004      	str	r0, [sp, #16]
 80060aa:	9b04      	ldr	r3, [sp, #16]
 80060ac:	3301      	adds	r3, #1
 80060ae:	d1d3      	bne.n	8006058 <_svfiprintf_r+0x170>
 80060b0:	89bb      	ldrh	r3, [r7, #12]
 80060b2:	980d      	ldr	r0, [sp, #52]	; 0x34
 80060b4:	065b      	lsls	r3, r3, #25
 80060b6:	d400      	bmi.n	80060ba <_svfiprintf_r+0x1d2>
 80060b8:	e72d      	b.n	8005f16 <_svfiprintf_r+0x2e>
 80060ba:	2001      	movs	r0, #1
 80060bc:	4240      	negs	r0, r0
 80060be:	e72a      	b.n	8005f16 <_svfiprintf_r+0x2e>
 80060c0:	ab07      	add	r3, sp, #28
 80060c2:	9300      	str	r3, [sp, #0]
 80060c4:	003a      	movs	r2, r7
 80060c6:	0021      	movs	r1, r4
 80060c8:	4b06      	ldr	r3, [pc, #24]	; (80060e4 <_svfiprintf_r+0x1fc>)
 80060ca:	9803      	ldr	r0, [sp, #12]
 80060cc:	f000 f87c 	bl	80061c8 <_printf_i>
 80060d0:	e7ea      	b.n	80060a8 <_svfiprintf_r+0x1c0>
 80060d2:	46c0      	nop			; (mov r8, r8)
 80060d4:	08006b4c 	.word	0x08006b4c
 80060d8:	08006b52 	.word	0x08006b52
 80060dc:	08006b56 	.word	0x08006b56
 80060e0:	00000000 	.word	0x00000000
 80060e4:	08005e25 	.word	0x08005e25

080060e8 <_printf_common>:
 80060e8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80060ea:	0015      	movs	r5, r2
 80060ec:	9301      	str	r3, [sp, #4]
 80060ee:	688a      	ldr	r2, [r1, #8]
 80060f0:	690b      	ldr	r3, [r1, #16]
 80060f2:	000c      	movs	r4, r1
 80060f4:	9000      	str	r0, [sp, #0]
 80060f6:	4293      	cmp	r3, r2
 80060f8:	da00      	bge.n	80060fc <_printf_common+0x14>
 80060fa:	0013      	movs	r3, r2
 80060fc:	0022      	movs	r2, r4
 80060fe:	602b      	str	r3, [r5, #0]
 8006100:	3243      	adds	r2, #67	; 0x43
 8006102:	7812      	ldrb	r2, [r2, #0]
 8006104:	2a00      	cmp	r2, #0
 8006106:	d001      	beq.n	800610c <_printf_common+0x24>
 8006108:	3301      	adds	r3, #1
 800610a:	602b      	str	r3, [r5, #0]
 800610c:	6823      	ldr	r3, [r4, #0]
 800610e:	069b      	lsls	r3, r3, #26
 8006110:	d502      	bpl.n	8006118 <_printf_common+0x30>
 8006112:	682b      	ldr	r3, [r5, #0]
 8006114:	3302      	adds	r3, #2
 8006116:	602b      	str	r3, [r5, #0]
 8006118:	6822      	ldr	r2, [r4, #0]
 800611a:	2306      	movs	r3, #6
 800611c:	0017      	movs	r7, r2
 800611e:	401f      	ands	r7, r3
 8006120:	421a      	tst	r2, r3
 8006122:	d027      	beq.n	8006174 <_printf_common+0x8c>
 8006124:	0023      	movs	r3, r4
 8006126:	3343      	adds	r3, #67	; 0x43
 8006128:	781b      	ldrb	r3, [r3, #0]
 800612a:	1e5a      	subs	r2, r3, #1
 800612c:	4193      	sbcs	r3, r2
 800612e:	6822      	ldr	r2, [r4, #0]
 8006130:	0692      	lsls	r2, r2, #26
 8006132:	d430      	bmi.n	8006196 <_printf_common+0xae>
 8006134:	0022      	movs	r2, r4
 8006136:	9901      	ldr	r1, [sp, #4]
 8006138:	9800      	ldr	r0, [sp, #0]
 800613a:	9e08      	ldr	r6, [sp, #32]
 800613c:	3243      	adds	r2, #67	; 0x43
 800613e:	47b0      	blx	r6
 8006140:	1c43      	adds	r3, r0, #1
 8006142:	d025      	beq.n	8006190 <_printf_common+0xa8>
 8006144:	2306      	movs	r3, #6
 8006146:	6820      	ldr	r0, [r4, #0]
 8006148:	682a      	ldr	r2, [r5, #0]
 800614a:	68e1      	ldr	r1, [r4, #12]
 800614c:	2500      	movs	r5, #0
 800614e:	4003      	ands	r3, r0
 8006150:	2b04      	cmp	r3, #4
 8006152:	d103      	bne.n	800615c <_printf_common+0x74>
 8006154:	1a8d      	subs	r5, r1, r2
 8006156:	43eb      	mvns	r3, r5
 8006158:	17db      	asrs	r3, r3, #31
 800615a:	401d      	ands	r5, r3
 800615c:	68a3      	ldr	r3, [r4, #8]
 800615e:	6922      	ldr	r2, [r4, #16]
 8006160:	4293      	cmp	r3, r2
 8006162:	dd01      	ble.n	8006168 <_printf_common+0x80>
 8006164:	1a9b      	subs	r3, r3, r2
 8006166:	18ed      	adds	r5, r5, r3
 8006168:	2700      	movs	r7, #0
 800616a:	42bd      	cmp	r5, r7
 800616c:	d120      	bne.n	80061b0 <_printf_common+0xc8>
 800616e:	2000      	movs	r0, #0
 8006170:	e010      	b.n	8006194 <_printf_common+0xac>
 8006172:	3701      	adds	r7, #1
 8006174:	68e3      	ldr	r3, [r4, #12]
 8006176:	682a      	ldr	r2, [r5, #0]
 8006178:	1a9b      	subs	r3, r3, r2
 800617a:	42bb      	cmp	r3, r7
 800617c:	ddd2      	ble.n	8006124 <_printf_common+0x3c>
 800617e:	0022      	movs	r2, r4
 8006180:	2301      	movs	r3, #1
 8006182:	9901      	ldr	r1, [sp, #4]
 8006184:	9800      	ldr	r0, [sp, #0]
 8006186:	9e08      	ldr	r6, [sp, #32]
 8006188:	3219      	adds	r2, #25
 800618a:	47b0      	blx	r6
 800618c:	1c43      	adds	r3, r0, #1
 800618e:	d1f0      	bne.n	8006172 <_printf_common+0x8a>
 8006190:	2001      	movs	r0, #1
 8006192:	4240      	negs	r0, r0
 8006194:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8006196:	2030      	movs	r0, #48	; 0x30
 8006198:	18e1      	adds	r1, r4, r3
 800619a:	3143      	adds	r1, #67	; 0x43
 800619c:	7008      	strb	r0, [r1, #0]
 800619e:	0021      	movs	r1, r4
 80061a0:	1c5a      	adds	r2, r3, #1
 80061a2:	3145      	adds	r1, #69	; 0x45
 80061a4:	7809      	ldrb	r1, [r1, #0]
 80061a6:	18a2      	adds	r2, r4, r2
 80061a8:	3243      	adds	r2, #67	; 0x43
 80061aa:	3302      	adds	r3, #2
 80061ac:	7011      	strb	r1, [r2, #0]
 80061ae:	e7c1      	b.n	8006134 <_printf_common+0x4c>
 80061b0:	0022      	movs	r2, r4
 80061b2:	2301      	movs	r3, #1
 80061b4:	9901      	ldr	r1, [sp, #4]
 80061b6:	9800      	ldr	r0, [sp, #0]
 80061b8:	9e08      	ldr	r6, [sp, #32]
 80061ba:	321a      	adds	r2, #26
 80061bc:	47b0      	blx	r6
 80061be:	1c43      	adds	r3, r0, #1
 80061c0:	d0e6      	beq.n	8006190 <_printf_common+0xa8>
 80061c2:	3701      	adds	r7, #1
 80061c4:	e7d1      	b.n	800616a <_printf_common+0x82>
	...

080061c8 <_printf_i>:
 80061c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80061ca:	b08b      	sub	sp, #44	; 0x2c
 80061cc:	9206      	str	r2, [sp, #24]
 80061ce:	000a      	movs	r2, r1
 80061d0:	3243      	adds	r2, #67	; 0x43
 80061d2:	9307      	str	r3, [sp, #28]
 80061d4:	9005      	str	r0, [sp, #20]
 80061d6:	9204      	str	r2, [sp, #16]
 80061d8:	7e0a      	ldrb	r2, [r1, #24]
 80061da:	000c      	movs	r4, r1
 80061dc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80061de:	2a78      	cmp	r2, #120	; 0x78
 80061e0:	d807      	bhi.n	80061f2 <_printf_i+0x2a>
 80061e2:	2a62      	cmp	r2, #98	; 0x62
 80061e4:	d809      	bhi.n	80061fa <_printf_i+0x32>
 80061e6:	2a00      	cmp	r2, #0
 80061e8:	d100      	bne.n	80061ec <_printf_i+0x24>
 80061ea:	e0c1      	b.n	8006370 <_printf_i+0x1a8>
 80061ec:	2a58      	cmp	r2, #88	; 0x58
 80061ee:	d100      	bne.n	80061f2 <_printf_i+0x2a>
 80061f0:	e08c      	b.n	800630c <_printf_i+0x144>
 80061f2:	0026      	movs	r6, r4
 80061f4:	3642      	adds	r6, #66	; 0x42
 80061f6:	7032      	strb	r2, [r6, #0]
 80061f8:	e022      	b.n	8006240 <_printf_i+0x78>
 80061fa:	0010      	movs	r0, r2
 80061fc:	3863      	subs	r0, #99	; 0x63
 80061fe:	2815      	cmp	r0, #21
 8006200:	d8f7      	bhi.n	80061f2 <_printf_i+0x2a>
 8006202:	f7f9 ff89 	bl	8000118 <__gnu_thumb1_case_shi>
 8006206:	0016      	.short	0x0016
 8006208:	fff6001f 	.word	0xfff6001f
 800620c:	fff6fff6 	.word	0xfff6fff6
 8006210:	001ffff6 	.word	0x001ffff6
 8006214:	fff6fff6 	.word	0xfff6fff6
 8006218:	fff6fff6 	.word	0xfff6fff6
 800621c:	003600a8 	.word	0x003600a8
 8006220:	fff6009a 	.word	0xfff6009a
 8006224:	00b9fff6 	.word	0x00b9fff6
 8006228:	0036fff6 	.word	0x0036fff6
 800622c:	fff6fff6 	.word	0xfff6fff6
 8006230:	009e      	.short	0x009e
 8006232:	0026      	movs	r6, r4
 8006234:	681a      	ldr	r2, [r3, #0]
 8006236:	3642      	adds	r6, #66	; 0x42
 8006238:	1d11      	adds	r1, r2, #4
 800623a:	6019      	str	r1, [r3, #0]
 800623c:	6813      	ldr	r3, [r2, #0]
 800623e:	7033      	strb	r3, [r6, #0]
 8006240:	2301      	movs	r3, #1
 8006242:	e0a7      	b.n	8006394 <_printf_i+0x1cc>
 8006244:	6808      	ldr	r0, [r1, #0]
 8006246:	6819      	ldr	r1, [r3, #0]
 8006248:	1d0a      	adds	r2, r1, #4
 800624a:	0605      	lsls	r5, r0, #24
 800624c:	d50b      	bpl.n	8006266 <_printf_i+0x9e>
 800624e:	680d      	ldr	r5, [r1, #0]
 8006250:	601a      	str	r2, [r3, #0]
 8006252:	2d00      	cmp	r5, #0
 8006254:	da03      	bge.n	800625e <_printf_i+0x96>
 8006256:	232d      	movs	r3, #45	; 0x2d
 8006258:	9a04      	ldr	r2, [sp, #16]
 800625a:	426d      	negs	r5, r5
 800625c:	7013      	strb	r3, [r2, #0]
 800625e:	4b61      	ldr	r3, [pc, #388]	; (80063e4 <_printf_i+0x21c>)
 8006260:	270a      	movs	r7, #10
 8006262:	9303      	str	r3, [sp, #12]
 8006264:	e01b      	b.n	800629e <_printf_i+0xd6>
 8006266:	680d      	ldr	r5, [r1, #0]
 8006268:	601a      	str	r2, [r3, #0]
 800626a:	0641      	lsls	r1, r0, #25
 800626c:	d5f1      	bpl.n	8006252 <_printf_i+0x8a>
 800626e:	b22d      	sxth	r5, r5
 8006270:	e7ef      	b.n	8006252 <_printf_i+0x8a>
 8006272:	680d      	ldr	r5, [r1, #0]
 8006274:	6819      	ldr	r1, [r3, #0]
 8006276:	1d08      	adds	r0, r1, #4
 8006278:	6018      	str	r0, [r3, #0]
 800627a:	062e      	lsls	r6, r5, #24
 800627c:	d501      	bpl.n	8006282 <_printf_i+0xba>
 800627e:	680d      	ldr	r5, [r1, #0]
 8006280:	e003      	b.n	800628a <_printf_i+0xc2>
 8006282:	066d      	lsls	r5, r5, #25
 8006284:	d5fb      	bpl.n	800627e <_printf_i+0xb6>
 8006286:	680d      	ldr	r5, [r1, #0]
 8006288:	b2ad      	uxth	r5, r5
 800628a:	4b56      	ldr	r3, [pc, #344]	; (80063e4 <_printf_i+0x21c>)
 800628c:	2708      	movs	r7, #8
 800628e:	9303      	str	r3, [sp, #12]
 8006290:	2a6f      	cmp	r2, #111	; 0x6f
 8006292:	d000      	beq.n	8006296 <_printf_i+0xce>
 8006294:	3702      	adds	r7, #2
 8006296:	0023      	movs	r3, r4
 8006298:	2200      	movs	r2, #0
 800629a:	3343      	adds	r3, #67	; 0x43
 800629c:	701a      	strb	r2, [r3, #0]
 800629e:	6863      	ldr	r3, [r4, #4]
 80062a0:	60a3      	str	r3, [r4, #8]
 80062a2:	2b00      	cmp	r3, #0
 80062a4:	db03      	blt.n	80062ae <_printf_i+0xe6>
 80062a6:	2204      	movs	r2, #4
 80062a8:	6821      	ldr	r1, [r4, #0]
 80062aa:	4391      	bics	r1, r2
 80062ac:	6021      	str	r1, [r4, #0]
 80062ae:	2d00      	cmp	r5, #0
 80062b0:	d102      	bne.n	80062b8 <_printf_i+0xf0>
 80062b2:	9e04      	ldr	r6, [sp, #16]
 80062b4:	2b00      	cmp	r3, #0
 80062b6:	d00c      	beq.n	80062d2 <_printf_i+0x10a>
 80062b8:	9e04      	ldr	r6, [sp, #16]
 80062ba:	0028      	movs	r0, r5
 80062bc:	0039      	movs	r1, r7
 80062be:	f7f9 ffbb 	bl	8000238 <__aeabi_uidivmod>
 80062c2:	9b03      	ldr	r3, [sp, #12]
 80062c4:	3e01      	subs	r6, #1
 80062c6:	5c5b      	ldrb	r3, [r3, r1]
 80062c8:	7033      	strb	r3, [r6, #0]
 80062ca:	002b      	movs	r3, r5
 80062cc:	0005      	movs	r5, r0
 80062ce:	429f      	cmp	r7, r3
 80062d0:	d9f3      	bls.n	80062ba <_printf_i+0xf2>
 80062d2:	2f08      	cmp	r7, #8
 80062d4:	d109      	bne.n	80062ea <_printf_i+0x122>
 80062d6:	6823      	ldr	r3, [r4, #0]
 80062d8:	07db      	lsls	r3, r3, #31
 80062da:	d506      	bpl.n	80062ea <_printf_i+0x122>
 80062dc:	6863      	ldr	r3, [r4, #4]
 80062de:	6922      	ldr	r2, [r4, #16]
 80062e0:	4293      	cmp	r3, r2
 80062e2:	dc02      	bgt.n	80062ea <_printf_i+0x122>
 80062e4:	2330      	movs	r3, #48	; 0x30
 80062e6:	3e01      	subs	r6, #1
 80062e8:	7033      	strb	r3, [r6, #0]
 80062ea:	9b04      	ldr	r3, [sp, #16]
 80062ec:	1b9b      	subs	r3, r3, r6
 80062ee:	6123      	str	r3, [r4, #16]
 80062f0:	9b07      	ldr	r3, [sp, #28]
 80062f2:	0021      	movs	r1, r4
 80062f4:	9300      	str	r3, [sp, #0]
 80062f6:	9805      	ldr	r0, [sp, #20]
 80062f8:	9b06      	ldr	r3, [sp, #24]
 80062fa:	aa09      	add	r2, sp, #36	; 0x24
 80062fc:	f7ff fef4 	bl	80060e8 <_printf_common>
 8006300:	1c43      	adds	r3, r0, #1
 8006302:	d14c      	bne.n	800639e <_printf_i+0x1d6>
 8006304:	2001      	movs	r0, #1
 8006306:	4240      	negs	r0, r0
 8006308:	b00b      	add	sp, #44	; 0x2c
 800630a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800630c:	3145      	adds	r1, #69	; 0x45
 800630e:	700a      	strb	r2, [r1, #0]
 8006310:	4a34      	ldr	r2, [pc, #208]	; (80063e4 <_printf_i+0x21c>)
 8006312:	9203      	str	r2, [sp, #12]
 8006314:	681a      	ldr	r2, [r3, #0]
 8006316:	6821      	ldr	r1, [r4, #0]
 8006318:	ca20      	ldmia	r2!, {r5}
 800631a:	601a      	str	r2, [r3, #0]
 800631c:	0608      	lsls	r0, r1, #24
 800631e:	d516      	bpl.n	800634e <_printf_i+0x186>
 8006320:	07cb      	lsls	r3, r1, #31
 8006322:	d502      	bpl.n	800632a <_printf_i+0x162>
 8006324:	2320      	movs	r3, #32
 8006326:	4319      	orrs	r1, r3
 8006328:	6021      	str	r1, [r4, #0]
 800632a:	2710      	movs	r7, #16
 800632c:	2d00      	cmp	r5, #0
 800632e:	d1b2      	bne.n	8006296 <_printf_i+0xce>
 8006330:	2320      	movs	r3, #32
 8006332:	6822      	ldr	r2, [r4, #0]
 8006334:	439a      	bics	r2, r3
 8006336:	6022      	str	r2, [r4, #0]
 8006338:	e7ad      	b.n	8006296 <_printf_i+0xce>
 800633a:	2220      	movs	r2, #32
 800633c:	6809      	ldr	r1, [r1, #0]
 800633e:	430a      	orrs	r2, r1
 8006340:	6022      	str	r2, [r4, #0]
 8006342:	0022      	movs	r2, r4
 8006344:	2178      	movs	r1, #120	; 0x78
 8006346:	3245      	adds	r2, #69	; 0x45
 8006348:	7011      	strb	r1, [r2, #0]
 800634a:	4a27      	ldr	r2, [pc, #156]	; (80063e8 <_printf_i+0x220>)
 800634c:	e7e1      	b.n	8006312 <_printf_i+0x14a>
 800634e:	0648      	lsls	r0, r1, #25
 8006350:	d5e6      	bpl.n	8006320 <_printf_i+0x158>
 8006352:	b2ad      	uxth	r5, r5
 8006354:	e7e4      	b.n	8006320 <_printf_i+0x158>
 8006356:	681a      	ldr	r2, [r3, #0]
 8006358:	680d      	ldr	r5, [r1, #0]
 800635a:	1d10      	adds	r0, r2, #4
 800635c:	6949      	ldr	r1, [r1, #20]
 800635e:	6018      	str	r0, [r3, #0]
 8006360:	6813      	ldr	r3, [r2, #0]
 8006362:	062e      	lsls	r6, r5, #24
 8006364:	d501      	bpl.n	800636a <_printf_i+0x1a2>
 8006366:	6019      	str	r1, [r3, #0]
 8006368:	e002      	b.n	8006370 <_printf_i+0x1a8>
 800636a:	066d      	lsls	r5, r5, #25
 800636c:	d5fb      	bpl.n	8006366 <_printf_i+0x19e>
 800636e:	8019      	strh	r1, [r3, #0]
 8006370:	2300      	movs	r3, #0
 8006372:	9e04      	ldr	r6, [sp, #16]
 8006374:	6123      	str	r3, [r4, #16]
 8006376:	e7bb      	b.n	80062f0 <_printf_i+0x128>
 8006378:	681a      	ldr	r2, [r3, #0]
 800637a:	1d11      	adds	r1, r2, #4
 800637c:	6019      	str	r1, [r3, #0]
 800637e:	6816      	ldr	r6, [r2, #0]
 8006380:	2100      	movs	r1, #0
 8006382:	0030      	movs	r0, r6
 8006384:	6862      	ldr	r2, [r4, #4]
 8006386:	f000 f831 	bl	80063ec <memchr>
 800638a:	2800      	cmp	r0, #0
 800638c:	d001      	beq.n	8006392 <_printf_i+0x1ca>
 800638e:	1b80      	subs	r0, r0, r6
 8006390:	6060      	str	r0, [r4, #4]
 8006392:	6863      	ldr	r3, [r4, #4]
 8006394:	6123      	str	r3, [r4, #16]
 8006396:	2300      	movs	r3, #0
 8006398:	9a04      	ldr	r2, [sp, #16]
 800639a:	7013      	strb	r3, [r2, #0]
 800639c:	e7a8      	b.n	80062f0 <_printf_i+0x128>
 800639e:	6923      	ldr	r3, [r4, #16]
 80063a0:	0032      	movs	r2, r6
 80063a2:	9906      	ldr	r1, [sp, #24]
 80063a4:	9805      	ldr	r0, [sp, #20]
 80063a6:	9d07      	ldr	r5, [sp, #28]
 80063a8:	47a8      	blx	r5
 80063aa:	1c43      	adds	r3, r0, #1
 80063ac:	d0aa      	beq.n	8006304 <_printf_i+0x13c>
 80063ae:	6823      	ldr	r3, [r4, #0]
 80063b0:	079b      	lsls	r3, r3, #30
 80063b2:	d415      	bmi.n	80063e0 <_printf_i+0x218>
 80063b4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80063b6:	68e0      	ldr	r0, [r4, #12]
 80063b8:	4298      	cmp	r0, r3
 80063ba:	daa5      	bge.n	8006308 <_printf_i+0x140>
 80063bc:	0018      	movs	r0, r3
 80063be:	e7a3      	b.n	8006308 <_printf_i+0x140>
 80063c0:	0022      	movs	r2, r4
 80063c2:	2301      	movs	r3, #1
 80063c4:	9906      	ldr	r1, [sp, #24]
 80063c6:	9805      	ldr	r0, [sp, #20]
 80063c8:	9e07      	ldr	r6, [sp, #28]
 80063ca:	3219      	adds	r2, #25
 80063cc:	47b0      	blx	r6
 80063ce:	1c43      	adds	r3, r0, #1
 80063d0:	d098      	beq.n	8006304 <_printf_i+0x13c>
 80063d2:	3501      	adds	r5, #1
 80063d4:	68e3      	ldr	r3, [r4, #12]
 80063d6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80063d8:	1a9b      	subs	r3, r3, r2
 80063da:	42ab      	cmp	r3, r5
 80063dc:	dcf0      	bgt.n	80063c0 <_printf_i+0x1f8>
 80063de:	e7e9      	b.n	80063b4 <_printf_i+0x1ec>
 80063e0:	2500      	movs	r5, #0
 80063e2:	e7f7      	b.n	80063d4 <_printf_i+0x20c>
 80063e4:	08006b5d 	.word	0x08006b5d
 80063e8:	08006b6e 	.word	0x08006b6e

080063ec <memchr>:
 80063ec:	b2c9      	uxtb	r1, r1
 80063ee:	1882      	adds	r2, r0, r2
 80063f0:	4290      	cmp	r0, r2
 80063f2:	d101      	bne.n	80063f8 <memchr+0xc>
 80063f4:	2000      	movs	r0, #0
 80063f6:	4770      	bx	lr
 80063f8:	7803      	ldrb	r3, [r0, #0]
 80063fa:	428b      	cmp	r3, r1
 80063fc:	d0fb      	beq.n	80063f6 <memchr+0xa>
 80063fe:	3001      	adds	r0, #1
 8006400:	e7f6      	b.n	80063f0 <memchr+0x4>

08006402 <memcpy>:
 8006402:	2300      	movs	r3, #0
 8006404:	b510      	push	{r4, lr}
 8006406:	429a      	cmp	r2, r3
 8006408:	d100      	bne.n	800640c <memcpy+0xa>
 800640a:	bd10      	pop	{r4, pc}
 800640c:	5ccc      	ldrb	r4, [r1, r3]
 800640e:	54c4      	strb	r4, [r0, r3]
 8006410:	3301      	adds	r3, #1
 8006412:	e7f8      	b.n	8006406 <memcpy+0x4>

08006414 <memmove>:
 8006414:	b510      	push	{r4, lr}
 8006416:	4288      	cmp	r0, r1
 8006418:	d902      	bls.n	8006420 <memmove+0xc>
 800641a:	188b      	adds	r3, r1, r2
 800641c:	4298      	cmp	r0, r3
 800641e:	d303      	bcc.n	8006428 <memmove+0x14>
 8006420:	2300      	movs	r3, #0
 8006422:	e007      	b.n	8006434 <memmove+0x20>
 8006424:	5c8b      	ldrb	r3, [r1, r2]
 8006426:	5483      	strb	r3, [r0, r2]
 8006428:	3a01      	subs	r2, #1
 800642a:	d2fb      	bcs.n	8006424 <memmove+0x10>
 800642c:	bd10      	pop	{r4, pc}
 800642e:	5ccc      	ldrb	r4, [r1, r3]
 8006430:	54c4      	strb	r4, [r0, r3]
 8006432:	3301      	adds	r3, #1
 8006434:	429a      	cmp	r2, r3
 8006436:	d1fa      	bne.n	800642e <memmove+0x1a>
 8006438:	e7f8      	b.n	800642c <memmove+0x18>
	...

0800643c <_free_r>:
 800643c:	b570      	push	{r4, r5, r6, lr}
 800643e:	0005      	movs	r5, r0
 8006440:	2900      	cmp	r1, #0
 8006442:	d010      	beq.n	8006466 <_free_r+0x2a>
 8006444:	1f0c      	subs	r4, r1, #4
 8006446:	6823      	ldr	r3, [r4, #0]
 8006448:	2b00      	cmp	r3, #0
 800644a:	da00      	bge.n	800644e <_free_r+0x12>
 800644c:	18e4      	adds	r4, r4, r3
 800644e:	0028      	movs	r0, r5
 8006450:	f000 f918 	bl	8006684 <__malloc_lock>
 8006454:	4a1d      	ldr	r2, [pc, #116]	; (80064cc <_free_r+0x90>)
 8006456:	6813      	ldr	r3, [r2, #0]
 8006458:	2b00      	cmp	r3, #0
 800645a:	d105      	bne.n	8006468 <_free_r+0x2c>
 800645c:	6063      	str	r3, [r4, #4]
 800645e:	6014      	str	r4, [r2, #0]
 8006460:	0028      	movs	r0, r5
 8006462:	f000 f917 	bl	8006694 <__malloc_unlock>
 8006466:	bd70      	pop	{r4, r5, r6, pc}
 8006468:	42a3      	cmp	r3, r4
 800646a:	d908      	bls.n	800647e <_free_r+0x42>
 800646c:	6821      	ldr	r1, [r4, #0]
 800646e:	1860      	adds	r0, r4, r1
 8006470:	4283      	cmp	r3, r0
 8006472:	d1f3      	bne.n	800645c <_free_r+0x20>
 8006474:	6818      	ldr	r0, [r3, #0]
 8006476:	685b      	ldr	r3, [r3, #4]
 8006478:	1841      	adds	r1, r0, r1
 800647a:	6021      	str	r1, [r4, #0]
 800647c:	e7ee      	b.n	800645c <_free_r+0x20>
 800647e:	001a      	movs	r2, r3
 8006480:	685b      	ldr	r3, [r3, #4]
 8006482:	2b00      	cmp	r3, #0
 8006484:	d001      	beq.n	800648a <_free_r+0x4e>
 8006486:	42a3      	cmp	r3, r4
 8006488:	d9f9      	bls.n	800647e <_free_r+0x42>
 800648a:	6811      	ldr	r1, [r2, #0]
 800648c:	1850      	adds	r0, r2, r1
 800648e:	42a0      	cmp	r0, r4
 8006490:	d10b      	bne.n	80064aa <_free_r+0x6e>
 8006492:	6820      	ldr	r0, [r4, #0]
 8006494:	1809      	adds	r1, r1, r0
 8006496:	1850      	adds	r0, r2, r1
 8006498:	6011      	str	r1, [r2, #0]
 800649a:	4283      	cmp	r3, r0
 800649c:	d1e0      	bne.n	8006460 <_free_r+0x24>
 800649e:	6818      	ldr	r0, [r3, #0]
 80064a0:	685b      	ldr	r3, [r3, #4]
 80064a2:	1841      	adds	r1, r0, r1
 80064a4:	6011      	str	r1, [r2, #0]
 80064a6:	6053      	str	r3, [r2, #4]
 80064a8:	e7da      	b.n	8006460 <_free_r+0x24>
 80064aa:	42a0      	cmp	r0, r4
 80064ac:	d902      	bls.n	80064b4 <_free_r+0x78>
 80064ae:	230c      	movs	r3, #12
 80064b0:	602b      	str	r3, [r5, #0]
 80064b2:	e7d5      	b.n	8006460 <_free_r+0x24>
 80064b4:	6821      	ldr	r1, [r4, #0]
 80064b6:	1860      	adds	r0, r4, r1
 80064b8:	4283      	cmp	r3, r0
 80064ba:	d103      	bne.n	80064c4 <_free_r+0x88>
 80064bc:	6818      	ldr	r0, [r3, #0]
 80064be:	685b      	ldr	r3, [r3, #4]
 80064c0:	1841      	adds	r1, r0, r1
 80064c2:	6021      	str	r1, [r4, #0]
 80064c4:	6063      	str	r3, [r4, #4]
 80064c6:	6054      	str	r4, [r2, #4]
 80064c8:	e7ca      	b.n	8006460 <_free_r+0x24>
 80064ca:	46c0      	nop			; (mov r8, r8)
 80064cc:	20000244 	.word	0x20000244

080064d0 <sbrk_aligned>:
 80064d0:	b570      	push	{r4, r5, r6, lr}
 80064d2:	4e0f      	ldr	r6, [pc, #60]	; (8006510 <sbrk_aligned+0x40>)
 80064d4:	000d      	movs	r5, r1
 80064d6:	6831      	ldr	r1, [r6, #0]
 80064d8:	0004      	movs	r4, r0
 80064da:	2900      	cmp	r1, #0
 80064dc:	d102      	bne.n	80064e4 <sbrk_aligned+0x14>
 80064de:	f000 f8bf 	bl	8006660 <_sbrk_r>
 80064e2:	6030      	str	r0, [r6, #0]
 80064e4:	0029      	movs	r1, r5
 80064e6:	0020      	movs	r0, r4
 80064e8:	f000 f8ba 	bl	8006660 <_sbrk_r>
 80064ec:	1c43      	adds	r3, r0, #1
 80064ee:	d00a      	beq.n	8006506 <sbrk_aligned+0x36>
 80064f0:	2303      	movs	r3, #3
 80064f2:	1cc5      	adds	r5, r0, #3
 80064f4:	439d      	bics	r5, r3
 80064f6:	42a8      	cmp	r0, r5
 80064f8:	d007      	beq.n	800650a <sbrk_aligned+0x3a>
 80064fa:	1a29      	subs	r1, r5, r0
 80064fc:	0020      	movs	r0, r4
 80064fe:	f000 f8af 	bl	8006660 <_sbrk_r>
 8006502:	1c43      	adds	r3, r0, #1
 8006504:	d101      	bne.n	800650a <sbrk_aligned+0x3a>
 8006506:	2501      	movs	r5, #1
 8006508:	426d      	negs	r5, r5
 800650a:	0028      	movs	r0, r5
 800650c:	bd70      	pop	{r4, r5, r6, pc}
 800650e:	46c0      	nop			; (mov r8, r8)
 8006510:	20000248 	.word	0x20000248

08006514 <_malloc_r>:
 8006514:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006516:	2203      	movs	r2, #3
 8006518:	1ccb      	adds	r3, r1, #3
 800651a:	4393      	bics	r3, r2
 800651c:	3308      	adds	r3, #8
 800651e:	0006      	movs	r6, r0
 8006520:	001f      	movs	r7, r3
 8006522:	2b0c      	cmp	r3, #12
 8006524:	d232      	bcs.n	800658c <_malloc_r+0x78>
 8006526:	270c      	movs	r7, #12
 8006528:	42b9      	cmp	r1, r7
 800652a:	d831      	bhi.n	8006590 <_malloc_r+0x7c>
 800652c:	0030      	movs	r0, r6
 800652e:	f000 f8a9 	bl	8006684 <__malloc_lock>
 8006532:	4d32      	ldr	r5, [pc, #200]	; (80065fc <_malloc_r+0xe8>)
 8006534:	682b      	ldr	r3, [r5, #0]
 8006536:	001c      	movs	r4, r3
 8006538:	2c00      	cmp	r4, #0
 800653a:	d12e      	bne.n	800659a <_malloc_r+0x86>
 800653c:	0039      	movs	r1, r7
 800653e:	0030      	movs	r0, r6
 8006540:	f7ff ffc6 	bl	80064d0 <sbrk_aligned>
 8006544:	0004      	movs	r4, r0
 8006546:	1c43      	adds	r3, r0, #1
 8006548:	d11e      	bne.n	8006588 <_malloc_r+0x74>
 800654a:	682c      	ldr	r4, [r5, #0]
 800654c:	0025      	movs	r5, r4
 800654e:	2d00      	cmp	r5, #0
 8006550:	d14a      	bne.n	80065e8 <_malloc_r+0xd4>
 8006552:	6823      	ldr	r3, [r4, #0]
 8006554:	0029      	movs	r1, r5
 8006556:	18e3      	adds	r3, r4, r3
 8006558:	0030      	movs	r0, r6
 800655a:	9301      	str	r3, [sp, #4]
 800655c:	f000 f880 	bl	8006660 <_sbrk_r>
 8006560:	9b01      	ldr	r3, [sp, #4]
 8006562:	4283      	cmp	r3, r0
 8006564:	d143      	bne.n	80065ee <_malloc_r+0xda>
 8006566:	6823      	ldr	r3, [r4, #0]
 8006568:	3703      	adds	r7, #3
 800656a:	1aff      	subs	r7, r7, r3
 800656c:	2303      	movs	r3, #3
 800656e:	439f      	bics	r7, r3
 8006570:	3708      	adds	r7, #8
 8006572:	2f0c      	cmp	r7, #12
 8006574:	d200      	bcs.n	8006578 <_malloc_r+0x64>
 8006576:	270c      	movs	r7, #12
 8006578:	0039      	movs	r1, r7
 800657a:	0030      	movs	r0, r6
 800657c:	f7ff ffa8 	bl	80064d0 <sbrk_aligned>
 8006580:	1c43      	adds	r3, r0, #1
 8006582:	d034      	beq.n	80065ee <_malloc_r+0xda>
 8006584:	6823      	ldr	r3, [r4, #0]
 8006586:	19df      	adds	r7, r3, r7
 8006588:	6027      	str	r7, [r4, #0]
 800658a:	e013      	b.n	80065b4 <_malloc_r+0xa0>
 800658c:	2b00      	cmp	r3, #0
 800658e:	dacb      	bge.n	8006528 <_malloc_r+0x14>
 8006590:	230c      	movs	r3, #12
 8006592:	2500      	movs	r5, #0
 8006594:	6033      	str	r3, [r6, #0]
 8006596:	0028      	movs	r0, r5
 8006598:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800659a:	6822      	ldr	r2, [r4, #0]
 800659c:	1bd1      	subs	r1, r2, r7
 800659e:	d420      	bmi.n	80065e2 <_malloc_r+0xce>
 80065a0:	290b      	cmp	r1, #11
 80065a2:	d917      	bls.n	80065d4 <_malloc_r+0xc0>
 80065a4:	19e2      	adds	r2, r4, r7
 80065a6:	6027      	str	r7, [r4, #0]
 80065a8:	42a3      	cmp	r3, r4
 80065aa:	d111      	bne.n	80065d0 <_malloc_r+0xbc>
 80065ac:	602a      	str	r2, [r5, #0]
 80065ae:	6863      	ldr	r3, [r4, #4]
 80065b0:	6011      	str	r1, [r2, #0]
 80065b2:	6053      	str	r3, [r2, #4]
 80065b4:	0030      	movs	r0, r6
 80065b6:	0025      	movs	r5, r4
 80065b8:	f000 f86c 	bl	8006694 <__malloc_unlock>
 80065bc:	2207      	movs	r2, #7
 80065be:	350b      	adds	r5, #11
 80065c0:	1d23      	adds	r3, r4, #4
 80065c2:	4395      	bics	r5, r2
 80065c4:	1aea      	subs	r2, r5, r3
 80065c6:	429d      	cmp	r5, r3
 80065c8:	d0e5      	beq.n	8006596 <_malloc_r+0x82>
 80065ca:	1b5b      	subs	r3, r3, r5
 80065cc:	50a3      	str	r3, [r4, r2]
 80065ce:	e7e2      	b.n	8006596 <_malloc_r+0x82>
 80065d0:	605a      	str	r2, [r3, #4]
 80065d2:	e7ec      	b.n	80065ae <_malloc_r+0x9a>
 80065d4:	6862      	ldr	r2, [r4, #4]
 80065d6:	42a3      	cmp	r3, r4
 80065d8:	d101      	bne.n	80065de <_malloc_r+0xca>
 80065da:	602a      	str	r2, [r5, #0]
 80065dc:	e7ea      	b.n	80065b4 <_malloc_r+0xa0>
 80065de:	605a      	str	r2, [r3, #4]
 80065e0:	e7e8      	b.n	80065b4 <_malloc_r+0xa0>
 80065e2:	0023      	movs	r3, r4
 80065e4:	6864      	ldr	r4, [r4, #4]
 80065e6:	e7a7      	b.n	8006538 <_malloc_r+0x24>
 80065e8:	002c      	movs	r4, r5
 80065ea:	686d      	ldr	r5, [r5, #4]
 80065ec:	e7af      	b.n	800654e <_malloc_r+0x3a>
 80065ee:	230c      	movs	r3, #12
 80065f0:	0030      	movs	r0, r6
 80065f2:	6033      	str	r3, [r6, #0]
 80065f4:	f000 f84e 	bl	8006694 <__malloc_unlock>
 80065f8:	e7cd      	b.n	8006596 <_malloc_r+0x82>
 80065fa:	46c0      	nop			; (mov r8, r8)
 80065fc:	20000244 	.word	0x20000244

08006600 <_realloc_r>:
 8006600:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006602:	0007      	movs	r7, r0
 8006604:	000e      	movs	r6, r1
 8006606:	0014      	movs	r4, r2
 8006608:	2900      	cmp	r1, #0
 800660a:	d105      	bne.n	8006618 <_realloc_r+0x18>
 800660c:	0011      	movs	r1, r2
 800660e:	f7ff ff81 	bl	8006514 <_malloc_r>
 8006612:	0005      	movs	r5, r0
 8006614:	0028      	movs	r0, r5
 8006616:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8006618:	2a00      	cmp	r2, #0
 800661a:	d103      	bne.n	8006624 <_realloc_r+0x24>
 800661c:	f7ff ff0e 	bl	800643c <_free_r>
 8006620:	0025      	movs	r5, r4
 8006622:	e7f7      	b.n	8006614 <_realloc_r+0x14>
 8006624:	f000 f83e 	bl	80066a4 <_malloc_usable_size_r>
 8006628:	9001      	str	r0, [sp, #4]
 800662a:	4284      	cmp	r4, r0
 800662c:	d803      	bhi.n	8006636 <_realloc_r+0x36>
 800662e:	0035      	movs	r5, r6
 8006630:	0843      	lsrs	r3, r0, #1
 8006632:	42a3      	cmp	r3, r4
 8006634:	d3ee      	bcc.n	8006614 <_realloc_r+0x14>
 8006636:	0021      	movs	r1, r4
 8006638:	0038      	movs	r0, r7
 800663a:	f7ff ff6b 	bl	8006514 <_malloc_r>
 800663e:	1e05      	subs	r5, r0, #0
 8006640:	d0e8      	beq.n	8006614 <_realloc_r+0x14>
 8006642:	9b01      	ldr	r3, [sp, #4]
 8006644:	0022      	movs	r2, r4
 8006646:	429c      	cmp	r4, r3
 8006648:	d900      	bls.n	800664c <_realloc_r+0x4c>
 800664a:	001a      	movs	r2, r3
 800664c:	0031      	movs	r1, r6
 800664e:	0028      	movs	r0, r5
 8006650:	f7ff fed7 	bl	8006402 <memcpy>
 8006654:	0031      	movs	r1, r6
 8006656:	0038      	movs	r0, r7
 8006658:	f7ff fef0 	bl	800643c <_free_r>
 800665c:	e7da      	b.n	8006614 <_realloc_r+0x14>
	...

08006660 <_sbrk_r>:
 8006660:	2300      	movs	r3, #0
 8006662:	b570      	push	{r4, r5, r6, lr}
 8006664:	4d06      	ldr	r5, [pc, #24]	; (8006680 <_sbrk_r+0x20>)
 8006666:	0004      	movs	r4, r0
 8006668:	0008      	movs	r0, r1
 800666a:	602b      	str	r3, [r5, #0]
 800666c:	f7fb fa0a 	bl	8001a84 <_sbrk>
 8006670:	1c43      	adds	r3, r0, #1
 8006672:	d103      	bne.n	800667c <_sbrk_r+0x1c>
 8006674:	682b      	ldr	r3, [r5, #0]
 8006676:	2b00      	cmp	r3, #0
 8006678:	d000      	beq.n	800667c <_sbrk_r+0x1c>
 800667a:	6023      	str	r3, [r4, #0]
 800667c:	bd70      	pop	{r4, r5, r6, pc}
 800667e:	46c0      	nop			; (mov r8, r8)
 8006680:	2000024c 	.word	0x2000024c

08006684 <__malloc_lock>:
 8006684:	b510      	push	{r4, lr}
 8006686:	4802      	ldr	r0, [pc, #8]	; (8006690 <__malloc_lock+0xc>)
 8006688:	f000 f814 	bl	80066b4 <__retarget_lock_acquire_recursive>
 800668c:	bd10      	pop	{r4, pc}
 800668e:	46c0      	nop			; (mov r8, r8)
 8006690:	20000250 	.word	0x20000250

08006694 <__malloc_unlock>:
 8006694:	b510      	push	{r4, lr}
 8006696:	4802      	ldr	r0, [pc, #8]	; (80066a0 <__malloc_unlock+0xc>)
 8006698:	f000 f80d 	bl	80066b6 <__retarget_lock_release_recursive>
 800669c:	bd10      	pop	{r4, pc}
 800669e:	46c0      	nop			; (mov r8, r8)
 80066a0:	20000250 	.word	0x20000250

080066a4 <_malloc_usable_size_r>:
 80066a4:	1f0b      	subs	r3, r1, #4
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	1f18      	subs	r0, r3, #4
 80066aa:	2b00      	cmp	r3, #0
 80066ac:	da01      	bge.n	80066b2 <_malloc_usable_size_r+0xe>
 80066ae:	580b      	ldr	r3, [r1, r0]
 80066b0:	18c0      	adds	r0, r0, r3
 80066b2:	4770      	bx	lr

080066b4 <__retarget_lock_acquire_recursive>:
 80066b4:	4770      	bx	lr

080066b6 <__retarget_lock_release_recursive>:
 80066b6:	4770      	bx	lr

080066b8 <_init>:
 80066b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80066ba:	46c0      	nop			; (mov r8, r8)
 80066bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80066be:	bc08      	pop	{r3}
 80066c0:	469e      	mov	lr, r3
 80066c2:	4770      	bx	lr

080066c4 <_fini>:
 80066c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80066c6:	46c0      	nop			; (mov r8, r8)
 80066c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80066ca:	bc08      	pop	{r3}
 80066cc:	469e      	mov	lr, r3
 80066ce:	4770      	bx	lr
