
Button_V1-2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005c6c  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000498  08005d2c  08005d2c  00015d2c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080061c4  080061c4  00020080  2**0
                  CONTENTS
  4 .ARM          00000008  080061c4  080061c4  000161c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080061cc  080061cc  00020080  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080061cc  080061cc  000161cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080061d0  080061d0  000161d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000080  20000000  080061d4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001b8  20000080  08006254  00020080  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000238  08006254  00020238  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020080  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001006d  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000020ad  00000000  00000000  00030115  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e60  00000000  00000000  000321c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000d88  00000000  00000000  00033028  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00013a55  00000000  00000000  00033db0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001077a  00000000  00000000  00047805  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00079af2  00000000  00000000  00057f7f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000d1a71  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000037fc  00000000  00000000  000d1ac4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000080 	.word	0x20000080
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08005d14 	.word	0x08005d14

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000084 	.word	0x20000084
 8000104:	08005d14 	.word	0x08005d14

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__gnu_thumb1_case_shi>:
 8000118:	b403      	push	{r0, r1}
 800011a:	4671      	mov	r1, lr
 800011c:	0849      	lsrs	r1, r1, #1
 800011e:	0040      	lsls	r0, r0, #1
 8000120:	0049      	lsls	r1, r1, #1
 8000122:	5e09      	ldrsh	r1, [r1, r0]
 8000124:	0049      	lsls	r1, r1, #1
 8000126:	448e      	add	lr, r1
 8000128:	bc03      	pop	{r0, r1}
 800012a:	4770      	bx	lr

0800012c <__udivsi3>:
 800012c:	2200      	movs	r2, #0
 800012e:	0843      	lsrs	r3, r0, #1
 8000130:	428b      	cmp	r3, r1
 8000132:	d374      	bcc.n	800021e <__udivsi3+0xf2>
 8000134:	0903      	lsrs	r3, r0, #4
 8000136:	428b      	cmp	r3, r1
 8000138:	d35f      	bcc.n	80001fa <__udivsi3+0xce>
 800013a:	0a03      	lsrs	r3, r0, #8
 800013c:	428b      	cmp	r3, r1
 800013e:	d344      	bcc.n	80001ca <__udivsi3+0x9e>
 8000140:	0b03      	lsrs	r3, r0, #12
 8000142:	428b      	cmp	r3, r1
 8000144:	d328      	bcc.n	8000198 <__udivsi3+0x6c>
 8000146:	0c03      	lsrs	r3, r0, #16
 8000148:	428b      	cmp	r3, r1
 800014a:	d30d      	bcc.n	8000168 <__udivsi3+0x3c>
 800014c:	22ff      	movs	r2, #255	; 0xff
 800014e:	0209      	lsls	r1, r1, #8
 8000150:	ba12      	rev	r2, r2
 8000152:	0c03      	lsrs	r3, r0, #16
 8000154:	428b      	cmp	r3, r1
 8000156:	d302      	bcc.n	800015e <__udivsi3+0x32>
 8000158:	1212      	asrs	r2, r2, #8
 800015a:	0209      	lsls	r1, r1, #8
 800015c:	d065      	beq.n	800022a <__udivsi3+0xfe>
 800015e:	0b03      	lsrs	r3, r0, #12
 8000160:	428b      	cmp	r3, r1
 8000162:	d319      	bcc.n	8000198 <__udivsi3+0x6c>
 8000164:	e000      	b.n	8000168 <__udivsi3+0x3c>
 8000166:	0a09      	lsrs	r1, r1, #8
 8000168:	0bc3      	lsrs	r3, r0, #15
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x46>
 800016e:	03cb      	lsls	r3, r1, #15
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0b83      	lsrs	r3, r0, #14
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x52>
 800017a:	038b      	lsls	r3, r1, #14
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0b43      	lsrs	r3, r0, #13
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x5e>
 8000186:	034b      	lsls	r3, r1, #13
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0b03      	lsrs	r3, r0, #12
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x6a>
 8000192:	030b      	lsls	r3, r1, #12
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0ac3      	lsrs	r3, r0, #11
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x76>
 800019e:	02cb      	lsls	r3, r1, #11
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	0a83      	lsrs	r3, r0, #10
 80001a6:	428b      	cmp	r3, r1
 80001a8:	d301      	bcc.n	80001ae <__udivsi3+0x82>
 80001aa:	028b      	lsls	r3, r1, #10
 80001ac:	1ac0      	subs	r0, r0, r3
 80001ae:	4152      	adcs	r2, r2
 80001b0:	0a43      	lsrs	r3, r0, #9
 80001b2:	428b      	cmp	r3, r1
 80001b4:	d301      	bcc.n	80001ba <__udivsi3+0x8e>
 80001b6:	024b      	lsls	r3, r1, #9
 80001b8:	1ac0      	subs	r0, r0, r3
 80001ba:	4152      	adcs	r2, r2
 80001bc:	0a03      	lsrs	r3, r0, #8
 80001be:	428b      	cmp	r3, r1
 80001c0:	d301      	bcc.n	80001c6 <__udivsi3+0x9a>
 80001c2:	020b      	lsls	r3, r1, #8
 80001c4:	1ac0      	subs	r0, r0, r3
 80001c6:	4152      	adcs	r2, r2
 80001c8:	d2cd      	bcs.n	8000166 <__udivsi3+0x3a>
 80001ca:	09c3      	lsrs	r3, r0, #7
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xa8>
 80001d0:	01cb      	lsls	r3, r1, #7
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	0983      	lsrs	r3, r0, #6
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xb4>
 80001dc:	018b      	lsls	r3, r1, #6
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0943      	lsrs	r3, r0, #5
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xc0>
 80001e8:	014b      	lsls	r3, r1, #5
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0903      	lsrs	r3, r0, #4
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xcc>
 80001f4:	010b      	lsls	r3, r1, #4
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	08c3      	lsrs	r3, r0, #3
 80001fc:	428b      	cmp	r3, r1
 80001fe:	d301      	bcc.n	8000204 <__udivsi3+0xd8>
 8000200:	00cb      	lsls	r3, r1, #3
 8000202:	1ac0      	subs	r0, r0, r3
 8000204:	4152      	adcs	r2, r2
 8000206:	0883      	lsrs	r3, r0, #2
 8000208:	428b      	cmp	r3, r1
 800020a:	d301      	bcc.n	8000210 <__udivsi3+0xe4>
 800020c:	008b      	lsls	r3, r1, #2
 800020e:	1ac0      	subs	r0, r0, r3
 8000210:	4152      	adcs	r2, r2
 8000212:	0843      	lsrs	r3, r0, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d301      	bcc.n	800021c <__udivsi3+0xf0>
 8000218:	004b      	lsls	r3, r1, #1
 800021a:	1ac0      	subs	r0, r0, r3
 800021c:	4152      	adcs	r2, r2
 800021e:	1a41      	subs	r1, r0, r1
 8000220:	d200      	bcs.n	8000224 <__udivsi3+0xf8>
 8000222:	4601      	mov	r1, r0
 8000224:	4152      	adcs	r2, r2
 8000226:	4610      	mov	r0, r2
 8000228:	4770      	bx	lr
 800022a:	e7ff      	b.n	800022c <__udivsi3+0x100>
 800022c:	b501      	push	{r0, lr}
 800022e:	2000      	movs	r0, #0
 8000230:	f000 f806 	bl	8000240 <__aeabi_idiv0>
 8000234:	bd02      	pop	{r1, pc}
 8000236:	46c0      	nop			; (mov r8, r8)

08000238 <__aeabi_uidivmod>:
 8000238:	2900      	cmp	r1, #0
 800023a:	d0f7      	beq.n	800022c <__udivsi3+0x100>
 800023c:	e776      	b.n	800012c <__udivsi3>
 800023e:	4770      	bx	lr

08000240 <__aeabi_idiv0>:
 8000240:	4770      	bx	lr
 8000242:	46c0      	nop			; (mov r8, r8)

08000244 <__aeabi_uldivmod>:
 8000244:	2b00      	cmp	r3, #0
 8000246:	d111      	bne.n	800026c <__aeabi_uldivmod+0x28>
 8000248:	2a00      	cmp	r2, #0
 800024a:	d10f      	bne.n	800026c <__aeabi_uldivmod+0x28>
 800024c:	2900      	cmp	r1, #0
 800024e:	d100      	bne.n	8000252 <__aeabi_uldivmod+0xe>
 8000250:	2800      	cmp	r0, #0
 8000252:	d002      	beq.n	800025a <__aeabi_uldivmod+0x16>
 8000254:	2100      	movs	r1, #0
 8000256:	43c9      	mvns	r1, r1
 8000258:	0008      	movs	r0, r1
 800025a:	b407      	push	{r0, r1, r2}
 800025c:	4802      	ldr	r0, [pc, #8]	; (8000268 <__aeabi_uldivmod+0x24>)
 800025e:	a102      	add	r1, pc, #8	; (adr r1, 8000268 <__aeabi_uldivmod+0x24>)
 8000260:	1840      	adds	r0, r0, r1
 8000262:	9002      	str	r0, [sp, #8]
 8000264:	bd03      	pop	{r0, r1, pc}
 8000266:	46c0      	nop			; (mov r8, r8)
 8000268:	ffffffd9 	.word	0xffffffd9
 800026c:	b403      	push	{r0, r1}
 800026e:	4668      	mov	r0, sp
 8000270:	b501      	push	{r0, lr}
 8000272:	9802      	ldr	r0, [sp, #8]
 8000274:	f000 f834 	bl	80002e0 <__udivmoddi4>
 8000278:	9b01      	ldr	r3, [sp, #4]
 800027a:	469e      	mov	lr, r3
 800027c:	b002      	add	sp, #8
 800027e:	bc0c      	pop	{r2, r3}
 8000280:	4770      	bx	lr
 8000282:	46c0      	nop			; (mov r8, r8)

08000284 <__aeabi_lmul>:
 8000284:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000286:	46ce      	mov	lr, r9
 8000288:	4647      	mov	r7, r8
 800028a:	b580      	push	{r7, lr}
 800028c:	0007      	movs	r7, r0
 800028e:	4699      	mov	r9, r3
 8000290:	0c3b      	lsrs	r3, r7, #16
 8000292:	469c      	mov	ip, r3
 8000294:	0413      	lsls	r3, r2, #16
 8000296:	0c1b      	lsrs	r3, r3, #16
 8000298:	001d      	movs	r5, r3
 800029a:	000e      	movs	r6, r1
 800029c:	4661      	mov	r1, ip
 800029e:	0400      	lsls	r0, r0, #16
 80002a0:	0c14      	lsrs	r4, r2, #16
 80002a2:	0c00      	lsrs	r0, r0, #16
 80002a4:	4345      	muls	r5, r0
 80002a6:	434b      	muls	r3, r1
 80002a8:	4360      	muls	r0, r4
 80002aa:	4361      	muls	r1, r4
 80002ac:	18c0      	adds	r0, r0, r3
 80002ae:	0c2c      	lsrs	r4, r5, #16
 80002b0:	1820      	adds	r0, r4, r0
 80002b2:	468c      	mov	ip, r1
 80002b4:	4283      	cmp	r3, r0
 80002b6:	d903      	bls.n	80002c0 <__aeabi_lmul+0x3c>
 80002b8:	2380      	movs	r3, #128	; 0x80
 80002ba:	025b      	lsls	r3, r3, #9
 80002bc:	4698      	mov	r8, r3
 80002be:	44c4      	add	ip, r8
 80002c0:	4649      	mov	r1, r9
 80002c2:	4379      	muls	r1, r7
 80002c4:	4372      	muls	r2, r6
 80002c6:	0c03      	lsrs	r3, r0, #16
 80002c8:	4463      	add	r3, ip
 80002ca:	042d      	lsls	r5, r5, #16
 80002cc:	0c2d      	lsrs	r5, r5, #16
 80002ce:	18c9      	adds	r1, r1, r3
 80002d0:	0400      	lsls	r0, r0, #16
 80002d2:	1940      	adds	r0, r0, r5
 80002d4:	1889      	adds	r1, r1, r2
 80002d6:	bcc0      	pop	{r6, r7}
 80002d8:	46b9      	mov	r9, r7
 80002da:	46b0      	mov	r8, r6
 80002dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80002de:	46c0      	nop			; (mov r8, r8)

080002e0 <__udivmoddi4>:
 80002e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80002e2:	4657      	mov	r7, sl
 80002e4:	464e      	mov	r6, r9
 80002e6:	4645      	mov	r5, r8
 80002e8:	46de      	mov	lr, fp
 80002ea:	b5e0      	push	{r5, r6, r7, lr}
 80002ec:	0004      	movs	r4, r0
 80002ee:	000d      	movs	r5, r1
 80002f0:	4692      	mov	sl, r2
 80002f2:	4699      	mov	r9, r3
 80002f4:	b083      	sub	sp, #12
 80002f6:	428b      	cmp	r3, r1
 80002f8:	d830      	bhi.n	800035c <__udivmoddi4+0x7c>
 80002fa:	d02d      	beq.n	8000358 <__udivmoddi4+0x78>
 80002fc:	4649      	mov	r1, r9
 80002fe:	4650      	mov	r0, sl
 8000300:	f000 f8ba 	bl	8000478 <__clzdi2>
 8000304:	0029      	movs	r1, r5
 8000306:	0006      	movs	r6, r0
 8000308:	0020      	movs	r0, r4
 800030a:	f000 f8b5 	bl	8000478 <__clzdi2>
 800030e:	1a33      	subs	r3, r6, r0
 8000310:	4698      	mov	r8, r3
 8000312:	3b20      	subs	r3, #32
 8000314:	469b      	mov	fp, r3
 8000316:	d433      	bmi.n	8000380 <__udivmoddi4+0xa0>
 8000318:	465a      	mov	r2, fp
 800031a:	4653      	mov	r3, sl
 800031c:	4093      	lsls	r3, r2
 800031e:	4642      	mov	r2, r8
 8000320:	001f      	movs	r7, r3
 8000322:	4653      	mov	r3, sl
 8000324:	4093      	lsls	r3, r2
 8000326:	001e      	movs	r6, r3
 8000328:	42af      	cmp	r7, r5
 800032a:	d83a      	bhi.n	80003a2 <__udivmoddi4+0xc2>
 800032c:	42af      	cmp	r7, r5
 800032e:	d100      	bne.n	8000332 <__udivmoddi4+0x52>
 8000330:	e078      	b.n	8000424 <__udivmoddi4+0x144>
 8000332:	465b      	mov	r3, fp
 8000334:	1ba4      	subs	r4, r4, r6
 8000336:	41bd      	sbcs	r5, r7
 8000338:	2b00      	cmp	r3, #0
 800033a:	da00      	bge.n	800033e <__udivmoddi4+0x5e>
 800033c:	e075      	b.n	800042a <__udivmoddi4+0x14a>
 800033e:	2200      	movs	r2, #0
 8000340:	2300      	movs	r3, #0
 8000342:	9200      	str	r2, [sp, #0]
 8000344:	9301      	str	r3, [sp, #4]
 8000346:	2301      	movs	r3, #1
 8000348:	465a      	mov	r2, fp
 800034a:	4093      	lsls	r3, r2
 800034c:	9301      	str	r3, [sp, #4]
 800034e:	2301      	movs	r3, #1
 8000350:	4642      	mov	r2, r8
 8000352:	4093      	lsls	r3, r2
 8000354:	9300      	str	r3, [sp, #0]
 8000356:	e028      	b.n	80003aa <__udivmoddi4+0xca>
 8000358:	4282      	cmp	r2, r0
 800035a:	d9cf      	bls.n	80002fc <__udivmoddi4+0x1c>
 800035c:	2200      	movs	r2, #0
 800035e:	2300      	movs	r3, #0
 8000360:	9200      	str	r2, [sp, #0]
 8000362:	9301      	str	r3, [sp, #4]
 8000364:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8000366:	2b00      	cmp	r3, #0
 8000368:	d001      	beq.n	800036e <__udivmoddi4+0x8e>
 800036a:	601c      	str	r4, [r3, #0]
 800036c:	605d      	str	r5, [r3, #4]
 800036e:	9800      	ldr	r0, [sp, #0]
 8000370:	9901      	ldr	r1, [sp, #4]
 8000372:	b003      	add	sp, #12
 8000374:	bcf0      	pop	{r4, r5, r6, r7}
 8000376:	46bb      	mov	fp, r7
 8000378:	46b2      	mov	sl, r6
 800037a:	46a9      	mov	r9, r5
 800037c:	46a0      	mov	r8, r4
 800037e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000380:	4642      	mov	r2, r8
 8000382:	2320      	movs	r3, #32
 8000384:	1a9b      	subs	r3, r3, r2
 8000386:	4652      	mov	r2, sl
 8000388:	40da      	lsrs	r2, r3
 800038a:	4641      	mov	r1, r8
 800038c:	0013      	movs	r3, r2
 800038e:	464a      	mov	r2, r9
 8000390:	408a      	lsls	r2, r1
 8000392:	0017      	movs	r7, r2
 8000394:	4642      	mov	r2, r8
 8000396:	431f      	orrs	r7, r3
 8000398:	4653      	mov	r3, sl
 800039a:	4093      	lsls	r3, r2
 800039c:	001e      	movs	r6, r3
 800039e:	42af      	cmp	r7, r5
 80003a0:	d9c4      	bls.n	800032c <__udivmoddi4+0x4c>
 80003a2:	2200      	movs	r2, #0
 80003a4:	2300      	movs	r3, #0
 80003a6:	9200      	str	r2, [sp, #0]
 80003a8:	9301      	str	r3, [sp, #4]
 80003aa:	4643      	mov	r3, r8
 80003ac:	2b00      	cmp	r3, #0
 80003ae:	d0d9      	beq.n	8000364 <__udivmoddi4+0x84>
 80003b0:	07fb      	lsls	r3, r7, #31
 80003b2:	0872      	lsrs	r2, r6, #1
 80003b4:	431a      	orrs	r2, r3
 80003b6:	4646      	mov	r6, r8
 80003b8:	087b      	lsrs	r3, r7, #1
 80003ba:	e00e      	b.n	80003da <__udivmoddi4+0xfa>
 80003bc:	42ab      	cmp	r3, r5
 80003be:	d101      	bne.n	80003c4 <__udivmoddi4+0xe4>
 80003c0:	42a2      	cmp	r2, r4
 80003c2:	d80c      	bhi.n	80003de <__udivmoddi4+0xfe>
 80003c4:	1aa4      	subs	r4, r4, r2
 80003c6:	419d      	sbcs	r5, r3
 80003c8:	2001      	movs	r0, #1
 80003ca:	1924      	adds	r4, r4, r4
 80003cc:	416d      	adcs	r5, r5
 80003ce:	2100      	movs	r1, #0
 80003d0:	3e01      	subs	r6, #1
 80003d2:	1824      	adds	r4, r4, r0
 80003d4:	414d      	adcs	r5, r1
 80003d6:	2e00      	cmp	r6, #0
 80003d8:	d006      	beq.n	80003e8 <__udivmoddi4+0x108>
 80003da:	42ab      	cmp	r3, r5
 80003dc:	d9ee      	bls.n	80003bc <__udivmoddi4+0xdc>
 80003de:	3e01      	subs	r6, #1
 80003e0:	1924      	adds	r4, r4, r4
 80003e2:	416d      	adcs	r5, r5
 80003e4:	2e00      	cmp	r6, #0
 80003e6:	d1f8      	bne.n	80003da <__udivmoddi4+0xfa>
 80003e8:	9800      	ldr	r0, [sp, #0]
 80003ea:	9901      	ldr	r1, [sp, #4]
 80003ec:	465b      	mov	r3, fp
 80003ee:	1900      	adds	r0, r0, r4
 80003f0:	4169      	adcs	r1, r5
 80003f2:	2b00      	cmp	r3, #0
 80003f4:	db24      	blt.n	8000440 <__udivmoddi4+0x160>
 80003f6:	002b      	movs	r3, r5
 80003f8:	465a      	mov	r2, fp
 80003fa:	4644      	mov	r4, r8
 80003fc:	40d3      	lsrs	r3, r2
 80003fe:	002a      	movs	r2, r5
 8000400:	40e2      	lsrs	r2, r4
 8000402:	001c      	movs	r4, r3
 8000404:	465b      	mov	r3, fp
 8000406:	0015      	movs	r5, r2
 8000408:	2b00      	cmp	r3, #0
 800040a:	db2a      	blt.n	8000462 <__udivmoddi4+0x182>
 800040c:	0026      	movs	r6, r4
 800040e:	409e      	lsls	r6, r3
 8000410:	0033      	movs	r3, r6
 8000412:	0026      	movs	r6, r4
 8000414:	4647      	mov	r7, r8
 8000416:	40be      	lsls	r6, r7
 8000418:	0032      	movs	r2, r6
 800041a:	1a80      	subs	r0, r0, r2
 800041c:	4199      	sbcs	r1, r3
 800041e:	9000      	str	r0, [sp, #0]
 8000420:	9101      	str	r1, [sp, #4]
 8000422:	e79f      	b.n	8000364 <__udivmoddi4+0x84>
 8000424:	42a3      	cmp	r3, r4
 8000426:	d8bc      	bhi.n	80003a2 <__udivmoddi4+0xc2>
 8000428:	e783      	b.n	8000332 <__udivmoddi4+0x52>
 800042a:	4642      	mov	r2, r8
 800042c:	2320      	movs	r3, #32
 800042e:	2100      	movs	r1, #0
 8000430:	1a9b      	subs	r3, r3, r2
 8000432:	2200      	movs	r2, #0
 8000434:	9100      	str	r1, [sp, #0]
 8000436:	9201      	str	r2, [sp, #4]
 8000438:	2201      	movs	r2, #1
 800043a:	40da      	lsrs	r2, r3
 800043c:	9201      	str	r2, [sp, #4]
 800043e:	e786      	b.n	800034e <__udivmoddi4+0x6e>
 8000440:	4642      	mov	r2, r8
 8000442:	2320      	movs	r3, #32
 8000444:	1a9b      	subs	r3, r3, r2
 8000446:	002a      	movs	r2, r5
 8000448:	4646      	mov	r6, r8
 800044a:	409a      	lsls	r2, r3
 800044c:	0023      	movs	r3, r4
 800044e:	40f3      	lsrs	r3, r6
 8000450:	4644      	mov	r4, r8
 8000452:	4313      	orrs	r3, r2
 8000454:	002a      	movs	r2, r5
 8000456:	40e2      	lsrs	r2, r4
 8000458:	001c      	movs	r4, r3
 800045a:	465b      	mov	r3, fp
 800045c:	0015      	movs	r5, r2
 800045e:	2b00      	cmp	r3, #0
 8000460:	dad4      	bge.n	800040c <__udivmoddi4+0x12c>
 8000462:	4642      	mov	r2, r8
 8000464:	002f      	movs	r7, r5
 8000466:	2320      	movs	r3, #32
 8000468:	0026      	movs	r6, r4
 800046a:	4097      	lsls	r7, r2
 800046c:	1a9b      	subs	r3, r3, r2
 800046e:	40de      	lsrs	r6, r3
 8000470:	003b      	movs	r3, r7
 8000472:	4333      	orrs	r3, r6
 8000474:	e7cd      	b.n	8000412 <__udivmoddi4+0x132>
 8000476:	46c0      	nop			; (mov r8, r8)

08000478 <__clzdi2>:
 8000478:	b510      	push	{r4, lr}
 800047a:	2900      	cmp	r1, #0
 800047c:	d103      	bne.n	8000486 <__clzdi2+0xe>
 800047e:	f000 f807 	bl	8000490 <__clzsi2>
 8000482:	3020      	adds	r0, #32
 8000484:	e002      	b.n	800048c <__clzdi2+0x14>
 8000486:	0008      	movs	r0, r1
 8000488:	f000 f802 	bl	8000490 <__clzsi2>
 800048c:	bd10      	pop	{r4, pc}
 800048e:	46c0      	nop			; (mov r8, r8)

08000490 <__clzsi2>:
 8000490:	211c      	movs	r1, #28
 8000492:	2301      	movs	r3, #1
 8000494:	041b      	lsls	r3, r3, #16
 8000496:	4298      	cmp	r0, r3
 8000498:	d301      	bcc.n	800049e <__clzsi2+0xe>
 800049a:	0c00      	lsrs	r0, r0, #16
 800049c:	3910      	subs	r1, #16
 800049e:	0a1b      	lsrs	r3, r3, #8
 80004a0:	4298      	cmp	r0, r3
 80004a2:	d301      	bcc.n	80004a8 <__clzsi2+0x18>
 80004a4:	0a00      	lsrs	r0, r0, #8
 80004a6:	3908      	subs	r1, #8
 80004a8:	091b      	lsrs	r3, r3, #4
 80004aa:	4298      	cmp	r0, r3
 80004ac:	d301      	bcc.n	80004b2 <__clzsi2+0x22>
 80004ae:	0900      	lsrs	r0, r0, #4
 80004b0:	3904      	subs	r1, #4
 80004b2:	a202      	add	r2, pc, #8	; (adr r2, 80004bc <__clzsi2+0x2c>)
 80004b4:	5c10      	ldrb	r0, [r2, r0]
 80004b6:	1840      	adds	r0, r0, r1
 80004b8:	4770      	bx	lr
 80004ba:	46c0      	nop			; (mov r8, r8)
 80004bc:	02020304 	.word	0x02020304
 80004c0:	01010101 	.word	0x01010101
	...

080004cc <Read_Button_ID>:
uint8_t Pressed_Key = 0;
uint8_t Sleep_Time = 0;


uint8_t Read_Button_ID(void)
{
 80004cc:	b580      	push	{r7, lr}
 80004ce:	b082      	sub	sp, #8
 80004d0:	af00      	add	r7, sp, #0
	uint8_t Addr = 0;
 80004d2:	1dfb      	adds	r3, r7, #7
 80004d4:	2200      	movs	r2, #0
 80004d6:	701a      	strb	r2, [r3, #0]
	Addr |= (HAL_GPIO_ReadPin(GPIOB, Dev_ID0_Pin) << 0);
 80004d8:	2380      	movs	r3, #128	; 0x80
 80004da:	005b      	lsls	r3, r3, #1
 80004dc:	4a42      	ldr	r2, [pc, #264]	; (80005e8 <Read_Button_ID+0x11c>)
 80004de:	0019      	movs	r1, r3
 80004e0:	0010      	movs	r0, r2
 80004e2:	f002 f865 	bl	80025b0 <HAL_GPIO_ReadPin>
 80004e6:	0003      	movs	r3, r0
 80004e8:	b25a      	sxtb	r2, r3
 80004ea:	1dfb      	adds	r3, r7, #7
 80004ec:	781b      	ldrb	r3, [r3, #0]
 80004ee:	b25b      	sxtb	r3, r3
 80004f0:	4313      	orrs	r3, r2
 80004f2:	b25a      	sxtb	r2, r3
 80004f4:	1dfb      	adds	r3, r7, #7
 80004f6:	701a      	strb	r2, [r3, #0]
	Addr |= (HAL_GPIO_ReadPin(GPIOB, Dev_ID1_Pin) << 1);
 80004f8:	2380      	movs	r3, #128	; 0x80
 80004fa:	009b      	lsls	r3, r3, #2
 80004fc:	4a3a      	ldr	r2, [pc, #232]	; (80005e8 <Read_Button_ID+0x11c>)
 80004fe:	0019      	movs	r1, r3
 8000500:	0010      	movs	r0, r2
 8000502:	f002 f855 	bl	80025b0 <HAL_GPIO_ReadPin>
 8000506:	0003      	movs	r3, r0
 8000508:	005b      	lsls	r3, r3, #1
 800050a:	b25a      	sxtb	r2, r3
 800050c:	1dfb      	adds	r3, r7, #7
 800050e:	781b      	ldrb	r3, [r3, #0]
 8000510:	b25b      	sxtb	r3, r3
 8000512:	4313      	orrs	r3, r2
 8000514:	b25a      	sxtb	r2, r3
 8000516:	1dfb      	adds	r3, r7, #7
 8000518:	701a      	strb	r2, [r3, #0]
	Addr |= (HAL_GPIO_ReadPin(GPIOC, Dev_ID2_Pin) << 2);
 800051a:	2380      	movs	r3, #128	; 0x80
 800051c:	019b      	lsls	r3, r3, #6
 800051e:	4a33      	ldr	r2, [pc, #204]	; (80005ec <Read_Button_ID+0x120>)
 8000520:	0019      	movs	r1, r3
 8000522:	0010      	movs	r0, r2
 8000524:	f002 f844 	bl	80025b0 <HAL_GPIO_ReadPin>
 8000528:	0003      	movs	r3, r0
 800052a:	009b      	lsls	r3, r3, #2
 800052c:	b25a      	sxtb	r2, r3
 800052e:	1dfb      	adds	r3, r7, #7
 8000530:	781b      	ldrb	r3, [r3, #0]
 8000532:	b25b      	sxtb	r3, r3
 8000534:	4313      	orrs	r3, r2
 8000536:	b25a      	sxtb	r2, r3
 8000538:	1dfb      	adds	r3, r7, #7
 800053a:	701a      	strb	r2, [r3, #0]
	Addr |= (HAL_GPIO_ReadPin(GPIOC, Dev_ID3_Pin) << 3);
 800053c:	2380      	movs	r3, #128	; 0x80
 800053e:	01db      	lsls	r3, r3, #7
 8000540:	4a2a      	ldr	r2, [pc, #168]	; (80005ec <Read_Button_ID+0x120>)
 8000542:	0019      	movs	r1, r3
 8000544:	0010      	movs	r0, r2
 8000546:	f002 f833 	bl	80025b0 <HAL_GPIO_ReadPin>
 800054a:	0003      	movs	r3, r0
 800054c:	00db      	lsls	r3, r3, #3
 800054e:	b25a      	sxtb	r2, r3
 8000550:	1dfb      	adds	r3, r7, #7
 8000552:	781b      	ldrb	r3, [r3, #0]
 8000554:	b25b      	sxtb	r3, r3
 8000556:	4313      	orrs	r3, r2
 8000558:	b25a      	sxtb	r2, r3
 800055a:	1dfb      	adds	r3, r7, #7
 800055c:	701a      	strb	r2, [r3, #0]
	Addr |= (HAL_GPIO_ReadPin(GPIOC, Dev_ID4_Pin) << 4);
 800055e:	2380      	movs	r3, #128	; 0x80
 8000560:	021b      	lsls	r3, r3, #8
 8000562:	4a22      	ldr	r2, [pc, #136]	; (80005ec <Read_Button_ID+0x120>)
 8000564:	0019      	movs	r1, r3
 8000566:	0010      	movs	r0, r2
 8000568:	f002 f822 	bl	80025b0 <HAL_GPIO_ReadPin>
 800056c:	0003      	movs	r3, r0
 800056e:	011b      	lsls	r3, r3, #4
 8000570:	b25a      	sxtb	r2, r3
 8000572:	1dfb      	adds	r3, r7, #7
 8000574:	781b      	ldrb	r3, [r3, #0]
 8000576:	b25b      	sxtb	r3, r3
 8000578:	4313      	orrs	r3, r2
 800057a:	b25a      	sxtb	r2, r3
 800057c:	1dfb      	adds	r3, r7, #7
 800057e:	701a      	strb	r2, [r3, #0]
	Addr |= (HAL_GPIO_ReadPin(GPIOH, Dev_ID5_Pin) << 5);
 8000580:	4b1b      	ldr	r3, [pc, #108]	; (80005f0 <Read_Button_ID+0x124>)
 8000582:	2101      	movs	r1, #1
 8000584:	0018      	movs	r0, r3
 8000586:	f002 f813 	bl	80025b0 <HAL_GPIO_ReadPin>
 800058a:	0003      	movs	r3, r0
 800058c:	015b      	lsls	r3, r3, #5
 800058e:	b25a      	sxtb	r2, r3
 8000590:	1dfb      	adds	r3, r7, #7
 8000592:	781b      	ldrb	r3, [r3, #0]
 8000594:	b25b      	sxtb	r3, r3
 8000596:	4313      	orrs	r3, r2
 8000598:	b25a      	sxtb	r2, r3
 800059a:	1dfb      	adds	r3, r7, #7
 800059c:	701a      	strb	r2, [r3, #0]
	Addr |= (HAL_GPIO_ReadPin(GPIOH, Dev_ID6_Pin) << 6);
 800059e:	4b14      	ldr	r3, [pc, #80]	; (80005f0 <Read_Button_ID+0x124>)
 80005a0:	2102      	movs	r1, #2
 80005a2:	0018      	movs	r0, r3
 80005a4:	f002 f804 	bl	80025b0 <HAL_GPIO_ReadPin>
 80005a8:	0003      	movs	r3, r0
 80005aa:	019b      	lsls	r3, r3, #6
 80005ac:	b25a      	sxtb	r2, r3
 80005ae:	1dfb      	adds	r3, r7, #7
 80005b0:	781b      	ldrb	r3, [r3, #0]
 80005b2:	b25b      	sxtb	r3, r3
 80005b4:	4313      	orrs	r3, r2
 80005b6:	b25a      	sxtb	r2, r3
 80005b8:	1dfb      	adds	r3, r7, #7
 80005ba:	701a      	strb	r2, [r3, #0]
	Addr |= (HAL_GPIO_ReadPin(Dev_ID7_GPIO_Port, Dev_ID7_Pin) << 7);
 80005bc:	23a0      	movs	r3, #160	; 0xa0
 80005be:	05db      	lsls	r3, r3, #23
 80005c0:	2101      	movs	r1, #1
 80005c2:	0018      	movs	r0, r3
 80005c4:	f001 fff4 	bl	80025b0 <HAL_GPIO_ReadPin>
 80005c8:	0003      	movs	r3, r0
 80005ca:	01db      	lsls	r3, r3, #7
 80005cc:	b25a      	sxtb	r2, r3
 80005ce:	1dfb      	adds	r3, r7, #7
 80005d0:	781b      	ldrb	r3, [r3, #0]
 80005d2:	b25b      	sxtb	r3, r3
 80005d4:	4313      	orrs	r3, r2
 80005d6:	b25a      	sxtb	r2, r3
 80005d8:	1dfb      	adds	r3, r7, #7
 80005da:	701a      	strb	r2, [r3, #0]

	return Addr;
 80005dc:	1dfb      	adds	r3, r7, #7
 80005de:	781b      	ldrb	r3, [r3, #0]
}
 80005e0:	0018      	movs	r0, r3
 80005e2:	46bd      	mov	sp, r7
 80005e4:	b002      	add	sp, #8
 80005e6:	bd80      	pop	{r7, pc}
 80005e8:	50000400 	.word	0x50000400
 80005ec:	50000800 	.word	0x50000800
 80005f0:	50001c00 	.word	0x50001c00

080005f4 <RF_Channel_Lookup>:
// Dev_ID = 13 to 18 ---> Channel 6
// Dev_ID = 19 to 24 ---> Channel 8
// Dev_ID = 24 to 30 ---> Channel 10
// Dev_ID = 31 to 36 ---> Channel 12
uint8_t RF_Channel_Lookup(uint8_t ID)
{
 80005f4:	b580      	push	{r7, lr}
 80005f6:	b084      	sub	sp, #16
 80005f8:	af00      	add	r7, sp, #0
 80005fa:	0002      	movs	r2, r0
 80005fc:	1dfb      	adds	r3, r7, #7
 80005fe:	701a      	strb	r2, [r3, #0]
	uint8_t RF_CH = 2 + ((ID) / 6) * 2;
 8000600:	1dfb      	adds	r3, r7, #7
 8000602:	781b      	ldrb	r3, [r3, #0]
 8000604:	2106      	movs	r1, #6
 8000606:	0018      	movs	r0, r3
 8000608:	f7ff fd90 	bl	800012c <__udivsi3>
 800060c:	0003      	movs	r3, r0
 800060e:	b2db      	uxtb	r3, r3
 8000610:	3301      	adds	r3, #1
 8000612:	b2db      	uxtb	r3, r3
 8000614:	210f      	movs	r1, #15
 8000616:	187a      	adds	r2, r7, r1
 8000618:	18db      	adds	r3, r3, r3
 800061a:	7013      	strb	r3, [r2, #0]
	return RF_CH;
 800061c:	187b      	adds	r3, r7, r1
 800061e:	781b      	ldrb	r3, [r3, #0]
}
 8000620:	0018      	movs	r0, r3
 8000622:	46bd      	mov	sp, r7
 8000624:	b004      	add	sp, #16
 8000626:	bd80      	pop	{r7, pc}

08000628 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000628:	b580      	push	{r7, lr}
 800062a:	b082      	sub	sp, #8
 800062c:	af00      	add	r7, sp, #0
 800062e:	0002      	movs	r2, r0
 8000630:	1dbb      	adds	r3, r7, #6
 8000632:	801a      	strh	r2, [r3, #0]
  SystemClock_Config();
  HAL_ResumeTick();
  HAL_UART_Transmit(&hlpuart1, (uint8_t *)"WAKEUP from EXTI\n\n",18, HAL_MAX_DELAY);
  */

  	  if (GPIO_Pin == Key_IN1_Pin){
 8000634:	1dbb      	adds	r3, r7, #6
 8000636:	881a      	ldrh	r2, [r3, #0]
 8000638:	2380      	movs	r3, #128	; 0x80
 800063a:	015b      	lsls	r3, r3, #5
 800063c:	429a      	cmp	r2, r3
 800063e:	d109      	bne.n	8000654 <HAL_GPIO_EXTI_Callback+0x2c>
  		  HAL_UART_Transmit(&hlpuart1, (uint8_t *)"Key1 Was pressed\n\n",18, HAL_MAX_DELAY);
 8000640:	2301      	movs	r3, #1
 8000642:	425b      	negs	r3, r3
 8000644:	491b      	ldr	r1, [pc, #108]	; (80006b4 <HAL_GPIO_EXTI_Callback+0x8c>)
 8000646:	481c      	ldr	r0, [pc, #112]	; (80006b8 <HAL_GPIO_EXTI_Callback+0x90>)
 8000648:	2212      	movs	r2, #18
 800064a:	f003 fe39 	bl	80042c0 <HAL_UART_Transmit>
  		  Pressed_Key = 1;
 800064e:	4b1b      	ldr	r3, [pc, #108]	; (80006bc <HAL_GPIO_EXTI_Callback+0x94>)
 8000650:	2201      	movs	r2, #1
 8000652:	701a      	strb	r2, [r3, #0]
  	  }
  	  if (GPIO_Pin == Key_IN2_Pin){
 8000654:	1dbb      	adds	r3, r7, #6
 8000656:	881b      	ldrh	r3, [r3, #0]
 8000658:	2b04      	cmp	r3, #4
 800065a:	d109      	bne.n	8000670 <HAL_GPIO_EXTI_Callback+0x48>
  		  HAL_UART_Transmit(&hlpuart1, (uint8_t *)"Key2 Was pressed\n\n",18, HAL_MAX_DELAY);
 800065c:	2301      	movs	r3, #1
 800065e:	425b      	negs	r3, r3
 8000660:	4917      	ldr	r1, [pc, #92]	; (80006c0 <HAL_GPIO_EXTI_Callback+0x98>)
 8000662:	4815      	ldr	r0, [pc, #84]	; (80006b8 <HAL_GPIO_EXTI_Callback+0x90>)
 8000664:	2212      	movs	r2, #18
 8000666:	f003 fe2b 	bl	80042c0 <HAL_UART_Transmit>
  		  Pressed_Key = 2;
 800066a:	4b14      	ldr	r3, [pc, #80]	; (80006bc <HAL_GPIO_EXTI_Callback+0x94>)
 800066c:	2202      	movs	r2, #2
 800066e:	701a      	strb	r2, [r3, #0]
  	  }
  	  if (GPIO_Pin == Key_IN3_Pin){
 8000670:	1dbb      	adds	r3, r7, #6
 8000672:	881a      	ldrh	r2, [r3, #0]
 8000674:	2380      	movs	r3, #128	; 0x80
 8000676:	019b      	lsls	r3, r3, #6
 8000678:	429a      	cmp	r2, r3
 800067a:	d109      	bne.n	8000690 <HAL_GPIO_EXTI_Callback+0x68>
  		  HAL_UART_Transmit(&hlpuart1, (uint8_t *)"Key3 Was pressed\n\n",18, HAL_MAX_DELAY);
 800067c:	2301      	movs	r3, #1
 800067e:	425b      	negs	r3, r3
 8000680:	4910      	ldr	r1, [pc, #64]	; (80006c4 <HAL_GPIO_EXTI_Callback+0x9c>)
 8000682:	480d      	ldr	r0, [pc, #52]	; (80006b8 <HAL_GPIO_EXTI_Callback+0x90>)
 8000684:	2212      	movs	r2, #18
 8000686:	f003 fe1b 	bl	80042c0 <HAL_UART_Transmit>
  		  Pressed_Key = 3;
 800068a:	4b0c      	ldr	r3, [pc, #48]	; (80006bc <HAL_GPIO_EXTI_Callback+0x94>)
 800068c:	2203      	movs	r2, #3
 800068e:	701a      	strb	r2, [r3, #0]
  	  }
  	  if (GPIO_Pin == Key_IN4_Pin){
 8000690:	1dbb      	adds	r3, r7, #6
 8000692:	881b      	ldrh	r3, [r3, #0]
 8000694:	2b02      	cmp	r3, #2
 8000696:	d109      	bne.n	80006ac <HAL_GPIO_EXTI_Callback+0x84>
  		  HAL_UART_Transmit(&hlpuart1, (uint8_t *)"Key4 Was pressed\n\n",18, HAL_MAX_DELAY);
 8000698:	2301      	movs	r3, #1
 800069a:	425b      	negs	r3, r3
 800069c:	490a      	ldr	r1, [pc, #40]	; (80006c8 <HAL_GPIO_EXTI_Callback+0xa0>)
 800069e:	4806      	ldr	r0, [pc, #24]	; (80006b8 <HAL_GPIO_EXTI_Callback+0x90>)
 80006a0:	2212      	movs	r2, #18
 80006a2:	f003 fe0d 	bl	80042c0 <HAL_UART_Transmit>
  		  Pressed_Key = 4;
 80006a6:	4b05      	ldr	r3, [pc, #20]	; (80006bc <HAL_GPIO_EXTI_Callback+0x94>)
 80006a8:	2204      	movs	r2, #4
 80006aa:	701a      	strb	r2, [r3, #0]
  	  }
}
 80006ac:	46c0      	nop			; (mov r8, r8)
 80006ae:	46bd      	mov	sp, r7
 80006b0:	b002      	add	sp, #8
 80006b2:	bd80      	pop	{r7, pc}
 80006b4:	08005d2c 	.word	0x08005d2c
 80006b8:	200000f8 	.word	0x200000f8
 80006bc:	2000021d 	.word	0x2000021d
 80006c0:	08005d40 	.word	0x08005d40
 80006c4:	08005d54 	.word	0x08005d54
 80006c8:	08005d68 	.word	0x08005d68

080006cc <sendRegisterValue>:

void sendRegisterValue(uint8_t value)
{
 80006cc:	b590      	push	{r4, r7, lr}
 80006ce:	b087      	sub	sp, #28
 80006d0:	af00      	add	r7, sp, #0
 80006d2:	0002      	movs	r2, r0
 80006d4:	1dfb      	adds	r3, r7, #7
 80006d6:	701a      	strb	r2, [r3, #0]
  char buffer[10];
  sprintf(buffer, "0x%02X\r\n", value); // Convert value to hexadecimal string
 80006d8:	1dfb      	adds	r3, r7, #7
 80006da:	781a      	ldrb	r2, [r3, #0]
 80006dc:	490a      	ldr	r1, [pc, #40]	; (8000708 <sendRegisterValue+0x3c>)
 80006de:	240c      	movs	r4, #12
 80006e0:	193b      	adds	r3, r7, r4
 80006e2:	0018      	movs	r0, r3
 80006e4:	f004 feac 	bl	8005440 <siprintf>
  HAL_UART_Transmit(&hlpuart1, (uint8_t*)buffer, strlen(buffer), HAL_MAX_DELAY);
 80006e8:	193b      	adds	r3, r7, r4
 80006ea:	0018      	movs	r0, r3
 80006ec:	f7ff fd0c 	bl	8000108 <strlen>
 80006f0:	0003      	movs	r3, r0
 80006f2:	b29a      	uxth	r2, r3
 80006f4:	2301      	movs	r3, #1
 80006f6:	425b      	negs	r3, r3
 80006f8:	1939      	adds	r1, r7, r4
 80006fa:	4804      	ldr	r0, [pc, #16]	; (800070c <sendRegisterValue+0x40>)
 80006fc:	f003 fde0 	bl	80042c0 <HAL_UART_Transmit>
}
 8000700:	46c0      	nop			; (mov r8, r8)
 8000702:	46bd      	mov	sp, r7
 8000704:	b007      	add	sp, #28
 8000706:	bd90      	pop	{r4, r7, pc}
 8000708:	08005d7c 	.word	0x08005d7c
 800070c:	200000f8 	.word	0x200000f8

08000710 <Transmit_Report>:

void Transmit_Report(void)
{
 8000710:	b590      	push	{r4, r7, lr}
 8000712:	b083      	sub	sp, #12
 8000714:	af00      	add	r7, sp, #0
	uint8_t Temp_reg,Temp_reg2;
	Temp_reg = nRF24_ReadReg(nRF_CSN_Pin, nRF24_REG_FIFO_STATUS);
 8000716:	1dfc      	adds	r4, r7, #7
 8000718:	2117      	movs	r1, #23
 800071a:	2008      	movs	r0, #8
 800071c:	f004 fbea 	bl	8004ef4 <nRF24_ReadReg>
 8000720:	0003      	movs	r3, r0
 8000722:	7023      	strb	r3, [r4, #0]
	HAL_UART_Transmit(&hlpuart1, (uint8_t*)"**********************\n",23, 100);
 8000724:	4972      	ldr	r1, [pc, #456]	; (80008f0 <Transmit_Report+0x1e0>)
 8000726:	4873      	ldr	r0, [pc, #460]	; (80008f4 <Transmit_Report+0x1e4>)
 8000728:	2364      	movs	r3, #100	; 0x64
 800072a:	2217      	movs	r2, #23
 800072c:	f003 fdc8 	bl	80042c0 <HAL_UART_Transmit>
	HAL_UART_Transmit(&hlpuart1, (uint8_t*)"FIFO STATUS Register: ",22, 100);
 8000730:	4971      	ldr	r1, [pc, #452]	; (80008f8 <Transmit_Report+0x1e8>)
 8000732:	4870      	ldr	r0, [pc, #448]	; (80008f4 <Transmit_Report+0x1e4>)
 8000734:	2364      	movs	r3, #100	; 0x64
 8000736:	2216      	movs	r2, #22
 8000738:	f003 fdc2 	bl	80042c0 <HAL_UART_Transmit>
	sendRegisterValue(Temp_reg);
 800073c:	1dfb      	adds	r3, r7, #7
 800073e:	781b      	ldrb	r3, [r3, #0]
 8000740:	0018      	movs	r0, r3
 8000742:	f7ff ffc3 	bl	80006cc <sendRegisterValue>
	if((Temp_reg & (1<<0)) != 0)
 8000746:	1dfb      	adds	r3, r7, #7
 8000748:	781b      	ldrb	r3, [r3, #0]
 800074a:	2201      	movs	r2, #1
 800074c:	4013      	ands	r3, r2
 800074e:	d006      	beq.n	800075e <Transmit_Report+0x4e>
	{
		HAL_UART_Transmit(&hlpuart1, (uint8_t*)"RX FIFO empty\n",14, 100);
 8000750:	496a      	ldr	r1, [pc, #424]	; (80008fc <Transmit_Report+0x1ec>)
 8000752:	4868      	ldr	r0, [pc, #416]	; (80008f4 <Transmit_Report+0x1e4>)
 8000754:	2364      	movs	r3, #100	; 0x64
 8000756:	220e      	movs	r2, #14
 8000758:	f003 fdb2 	bl	80042c0 <HAL_UART_Transmit>
 800075c:	e005      	b.n	800076a <Transmit_Report+0x5a>
	} else
	{
		HAL_UART_Transmit(&hlpuart1, (uint8_t*)"Data in RX FIFO\n",16, 100);
 800075e:	4968      	ldr	r1, [pc, #416]	; (8000900 <Transmit_Report+0x1f0>)
 8000760:	4864      	ldr	r0, [pc, #400]	; (80008f4 <Transmit_Report+0x1e4>)
 8000762:	2364      	movs	r3, #100	; 0x64
 8000764:	2210      	movs	r2, #16
 8000766:	f003 fdab 	bl	80042c0 <HAL_UART_Transmit>
	}
	if((Temp_reg & (1<<4)) != 0)
 800076a:	1dfb      	adds	r3, r7, #7
 800076c:	781b      	ldrb	r3, [r3, #0]
 800076e:	2210      	movs	r2, #16
 8000770:	4013      	ands	r3, r2
 8000772:	d006      	beq.n	8000782 <Transmit_Report+0x72>
	{
		HAL_UART_Transmit(&hlpuart1, (uint8_t*)"TX FIFO empty\n",14, 100);
 8000774:	4963      	ldr	r1, [pc, #396]	; (8000904 <Transmit_Report+0x1f4>)
 8000776:	485f      	ldr	r0, [pc, #380]	; (80008f4 <Transmit_Report+0x1e4>)
 8000778:	2364      	movs	r3, #100	; 0x64
 800077a:	220e      	movs	r2, #14
 800077c:	f003 fda0 	bl	80042c0 <HAL_UART_Transmit>
 8000780:	e005      	b.n	800078e <Transmit_Report+0x7e>
	} else
	{
		HAL_UART_Transmit(&hlpuart1, (uint8_t*)"Data in TX FIFO\n",16, 100);
 8000782:	4961      	ldr	r1, [pc, #388]	; (8000908 <Transmit_Report+0x1f8>)
 8000784:	485b      	ldr	r0, [pc, #364]	; (80008f4 <Transmit_Report+0x1e4>)
 8000786:	2364      	movs	r3, #100	; 0x64
 8000788:	2210      	movs	r2, #16
 800078a:	f003 fd99 	bl	80042c0 <HAL_UART_Transmit>
	}
	HAL_UART_Transmit(&hlpuart1, (uint8_t*)"**********************\n",23, 100);
 800078e:	4958      	ldr	r1, [pc, #352]	; (80008f0 <Transmit_Report+0x1e0>)
 8000790:	4858      	ldr	r0, [pc, #352]	; (80008f4 <Transmit_Report+0x1e4>)
 8000792:	2364      	movs	r3, #100	; 0x64
 8000794:	2217      	movs	r2, #23
 8000796:	f003 fd93 	bl	80042c0 <HAL_UART_Transmit>
	Temp_reg = nRF24_ReadReg(nRF_CSN_Pin, nRF24_REG_OBSERVE_TX);
 800079a:	1dfc      	adds	r4, r7, #7
 800079c:	2108      	movs	r1, #8
 800079e:	2008      	movs	r0, #8
 80007a0:	f004 fba8 	bl	8004ef4 <nRF24_ReadReg>
 80007a4:	0003      	movs	r3, r0
 80007a6:	7023      	strb	r3, [r4, #0]
	HAL_UART_Transmit(&hlpuart1, (uint8_t*)"OBSERVE TX Register: ",21, 100);
 80007a8:	4958      	ldr	r1, [pc, #352]	; (800090c <Transmit_Report+0x1fc>)
 80007aa:	4852      	ldr	r0, [pc, #328]	; (80008f4 <Transmit_Report+0x1e4>)
 80007ac:	2364      	movs	r3, #100	; 0x64
 80007ae:	2215      	movs	r2, #21
 80007b0:	f003 fd86 	bl	80042c0 <HAL_UART_Transmit>
	sendRegisterValue(Temp_reg);
 80007b4:	1dfb      	adds	r3, r7, #7
 80007b6:	781b      	ldrb	r3, [r3, #0]
 80007b8:	0018      	movs	r0, r3
 80007ba:	f7ff ff87 	bl	80006cc <sendRegisterValue>
	Temp_reg2 = Temp_reg>>4;
 80007be:	1dbb      	adds	r3, r7, #6
 80007c0:	1dfa      	adds	r2, r7, #7
 80007c2:	7812      	ldrb	r2, [r2, #0]
 80007c4:	0912      	lsrs	r2, r2, #4
 80007c6:	701a      	strb	r2, [r3, #0]
	HAL_UART_Transmit(&hlpuart1, (uint8_t*)"PLOS Count: ",12, 100);
 80007c8:	4951      	ldr	r1, [pc, #324]	; (8000910 <Transmit_Report+0x200>)
 80007ca:	484a      	ldr	r0, [pc, #296]	; (80008f4 <Transmit_Report+0x1e4>)
 80007cc:	2364      	movs	r3, #100	; 0x64
 80007ce:	220c      	movs	r2, #12
 80007d0:	f003 fd76 	bl	80042c0 <HAL_UART_Transmit>
	sendRegisterValue(Temp_reg2);
 80007d4:	1dbb      	adds	r3, r7, #6
 80007d6:	781b      	ldrb	r3, [r3, #0]
 80007d8:	0018      	movs	r0, r3
 80007da:	f7ff ff77 	bl	80006cc <sendRegisterValue>
	Temp_reg = Temp_reg & 0x0F;
 80007de:	1dfb      	adds	r3, r7, #7
 80007e0:	1dfa      	adds	r2, r7, #7
 80007e2:	7812      	ldrb	r2, [r2, #0]
 80007e4:	210f      	movs	r1, #15
 80007e6:	400a      	ands	r2, r1
 80007e8:	701a      	strb	r2, [r3, #0]
	HAL_UART_Transmit(&hlpuart1, (uint8_t*)"ARC Count: ",11, 100);
 80007ea:	494a      	ldr	r1, [pc, #296]	; (8000914 <Transmit_Report+0x204>)
 80007ec:	4841      	ldr	r0, [pc, #260]	; (80008f4 <Transmit_Report+0x1e4>)
 80007ee:	2364      	movs	r3, #100	; 0x64
 80007f0:	220b      	movs	r2, #11
 80007f2:	f003 fd65 	bl	80042c0 <HAL_UART_Transmit>
    sendRegisterValue(Temp_reg);
 80007f6:	1dfb      	adds	r3, r7, #7
 80007f8:	781b      	ldrb	r3, [r3, #0]
 80007fa:	0018      	movs	r0, r3
 80007fc:	f7ff ff66 	bl	80006cc <sendRegisterValue>
	HAL_UART_Transmit(&hlpuart1, (uint8_t*)"**********************\n",23, 100);
 8000800:	493b      	ldr	r1, [pc, #236]	; (80008f0 <Transmit_Report+0x1e0>)
 8000802:	483c      	ldr	r0, [pc, #240]	; (80008f4 <Transmit_Report+0x1e4>)
 8000804:	2364      	movs	r3, #100	; 0x64
 8000806:	2217      	movs	r2, #23
 8000808:	f003 fd5a 	bl	80042c0 <HAL_UART_Transmit>
    Temp_reg = nRF24_ReadReg(nRF_CSN_Pin, nRF24_REG_STATUS);
 800080c:	1dfc      	adds	r4, r7, #7
 800080e:	2107      	movs	r1, #7
 8000810:	2008      	movs	r0, #8
 8000812:	f004 fb6f 	bl	8004ef4 <nRF24_ReadReg>
 8000816:	0003      	movs	r3, r0
 8000818:	7023      	strb	r3, [r4, #0]
	HAL_UART_Transmit(&hlpuart1, (uint8_t*)"STATUS Register: ",17, 100);
 800081a:	493f      	ldr	r1, [pc, #252]	; (8000918 <Transmit_Report+0x208>)
 800081c:	4835      	ldr	r0, [pc, #212]	; (80008f4 <Transmit_Report+0x1e4>)
 800081e:	2364      	movs	r3, #100	; 0x64
 8000820:	2211      	movs	r2, #17
 8000822:	f003 fd4d 	bl	80042c0 <HAL_UART_Transmit>
	sendRegisterValue(Temp_reg);
 8000826:	1dfb      	adds	r3, r7, #7
 8000828:	781b      	ldrb	r3, [r3, #0]
 800082a:	0018      	movs	r0, r3
 800082c:	f7ff ff4e 	bl	80006cc <sendRegisterValue>
	if((Temp_reg & (1<<0)) != 0)
 8000830:	1dfb      	adds	r3, r7, #7
 8000832:	781b      	ldrb	r3, [r3, #0]
 8000834:	2201      	movs	r2, #1
 8000836:	4013      	ands	r3, r2
 8000838:	d006      	beq.n	8000848 <Transmit_Report+0x138>
	{
		HAL_UART_Transmit(&hlpuart1, (uint8_t*)"TX FIFO Full\n",13, 100);
 800083a:	4938      	ldr	r1, [pc, #224]	; (800091c <Transmit_Report+0x20c>)
 800083c:	482d      	ldr	r0, [pc, #180]	; (80008f4 <Transmit_Report+0x1e4>)
 800083e:	2364      	movs	r3, #100	; 0x64
 8000840:	220d      	movs	r2, #13
 8000842:	f003 fd3d 	bl	80042c0 <HAL_UART_Transmit>
 8000846:	e005      	b.n	8000854 <Transmit_Report+0x144>
	} else
	{
		HAL_UART_Transmit(&hlpuart1, (uint8_t*)"Available locations in TX FIFO\n",31, 100);
 8000848:	4935      	ldr	r1, [pc, #212]	; (8000920 <Transmit_Report+0x210>)
 800084a:	482a      	ldr	r0, [pc, #168]	; (80008f4 <Transmit_Report+0x1e4>)
 800084c:	2364      	movs	r3, #100	; 0x64
 800084e:	221f      	movs	r2, #31
 8000850:	f003 fd36 	bl	80042c0 <HAL_UART_Transmit>
	}
	Temp_reg2 = (Temp_reg>>1) & 0x07;
 8000854:	1dfb      	adds	r3, r7, #7
 8000856:	781b      	ldrb	r3, [r3, #0]
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	b2da      	uxtb	r2, r3
 800085c:	1dbb      	adds	r3, r7, #6
 800085e:	2107      	movs	r1, #7
 8000860:	400a      	ands	r2, r1
 8000862:	701a      	strb	r2, [r3, #0]
	HAL_UART_Transmit(&hlpuart1, (uint8_t*)"RX Pipe Number: ",16, 100);
 8000864:	492f      	ldr	r1, [pc, #188]	; (8000924 <Transmit_Report+0x214>)
 8000866:	4823      	ldr	r0, [pc, #140]	; (80008f4 <Transmit_Report+0x1e4>)
 8000868:	2364      	movs	r3, #100	; 0x64
 800086a:	2210      	movs	r2, #16
 800086c:	f003 fd28 	bl	80042c0 <HAL_UART_Transmit>
    sendRegisterValue(Temp_reg2);
 8000870:	1dbb      	adds	r3, r7, #6
 8000872:	781b      	ldrb	r3, [r3, #0]
 8000874:	0018      	movs	r0, r3
 8000876:	f7ff ff29 	bl	80006cc <sendRegisterValue>
	if((Temp_reg & (1<<4)) != 0)
 800087a:	1dfb      	adds	r3, r7, #7
 800087c:	781b      	ldrb	r3, [r3, #0]
 800087e:	2210      	movs	r2, #16
 8000880:	4013      	ands	r3, r2
 8000882:	d006      	beq.n	8000892 <Transmit_Report+0x182>
	{
		HAL_UART_Transmit(&hlpuart1, (uint8_t*)"Maximum RETR interrupt\n",23, 100);
 8000884:	4928      	ldr	r1, [pc, #160]	; (8000928 <Transmit_Report+0x218>)
 8000886:	481b      	ldr	r0, [pc, #108]	; (80008f4 <Transmit_Report+0x1e4>)
 8000888:	2364      	movs	r3, #100	; 0x64
 800088a:	2217      	movs	r2, #23
 800088c:	f003 fd18 	bl	80042c0 <HAL_UART_Transmit>
 8000890:	e005      	b.n	800089e <Transmit_Report+0x18e>
	} else
	{
		HAL_UART_Transmit(&hlpuart1, (uint8_t*)"Maximum RETR not reached\n",25, 100);
 8000892:	4926      	ldr	r1, [pc, #152]	; (800092c <Transmit_Report+0x21c>)
 8000894:	4817      	ldr	r0, [pc, #92]	; (80008f4 <Transmit_Report+0x1e4>)
 8000896:	2364      	movs	r3, #100	; 0x64
 8000898:	2219      	movs	r2, #25
 800089a:	f003 fd11 	bl	80042c0 <HAL_UART_Transmit>
	}
	if((Temp_reg & (1<<5)) != 0)
 800089e:	1dfb      	adds	r3, r7, #7
 80008a0:	781b      	ldrb	r3, [r3, #0]
 80008a2:	2220      	movs	r2, #32
 80008a4:	4013      	ands	r3, r2
 80008a6:	d006      	beq.n	80008b6 <Transmit_Report+0x1a6>
	{
		HAL_UART_Transmit(&hlpuart1, (uint8_t*)"Transmission Completed\n",23, 100);
 80008a8:	4921      	ldr	r1, [pc, #132]	; (8000930 <Transmit_Report+0x220>)
 80008aa:	4812      	ldr	r0, [pc, #72]	; (80008f4 <Transmit_Report+0x1e4>)
 80008ac:	2364      	movs	r3, #100	; 0x64
 80008ae:	2217      	movs	r2, #23
 80008b0:	f003 fd06 	bl	80042c0 <HAL_UART_Transmit>
 80008b4:	e005      	b.n	80008c2 <Transmit_Report+0x1b2>
	} else
	{
		HAL_UART_Transmit(&hlpuart1, (uint8_t*)"No Transmission Completed\n",26, 100);
 80008b6:	491f      	ldr	r1, [pc, #124]	; (8000934 <Transmit_Report+0x224>)
 80008b8:	480e      	ldr	r0, [pc, #56]	; (80008f4 <Transmit_Report+0x1e4>)
 80008ba:	2364      	movs	r3, #100	; 0x64
 80008bc:	221a      	movs	r2, #26
 80008be:	f003 fcff 	bl	80042c0 <HAL_UART_Transmit>
	}
	if((Temp_reg & (1<<6)) != 0)
 80008c2:	1dfb      	adds	r3, r7, #7
 80008c4:	781b      	ldrb	r3, [r3, #0]
 80008c6:	2240      	movs	r2, #64	; 0x40
 80008c8:	4013      	ands	r3, r2
 80008ca:	d006      	beq.n	80008da <Transmit_Report+0x1ca>
	{
		HAL_UART_Transmit(&hlpuart1, (uint8_t*)"Data Ready RX FIFO interrupt\n",29, 100);
 80008cc:	491a      	ldr	r1, [pc, #104]	; (8000938 <Transmit_Report+0x228>)
 80008ce:	4809      	ldr	r0, [pc, #36]	; (80008f4 <Transmit_Report+0x1e4>)
 80008d0:	2364      	movs	r3, #100	; 0x64
 80008d2:	221d      	movs	r2, #29
 80008d4:	f003 fcf4 	bl	80042c0 <HAL_UART_Transmit>
	} else
	{
		HAL_UART_Transmit(&hlpuart1, (uint8_t*)"No Data Ready in RX FIFO\n",25, 100);
	}
}
 80008d8:	e005      	b.n	80008e6 <Transmit_Report+0x1d6>
		HAL_UART_Transmit(&hlpuart1, (uint8_t*)"No Data Ready in RX FIFO\n",25, 100);
 80008da:	4918      	ldr	r1, [pc, #96]	; (800093c <Transmit_Report+0x22c>)
 80008dc:	4805      	ldr	r0, [pc, #20]	; (80008f4 <Transmit_Report+0x1e4>)
 80008de:	2364      	movs	r3, #100	; 0x64
 80008e0:	2219      	movs	r2, #25
 80008e2:	f003 fced 	bl	80042c0 <HAL_UART_Transmit>
}
 80008e6:	46c0      	nop			; (mov r8, r8)
 80008e8:	46bd      	mov	sp, r7
 80008ea:	b003      	add	sp, #12
 80008ec:	bd90      	pop	{r4, r7, pc}
 80008ee:	46c0      	nop			; (mov r8, r8)
 80008f0:	08005d88 	.word	0x08005d88
 80008f4:	200000f8 	.word	0x200000f8
 80008f8:	08005da0 	.word	0x08005da0
 80008fc:	08005db8 	.word	0x08005db8
 8000900:	08005dc8 	.word	0x08005dc8
 8000904:	08005ddc 	.word	0x08005ddc
 8000908:	08005dec 	.word	0x08005dec
 800090c:	08005e00 	.word	0x08005e00
 8000910:	08005e18 	.word	0x08005e18
 8000914:	08005e28 	.word	0x08005e28
 8000918:	08005e34 	.word	0x08005e34
 800091c:	08005e48 	.word	0x08005e48
 8000920:	08005e58 	.word	0x08005e58
 8000924:	08005e78 	.word	0x08005e78
 8000928:	08005e8c 	.word	0x08005e8c
 800092c:	08005ea4 	.word	0x08005ea4
 8000930:	08005ec0 	.word	0x08005ec0
 8000934:	08005ed8 	.word	0x08005ed8
 8000938:	08005ef4 	.word	0x08005ef4
 800093c:	08005f14 	.word	0x08005f14

08000940 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000940:	b5b0      	push	{r4, r5, r7, lr}
 8000942:	b090      	sub	sp, #64	; 0x40
 8000944:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000946:	f000 ffcd 	bl	80018e4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800094a:	f000 fb81 	bl	8001050 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800094e:	f000 fcf9 	bl	8001344 <MX_GPIO_Init>
  MX_ADC_Init();
 8000952:	f000 fbef 	bl	8001134 <MX_ADC_Init>
  MX_LPUART1_UART_Init();
 8000956:	f000 fc53 	bl	8001200 <MX_LPUART1_UART_Init>
  MX_SPI1_Init();
 800095a:	f000 fc7f 	bl	800125c <MX_SPI1_Init>
  MX_TIM6_Init();
 800095e:	f000 fcb5 	bl	80012cc <MX_TIM6_Init>
  /* USER CODE BEGIN 2 */

  HAL_Delay(10000);
 8000962:	4bfe      	ldr	r3, [pc, #1016]	; (8000d5c <main+0x41c>)
 8000964:	0018      	movs	r0, r3
 8000966:	f001 f82d 	bl	80019c4 <HAL_Delay>

  Button_ID = Read_Button_ID();                                       //Reading the Button ID through DIP Switch
 800096a:	f7ff fdaf 	bl	80004cc <Read_Button_ID>
 800096e:	0003      	movs	r3, r0
 8000970:	001a      	movs	r2, r3
 8000972:	4bfb      	ldr	r3, [pc, #1004]	; (8000d60 <main+0x420>)
 8000974:	701a      	strb	r2, [r3, #0]
  RF_Channel_FRQ = RF_Channel_Lookup(Button_ID);                      //Define the Frequency Channel based on the Button_ID
 8000976:	4bfa      	ldr	r3, [pc, #1000]	; (8000d60 <main+0x420>)
 8000978:	781b      	ldrb	r3, [r3, #0]
 800097a:	0018      	movs	r0, r3
 800097c:	f7ff fe3a 	bl	80005f4 <RF_Channel_Lookup>
 8000980:	0003      	movs	r3, r0
 8000982:	001a      	movs	r2, r3
 8000984:	4bf7      	ldr	r3, [pc, #988]	; (8000d64 <main+0x424>)
 8000986:	701a      	strb	r2, [r3, #0]
  TxAddr[4] = Button_ID;                                              //Set the RF Module TxAddr based on Button_ID
 8000988:	4bf5      	ldr	r3, [pc, #980]	; (8000d60 <main+0x420>)
 800098a:	781a      	ldrb	r2, [r3, #0]
 800098c:	4bf6      	ldr	r3, [pc, #984]	; (8000d68 <main+0x428>)
 800098e:	711a      	strb	r2, [r3, #4]
  RxAddr[4] = Button_ID;                                              //Set the RF Module RxAddr based on Button_ID
 8000990:	4bf3      	ldr	r3, [pc, #972]	; (8000d60 <main+0x420>)
 8000992:	781a      	ldrb	r2, [r3, #0]
 8000994:	4bf5      	ldr	r3, [pc, #980]	; (8000d6c <main+0x42c>)
 8000996:	711a      	strb	r2, [r3, #4]

  nRF24_Init(nRF_CSN_Pin);                                            //Initiated with AAC enabled,
 8000998:	2008      	movs	r0, #8
 800099a:	f004 fbdd 	bl	8005158 <nRF24_Init>
                                                                      //Data pipe0 enabled for RX,
                                                                      //5 Bytes Address, ARD=1ms,
                                                                      //ARC=3 times, Power=0db, Data Rate = 2Mbps

  //nRF24_TxMode(nRF_CSN_Pin, TxAddr, RxAddr, RF_Channel_FRQ);          //Set the module Rx and Tx Address and the frequency channel
  nRF24_TxMode(nRF_CSN_Pin, TxAddr, RxAddr, 1);          //Set the module Rx and Tx Address and the frequency channel
 800099e:	4af3      	ldr	r2, [pc, #972]	; (8000d6c <main+0x42c>)
 80009a0:	49f1      	ldr	r1, [pc, #964]	; (8000d68 <main+0x428>)
 80009a2:	2301      	movs	r3, #1
 80009a4:	2008      	movs	r0, #8
 80009a6:	f004 fc11 	bl	80051cc <nRF24_TxMode>
  uint8_t Config_reg = nRF24_ReadReg(nRF_CSN_Pin, nRF24_REG_CONFIG);
 80009aa:	253f      	movs	r5, #63	; 0x3f
 80009ac:	197c      	adds	r4, r7, r5
 80009ae:	2100      	movs	r1, #0
 80009b0:	2008      	movs	r0, #8
 80009b2:	f004 fa9f 	bl	8004ef4 <nRF24_ReadReg>
 80009b6:	0003      	movs	r3, r0
 80009b8:	7023      	strb	r3, [r4, #0]
  HAL_UART_Transmit(&hlpuart1, (uint8_t*)"CONFIG:",7, HAL_MAX_DELAY);
 80009ba:	2301      	movs	r3, #1
 80009bc:	425b      	negs	r3, r3
 80009be:	49ec      	ldr	r1, [pc, #944]	; (8000d70 <main+0x430>)
 80009c0:	48ec      	ldr	r0, [pc, #944]	; (8000d74 <main+0x434>)
 80009c2:	2207      	movs	r2, #7
 80009c4:	f003 fc7c 	bl	80042c0 <HAL_UART_Transmit>
  sendRegisterValue(Config_reg);
 80009c8:	197b      	adds	r3, r7, r5
 80009ca:	781b      	ldrb	r3, [r3, #0]
 80009cc:	0018      	movs	r0, r3
 80009ce:	f7ff fe7d 	bl	80006cc <sendRegisterValue>
  uint8_t EN_AA_reg = nRF24_ReadReg(nRF_CSN_Pin, nRF24_REG_EN_AA);
 80009d2:	253e      	movs	r5, #62	; 0x3e
 80009d4:	197c      	adds	r4, r7, r5
 80009d6:	2101      	movs	r1, #1
 80009d8:	2008      	movs	r0, #8
 80009da:	f004 fa8b 	bl	8004ef4 <nRF24_ReadReg>
 80009de:	0003      	movs	r3, r0
 80009e0:	7023      	strb	r3, [r4, #0]
  HAL_UART_Transmit(&hlpuart1, (uint8_t*)"EN_AA_reg:",10, HAL_MAX_DELAY);
 80009e2:	2301      	movs	r3, #1
 80009e4:	425b      	negs	r3, r3
 80009e6:	49e4      	ldr	r1, [pc, #912]	; (8000d78 <main+0x438>)
 80009e8:	48e2      	ldr	r0, [pc, #904]	; (8000d74 <main+0x434>)
 80009ea:	220a      	movs	r2, #10
 80009ec:	f003 fc68 	bl	80042c0 <HAL_UART_Transmit>
  sendRegisterValue(EN_AA_reg);
 80009f0:	197b      	adds	r3, r7, r5
 80009f2:	781b      	ldrb	r3, [r3, #0]
 80009f4:	0018      	movs	r0, r3
 80009f6:	f7ff fe69 	bl	80006cc <sendRegisterValue>
  uint8_t EN_RXADR_reg = nRF24_ReadReg(nRF_CSN_Pin, nRF24_REG_EN_RXADDR);
 80009fa:	253d      	movs	r5, #61	; 0x3d
 80009fc:	197c      	adds	r4, r7, r5
 80009fe:	2102      	movs	r1, #2
 8000a00:	2008      	movs	r0, #8
 8000a02:	f004 fa77 	bl	8004ef4 <nRF24_ReadReg>
 8000a06:	0003      	movs	r3, r0
 8000a08:	7023      	strb	r3, [r4, #0]
  HAL_UART_Transmit(&hlpuart1, (uint8_t*)"EN_RXADR_reg:",13, HAL_MAX_DELAY);
 8000a0a:	2301      	movs	r3, #1
 8000a0c:	425b      	negs	r3, r3
 8000a0e:	49db      	ldr	r1, [pc, #876]	; (8000d7c <main+0x43c>)
 8000a10:	48d8      	ldr	r0, [pc, #864]	; (8000d74 <main+0x434>)
 8000a12:	220d      	movs	r2, #13
 8000a14:	f003 fc54 	bl	80042c0 <HAL_UART_Transmit>
  sendRegisterValue(EN_RXADR_reg);
 8000a18:	197b      	adds	r3, r7, r5
 8000a1a:	781b      	ldrb	r3, [r3, #0]
 8000a1c:	0018      	movs	r0, r3
 8000a1e:	f7ff fe55 	bl	80006cc <sendRegisterValue>
  uint8_t SETUP_AW_reg = nRF24_ReadReg(nRF_CSN_Pin, nRF24_REG_SETUP_AW);
 8000a22:	253c      	movs	r5, #60	; 0x3c
 8000a24:	197c      	adds	r4, r7, r5
 8000a26:	2103      	movs	r1, #3
 8000a28:	2008      	movs	r0, #8
 8000a2a:	f004 fa63 	bl	8004ef4 <nRF24_ReadReg>
 8000a2e:	0003      	movs	r3, r0
 8000a30:	7023      	strb	r3, [r4, #0]
  HAL_UART_Transmit(&hlpuart1, (uint8_t*)"SETUP_AW_reg:",13, HAL_MAX_DELAY);
 8000a32:	2301      	movs	r3, #1
 8000a34:	425b      	negs	r3, r3
 8000a36:	49d2      	ldr	r1, [pc, #840]	; (8000d80 <main+0x440>)
 8000a38:	48ce      	ldr	r0, [pc, #824]	; (8000d74 <main+0x434>)
 8000a3a:	220d      	movs	r2, #13
 8000a3c:	f003 fc40 	bl	80042c0 <HAL_UART_Transmit>
  sendRegisterValue(SETUP_AW_reg);
 8000a40:	197b      	adds	r3, r7, r5
 8000a42:	781b      	ldrb	r3, [r3, #0]
 8000a44:	0018      	movs	r0, r3
 8000a46:	f7ff fe41 	bl	80006cc <sendRegisterValue>
  uint8_t SETUP_RETR_reg = nRF24_ReadReg(nRF_CSN_Pin, nRF24_REG_SETUP_RETR);
 8000a4a:	253b      	movs	r5, #59	; 0x3b
 8000a4c:	197c      	adds	r4, r7, r5
 8000a4e:	2104      	movs	r1, #4
 8000a50:	2008      	movs	r0, #8
 8000a52:	f004 fa4f 	bl	8004ef4 <nRF24_ReadReg>
 8000a56:	0003      	movs	r3, r0
 8000a58:	7023      	strb	r3, [r4, #0]
  HAL_UART_Transmit(&hlpuart1, (uint8_t*)"SETUP_RETR_reg:",15, HAL_MAX_DELAY);
 8000a5a:	2301      	movs	r3, #1
 8000a5c:	425b      	negs	r3, r3
 8000a5e:	49c9      	ldr	r1, [pc, #804]	; (8000d84 <main+0x444>)
 8000a60:	48c4      	ldr	r0, [pc, #784]	; (8000d74 <main+0x434>)
 8000a62:	220f      	movs	r2, #15
 8000a64:	f003 fc2c 	bl	80042c0 <HAL_UART_Transmit>
  sendRegisterValue(SETUP_RETR_reg);
 8000a68:	197b      	adds	r3, r7, r5
 8000a6a:	781b      	ldrb	r3, [r3, #0]
 8000a6c:	0018      	movs	r0, r3
 8000a6e:	f7ff fe2d 	bl	80006cc <sendRegisterValue>
  uint8_t RF_CH_reg = nRF24_ReadReg(nRF_CSN_Pin, nRF24_REG_RF_CH);
 8000a72:	253a      	movs	r5, #58	; 0x3a
 8000a74:	197c      	adds	r4, r7, r5
 8000a76:	2105      	movs	r1, #5
 8000a78:	2008      	movs	r0, #8
 8000a7a:	f004 fa3b 	bl	8004ef4 <nRF24_ReadReg>
 8000a7e:	0003      	movs	r3, r0
 8000a80:	7023      	strb	r3, [r4, #0]
  HAL_UART_Transmit(&hlpuart1, (uint8_t*)"RF_CH_reg:",10, HAL_MAX_DELAY);
 8000a82:	2301      	movs	r3, #1
 8000a84:	425b      	negs	r3, r3
 8000a86:	49c0      	ldr	r1, [pc, #768]	; (8000d88 <main+0x448>)
 8000a88:	48ba      	ldr	r0, [pc, #744]	; (8000d74 <main+0x434>)
 8000a8a:	220a      	movs	r2, #10
 8000a8c:	f003 fc18 	bl	80042c0 <HAL_UART_Transmit>
  sendRegisterValue(RF_CH_reg);
 8000a90:	197b      	adds	r3, r7, r5
 8000a92:	781b      	ldrb	r3, [r3, #0]
 8000a94:	0018      	movs	r0, r3
 8000a96:	f7ff fe19 	bl	80006cc <sendRegisterValue>
  uint8_t RF_SETUP_reg = nRF24_ReadReg(nRF_CSN_Pin, nRF24_REG_RF_SETUP);
 8000a9a:	2539      	movs	r5, #57	; 0x39
 8000a9c:	197c      	adds	r4, r7, r5
 8000a9e:	2106      	movs	r1, #6
 8000aa0:	2008      	movs	r0, #8
 8000aa2:	f004 fa27 	bl	8004ef4 <nRF24_ReadReg>
 8000aa6:	0003      	movs	r3, r0
 8000aa8:	7023      	strb	r3, [r4, #0]
  HAL_UART_Transmit(&hlpuart1, (uint8_t*)"RF_SETUP_reg:",13, HAL_MAX_DELAY);
 8000aaa:	2301      	movs	r3, #1
 8000aac:	425b      	negs	r3, r3
 8000aae:	49b7      	ldr	r1, [pc, #732]	; (8000d8c <main+0x44c>)
 8000ab0:	48b0      	ldr	r0, [pc, #704]	; (8000d74 <main+0x434>)
 8000ab2:	220d      	movs	r2, #13
 8000ab4:	f003 fc04 	bl	80042c0 <HAL_UART_Transmit>
  sendRegisterValue(RF_SETUP_reg);
 8000ab8:	197b      	adds	r3, r7, r5
 8000aba:	781b      	ldrb	r3, [r3, #0]
 8000abc:	0018      	movs	r0, r3
 8000abe:	f7ff fe05 	bl	80006cc <sendRegisterValue>
  uint8_t RF_STATUS_reg = nRF24_ReadReg(nRF_CSN_Pin, nRF24_REG_STATUS);
 8000ac2:	2538      	movs	r5, #56	; 0x38
 8000ac4:	197c      	adds	r4, r7, r5
 8000ac6:	2107      	movs	r1, #7
 8000ac8:	2008      	movs	r0, #8
 8000aca:	f004 fa13 	bl	8004ef4 <nRF24_ReadReg>
 8000ace:	0003      	movs	r3, r0
 8000ad0:	7023      	strb	r3, [r4, #0]
  HAL_UART_Transmit(&hlpuart1, (uint8_t*)"RF_STATUS_reg:",14, HAL_MAX_DELAY);
 8000ad2:	2301      	movs	r3, #1
 8000ad4:	425b      	negs	r3, r3
 8000ad6:	49ae      	ldr	r1, [pc, #696]	; (8000d90 <main+0x450>)
 8000ad8:	48a6      	ldr	r0, [pc, #664]	; (8000d74 <main+0x434>)
 8000ada:	220e      	movs	r2, #14
 8000adc:	f003 fbf0 	bl	80042c0 <HAL_UART_Transmit>
  sendRegisterValue(RF_STATUS_reg);
 8000ae0:	197b      	adds	r3, r7, r5
 8000ae2:	781b      	ldrb	r3, [r3, #0]
 8000ae4:	0018      	movs	r0, r3
 8000ae6:	f7ff fdf1 	bl	80006cc <sendRegisterValue>
  uint8_t RX_ADR_P0_reg[5];
  nRF24_ReadMBReg(nRF_CSN_Pin, nRF24_REG_RX_ADDR_P0, RX_ADR_P0_reg, 5);
 8000aea:	2414      	movs	r4, #20
 8000aec:	193a      	adds	r2, r7, r4
 8000aee:	2305      	movs	r3, #5
 8000af0:	210a      	movs	r1, #10
 8000af2:	2008      	movs	r0, #8
 8000af4:	f004 fa2e 	bl	8004f54 <nRF24_ReadMBReg>
  HAL_UART_Transmit(&hlpuart1, (uint8_t*)"RX_ADR_P0_reg:\n",15, HAL_MAX_DELAY);
 8000af8:	2301      	movs	r3, #1
 8000afa:	425b      	negs	r3, r3
 8000afc:	49a5      	ldr	r1, [pc, #660]	; (8000d94 <main+0x454>)
 8000afe:	489d      	ldr	r0, [pc, #628]	; (8000d74 <main+0x434>)
 8000b00:	220f      	movs	r2, #15
 8000b02:	f003 fbdd 	bl	80042c0 <HAL_UART_Transmit>
  sendRegisterValue(RX_ADR_P0_reg[0]);
 8000b06:	193b      	adds	r3, r7, r4
 8000b08:	781b      	ldrb	r3, [r3, #0]
 8000b0a:	0018      	movs	r0, r3
 8000b0c:	f7ff fdde 	bl	80006cc <sendRegisterValue>
  sendRegisterValue(RX_ADR_P0_reg[1]);
 8000b10:	193b      	adds	r3, r7, r4
 8000b12:	785b      	ldrb	r3, [r3, #1]
 8000b14:	0018      	movs	r0, r3
 8000b16:	f7ff fdd9 	bl	80006cc <sendRegisterValue>
  sendRegisterValue(RX_ADR_P0_reg[2]);
 8000b1a:	193b      	adds	r3, r7, r4
 8000b1c:	789b      	ldrb	r3, [r3, #2]
 8000b1e:	0018      	movs	r0, r3
 8000b20:	f7ff fdd4 	bl	80006cc <sendRegisterValue>
  sendRegisterValue(RX_ADR_P0_reg[3]);
 8000b24:	193b      	adds	r3, r7, r4
 8000b26:	78db      	ldrb	r3, [r3, #3]
 8000b28:	0018      	movs	r0, r3
 8000b2a:	f7ff fdcf 	bl	80006cc <sendRegisterValue>
  sendRegisterValue(RX_ADR_P0_reg[4]);
 8000b2e:	193b      	adds	r3, r7, r4
 8000b30:	791b      	ldrb	r3, [r3, #4]
 8000b32:	0018      	movs	r0, r3
 8000b34:	f7ff fdca 	bl	80006cc <sendRegisterValue>
  uint8_t RX_ADR_P1_reg[5];
  nRF24_ReadMBReg(nRF_CSN_Pin, nRF24_REG_RX_ADDR_P1, RX_ADR_P1_reg, 5);
 8000b38:	240c      	movs	r4, #12
 8000b3a:	193a      	adds	r2, r7, r4
 8000b3c:	2305      	movs	r3, #5
 8000b3e:	210b      	movs	r1, #11
 8000b40:	2008      	movs	r0, #8
 8000b42:	f004 fa07 	bl	8004f54 <nRF24_ReadMBReg>
  HAL_UART_Transmit(&hlpuart1, (uint8_t*)"RX_ADR_P1_reg:\n",15, HAL_MAX_DELAY);
 8000b46:	2301      	movs	r3, #1
 8000b48:	425b      	negs	r3, r3
 8000b4a:	4993      	ldr	r1, [pc, #588]	; (8000d98 <main+0x458>)
 8000b4c:	4889      	ldr	r0, [pc, #548]	; (8000d74 <main+0x434>)
 8000b4e:	220f      	movs	r2, #15
 8000b50:	f003 fbb6 	bl	80042c0 <HAL_UART_Transmit>
  sendRegisterValue(RX_ADR_P1_reg[0]);
 8000b54:	193b      	adds	r3, r7, r4
 8000b56:	781b      	ldrb	r3, [r3, #0]
 8000b58:	0018      	movs	r0, r3
 8000b5a:	f7ff fdb7 	bl	80006cc <sendRegisterValue>
  sendRegisterValue(RX_ADR_P1_reg[1]);
 8000b5e:	193b      	adds	r3, r7, r4
 8000b60:	785b      	ldrb	r3, [r3, #1]
 8000b62:	0018      	movs	r0, r3
 8000b64:	f7ff fdb2 	bl	80006cc <sendRegisterValue>
  sendRegisterValue(RX_ADR_P1_reg[2]);
 8000b68:	193b      	adds	r3, r7, r4
 8000b6a:	789b      	ldrb	r3, [r3, #2]
 8000b6c:	0018      	movs	r0, r3
 8000b6e:	f7ff fdad 	bl	80006cc <sendRegisterValue>
  sendRegisterValue(RX_ADR_P1_reg[3]);
 8000b72:	193b      	adds	r3, r7, r4
 8000b74:	78db      	ldrb	r3, [r3, #3]
 8000b76:	0018      	movs	r0, r3
 8000b78:	f7ff fda8 	bl	80006cc <sendRegisterValue>
  sendRegisterValue(RX_ADR_P1_reg[4]);
 8000b7c:	193b      	adds	r3, r7, r4
 8000b7e:	791b      	ldrb	r3, [r3, #4]
 8000b80:	0018      	movs	r0, r3
 8000b82:	f7ff fda3 	bl	80006cc <sendRegisterValue>
  uint8_t RX_ADR_P2_reg = nRF24_ReadReg(nRF_CSN_Pin, nRF24_REG_RX_ADDR_P2);
 8000b86:	2537      	movs	r5, #55	; 0x37
 8000b88:	197c      	adds	r4, r7, r5
 8000b8a:	210c      	movs	r1, #12
 8000b8c:	2008      	movs	r0, #8
 8000b8e:	f004 f9b1 	bl	8004ef4 <nRF24_ReadReg>
 8000b92:	0003      	movs	r3, r0
 8000b94:	7023      	strb	r3, [r4, #0]
  HAL_UART_Transmit(&hlpuart1, (uint8_t*)"RX_ADR_P2_reg:",15, HAL_MAX_DELAY);
 8000b96:	2301      	movs	r3, #1
 8000b98:	425b      	negs	r3, r3
 8000b9a:	4980      	ldr	r1, [pc, #512]	; (8000d9c <main+0x45c>)
 8000b9c:	4875      	ldr	r0, [pc, #468]	; (8000d74 <main+0x434>)
 8000b9e:	220f      	movs	r2, #15
 8000ba0:	f003 fb8e 	bl	80042c0 <HAL_UART_Transmit>
  sendRegisterValue(RX_ADR_P2_reg);
 8000ba4:	197b      	adds	r3, r7, r5
 8000ba6:	781b      	ldrb	r3, [r3, #0]
 8000ba8:	0018      	movs	r0, r3
 8000baa:	f7ff fd8f 	bl	80006cc <sendRegisterValue>
  uint8_t RX_ADR_P3_reg=nRF24_ReadReg(nRF_CSN_Pin, nRF24_REG_RX_ADDR_P3);
 8000bae:	2536      	movs	r5, #54	; 0x36
 8000bb0:	197c      	adds	r4, r7, r5
 8000bb2:	210d      	movs	r1, #13
 8000bb4:	2008      	movs	r0, #8
 8000bb6:	f004 f99d 	bl	8004ef4 <nRF24_ReadReg>
 8000bba:	0003      	movs	r3, r0
 8000bbc:	7023      	strb	r3, [r4, #0]
  HAL_UART_Transmit(&hlpuart1, (uint8_t*)"RX_ADR_P3_reg:",15, HAL_MAX_DELAY);
 8000bbe:	2301      	movs	r3, #1
 8000bc0:	425b      	negs	r3, r3
 8000bc2:	4977      	ldr	r1, [pc, #476]	; (8000da0 <main+0x460>)
 8000bc4:	486b      	ldr	r0, [pc, #428]	; (8000d74 <main+0x434>)
 8000bc6:	220f      	movs	r2, #15
 8000bc8:	f003 fb7a 	bl	80042c0 <HAL_UART_Transmit>
  sendRegisterValue(RX_ADR_P3_reg);
 8000bcc:	197b      	adds	r3, r7, r5
 8000bce:	781b      	ldrb	r3, [r3, #0]
 8000bd0:	0018      	movs	r0, r3
 8000bd2:	f7ff fd7b 	bl	80006cc <sendRegisterValue>
  uint8_t RX_ADR_P4_reg=nRF24_ReadReg(nRF_CSN_Pin, nRF24_REG_RX_ADDR_P4);
 8000bd6:	2535      	movs	r5, #53	; 0x35
 8000bd8:	197c      	adds	r4, r7, r5
 8000bda:	210e      	movs	r1, #14
 8000bdc:	2008      	movs	r0, #8
 8000bde:	f004 f989 	bl	8004ef4 <nRF24_ReadReg>
 8000be2:	0003      	movs	r3, r0
 8000be4:	7023      	strb	r3, [r4, #0]
  HAL_UART_Transmit(&hlpuart1, (uint8_t*)"RX_ADR_P4_reg:",15, HAL_MAX_DELAY);
 8000be6:	2301      	movs	r3, #1
 8000be8:	425b      	negs	r3, r3
 8000bea:	496e      	ldr	r1, [pc, #440]	; (8000da4 <main+0x464>)
 8000bec:	4861      	ldr	r0, [pc, #388]	; (8000d74 <main+0x434>)
 8000bee:	220f      	movs	r2, #15
 8000bf0:	f003 fb66 	bl	80042c0 <HAL_UART_Transmit>
  sendRegisterValue(RX_ADR_P4_reg);
 8000bf4:	197b      	adds	r3, r7, r5
 8000bf6:	781b      	ldrb	r3, [r3, #0]
 8000bf8:	0018      	movs	r0, r3
 8000bfa:	f7ff fd67 	bl	80006cc <sendRegisterValue>
  uint8_t RX_ADR_P5_reg=nRF24_ReadReg(nRF_CSN_Pin, nRF24_REG_RX_ADDR_P5);
 8000bfe:	2534      	movs	r5, #52	; 0x34
 8000c00:	197c      	adds	r4, r7, r5
 8000c02:	210f      	movs	r1, #15
 8000c04:	2008      	movs	r0, #8
 8000c06:	f004 f975 	bl	8004ef4 <nRF24_ReadReg>
 8000c0a:	0003      	movs	r3, r0
 8000c0c:	7023      	strb	r3, [r4, #0]
  HAL_UART_Transmit(&hlpuart1, (uint8_t*)"RX_ADR_P5_reg:",15, HAL_MAX_DELAY);
 8000c0e:	2301      	movs	r3, #1
 8000c10:	425b      	negs	r3, r3
 8000c12:	4965      	ldr	r1, [pc, #404]	; (8000da8 <main+0x468>)
 8000c14:	4857      	ldr	r0, [pc, #348]	; (8000d74 <main+0x434>)
 8000c16:	220f      	movs	r2, #15
 8000c18:	f003 fb52 	bl	80042c0 <HAL_UART_Transmit>
  sendRegisterValue(RX_ADR_P5_reg);
 8000c1c:	197b      	adds	r3, r7, r5
 8000c1e:	781b      	ldrb	r3, [r3, #0]
 8000c20:	0018      	movs	r0, r3
 8000c22:	f7ff fd53 	bl	80006cc <sendRegisterValue>
  uint8_t TX_ADR_reg[5];
  nRF24_ReadMBReg(nRF_CSN_Pin, nRF24_REG_TX_ADDR, TX_ADR_reg, 5);
 8000c26:	1d3a      	adds	r2, r7, #4
 8000c28:	2305      	movs	r3, #5
 8000c2a:	2110      	movs	r1, #16
 8000c2c:	2008      	movs	r0, #8
 8000c2e:	f004 f991 	bl	8004f54 <nRF24_ReadMBReg>
  HAL_UART_Transmit(&hlpuart1, (uint8_t*)"TX_ADR_reg:\n",12, HAL_MAX_DELAY);
 8000c32:	2301      	movs	r3, #1
 8000c34:	425b      	negs	r3, r3
 8000c36:	495d      	ldr	r1, [pc, #372]	; (8000dac <main+0x46c>)
 8000c38:	484e      	ldr	r0, [pc, #312]	; (8000d74 <main+0x434>)
 8000c3a:	220c      	movs	r2, #12
 8000c3c:	f003 fb40 	bl	80042c0 <HAL_UART_Transmit>
  sendRegisterValue(TX_ADR_reg[0]);
 8000c40:	1d3b      	adds	r3, r7, #4
 8000c42:	781b      	ldrb	r3, [r3, #0]
 8000c44:	0018      	movs	r0, r3
 8000c46:	f7ff fd41 	bl	80006cc <sendRegisterValue>
  sendRegisterValue(TX_ADR_reg[1]);
 8000c4a:	1d3b      	adds	r3, r7, #4
 8000c4c:	785b      	ldrb	r3, [r3, #1]
 8000c4e:	0018      	movs	r0, r3
 8000c50:	f7ff fd3c 	bl	80006cc <sendRegisterValue>
  sendRegisterValue(TX_ADR_reg[2]);
 8000c54:	1d3b      	adds	r3, r7, #4
 8000c56:	789b      	ldrb	r3, [r3, #2]
 8000c58:	0018      	movs	r0, r3
 8000c5a:	f7ff fd37 	bl	80006cc <sendRegisterValue>
  sendRegisterValue(TX_ADR_reg[3]);
 8000c5e:	1d3b      	adds	r3, r7, #4
 8000c60:	78db      	ldrb	r3, [r3, #3]
 8000c62:	0018      	movs	r0, r3
 8000c64:	f7ff fd32 	bl	80006cc <sendRegisterValue>
  sendRegisterValue(TX_ADR_reg[4]);
 8000c68:	1d3b      	adds	r3, r7, #4
 8000c6a:	791b      	ldrb	r3, [r3, #4]
 8000c6c:	0018      	movs	r0, r3
 8000c6e:	f7ff fd2d 	bl	80006cc <sendRegisterValue>
  uint8_t RX_PW_P0_reg=nRF24_ReadReg(nRF_CSN_Pin, nRF24_REG_RX_PW_P0);
 8000c72:	2533      	movs	r5, #51	; 0x33
 8000c74:	197c      	adds	r4, r7, r5
 8000c76:	2111      	movs	r1, #17
 8000c78:	2008      	movs	r0, #8
 8000c7a:	f004 f93b 	bl	8004ef4 <nRF24_ReadReg>
 8000c7e:	0003      	movs	r3, r0
 8000c80:	7023      	strb	r3, [r4, #0]
  HAL_UART_Transmit(&hlpuart1, (uint8_t*)"RX_PW_P0_reg:",13, HAL_MAX_DELAY);
 8000c82:	2301      	movs	r3, #1
 8000c84:	425b      	negs	r3, r3
 8000c86:	494a      	ldr	r1, [pc, #296]	; (8000db0 <main+0x470>)
 8000c88:	483a      	ldr	r0, [pc, #232]	; (8000d74 <main+0x434>)
 8000c8a:	220d      	movs	r2, #13
 8000c8c:	f003 fb18 	bl	80042c0 <HAL_UART_Transmit>
  sendRegisterValue(RX_PW_P0_reg);
 8000c90:	197b      	adds	r3, r7, r5
 8000c92:	781b      	ldrb	r3, [r3, #0]
 8000c94:	0018      	movs	r0, r3
 8000c96:	f7ff fd19 	bl	80006cc <sendRegisterValue>
  uint8_t RX_PW_P1_reg=nRF24_ReadReg(nRF_CSN_Pin, nRF24_REG_RX_PW_P1);
 8000c9a:	2532      	movs	r5, #50	; 0x32
 8000c9c:	197c      	adds	r4, r7, r5
 8000c9e:	2112      	movs	r1, #18
 8000ca0:	2008      	movs	r0, #8
 8000ca2:	f004 f927 	bl	8004ef4 <nRF24_ReadReg>
 8000ca6:	0003      	movs	r3, r0
 8000ca8:	7023      	strb	r3, [r4, #0]
  HAL_UART_Transmit(&hlpuart1, (uint8_t*)"RX_PW_P1_reg:",13, HAL_MAX_DELAY);
 8000caa:	2301      	movs	r3, #1
 8000cac:	425b      	negs	r3, r3
 8000cae:	4941      	ldr	r1, [pc, #260]	; (8000db4 <main+0x474>)
 8000cb0:	4830      	ldr	r0, [pc, #192]	; (8000d74 <main+0x434>)
 8000cb2:	220d      	movs	r2, #13
 8000cb4:	f003 fb04 	bl	80042c0 <HAL_UART_Transmit>
  sendRegisterValue(RX_PW_P1_reg);
 8000cb8:	197b      	adds	r3, r7, r5
 8000cba:	781b      	ldrb	r3, [r3, #0]
 8000cbc:	0018      	movs	r0, r3
 8000cbe:	f7ff fd05 	bl	80006cc <sendRegisterValue>
  uint8_t RX_PW_P2_reg=nRF24_ReadReg(nRF_CSN_Pin, nRF24_REG_RX_PW_P2);
 8000cc2:	2531      	movs	r5, #49	; 0x31
 8000cc4:	197c      	adds	r4, r7, r5
 8000cc6:	2113      	movs	r1, #19
 8000cc8:	2008      	movs	r0, #8
 8000cca:	f004 f913 	bl	8004ef4 <nRF24_ReadReg>
 8000cce:	0003      	movs	r3, r0
 8000cd0:	7023      	strb	r3, [r4, #0]
  HAL_UART_Transmit(&hlpuart1, (uint8_t*)"RX_PW_P2_reg:",13, HAL_MAX_DELAY);
 8000cd2:	2301      	movs	r3, #1
 8000cd4:	425b      	negs	r3, r3
 8000cd6:	4938      	ldr	r1, [pc, #224]	; (8000db8 <main+0x478>)
 8000cd8:	4826      	ldr	r0, [pc, #152]	; (8000d74 <main+0x434>)
 8000cda:	220d      	movs	r2, #13
 8000cdc:	f003 faf0 	bl	80042c0 <HAL_UART_Transmit>
  sendRegisterValue(RX_PW_P2_reg);
 8000ce0:	197b      	adds	r3, r7, r5
 8000ce2:	781b      	ldrb	r3, [r3, #0]
 8000ce4:	0018      	movs	r0, r3
 8000ce6:	f7ff fcf1 	bl	80006cc <sendRegisterValue>
  uint8_t RX_PW_P3_reg=nRF24_ReadReg(nRF_CSN_Pin, nRF24_REG_RX_PW_P3);
 8000cea:	2530      	movs	r5, #48	; 0x30
 8000cec:	197c      	adds	r4, r7, r5
 8000cee:	2114      	movs	r1, #20
 8000cf0:	2008      	movs	r0, #8
 8000cf2:	f004 f8ff 	bl	8004ef4 <nRF24_ReadReg>
 8000cf6:	0003      	movs	r3, r0
 8000cf8:	7023      	strb	r3, [r4, #0]
  HAL_UART_Transmit(&hlpuart1, (uint8_t*)"RX_PW_P3_reg:",13, HAL_MAX_DELAY);
 8000cfa:	2301      	movs	r3, #1
 8000cfc:	425b      	negs	r3, r3
 8000cfe:	492f      	ldr	r1, [pc, #188]	; (8000dbc <main+0x47c>)
 8000d00:	481c      	ldr	r0, [pc, #112]	; (8000d74 <main+0x434>)
 8000d02:	220d      	movs	r2, #13
 8000d04:	f003 fadc 	bl	80042c0 <HAL_UART_Transmit>
  sendRegisterValue(RX_PW_P3_reg);
 8000d08:	197b      	adds	r3, r7, r5
 8000d0a:	781b      	ldrb	r3, [r3, #0]
 8000d0c:	0018      	movs	r0, r3
 8000d0e:	f7ff fcdd 	bl	80006cc <sendRegisterValue>
  uint8_t RX_PW_P4_reg=nRF24_ReadReg(nRF_CSN_Pin, nRF24_REG_RX_PW_P4);
 8000d12:	252f      	movs	r5, #47	; 0x2f
 8000d14:	197c      	adds	r4, r7, r5
 8000d16:	2115      	movs	r1, #21
 8000d18:	2008      	movs	r0, #8
 8000d1a:	f004 f8eb 	bl	8004ef4 <nRF24_ReadReg>
 8000d1e:	0003      	movs	r3, r0
 8000d20:	7023      	strb	r3, [r4, #0]
  HAL_UART_Transmit(&hlpuart1, (uint8_t*)"RX_PW_P4_reg:",13, HAL_MAX_DELAY);
 8000d22:	2301      	movs	r3, #1
 8000d24:	425b      	negs	r3, r3
 8000d26:	4926      	ldr	r1, [pc, #152]	; (8000dc0 <main+0x480>)
 8000d28:	4812      	ldr	r0, [pc, #72]	; (8000d74 <main+0x434>)
 8000d2a:	220d      	movs	r2, #13
 8000d2c:	f003 fac8 	bl	80042c0 <HAL_UART_Transmit>
  sendRegisterValue(RX_PW_P4_reg);
 8000d30:	197b      	adds	r3, r7, r5
 8000d32:	781b      	ldrb	r3, [r3, #0]
 8000d34:	0018      	movs	r0, r3
 8000d36:	f7ff fcc9 	bl	80006cc <sendRegisterValue>
  uint8_t RX_PW_P5_reg=nRF24_ReadReg(nRF_CSN_Pin, nRF24_REG_RX_PW_P5);
 8000d3a:	252e      	movs	r5, #46	; 0x2e
 8000d3c:	197c      	adds	r4, r7, r5
 8000d3e:	2116      	movs	r1, #22
 8000d40:	2008      	movs	r0, #8
 8000d42:	f004 f8d7 	bl	8004ef4 <nRF24_ReadReg>
 8000d46:	0003      	movs	r3, r0
 8000d48:	7023      	strb	r3, [r4, #0]
  HAL_UART_Transmit(&hlpuart1, (uint8_t*)"RX_PW_P5_reg:",13, HAL_MAX_DELAY);
 8000d4a:	2301      	movs	r3, #1
 8000d4c:	425b      	negs	r3, r3
 8000d4e:	491d      	ldr	r1, [pc, #116]	; (8000dc4 <main+0x484>)
 8000d50:	4808      	ldr	r0, [pc, #32]	; (8000d74 <main+0x434>)
 8000d52:	220d      	movs	r2, #13
 8000d54:	f003 fab4 	bl	80042c0 <HAL_UART_Transmit>
  sendRegisterValue(RX_PW_P5_reg);
 8000d58:	197b      	adds	r3, r7, r5
 8000d5a:	e035      	b.n	8000dc8 <main+0x488>
 8000d5c:	00002710 	.word	0x00002710
 8000d60:	20000218 	.word	0x20000218
 8000d64:	20000219 	.word	0x20000219
 8000d68:	20000000 	.word	0x20000000
 8000d6c:	20000008 	.word	0x20000008
 8000d70:	08005f30 	.word	0x08005f30
 8000d74:	200000f8 	.word	0x200000f8
 8000d78:	08005f38 	.word	0x08005f38
 8000d7c:	08005f44 	.word	0x08005f44
 8000d80:	08005f54 	.word	0x08005f54
 8000d84:	08005f64 	.word	0x08005f64
 8000d88:	08005f74 	.word	0x08005f74
 8000d8c:	08005f80 	.word	0x08005f80
 8000d90:	08005f90 	.word	0x08005f90
 8000d94:	08005fa0 	.word	0x08005fa0
 8000d98:	08005fb0 	.word	0x08005fb0
 8000d9c:	08005fc0 	.word	0x08005fc0
 8000da0:	08005fd0 	.word	0x08005fd0
 8000da4:	08005fe0 	.word	0x08005fe0
 8000da8:	08005ff0 	.word	0x08005ff0
 8000dac:	08006000 	.word	0x08006000
 8000db0:	08006010 	.word	0x08006010
 8000db4:	08006020 	.word	0x08006020
 8000db8:	08006030 	.word	0x08006030
 8000dbc:	08006040 	.word	0x08006040
 8000dc0:	08006050 	.word	0x08006050
 8000dc4:	08006060 	.word	0x08006060
 8000dc8:	781b      	ldrb	r3, [r3, #0]
 8000dca:	0018      	movs	r0, r3
 8000dcc:	f7ff fc7e 	bl	80006cc <sendRegisterValue>
	  //HAL_GPIO_TogglePin(GPIOB, LED_BLUE_Pin);
	  //HAL_GPIO_TogglePin(GPIOB, LED_RED_Pin);
	  //HAL_Delay(500);

	  // Start ADC conversion
	  HAL_ADC_Start(&hadc);
 8000dd0:	4b94      	ldr	r3, [pc, #592]	; (8001024 <main+0x6e4>)
 8000dd2:	0018      	movs	r0, r3
 8000dd4:	f000 ff8e 	bl	8001cf4 <HAL_ADC_Start>

	  if (HAL_ADC_PollForConversion(&hadc, HAL_MAX_DELAY) == HAL_OK)
 8000dd8:	2301      	movs	r3, #1
 8000dda:	425a      	negs	r2, r3
 8000ddc:	4b91      	ldr	r3, [pc, #580]	; (8001024 <main+0x6e4>)
 8000dde:	0011      	movs	r1, r2
 8000de0:	0018      	movs	r0, r3
 8000de2:	f000 ffdb 	bl	8001d9c <HAL_ADC_PollForConversion>
 8000de6:	1e03      	subs	r3, r0, #0
 8000de8:	d115      	bne.n	8000e16 <main+0x4d6>
	  {
		  Batt_Vol = HAL_ADC_GetValue(&hadc);
 8000dea:	4b8e      	ldr	r3, [pc, #568]	; (8001024 <main+0x6e4>)
 8000dec:	0018      	movs	r0, r3
 8000dee:	f001 f871 	bl	8001ed4 <HAL_ADC_GetValue>
 8000df2:	0003      	movs	r3, r0
 8000df4:	b29a      	uxth	r2, r3
 8000df6:	4b8c      	ldr	r3, [pc, #560]	; (8001028 <main+0x6e8>)
 8000df8:	801a      	strh	r2, [r3, #0]
		  if(Batt_Vol < 4000)
 8000dfa:	4b8b      	ldr	r3, [pc, #556]	; (8001028 <main+0x6e8>)
 8000dfc:	881a      	ldrh	r2, [r3, #0]
 8000dfe:	23fa      	movs	r3, #250	; 0xfa
 8000e00:	011b      	lsls	r3, r3, #4
 8000e02:	429a      	cmp	r2, r3
 8000e04:	d203      	bcs.n	8000e0e <main+0x4ce>
		  {
			  Need_To_Be_Charged = 1;
 8000e06:	4b89      	ldr	r3, [pc, #548]	; (800102c <main+0x6ec>)
 8000e08:	2201      	movs	r2, #1
 8000e0a:	701a      	strb	r2, [r3, #0]
 8000e0c:	e009      	b.n	8000e22 <main+0x4e2>
		  }
		  else
		  {
			  Need_To_Be_Charged = 0;
 8000e0e:	4b87      	ldr	r3, [pc, #540]	; (800102c <main+0x6ec>)
 8000e10:	2200      	movs	r2, #0
 8000e12:	701a      	strb	r2, [r3, #0]
 8000e14:	e005      	b.n	8000e22 <main+0x4e2>
		  }
	  }
	  else
	  {
		  HAL_UART_Transmit(&hlpuart1, (uint8_t *)"ADC ERROR\n", 10, 100);
 8000e16:	4986      	ldr	r1, [pc, #536]	; (8001030 <main+0x6f0>)
 8000e18:	4886      	ldr	r0, [pc, #536]	; (8001034 <main+0x6f4>)
 8000e1a:	2364      	movs	r3, #100	; 0x64
 8000e1c:	220a      	movs	r2, #10
 8000e1e:	f003 fa4f 	bl	80042c0 <HAL_UART_Transmit>
	  }


	  nRF24_Power(nRF_CSN_Pin, 1);
 8000e22:	2101      	movs	r1, #1
 8000e24:	2008      	movs	r0, #8
 8000e26:	f004 fab1 	bl	800538c <nRF24_Power>
	  HAL_Delay(1);
 8000e2a:	2001      	movs	r0, #1
 8000e2c:	f000 fdca 	bl	80019c4 <HAL_Delay>
	  //key1
	  if (Pressed_Key == 1)
 8000e30:	4b81      	ldr	r3, [pc, #516]	; (8001038 <main+0x6f8>)
 8000e32:	781b      	ldrb	r3, [r3, #0]
 8000e34:	2b01      	cmp	r3, #1
 8000e36:	d137      	bne.n	8000ea8 <main+0x568>
	  {
		  Pressed_Key = 0;
 8000e38:	4b7f      	ldr	r3, [pc, #508]	; (8001038 <main+0x6f8>)
 8000e3a:	2200      	movs	r2, #0
 8000e3c:	701a      	strb	r2, [r3, #0]

		  //Check for the Battery Voltage to select the LED Color 2n4 a   1n3 b
		  while(HAL_GPIO_ReadPin(GPIOB, Key_IN1_Pin) == GPIO_PIN_SET)
 8000e3e:	e012      	b.n	8000e66 <main+0x526>
		  {
			  if(Need_To_Be_Charged == 1)
 8000e40:	4b7a      	ldr	r3, [pc, #488]	; (800102c <main+0x6ec>)
 8000e42:	781b      	ldrb	r3, [r3, #0]
 8000e44:	2b01      	cmp	r3, #1
 8000e46:	d106      	bne.n	8000e56 <main+0x516>
			  {
				  HAL_GPIO_WritePin(GPIOB, LED_RED_Pin, GPIO_PIN_RESET);
 8000e48:	4b7c      	ldr	r3, [pc, #496]	; (800103c <main+0x6fc>)
 8000e4a:	2200      	movs	r2, #0
 8000e4c:	2108      	movs	r1, #8
 8000e4e:	0018      	movs	r0, r3
 8000e50:	f001 fbcb 	bl	80025ea <HAL_GPIO_WritePin>
 8000e54:	e007      	b.n	8000e66 <main+0x526>
			  }
			  else
			  {
			  	  HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_RESET);
 8000e56:	2380      	movs	r3, #128	; 0x80
 8000e58:	0219      	lsls	r1, r3, #8
 8000e5a:	23a0      	movs	r3, #160	; 0xa0
 8000e5c:	05db      	lsls	r3, r3, #23
 8000e5e:	2200      	movs	r2, #0
 8000e60:	0018      	movs	r0, r3
 8000e62:	f001 fbc2 	bl	80025ea <HAL_GPIO_WritePin>
		  while(HAL_GPIO_ReadPin(GPIOB, Key_IN1_Pin) == GPIO_PIN_SET)
 8000e66:	2380      	movs	r3, #128	; 0x80
 8000e68:	015b      	lsls	r3, r3, #5
 8000e6a:	4a74      	ldr	r2, [pc, #464]	; (800103c <main+0x6fc>)
 8000e6c:	0019      	movs	r1, r3
 8000e6e:	0010      	movs	r0, r2
 8000e70:	f001 fb9e 	bl	80025b0 <HAL_GPIO_ReadPin>
 8000e74:	0003      	movs	r3, r0
 8000e76:	2b01      	cmp	r3, #1
 8000e78:	d0e2      	beq.n	8000e40 <main+0x500>
	    	  }
		  }
		  HAL_GPIO_WritePin(GPIOB, LED_RED_Pin, GPIO_PIN_SET);
 8000e7a:	4b70      	ldr	r3, [pc, #448]	; (800103c <main+0x6fc>)
 8000e7c:	2201      	movs	r2, #1
 8000e7e:	2108      	movs	r1, #8
 8000e80:	0018      	movs	r0, r3
 8000e82:	f001 fbb2 	bl	80025ea <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_SET);
 8000e86:	2380      	movs	r3, #128	; 0x80
 8000e88:	0219      	lsls	r1, r3, #8
 8000e8a:	23a0      	movs	r3, #160	; 0xa0
 8000e8c:	05db      	lsls	r3, r3, #23
 8000e8e:	2201      	movs	r2, #1
 8000e90:	0018      	movs	r0, r3
 8000e92:	f001 fbaa 	bl	80025ea <HAL_GPIO_WritePin>

		  char *str2 = "Key1 Was pressed\n\n\n";
 8000e96:	4b6a      	ldr	r3, [pc, #424]	; (8001040 <main+0x700>)
 8000e98:	62bb      	str	r3, [r7, #40]	; 0x28
		  nRF24_Transmit(nRF_CSN_Pin, (uint8_t *)str2);
 8000e9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000e9c:	0019      	movs	r1, r3
 8000e9e:	2008      	movs	r0, #8
 8000ea0:	f004 f9dc 	bl	800525c <nRF24_Transmit>
		  Transmit_Report();
 8000ea4:	f7ff fc34 	bl	8000710 <Transmit_Report>

	  }
	  //key2
	  if (Pressed_Key == 2)
 8000ea8:	4b63      	ldr	r3, [pc, #396]	; (8001038 <main+0x6f8>)
 8000eaa:	781b      	ldrb	r3, [r3, #0]
 8000eac:	2b02      	cmp	r3, #2
 8000eae:	d136      	bne.n	8000f1e <main+0x5de>
	  {
		  Pressed_Key = 0;
 8000eb0:	4b61      	ldr	r3, [pc, #388]	; (8001038 <main+0x6f8>)
 8000eb2:	2200      	movs	r2, #0
 8000eb4:	701a      	strb	r2, [r3, #0]

		  //Check the Battery Voltage to select the LED Color 2n4 a   1n3 b
		  while(HAL_GPIO_ReadPin(GPIOA, Key_IN2_Pin) == GPIO_PIN_SET)
 8000eb6:	e012      	b.n	8000ede <main+0x59e>
		  {
			  if(Need_To_Be_Charged == 1)
 8000eb8:	4b5c      	ldr	r3, [pc, #368]	; (800102c <main+0x6ec>)
 8000eba:	781b      	ldrb	r3, [r3, #0]
 8000ebc:	2b01      	cmp	r3, #1
 8000ebe:	d106      	bne.n	8000ece <main+0x58e>
			  {
				  HAL_GPIO_WritePin(GPIOB, LED_RED_Pin, GPIO_PIN_RESET);
 8000ec0:	4b5e      	ldr	r3, [pc, #376]	; (800103c <main+0x6fc>)
 8000ec2:	2200      	movs	r2, #0
 8000ec4:	2108      	movs	r1, #8
 8000ec6:	0018      	movs	r0, r3
 8000ec8:	f001 fb8f 	bl	80025ea <HAL_GPIO_WritePin>
 8000ecc:	e007      	b.n	8000ede <main+0x59e>
			  }
			  else
			  {
			  	  HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_RESET);
 8000ece:	2380      	movs	r3, #128	; 0x80
 8000ed0:	0219      	lsls	r1, r3, #8
 8000ed2:	23a0      	movs	r3, #160	; 0xa0
 8000ed4:	05db      	lsls	r3, r3, #23
 8000ed6:	2200      	movs	r2, #0
 8000ed8:	0018      	movs	r0, r3
 8000eda:	f001 fb86 	bl	80025ea <HAL_GPIO_WritePin>
		  while(HAL_GPIO_ReadPin(GPIOA, Key_IN2_Pin) == GPIO_PIN_SET)
 8000ede:	23a0      	movs	r3, #160	; 0xa0
 8000ee0:	05db      	lsls	r3, r3, #23
 8000ee2:	2104      	movs	r1, #4
 8000ee4:	0018      	movs	r0, r3
 8000ee6:	f001 fb63 	bl	80025b0 <HAL_GPIO_ReadPin>
 8000eea:	0003      	movs	r3, r0
 8000eec:	2b01      	cmp	r3, #1
 8000eee:	d0e3      	beq.n	8000eb8 <main+0x578>
	    	  }
		  }
		  HAL_GPIO_WritePin(GPIOB, LED_RED_Pin, GPIO_PIN_SET);
 8000ef0:	4b52      	ldr	r3, [pc, #328]	; (800103c <main+0x6fc>)
 8000ef2:	2201      	movs	r2, #1
 8000ef4:	2108      	movs	r1, #8
 8000ef6:	0018      	movs	r0, r3
 8000ef8:	f001 fb77 	bl	80025ea <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_SET);
 8000efc:	2380      	movs	r3, #128	; 0x80
 8000efe:	0219      	lsls	r1, r3, #8
 8000f00:	23a0      	movs	r3, #160	; 0xa0
 8000f02:	05db      	lsls	r3, r3, #23
 8000f04:	2201      	movs	r2, #1
 8000f06:	0018      	movs	r0, r3
 8000f08:	f001 fb6f 	bl	80025ea <HAL_GPIO_WritePin>

		  char *str2 = "Key2 Was pressed\n\n\n";
 8000f0c:	4b4d      	ldr	r3, [pc, #308]	; (8001044 <main+0x704>)
 8000f0e:	627b      	str	r3, [r7, #36]	; 0x24
		  nRF24_Transmit(nRF_CSN_Pin, (uint8_t *)str2);
 8000f10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f12:	0019      	movs	r1, r3
 8000f14:	2008      	movs	r0, #8
 8000f16:	f004 f9a1 	bl	800525c <nRF24_Transmit>
		  Transmit_Report();
 8000f1a:	f7ff fbf9 	bl	8000710 <Transmit_Report>
	  }
	  //key3
	  if (Pressed_Key == 3)
 8000f1e:	4b46      	ldr	r3, [pc, #280]	; (8001038 <main+0x6f8>)
 8000f20:	781b      	ldrb	r3, [r3, #0]
 8000f22:	2b03      	cmp	r3, #3
 8000f24:	d137      	bne.n	8000f96 <main+0x656>
	  {
		  Pressed_Key = 0;
 8000f26:	4b44      	ldr	r3, [pc, #272]	; (8001038 <main+0x6f8>)
 8000f28:	2200      	movs	r2, #0
 8000f2a:	701a      	strb	r2, [r3, #0]

		  //Check for the Battery Voltage to select the LED Color 2n4 a   1n3 b
		  while(HAL_GPIO_ReadPin(GPIOB, Key_IN3_Pin) == GPIO_PIN_SET)
 8000f2c:	e012      	b.n	8000f54 <main+0x614>
		  {
			  if(Need_To_Be_Charged == 1)
 8000f2e:	4b3f      	ldr	r3, [pc, #252]	; (800102c <main+0x6ec>)
 8000f30:	781b      	ldrb	r3, [r3, #0]
 8000f32:	2b01      	cmp	r3, #1
 8000f34:	d106      	bne.n	8000f44 <main+0x604>
			  {
				  HAL_GPIO_WritePin(GPIOB, LED_RED_Pin, GPIO_PIN_RESET);
 8000f36:	4b41      	ldr	r3, [pc, #260]	; (800103c <main+0x6fc>)
 8000f38:	2200      	movs	r2, #0
 8000f3a:	2108      	movs	r1, #8
 8000f3c:	0018      	movs	r0, r3
 8000f3e:	f001 fb54 	bl	80025ea <HAL_GPIO_WritePin>
 8000f42:	e007      	b.n	8000f54 <main+0x614>
			  }
			  else
			  {
			  	  HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_RESET);
 8000f44:	2380      	movs	r3, #128	; 0x80
 8000f46:	0219      	lsls	r1, r3, #8
 8000f48:	23a0      	movs	r3, #160	; 0xa0
 8000f4a:	05db      	lsls	r3, r3, #23
 8000f4c:	2200      	movs	r2, #0
 8000f4e:	0018      	movs	r0, r3
 8000f50:	f001 fb4b 	bl	80025ea <HAL_GPIO_WritePin>
		  while(HAL_GPIO_ReadPin(GPIOB, Key_IN3_Pin) == GPIO_PIN_SET)
 8000f54:	2380      	movs	r3, #128	; 0x80
 8000f56:	019b      	lsls	r3, r3, #6
 8000f58:	4a38      	ldr	r2, [pc, #224]	; (800103c <main+0x6fc>)
 8000f5a:	0019      	movs	r1, r3
 8000f5c:	0010      	movs	r0, r2
 8000f5e:	f001 fb27 	bl	80025b0 <HAL_GPIO_ReadPin>
 8000f62:	0003      	movs	r3, r0
 8000f64:	2b01      	cmp	r3, #1
 8000f66:	d0e2      	beq.n	8000f2e <main+0x5ee>
	    	  }
		  }
		  HAL_GPIO_WritePin(GPIOB, LED_RED_Pin, GPIO_PIN_SET);
 8000f68:	4b34      	ldr	r3, [pc, #208]	; (800103c <main+0x6fc>)
 8000f6a:	2201      	movs	r2, #1
 8000f6c:	2108      	movs	r1, #8
 8000f6e:	0018      	movs	r0, r3
 8000f70:	f001 fb3b 	bl	80025ea <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_SET);
 8000f74:	2380      	movs	r3, #128	; 0x80
 8000f76:	0219      	lsls	r1, r3, #8
 8000f78:	23a0      	movs	r3, #160	; 0xa0
 8000f7a:	05db      	lsls	r3, r3, #23
 8000f7c:	2201      	movs	r2, #1
 8000f7e:	0018      	movs	r0, r3
 8000f80:	f001 fb33 	bl	80025ea <HAL_GPIO_WritePin>

		  char *str2 = "Key3 Was pressed\n\n\n";
 8000f84:	4b30      	ldr	r3, [pc, #192]	; (8001048 <main+0x708>)
 8000f86:	623b      	str	r3, [r7, #32]
		  nRF24_Transmit(nRF_CSN_Pin, (uint8_t *)str2);
 8000f88:	6a3b      	ldr	r3, [r7, #32]
 8000f8a:	0019      	movs	r1, r3
 8000f8c:	2008      	movs	r0, #8
 8000f8e:	f004 f965 	bl	800525c <nRF24_Transmit>
		  Transmit_Report();
 8000f92:	f7ff fbbd 	bl	8000710 <Transmit_Report>
	  }

	  //key4
	  if (Pressed_Key == 4)
 8000f96:	4b28      	ldr	r3, [pc, #160]	; (8001038 <main+0x6f8>)
 8000f98:	781b      	ldrb	r3, [r3, #0]
 8000f9a:	2b04      	cmp	r3, #4
 8000f9c:	d136      	bne.n	800100c <main+0x6cc>
	  {
		  Pressed_Key = 0;
 8000f9e:	4b26      	ldr	r3, [pc, #152]	; (8001038 <main+0x6f8>)
 8000fa0:	2200      	movs	r2, #0
 8000fa2:	701a      	strb	r2, [r3, #0]

		  //Check for the Battery Voltage to select the LED Color 2n4 a   1n3 b
		  while(HAL_GPIO_ReadPin(GPIOA, Key_IN4_Pin) == GPIO_PIN_SET)
 8000fa4:	e012      	b.n	8000fcc <main+0x68c>
		  {
			  if(Need_To_Be_Charged == 1)
 8000fa6:	4b21      	ldr	r3, [pc, #132]	; (800102c <main+0x6ec>)
 8000fa8:	781b      	ldrb	r3, [r3, #0]
 8000faa:	2b01      	cmp	r3, #1
 8000fac:	d106      	bne.n	8000fbc <main+0x67c>
			  {
				  HAL_GPIO_WritePin(GPIOB, LED_RED_Pin, GPIO_PIN_RESET);
 8000fae:	4b23      	ldr	r3, [pc, #140]	; (800103c <main+0x6fc>)
 8000fb0:	2200      	movs	r2, #0
 8000fb2:	2108      	movs	r1, #8
 8000fb4:	0018      	movs	r0, r3
 8000fb6:	f001 fb18 	bl	80025ea <HAL_GPIO_WritePin>
 8000fba:	e007      	b.n	8000fcc <main+0x68c>
			  }
			  else
			  {
			  	  HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_RESET);
 8000fbc:	2380      	movs	r3, #128	; 0x80
 8000fbe:	0219      	lsls	r1, r3, #8
 8000fc0:	23a0      	movs	r3, #160	; 0xa0
 8000fc2:	05db      	lsls	r3, r3, #23
 8000fc4:	2200      	movs	r2, #0
 8000fc6:	0018      	movs	r0, r3
 8000fc8:	f001 fb0f 	bl	80025ea <HAL_GPIO_WritePin>
		  while(HAL_GPIO_ReadPin(GPIOA, Key_IN4_Pin) == GPIO_PIN_SET)
 8000fcc:	23a0      	movs	r3, #160	; 0xa0
 8000fce:	05db      	lsls	r3, r3, #23
 8000fd0:	2102      	movs	r1, #2
 8000fd2:	0018      	movs	r0, r3
 8000fd4:	f001 faec 	bl	80025b0 <HAL_GPIO_ReadPin>
 8000fd8:	0003      	movs	r3, r0
 8000fda:	2b01      	cmp	r3, #1
 8000fdc:	d0e3      	beq.n	8000fa6 <main+0x666>
	    	  }
		  }
		  HAL_GPIO_WritePin(GPIOB, LED_RED_Pin, GPIO_PIN_SET);
 8000fde:	4b17      	ldr	r3, [pc, #92]	; (800103c <main+0x6fc>)
 8000fe0:	2201      	movs	r2, #1
 8000fe2:	2108      	movs	r1, #8
 8000fe4:	0018      	movs	r0, r3
 8000fe6:	f001 fb00 	bl	80025ea <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_SET);
 8000fea:	2380      	movs	r3, #128	; 0x80
 8000fec:	0219      	lsls	r1, r3, #8
 8000fee:	23a0      	movs	r3, #160	; 0xa0
 8000ff0:	05db      	lsls	r3, r3, #23
 8000ff2:	2201      	movs	r2, #1
 8000ff4:	0018      	movs	r0, r3
 8000ff6:	f001 faf8 	bl	80025ea <HAL_GPIO_WritePin>

		  char *str2 = "Key4 Was pressed\n\n\n";
 8000ffa:	4b14      	ldr	r3, [pc, #80]	; (800104c <main+0x70c>)
 8000ffc:	61fb      	str	r3, [r7, #28]
		  nRF24_Transmit(nRF_CSN_Pin, (uint8_t *)str2);
 8000ffe:	69fb      	ldr	r3, [r7, #28]
 8001000:	0019      	movs	r1, r3
 8001002:	2008      	movs	r0, #8
 8001004:	f004 f92a 	bl	800525c <nRF24_Transmit>
		  Transmit_Report();
 8001008:	f7ff fb82 	bl	8000710 <Transmit_Report>
	  }


	  nRF24_CE_Disable(nRF_CSN_Pin);
 800100c:	2008      	movs	r0, #8
 800100e:	f003 feeb 	bl	8004de8 <nRF24_CE_Disable>
	  nRF24_Power(nRF_CSN_Pin, 0);
 8001012:	2100      	movs	r1, #0
 8001014:	2008      	movs	r0, #8
 8001016:	f004 f9b9 	bl	800538c <nRF24_Power>
	  HAL_Delay(1);
 800101a:	2001      	movs	r0, #1
 800101c:	f000 fcd2 	bl	80019c4 <HAL_Delay>
	  HAL_ADC_Start(&hadc);
 8001020:	e6d6      	b.n	8000dd0 <main+0x490>
 8001022:	46c0      	nop			; (mov r8, r8)
 8001024:	2000009c 	.word	0x2000009c
 8001028:	2000021a 	.word	0x2000021a
 800102c:	2000021c 	.word	0x2000021c
 8001030:	08006070 	.word	0x08006070
 8001034:	200000f8 	.word	0x200000f8
 8001038:	2000021d 	.word	0x2000021d
 800103c:	50000400 	.word	0x50000400
 8001040:	0800607c 	.word	0x0800607c
 8001044:	08006090 	.word	0x08006090
 8001048:	080060a4 	.word	0x080060a4
 800104c:	080060b8 	.word	0x080060b8

08001050 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001050:	b590      	push	{r4, r7, lr}
 8001052:	b09b      	sub	sp, #108	; 0x6c
 8001054:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001056:	2434      	movs	r4, #52	; 0x34
 8001058:	193b      	adds	r3, r7, r4
 800105a:	0018      	movs	r0, r3
 800105c:	2334      	movs	r3, #52	; 0x34
 800105e:	001a      	movs	r2, r3
 8001060:	2100      	movs	r1, #0
 8001062:	f004 f9e5 	bl	8005430 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001066:	2320      	movs	r3, #32
 8001068:	18fb      	adds	r3, r7, r3
 800106a:	0018      	movs	r0, r3
 800106c:	2314      	movs	r3, #20
 800106e:	001a      	movs	r2, r3
 8001070:	2100      	movs	r1, #0
 8001072:	f004 f9dd 	bl	8005430 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001076:	1d3b      	adds	r3, r7, #4
 8001078:	0018      	movs	r0, r3
 800107a:	231c      	movs	r3, #28
 800107c:	001a      	movs	r2, r3
 800107e:	2100      	movs	r1, #0
 8001080:	f004 f9d6 	bl	8005430 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001084:	4b29      	ldr	r3, [pc, #164]	; (800112c <SystemClock_Config+0xdc>)
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	4a29      	ldr	r2, [pc, #164]	; (8001130 <SystemClock_Config+0xe0>)
 800108a:	401a      	ands	r2, r3
 800108c:	4b27      	ldr	r3, [pc, #156]	; (800112c <SystemClock_Config+0xdc>)
 800108e:	2180      	movs	r1, #128	; 0x80
 8001090:	0109      	lsls	r1, r1, #4
 8001092:	430a      	orrs	r2, r1
 8001094:	601a      	str	r2, [r3, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001096:	0021      	movs	r1, r4
 8001098:	187b      	adds	r3, r7, r1
 800109a:	2202      	movs	r2, #2
 800109c:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800109e:	187b      	adds	r3, r7, r1
 80010a0:	2201      	movs	r2, #1
 80010a2:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80010a4:	187b      	adds	r3, r7, r1
 80010a6:	2210      	movs	r2, #16
 80010a8:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80010aa:	187b      	adds	r3, r7, r1
 80010ac:	2202      	movs	r2, #2
 80010ae:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80010b0:	187b      	adds	r3, r7, r1
 80010b2:	2200      	movs	r2, #0
 80010b4:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLLMUL_3;
 80010b6:	187b      	adds	r3, r7, r1
 80010b8:	2200      	movs	r2, #0
 80010ba:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLLDIV_2;
 80010bc:	187b      	adds	r3, r7, r1
 80010be:	2280      	movs	r2, #128	; 0x80
 80010c0:	03d2      	lsls	r2, r2, #15
 80010c2:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80010c4:	187b      	adds	r3, r7, r1
 80010c6:	0018      	movs	r0, r3
 80010c8:	f001 fac8 	bl	800265c <HAL_RCC_OscConfig>
 80010cc:	1e03      	subs	r3, r0, #0
 80010ce:	d001      	beq.n	80010d4 <SystemClock_Config+0x84>
  {
    Error_Handler();
 80010d0:	f000 fa6e 	bl	80015b0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80010d4:	2120      	movs	r1, #32
 80010d6:	187b      	adds	r3, r7, r1
 80010d8:	220f      	movs	r2, #15
 80010da:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80010dc:	187b      	adds	r3, r7, r1
 80010de:	2203      	movs	r2, #3
 80010e0:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80010e2:	187b      	adds	r3, r7, r1
 80010e4:	2200      	movs	r2, #0
 80010e6:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80010e8:	187b      	adds	r3, r7, r1
 80010ea:	2200      	movs	r2, #0
 80010ec:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80010ee:	187b      	adds	r3, r7, r1
 80010f0:	2200      	movs	r2, #0
 80010f2:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80010f4:	187b      	adds	r3, r7, r1
 80010f6:	2101      	movs	r1, #1
 80010f8:	0018      	movs	r0, r3
 80010fa:	f001 fe19 	bl	8002d30 <HAL_RCC_ClockConfig>
 80010fe:	1e03      	subs	r3, r0, #0
 8001100:	d001      	beq.n	8001106 <SystemClock_Config+0xb6>
  {
    Error_Handler();
 8001102:	f000 fa55 	bl	80015b0 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8001106:	1d3b      	adds	r3, r7, #4
 8001108:	2204      	movs	r2, #4
 800110a:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 800110c:	1d3b      	adds	r3, r7, #4
 800110e:	2200      	movs	r2, #0
 8001110:	611a      	str	r2, [r3, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001112:	1d3b      	adds	r3, r7, #4
 8001114:	0018      	movs	r0, r3
 8001116:	f002 f82f 	bl	8003178 <HAL_RCCEx_PeriphCLKConfig>
 800111a:	1e03      	subs	r3, r0, #0
 800111c:	d001      	beq.n	8001122 <SystemClock_Config+0xd2>
  {
    Error_Handler();
 800111e:	f000 fa47 	bl	80015b0 <Error_Handler>
  }
}
 8001122:	46c0      	nop			; (mov r8, r8)
 8001124:	46bd      	mov	sp, r7
 8001126:	b01b      	add	sp, #108	; 0x6c
 8001128:	bd90      	pop	{r4, r7, pc}
 800112a:	46c0      	nop			; (mov r8, r8)
 800112c:	40007000 	.word	0x40007000
 8001130:	ffffe7ff 	.word	0xffffe7ff

08001134 <MX_ADC_Init>:
  * @brief ADC Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC_Init(void)
{
 8001134:	b580      	push	{r7, lr}
 8001136:	b082      	sub	sp, #8
 8001138:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800113a:	003b      	movs	r3, r7
 800113c:	0018      	movs	r0, r3
 800113e:	2308      	movs	r3, #8
 8001140:	001a      	movs	r2, r3
 8001142:	2100      	movs	r1, #0
 8001144:	f004 f974 	bl	8005430 <memset>

  /* USER CODE END ADC_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 8001148:	4b2a      	ldr	r3, [pc, #168]	; (80011f4 <MX_ADC_Init+0xc0>)
 800114a:	4a2b      	ldr	r2, [pc, #172]	; (80011f8 <MX_ADC_Init+0xc4>)
 800114c:	601a      	str	r2, [r3, #0]
  hadc.Init.OversamplingMode = DISABLE;
 800114e:	4b29      	ldr	r3, [pc, #164]	; (80011f4 <MX_ADC_Init+0xc0>)
 8001150:	2200      	movs	r2, #0
 8001152:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8001154:	4b27      	ldr	r3, [pc, #156]	; (80011f4 <MX_ADC_Init+0xc0>)
 8001156:	2280      	movs	r2, #128	; 0x80
 8001158:	05d2      	lsls	r2, r2, #23
 800115a:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 800115c:	4b25      	ldr	r3, [pc, #148]	; (80011f4 <MX_ADC_Init+0xc0>)
 800115e:	2200      	movs	r2, #0
 8001160:	609a      	str	r2, [r3, #8]
  hadc.Init.SamplingTime = ADC_SAMPLETIME_19CYCLES_5;
 8001162:	4b24      	ldr	r3, [pc, #144]	; (80011f4 <MX_ADC_Init+0xc0>)
 8001164:	2204      	movs	r2, #4
 8001166:	639a      	str	r2, [r3, #56]	; 0x38
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 8001168:	4b22      	ldr	r3, [pc, #136]	; (80011f4 <MX_ADC_Init+0xc0>)
 800116a:	2201      	movs	r2, #1
 800116c:	611a      	str	r2, [r3, #16]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800116e:	4b21      	ldr	r3, [pc, #132]	; (80011f4 <MX_ADC_Init+0xc0>)
 8001170:	2200      	movs	r2, #0
 8001172:	60da      	str	r2, [r3, #12]
  hadc.Init.ContinuousConvMode = DISABLE;
 8001174:	4b1f      	ldr	r3, [pc, #124]	; (80011f4 <MX_ADC_Init+0xc0>)
 8001176:	2220      	movs	r2, #32
 8001178:	2100      	movs	r1, #0
 800117a:	5499      	strb	r1, [r3, r2]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 800117c:	4b1d      	ldr	r3, [pc, #116]	; (80011f4 <MX_ADC_Init+0xc0>)
 800117e:	2221      	movs	r2, #33	; 0x21
 8001180:	2100      	movs	r1, #0
 8001182:	5499      	strb	r1, [r3, r2]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001184:	4b1b      	ldr	r3, [pc, #108]	; (80011f4 <MX_ADC_Init+0xc0>)
 8001186:	2200      	movs	r2, #0
 8001188:	629a      	str	r2, [r3, #40]	; 0x28
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800118a:	4b1a      	ldr	r3, [pc, #104]	; (80011f4 <MX_ADC_Init+0xc0>)
 800118c:	22c2      	movs	r2, #194	; 0xc2
 800118e:	32ff      	adds	r2, #255	; 0xff
 8001190:	625a      	str	r2, [r3, #36]	; 0x24
  hadc.Init.DMAContinuousRequests = DISABLE;
 8001192:	4b18      	ldr	r3, [pc, #96]	; (80011f4 <MX_ADC_Init+0xc0>)
 8001194:	222c      	movs	r2, #44	; 0x2c
 8001196:	2100      	movs	r1, #0
 8001198:	5499      	strb	r1, [r3, r2]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800119a:	4b16      	ldr	r3, [pc, #88]	; (80011f4 <MX_ADC_Init+0xc0>)
 800119c:	2204      	movs	r2, #4
 800119e:	615a      	str	r2, [r3, #20]
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80011a0:	4b14      	ldr	r3, [pc, #80]	; (80011f4 <MX_ADC_Init+0xc0>)
 80011a2:	2200      	movs	r2, #0
 80011a4:	631a      	str	r2, [r3, #48]	; 0x30
  hadc.Init.LowPowerAutoWait = DISABLE;
 80011a6:	4b13      	ldr	r3, [pc, #76]	; (80011f4 <MX_ADC_Init+0xc0>)
 80011a8:	2200      	movs	r2, #0
 80011aa:	619a      	str	r2, [r3, #24]
  hadc.Init.LowPowerFrequencyMode = DISABLE;
 80011ac:	4b11      	ldr	r3, [pc, #68]	; (80011f4 <MX_ADC_Init+0xc0>)
 80011ae:	2200      	movs	r2, #0
 80011b0:	635a      	str	r2, [r3, #52]	; 0x34
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 80011b2:	4b10      	ldr	r3, [pc, #64]	; (80011f4 <MX_ADC_Init+0xc0>)
 80011b4:	2200      	movs	r2, #0
 80011b6:	61da      	str	r2, [r3, #28]
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 80011b8:	4b0e      	ldr	r3, [pc, #56]	; (80011f4 <MX_ADC_Init+0xc0>)
 80011ba:	0018      	movs	r0, r3
 80011bc:	f000 fc26 	bl	8001a0c <HAL_ADC_Init>
 80011c0:	1e03      	subs	r3, r0, #0
 80011c2:	d001      	beq.n	80011c8 <MX_ADC_Init+0x94>
  {
    Error_Handler();
 80011c4:	f000 f9f4 	bl	80015b0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 80011c8:	003b      	movs	r3, r7
 80011ca:	4a0c      	ldr	r2, [pc, #48]	; (80011fc <MX_ADC_Init+0xc8>)
 80011cc:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 80011ce:	003b      	movs	r3, r7
 80011d0:	2280      	movs	r2, #128	; 0x80
 80011d2:	0152      	lsls	r2, r2, #5
 80011d4:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80011d6:	003a      	movs	r2, r7
 80011d8:	4b06      	ldr	r3, [pc, #24]	; (80011f4 <MX_ADC_Init+0xc0>)
 80011da:	0011      	movs	r1, r2
 80011dc:	0018      	movs	r0, r3
 80011de:	f000 fe85 	bl	8001eec <HAL_ADC_ConfigChannel>
 80011e2:	1e03      	subs	r3, r0, #0
 80011e4:	d001      	beq.n	80011ea <MX_ADC_Init+0xb6>
  {
    Error_Handler();
 80011e6:	f000 f9e3 	bl	80015b0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 80011ea:	46c0      	nop			; (mov r8, r8)
 80011ec:	46bd      	mov	sp, r7
 80011ee:	b002      	add	sp, #8
 80011f0:	bd80      	pop	{r7, pc}
 80011f2:	46c0      	nop			; (mov r8, r8)
 80011f4:	2000009c 	.word	0x2000009c
 80011f8:	40012400 	.word	0x40012400
 80011fc:	24000200 	.word	0x24000200

08001200 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 8001200:	b580      	push	{r7, lr}
 8001202:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8001204:	4b13      	ldr	r3, [pc, #76]	; (8001254 <MX_LPUART1_UART_Init+0x54>)
 8001206:	4a14      	ldr	r2, [pc, #80]	; (8001258 <MX_LPUART1_UART_Init+0x58>)
 8001208:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 800120a:	4b12      	ldr	r3, [pc, #72]	; (8001254 <MX_LPUART1_UART_Init+0x54>)
 800120c:	22e1      	movs	r2, #225	; 0xe1
 800120e:	0252      	lsls	r2, r2, #9
 8001210:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001212:	4b10      	ldr	r3, [pc, #64]	; (8001254 <MX_LPUART1_UART_Init+0x54>)
 8001214:	2200      	movs	r2, #0
 8001216:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8001218:	4b0e      	ldr	r3, [pc, #56]	; (8001254 <MX_LPUART1_UART_Init+0x54>)
 800121a:	2200      	movs	r2, #0
 800121c:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 800121e:	4b0d      	ldr	r3, [pc, #52]	; (8001254 <MX_LPUART1_UART_Init+0x54>)
 8001220:	2200      	movs	r2, #0
 8001222:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8001224:	4b0b      	ldr	r3, [pc, #44]	; (8001254 <MX_LPUART1_UART_Init+0x54>)
 8001226:	220c      	movs	r2, #12
 8001228:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800122a:	4b0a      	ldr	r3, [pc, #40]	; (8001254 <MX_LPUART1_UART_Init+0x54>)
 800122c:	2200      	movs	r2, #0
 800122e:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001230:	4b08      	ldr	r3, [pc, #32]	; (8001254 <MX_LPUART1_UART_Init+0x54>)
 8001232:	2200      	movs	r2, #0
 8001234:	621a      	str	r2, [r3, #32]
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001236:	4b07      	ldr	r3, [pc, #28]	; (8001254 <MX_LPUART1_UART_Init+0x54>)
 8001238:	2200      	movs	r2, #0
 800123a:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 800123c:	4b05      	ldr	r3, [pc, #20]	; (8001254 <MX_LPUART1_UART_Init+0x54>)
 800123e:	0018      	movs	r0, r3
 8001240:	f002 ffea 	bl	8004218 <HAL_UART_Init>
 8001244:	1e03      	subs	r3, r0, #0
 8001246:	d001      	beq.n	800124c <MX_LPUART1_UART_Init+0x4c>
  {
    Error_Handler();
 8001248:	f000 f9b2 	bl	80015b0 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 800124c:	46c0      	nop			; (mov r8, r8)
 800124e:	46bd      	mov	sp, r7
 8001250:	bd80      	pop	{r7, pc}
 8001252:	46c0      	nop			; (mov r8, r8)
 8001254:	200000f8 	.word	0x200000f8
 8001258:	40004800 	.word	0x40004800

0800125c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800125c:	b580      	push	{r7, lr}
 800125e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001260:	4b18      	ldr	r3, [pc, #96]	; (80012c4 <MX_SPI1_Init+0x68>)
 8001262:	4a19      	ldr	r2, [pc, #100]	; (80012c8 <MX_SPI1_Init+0x6c>)
 8001264:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001266:	4b17      	ldr	r3, [pc, #92]	; (80012c4 <MX_SPI1_Init+0x68>)
 8001268:	2282      	movs	r2, #130	; 0x82
 800126a:	0052      	lsls	r2, r2, #1
 800126c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800126e:	4b15      	ldr	r3, [pc, #84]	; (80012c4 <MX_SPI1_Init+0x68>)
 8001270:	2200      	movs	r2, #0
 8001272:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001274:	4b13      	ldr	r3, [pc, #76]	; (80012c4 <MX_SPI1_Init+0x68>)
 8001276:	2200      	movs	r2, #0
 8001278:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800127a:	4b12      	ldr	r3, [pc, #72]	; (80012c4 <MX_SPI1_Init+0x68>)
 800127c:	2200      	movs	r2, #0
 800127e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001280:	4b10      	ldr	r3, [pc, #64]	; (80012c4 <MX_SPI1_Init+0x68>)
 8001282:	2200      	movs	r2, #0
 8001284:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001286:	4b0f      	ldr	r3, [pc, #60]	; (80012c4 <MX_SPI1_Init+0x68>)
 8001288:	2280      	movs	r2, #128	; 0x80
 800128a:	0092      	lsls	r2, r2, #2
 800128c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800128e:	4b0d      	ldr	r3, [pc, #52]	; (80012c4 <MX_SPI1_Init+0x68>)
 8001290:	2200      	movs	r2, #0
 8001292:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001294:	4b0b      	ldr	r3, [pc, #44]	; (80012c4 <MX_SPI1_Init+0x68>)
 8001296:	2200      	movs	r2, #0
 8001298:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800129a:	4b0a      	ldr	r3, [pc, #40]	; (80012c4 <MX_SPI1_Init+0x68>)
 800129c:	2200      	movs	r2, #0
 800129e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80012a0:	4b08      	ldr	r3, [pc, #32]	; (80012c4 <MX_SPI1_Init+0x68>)
 80012a2:	2200      	movs	r2, #0
 80012a4:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 80012a6:	4b07      	ldr	r3, [pc, #28]	; (80012c4 <MX_SPI1_Init+0x68>)
 80012a8:	2207      	movs	r2, #7
 80012aa:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80012ac:	4b05      	ldr	r3, [pc, #20]	; (80012c4 <MX_SPI1_Init+0x68>)
 80012ae:	0018      	movs	r0, r3
 80012b0:	f002 f89c 	bl	80033ec <HAL_SPI_Init>
 80012b4:	1e03      	subs	r3, r0, #0
 80012b6:	d001      	beq.n	80012bc <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80012b8:	f000 f97a 	bl	80015b0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80012bc:	46c0      	nop			; (mov r8, r8)
 80012be:	46bd      	mov	sp, r7
 80012c0:	bd80      	pop	{r7, pc}
 80012c2:	46c0      	nop			; (mov r8, r8)
 80012c4:	20000180 	.word	0x20000180
 80012c8:	40013000 	.word	0x40013000

080012cc <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 80012cc:	b580      	push	{r7, lr}
 80012ce:	b082      	sub	sp, #8
 80012d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80012d2:	003b      	movs	r3, r7
 80012d4:	0018      	movs	r0, r3
 80012d6:	2308      	movs	r3, #8
 80012d8:	001a      	movs	r2, r3
 80012da:	2100      	movs	r1, #0
 80012dc:	f004 f8a8 	bl	8005430 <memset>

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 80012e0:	4b15      	ldr	r3, [pc, #84]	; (8001338 <MX_TIM6_Init+0x6c>)
 80012e2:	4a16      	ldr	r2, [pc, #88]	; (800133c <MX_TIM6_Init+0x70>)
 80012e4:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 0;
 80012e6:	4b14      	ldr	r3, [pc, #80]	; (8001338 <MX_TIM6_Init+0x6c>)
 80012e8:	2200      	movs	r2, #0
 80012ea:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80012ec:	4b12      	ldr	r3, [pc, #72]	; (8001338 <MX_TIM6_Init+0x6c>)
 80012ee:	2200      	movs	r2, #0
 80012f0:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 65535;
 80012f2:	4b11      	ldr	r3, [pc, #68]	; (8001338 <MX_TIM6_Init+0x6c>)
 80012f4:	4a12      	ldr	r2, [pc, #72]	; (8001340 <MX_TIM6_Init+0x74>)
 80012f6:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80012f8:	4b0f      	ldr	r3, [pc, #60]	; (8001338 <MX_TIM6_Init+0x6c>)
 80012fa:	2200      	movs	r2, #0
 80012fc:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80012fe:	4b0e      	ldr	r3, [pc, #56]	; (8001338 <MX_TIM6_Init+0x6c>)
 8001300:	0018      	movs	r0, r3
 8001302:	f002 fe9d 	bl	8004040 <HAL_TIM_Base_Init>
 8001306:	1e03      	subs	r3, r0, #0
 8001308:	d001      	beq.n	800130e <MX_TIM6_Init+0x42>
  {
    Error_Handler();
 800130a:	f000 f951 	bl	80015b0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800130e:	003b      	movs	r3, r7
 8001310:	2200      	movs	r2, #0
 8001312:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001314:	003b      	movs	r3, r7
 8001316:	2200      	movs	r2, #0
 8001318:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 800131a:	003a      	movs	r2, r7
 800131c:	4b06      	ldr	r3, [pc, #24]	; (8001338 <MX_TIM6_Init+0x6c>)
 800131e:	0011      	movs	r1, r2
 8001320:	0018      	movs	r0, r3
 8001322:	f002 ff21 	bl	8004168 <HAL_TIMEx_MasterConfigSynchronization>
 8001326:	1e03      	subs	r3, r0, #0
 8001328:	d001      	beq.n	800132e <MX_TIM6_Init+0x62>
  {
    Error_Handler();
 800132a:	f000 f941 	bl	80015b0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 800132e:	46c0      	nop			; (mov r8, r8)
 8001330:	46bd      	mov	sp, r7
 8001332:	b002      	add	sp, #8
 8001334:	bd80      	pop	{r7, pc}
 8001336:	46c0      	nop			; (mov r8, r8)
 8001338:	200001d8 	.word	0x200001d8
 800133c:	40001000 	.word	0x40001000
 8001340:	0000ffff 	.word	0x0000ffff

08001344 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001344:	b590      	push	{r4, r7, lr}
 8001346:	b08b      	sub	sp, #44	; 0x2c
 8001348:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800134a:	2414      	movs	r4, #20
 800134c:	193b      	adds	r3, r7, r4
 800134e:	0018      	movs	r0, r3
 8001350:	2314      	movs	r3, #20
 8001352:	001a      	movs	r2, r3
 8001354:	2100      	movs	r1, #0
 8001356:	f004 f86b 	bl	8005430 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800135a:	4b90      	ldr	r3, [pc, #576]	; (800159c <MX_GPIO_Init+0x258>)
 800135c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800135e:	4b8f      	ldr	r3, [pc, #572]	; (800159c <MX_GPIO_Init+0x258>)
 8001360:	2104      	movs	r1, #4
 8001362:	430a      	orrs	r2, r1
 8001364:	62da      	str	r2, [r3, #44]	; 0x2c
 8001366:	4b8d      	ldr	r3, [pc, #564]	; (800159c <MX_GPIO_Init+0x258>)
 8001368:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800136a:	2204      	movs	r2, #4
 800136c:	4013      	ands	r3, r2
 800136e:	613b      	str	r3, [r7, #16]
 8001370:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001372:	4b8a      	ldr	r3, [pc, #552]	; (800159c <MX_GPIO_Init+0x258>)
 8001374:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001376:	4b89      	ldr	r3, [pc, #548]	; (800159c <MX_GPIO_Init+0x258>)
 8001378:	2180      	movs	r1, #128	; 0x80
 800137a:	430a      	orrs	r2, r1
 800137c:	62da      	str	r2, [r3, #44]	; 0x2c
 800137e:	4b87      	ldr	r3, [pc, #540]	; (800159c <MX_GPIO_Init+0x258>)
 8001380:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001382:	2280      	movs	r2, #128	; 0x80
 8001384:	4013      	ands	r3, r2
 8001386:	60fb      	str	r3, [r7, #12]
 8001388:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800138a:	4b84      	ldr	r3, [pc, #528]	; (800159c <MX_GPIO_Init+0x258>)
 800138c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800138e:	4b83      	ldr	r3, [pc, #524]	; (800159c <MX_GPIO_Init+0x258>)
 8001390:	2101      	movs	r1, #1
 8001392:	430a      	orrs	r2, r1
 8001394:	62da      	str	r2, [r3, #44]	; 0x2c
 8001396:	4b81      	ldr	r3, [pc, #516]	; (800159c <MX_GPIO_Init+0x258>)
 8001398:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800139a:	2201      	movs	r2, #1
 800139c:	4013      	ands	r3, r2
 800139e:	60bb      	str	r3, [r7, #8]
 80013a0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80013a2:	4b7e      	ldr	r3, [pc, #504]	; (800159c <MX_GPIO_Init+0x258>)
 80013a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80013a6:	4b7d      	ldr	r3, [pc, #500]	; (800159c <MX_GPIO_Init+0x258>)
 80013a8:	2102      	movs	r1, #2
 80013aa:	430a      	orrs	r2, r1
 80013ac:	62da      	str	r2, [r3, #44]	; 0x2c
 80013ae:	4b7b      	ldr	r3, [pc, #492]	; (800159c <MX_GPIO_Init+0x258>)
 80013b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80013b2:	2202      	movs	r2, #2
 80013b4:	4013      	ands	r3, r2
 80013b6:	607b      	str	r3, [r7, #4]
 80013b8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, nRF_CSN_Pin|LED_GREEN_Pin, GPIO_PIN_SET);
 80013ba:	4979      	ldr	r1, [pc, #484]	; (80015a0 <MX_GPIO_Init+0x25c>)
 80013bc:	23a0      	movs	r3, #160	; 0xa0
 80013be:	05db      	lsls	r3, r3, #23
 80013c0:	2201      	movs	r2, #1
 80013c2:	0018      	movs	r0, r3
 80013c4:	f001 f911 	bl	80025ea <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(nRF_CE_GPIO_Port, nRF_CE_Pin, GPIO_PIN_RESET);
 80013c8:	4b76      	ldr	r3, [pc, #472]	; (80015a4 <MX_GPIO_Init+0x260>)
 80013ca:	2200      	movs	r2, #0
 80013cc:	2104      	movs	r1, #4
 80013ce:	0018      	movs	r0, r3
 80013d0:	f001 f90b 	bl	80025ea <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_RED_Pin|LED_BLUE_Pin, GPIO_PIN_SET);
 80013d4:	4b73      	ldr	r3, [pc, #460]	; (80015a4 <MX_GPIO_Init+0x260>)
 80013d6:	2201      	movs	r2, #1
 80013d8:	2118      	movs	r1, #24
 80013da:	0018      	movs	r0, r3
 80013dc:	f001 f905 	bl	80025ea <HAL_GPIO_WritePin>

  /*Configure GPIO pins : Dev_ID2_Pin Dev_ID3_Pin Dev_ID4_Pin */
  GPIO_InitStruct.Pin = Dev_ID2_Pin|Dev_ID3_Pin|Dev_ID4_Pin;
 80013e0:	193b      	adds	r3, r7, r4
 80013e2:	22e0      	movs	r2, #224	; 0xe0
 80013e4:	0212      	lsls	r2, r2, #8
 80013e6:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80013e8:	193b      	adds	r3, r7, r4
 80013ea:	2200      	movs	r2, #0
 80013ec:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80013ee:	193b      	adds	r3, r7, r4
 80013f0:	2202      	movs	r2, #2
 80013f2:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80013f4:	193b      	adds	r3, r7, r4
 80013f6:	4a6c      	ldr	r2, [pc, #432]	; (80015a8 <MX_GPIO_Init+0x264>)
 80013f8:	0019      	movs	r1, r3
 80013fa:	0010      	movs	r0, r2
 80013fc:	f000 ff62 	bl	80022c4 <HAL_GPIO_Init>

  /*Configure GPIO pins : Dev_ID5_Pin Dev_ID6_Pin */
  GPIO_InitStruct.Pin = Dev_ID5_Pin|Dev_ID6_Pin;
 8001400:	193b      	adds	r3, r7, r4
 8001402:	2203      	movs	r2, #3
 8001404:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001406:	193b      	adds	r3, r7, r4
 8001408:	2200      	movs	r2, #0
 800140a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800140c:	193b      	adds	r3, r7, r4
 800140e:	2202      	movs	r2, #2
 8001410:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001412:	193b      	adds	r3, r7, r4
 8001414:	4a65      	ldr	r2, [pc, #404]	; (80015ac <MX_GPIO_Init+0x268>)
 8001416:	0019      	movs	r1, r3
 8001418:	0010      	movs	r0, r2
 800141a:	f000 ff53 	bl	80022c4 <HAL_GPIO_Init>

  /*Configure GPIO pin : Dev_ID7_Pin */
  GPIO_InitStruct.Pin = Dev_ID7_Pin;
 800141e:	193b      	adds	r3, r7, r4
 8001420:	2201      	movs	r2, #1
 8001422:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001424:	193b      	adds	r3, r7, r4
 8001426:	2200      	movs	r2, #0
 8001428:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800142a:	193b      	adds	r3, r7, r4
 800142c:	2202      	movs	r2, #2
 800142e:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(Dev_ID7_GPIO_Port, &GPIO_InitStruct);
 8001430:	193a      	adds	r2, r7, r4
 8001432:	23a0      	movs	r3, #160	; 0xa0
 8001434:	05db      	lsls	r3, r3, #23
 8001436:	0011      	movs	r1, r2
 8001438:	0018      	movs	r0, r3
 800143a:	f000 ff43 	bl	80022c4 <HAL_GPIO_Init>

  /*Configure GPIO pins : Key_IN4_Pin Key_IN2_Pin */
  GPIO_InitStruct.Pin = Key_IN4_Pin|Key_IN2_Pin;
 800143e:	193b      	adds	r3, r7, r4
 8001440:	2206      	movs	r2, #6
 8001442:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001444:	193b      	adds	r3, r7, r4
 8001446:	2288      	movs	r2, #136	; 0x88
 8001448:	0352      	lsls	r2, r2, #13
 800144a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800144c:	193b      	adds	r3, r7, r4
 800144e:	2202      	movs	r2, #2
 8001450:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001452:	193a      	adds	r2, r7, r4
 8001454:	23a0      	movs	r3, #160	; 0xa0
 8001456:	05db      	lsls	r3, r3, #23
 8001458:	0011      	movs	r1, r2
 800145a:	0018      	movs	r0, r3
 800145c:	f000 ff32 	bl	80022c4 <HAL_GPIO_Init>

  /*Configure GPIO pin : nRF_CSN_Pin */
  GPIO_InitStruct.Pin = nRF_CSN_Pin;
 8001460:	193b      	adds	r3, r7, r4
 8001462:	2208      	movs	r2, #8
 8001464:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001466:	193b      	adds	r3, r7, r4
 8001468:	2201      	movs	r2, #1
 800146a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800146c:	193b      	adds	r3, r7, r4
 800146e:	2200      	movs	r2, #0
 8001470:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001472:	193b      	adds	r3, r7, r4
 8001474:	2202      	movs	r2, #2
 8001476:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(nRF_CSN_GPIO_Port, &GPIO_InitStruct);
 8001478:	193a      	adds	r2, r7, r4
 800147a:	23a0      	movs	r3, #160	; 0xa0
 800147c:	05db      	lsls	r3, r3, #23
 800147e:	0011      	movs	r1, r2
 8001480:	0018      	movs	r0, r3
 8001482:	f000 ff1f 	bl	80022c4 <HAL_GPIO_Init>

  /*Configure GPIO pin : nRF_IRQ_Pin */
  GPIO_InitStruct.Pin = nRF_IRQ_Pin;
 8001486:	193b      	adds	r3, r7, r4
 8001488:	2210      	movs	r2, #16
 800148a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800148c:	193b      	adds	r3, r7, r4
 800148e:	2284      	movs	r2, #132	; 0x84
 8001490:	0392      	lsls	r2, r2, #14
 8001492:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001494:	193b      	adds	r3, r7, r4
 8001496:	2200      	movs	r2, #0
 8001498:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(nRF_IRQ_GPIO_Port, &GPIO_InitStruct);
 800149a:	193a      	adds	r2, r7, r4
 800149c:	23a0      	movs	r3, #160	; 0xa0
 800149e:	05db      	lsls	r3, r3, #23
 80014a0:	0011      	movs	r1, r2
 80014a2:	0018      	movs	r0, r3
 80014a4:	f000 ff0e 	bl	80022c4 <HAL_GPIO_Init>

  /*Configure GPIO pin : nRF_CE_Pin */
  GPIO_InitStruct.Pin = nRF_CE_Pin;
 80014a8:	193b      	adds	r3, r7, r4
 80014aa:	2204      	movs	r2, #4
 80014ac:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014ae:	193b      	adds	r3, r7, r4
 80014b0:	2201      	movs	r2, #1
 80014b2:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014b4:	193b      	adds	r3, r7, r4
 80014b6:	2200      	movs	r2, #0
 80014b8:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80014ba:	193b      	adds	r3, r7, r4
 80014bc:	2202      	movs	r2, #2
 80014be:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(nRF_CE_GPIO_Port, &GPIO_InitStruct);
 80014c0:	193b      	adds	r3, r7, r4
 80014c2:	4a38      	ldr	r2, [pc, #224]	; (80015a4 <MX_GPIO_Init+0x260>)
 80014c4:	0019      	movs	r1, r3
 80014c6:	0010      	movs	r0, r2
 80014c8:	f000 fefc 	bl	80022c4 <HAL_GPIO_Init>

  /*Configure GPIO pins : Key_IN1_Pin Key_IN3_Pin */
  GPIO_InitStruct.Pin = Key_IN1_Pin|Key_IN3_Pin;
 80014cc:	0021      	movs	r1, r4
 80014ce:	187b      	adds	r3, r7, r1
 80014d0:	22c0      	movs	r2, #192	; 0xc0
 80014d2:	0192      	lsls	r2, r2, #6
 80014d4:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80014d6:	187b      	adds	r3, r7, r1
 80014d8:	2288      	movs	r2, #136	; 0x88
 80014da:	0352      	lsls	r2, r2, #13
 80014dc:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80014de:	187b      	adds	r3, r7, r1
 80014e0:	2202      	movs	r2, #2
 80014e2:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014e4:	000c      	movs	r4, r1
 80014e6:	187b      	adds	r3, r7, r1
 80014e8:	4a2e      	ldr	r2, [pc, #184]	; (80015a4 <MX_GPIO_Init+0x260>)
 80014ea:	0019      	movs	r1, r3
 80014ec:	0010      	movs	r0, r2
 80014ee:	f000 fee9 	bl	80022c4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_GREEN_Pin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin;
 80014f2:	0021      	movs	r1, r4
 80014f4:	187b      	adds	r3, r7, r1
 80014f6:	2280      	movs	r2, #128	; 0x80
 80014f8:	0212      	lsls	r2, r2, #8
 80014fa:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014fc:	000c      	movs	r4, r1
 80014fe:	193b      	adds	r3, r7, r4
 8001500:	2201      	movs	r2, #1
 8001502:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001504:	193b      	adds	r3, r7, r4
 8001506:	2200      	movs	r2, #0
 8001508:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800150a:	193b      	adds	r3, r7, r4
 800150c:	2200      	movs	r2, #0
 800150e:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LED_GREEN_GPIO_Port, &GPIO_InitStruct);
 8001510:	193a      	adds	r2, r7, r4
 8001512:	23a0      	movs	r3, #160	; 0xa0
 8001514:	05db      	lsls	r3, r3, #23
 8001516:	0011      	movs	r1, r2
 8001518:	0018      	movs	r0, r3
 800151a:	f000 fed3 	bl	80022c4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_RED_Pin LED_BLUE_Pin */
  GPIO_InitStruct.Pin = LED_RED_Pin|LED_BLUE_Pin;
 800151e:	193b      	adds	r3, r7, r4
 8001520:	2218      	movs	r2, #24
 8001522:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001524:	193b      	adds	r3, r7, r4
 8001526:	2201      	movs	r2, #1
 8001528:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800152a:	193b      	adds	r3, r7, r4
 800152c:	2200      	movs	r2, #0
 800152e:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001530:	193b      	adds	r3, r7, r4
 8001532:	2200      	movs	r2, #0
 8001534:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001536:	193b      	adds	r3, r7, r4
 8001538:	4a1a      	ldr	r2, [pc, #104]	; (80015a4 <MX_GPIO_Init+0x260>)
 800153a:	0019      	movs	r1, r3
 800153c:	0010      	movs	r0, r2
 800153e:	f000 fec1 	bl	80022c4 <HAL_GPIO_Init>

  /*Configure GPIO pins : Dev_ID0_Pin Dev_ID1_Pin */
  GPIO_InitStruct.Pin = Dev_ID0_Pin|Dev_ID1_Pin;
 8001542:	0021      	movs	r1, r4
 8001544:	187b      	adds	r3, r7, r1
 8001546:	22c0      	movs	r2, #192	; 0xc0
 8001548:	0092      	lsls	r2, r2, #2
 800154a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800154c:	187b      	adds	r3, r7, r1
 800154e:	2200      	movs	r2, #0
 8001550:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001552:	187b      	adds	r3, r7, r1
 8001554:	2202      	movs	r2, #2
 8001556:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001558:	187b      	adds	r3, r7, r1
 800155a:	4a12      	ldr	r2, [pc, #72]	; (80015a4 <MX_GPIO_Init+0x260>)
 800155c:	0019      	movs	r1, r3
 800155e:	0010      	movs	r0, r2
 8001560:	f000 feb0 	bl	80022c4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_1_IRQn, 0, 0);
 8001564:	2200      	movs	r2, #0
 8001566:	2100      	movs	r1, #0
 8001568:	2005      	movs	r0, #5
 800156a:	f000 fe79 	bl	8002260 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_1_IRQn);
 800156e:	2005      	movs	r0, #5
 8001570:	f000 fe8b 	bl	800228a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI2_3_IRQn, 0, 0);
 8001574:	2200      	movs	r2, #0
 8001576:	2100      	movs	r1, #0
 8001578:	2006      	movs	r0, #6
 800157a:	f000 fe71 	bl	8002260 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_3_IRQn);
 800157e:	2006      	movs	r0, #6
 8001580:	f000 fe83 	bl	800228a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 0, 0);
 8001584:	2200      	movs	r2, #0
 8001586:	2100      	movs	r1, #0
 8001588:	2007      	movs	r0, #7
 800158a:	f000 fe69 	bl	8002260 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 800158e:	2007      	movs	r0, #7
 8001590:	f000 fe7b 	bl	800228a <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001594:	46c0      	nop			; (mov r8, r8)
 8001596:	46bd      	mov	sp, r7
 8001598:	b00b      	add	sp, #44	; 0x2c
 800159a:	bd90      	pop	{r4, r7, pc}
 800159c:	40021000 	.word	0x40021000
 80015a0:	00008008 	.word	0x00008008
 80015a4:	50000400 	.word	0x50000400
 80015a8:	50000800 	.word	0x50000800
 80015ac:	50001c00 	.word	0x50001c00

080015b0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80015b0:	b580      	push	{r7, lr}
 80015b2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80015b4:	b672      	cpsid	i
}
 80015b6:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80015b8:	e7fe      	b.n	80015b8 <Error_Handler+0x8>
	...

080015bc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80015bc:	b580      	push	{r7, lr}
 80015be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80015c0:	4b07      	ldr	r3, [pc, #28]	; (80015e0 <HAL_MspInit+0x24>)
 80015c2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80015c4:	4b06      	ldr	r3, [pc, #24]	; (80015e0 <HAL_MspInit+0x24>)
 80015c6:	2101      	movs	r1, #1
 80015c8:	430a      	orrs	r2, r1
 80015ca:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 80015cc:	4b04      	ldr	r3, [pc, #16]	; (80015e0 <HAL_MspInit+0x24>)
 80015ce:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80015d0:	4b03      	ldr	r3, [pc, #12]	; (80015e0 <HAL_MspInit+0x24>)
 80015d2:	2180      	movs	r1, #128	; 0x80
 80015d4:	0549      	lsls	r1, r1, #21
 80015d6:	430a      	orrs	r2, r1
 80015d8:	639a      	str	r2, [r3, #56]	; 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80015da:	46c0      	nop			; (mov r8, r8)
 80015dc:	46bd      	mov	sp, r7
 80015de:	bd80      	pop	{r7, pc}
 80015e0:	40021000 	.word	0x40021000

080015e4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80015e4:	b590      	push	{r4, r7, lr}
 80015e6:	b089      	sub	sp, #36	; 0x24
 80015e8:	af00      	add	r7, sp, #0
 80015ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015ec:	240c      	movs	r4, #12
 80015ee:	193b      	adds	r3, r7, r4
 80015f0:	0018      	movs	r0, r3
 80015f2:	2314      	movs	r3, #20
 80015f4:	001a      	movs	r2, r3
 80015f6:	2100      	movs	r1, #0
 80015f8:	f003 ff1a 	bl	8005430 <memset>
  if(hadc->Instance==ADC1)
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	4a14      	ldr	r2, [pc, #80]	; (8001654 <HAL_ADC_MspInit+0x70>)
 8001602:	4293      	cmp	r3, r2
 8001604:	d121      	bne.n	800164a <HAL_ADC_MspInit+0x66>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001606:	4b14      	ldr	r3, [pc, #80]	; (8001658 <HAL_ADC_MspInit+0x74>)
 8001608:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800160a:	4b13      	ldr	r3, [pc, #76]	; (8001658 <HAL_ADC_MspInit+0x74>)
 800160c:	2180      	movs	r1, #128	; 0x80
 800160e:	0089      	lsls	r1, r1, #2
 8001610:	430a      	orrs	r2, r1
 8001612:	635a      	str	r2, [r3, #52]	; 0x34

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001614:	4b10      	ldr	r3, [pc, #64]	; (8001658 <HAL_ADC_MspInit+0x74>)
 8001616:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001618:	4b0f      	ldr	r3, [pc, #60]	; (8001658 <HAL_ADC_MspInit+0x74>)
 800161a:	2102      	movs	r1, #2
 800161c:	430a      	orrs	r2, r1
 800161e:	62da      	str	r2, [r3, #44]	; 0x2c
 8001620:	4b0d      	ldr	r3, [pc, #52]	; (8001658 <HAL_ADC_MspInit+0x74>)
 8001622:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001624:	2202      	movs	r2, #2
 8001626:	4013      	ands	r3, r2
 8001628:	60bb      	str	r3, [r7, #8]
 800162a:	68bb      	ldr	r3, [r7, #8]
    /**ADC GPIO Configuration
    PB1     ------> ADC_IN9
    */
    GPIO_InitStruct.Pin = Batt_Mon_Pin;
 800162c:	193b      	adds	r3, r7, r4
 800162e:	2202      	movs	r2, #2
 8001630:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001632:	193b      	adds	r3, r7, r4
 8001634:	2203      	movs	r2, #3
 8001636:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001638:	193b      	adds	r3, r7, r4
 800163a:	2200      	movs	r2, #0
 800163c:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(Batt_Mon_GPIO_Port, &GPIO_InitStruct);
 800163e:	193b      	adds	r3, r7, r4
 8001640:	4a06      	ldr	r2, [pc, #24]	; (800165c <HAL_ADC_MspInit+0x78>)
 8001642:	0019      	movs	r1, r3
 8001644:	0010      	movs	r0, r2
 8001646:	f000 fe3d 	bl	80022c4 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800164a:	46c0      	nop			; (mov r8, r8)
 800164c:	46bd      	mov	sp, r7
 800164e:	b009      	add	sp, #36	; 0x24
 8001650:	bd90      	pop	{r4, r7, pc}
 8001652:	46c0      	nop			; (mov r8, r8)
 8001654:	40012400 	.word	0x40012400
 8001658:	40021000 	.word	0x40021000
 800165c:	50000400 	.word	0x50000400

08001660 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001660:	b590      	push	{r4, r7, lr}
 8001662:	b089      	sub	sp, #36	; 0x24
 8001664:	af00      	add	r7, sp, #0
 8001666:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001668:	240c      	movs	r4, #12
 800166a:	193b      	adds	r3, r7, r4
 800166c:	0018      	movs	r0, r3
 800166e:	2314      	movs	r3, #20
 8001670:	001a      	movs	r2, r3
 8001672:	2100      	movs	r1, #0
 8001674:	f003 fedc 	bl	8005430 <memset>
  if(huart->Instance==LPUART1)
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	4a18      	ldr	r2, [pc, #96]	; (80016e0 <HAL_UART_MspInit+0x80>)
 800167e:	4293      	cmp	r3, r2
 8001680:	d129      	bne.n	80016d6 <HAL_UART_MspInit+0x76>
  {
  /* USER CODE BEGIN LPUART1_MspInit 0 */

  /* USER CODE END LPUART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8001682:	4b18      	ldr	r3, [pc, #96]	; (80016e4 <HAL_UART_MspInit+0x84>)
 8001684:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001686:	4b17      	ldr	r3, [pc, #92]	; (80016e4 <HAL_UART_MspInit+0x84>)
 8001688:	2180      	movs	r1, #128	; 0x80
 800168a:	02c9      	lsls	r1, r1, #11
 800168c:	430a      	orrs	r2, r1
 800168e:	639a      	str	r2, [r3, #56]	; 0x38

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001690:	4b14      	ldr	r3, [pc, #80]	; (80016e4 <HAL_UART_MspInit+0x84>)
 8001692:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001694:	4b13      	ldr	r3, [pc, #76]	; (80016e4 <HAL_UART_MspInit+0x84>)
 8001696:	2102      	movs	r1, #2
 8001698:	430a      	orrs	r2, r1
 800169a:	62da      	str	r2, [r3, #44]	; 0x2c
 800169c:	4b11      	ldr	r3, [pc, #68]	; (80016e4 <HAL_UART_MspInit+0x84>)
 800169e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016a0:	2202      	movs	r2, #2
 80016a2:	4013      	ands	r3, r2
 80016a4:	60bb      	str	r3, [r7, #8]
 80016a6:	68bb      	ldr	r3, [r7, #8]
    /**LPUART1 GPIO Configuration
    PB10     ------> LPUART1_TX
    PB11     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80016a8:	193b      	adds	r3, r7, r4
 80016aa:	22c0      	movs	r2, #192	; 0xc0
 80016ac:	0112      	lsls	r2, r2, #4
 80016ae:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016b0:	0021      	movs	r1, r4
 80016b2:	187b      	adds	r3, r7, r1
 80016b4:	2202      	movs	r2, #2
 80016b6:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016b8:	187b      	adds	r3, r7, r1
 80016ba:	2200      	movs	r2, #0
 80016bc:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016be:	187b      	adds	r3, r7, r1
 80016c0:	2203      	movs	r2, #3
 80016c2:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_LPUART1;
 80016c4:	187b      	adds	r3, r7, r1
 80016c6:	2204      	movs	r2, #4
 80016c8:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016ca:	187b      	adds	r3, r7, r1
 80016cc:	4a06      	ldr	r2, [pc, #24]	; (80016e8 <HAL_UART_MspInit+0x88>)
 80016ce:	0019      	movs	r1, r3
 80016d0:	0010      	movs	r0, r2
 80016d2:	f000 fdf7 	bl	80022c4 <HAL_GPIO_Init>
  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }

}
 80016d6:	46c0      	nop			; (mov r8, r8)
 80016d8:	46bd      	mov	sp, r7
 80016da:	b009      	add	sp, #36	; 0x24
 80016dc:	bd90      	pop	{r4, r7, pc}
 80016de:	46c0      	nop			; (mov r8, r8)
 80016e0:	40004800 	.word	0x40004800
 80016e4:	40021000 	.word	0x40021000
 80016e8:	50000400 	.word	0x50000400

080016ec <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80016ec:	b590      	push	{r4, r7, lr}
 80016ee:	b089      	sub	sp, #36	; 0x24
 80016f0:	af00      	add	r7, sp, #0
 80016f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016f4:	240c      	movs	r4, #12
 80016f6:	193b      	adds	r3, r7, r4
 80016f8:	0018      	movs	r0, r3
 80016fa:	2314      	movs	r3, #20
 80016fc:	001a      	movs	r2, r3
 80016fe:	2100      	movs	r1, #0
 8001700:	f003 fe96 	bl	8005430 <memset>
  if(hspi->Instance==SPI1)
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	4a18      	ldr	r2, [pc, #96]	; (800176c <HAL_SPI_MspInit+0x80>)
 800170a:	4293      	cmp	r3, r2
 800170c:	d129      	bne.n	8001762 <HAL_SPI_MspInit+0x76>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800170e:	4b18      	ldr	r3, [pc, #96]	; (8001770 <HAL_SPI_MspInit+0x84>)
 8001710:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001712:	4b17      	ldr	r3, [pc, #92]	; (8001770 <HAL_SPI_MspInit+0x84>)
 8001714:	2180      	movs	r1, #128	; 0x80
 8001716:	0149      	lsls	r1, r1, #5
 8001718:	430a      	orrs	r2, r1
 800171a:	635a      	str	r2, [r3, #52]	; 0x34

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800171c:	4b14      	ldr	r3, [pc, #80]	; (8001770 <HAL_SPI_MspInit+0x84>)
 800171e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001720:	4b13      	ldr	r3, [pc, #76]	; (8001770 <HAL_SPI_MspInit+0x84>)
 8001722:	2101      	movs	r1, #1
 8001724:	430a      	orrs	r2, r1
 8001726:	62da      	str	r2, [r3, #44]	; 0x2c
 8001728:	4b11      	ldr	r3, [pc, #68]	; (8001770 <HAL_SPI_MspInit+0x84>)
 800172a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800172c:	2201      	movs	r2, #1
 800172e:	4013      	ands	r3, r2
 8001730:	60bb      	str	r3, [r7, #8]
 8001732:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = nRF_SCK_Pin|nRF_MISO_Pin|nRF_MOSI_Pin;
 8001734:	0021      	movs	r1, r4
 8001736:	187b      	adds	r3, r7, r1
 8001738:	22e0      	movs	r2, #224	; 0xe0
 800173a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800173c:	187b      	adds	r3, r7, r1
 800173e:	2202      	movs	r2, #2
 8001740:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001742:	187b      	adds	r3, r7, r1
 8001744:	2200      	movs	r2, #0
 8001746:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001748:	187b      	adds	r3, r7, r1
 800174a:	2203      	movs	r2, #3
 800174c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 800174e:	187b      	adds	r3, r7, r1
 8001750:	2200      	movs	r2, #0
 8001752:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001754:	187a      	adds	r2, r7, r1
 8001756:	23a0      	movs	r3, #160	; 0xa0
 8001758:	05db      	lsls	r3, r3, #23
 800175a:	0011      	movs	r1, r2
 800175c:	0018      	movs	r0, r3
 800175e:	f000 fdb1 	bl	80022c4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001762:	46c0      	nop			; (mov r8, r8)
 8001764:	46bd      	mov	sp, r7
 8001766:	b009      	add	sp, #36	; 0x24
 8001768:	bd90      	pop	{r4, r7, pc}
 800176a:	46c0      	nop			; (mov r8, r8)
 800176c:	40013000 	.word	0x40013000
 8001770:	40021000 	.word	0x40021000

08001774 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001774:	b580      	push	{r7, lr}
 8001776:	b082      	sub	sp, #8
 8001778:	af00      	add	r7, sp, #0
 800177a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	4a06      	ldr	r2, [pc, #24]	; (800179c <HAL_TIM_Base_MspInit+0x28>)
 8001782:	4293      	cmp	r3, r2
 8001784:	d105      	bne.n	8001792 <HAL_TIM_Base_MspInit+0x1e>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8001786:	4b06      	ldr	r3, [pc, #24]	; (80017a0 <HAL_TIM_Base_MspInit+0x2c>)
 8001788:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800178a:	4b05      	ldr	r3, [pc, #20]	; (80017a0 <HAL_TIM_Base_MspInit+0x2c>)
 800178c:	2110      	movs	r1, #16
 800178e:	430a      	orrs	r2, r1
 8001790:	639a      	str	r2, [r3, #56]	; 0x38
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 8001792:	46c0      	nop			; (mov r8, r8)
 8001794:	46bd      	mov	sp, r7
 8001796:	b002      	add	sp, #8
 8001798:	bd80      	pop	{r7, pc}
 800179a:	46c0      	nop			; (mov r8, r8)
 800179c:	40001000 	.word	0x40001000
 80017a0:	40021000 	.word	0x40021000

080017a4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80017a4:	b580      	push	{r7, lr}
 80017a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80017a8:	e7fe      	b.n	80017a8 <NMI_Handler+0x4>

080017aa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80017aa:	b580      	push	{r7, lr}
 80017ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80017ae:	e7fe      	b.n	80017ae <HardFault_Handler+0x4>

080017b0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80017b0:	b580      	push	{r7, lr}
 80017b2:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80017b4:	46c0      	nop			; (mov r8, r8)
 80017b6:	46bd      	mov	sp, r7
 80017b8:	bd80      	pop	{r7, pc}

080017ba <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80017ba:	b580      	push	{r7, lr}
 80017bc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80017be:	46c0      	nop			; (mov r8, r8)
 80017c0:	46bd      	mov	sp, r7
 80017c2:	bd80      	pop	{r7, pc}

080017c4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80017c4:	b580      	push	{r7, lr}
 80017c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80017c8:	f000 f8e0 	bl	800198c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80017cc:	46c0      	nop			; (mov r8, r8)
 80017ce:	46bd      	mov	sp, r7
 80017d0:	bd80      	pop	{r7, pc}

080017d2 <EXTI0_1_IRQHandler>:

/**
  * @brief This function handles EXTI line 0 and line 1 interrupts.
  */
void EXTI0_1_IRQHandler(void)
{
 80017d2:	b580      	push	{r7, lr}
 80017d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_1_IRQn 0 */

  /* USER CODE END EXTI0_1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Key_IN4_Pin);
 80017d6:	2002      	movs	r0, #2
 80017d8:	f000 ff24 	bl	8002624 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_1_IRQn 1 */

  /* USER CODE END EXTI0_1_IRQn 1 */
}
 80017dc:	46c0      	nop			; (mov r8, r8)
 80017de:	46bd      	mov	sp, r7
 80017e0:	bd80      	pop	{r7, pc}

080017e2 <EXTI2_3_IRQHandler>:

/**
  * @brief This function handles EXTI line 2 and line 3 interrupts.
  */
void EXTI2_3_IRQHandler(void)
{
 80017e2:	b580      	push	{r7, lr}
 80017e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_3_IRQn 0 */

  /* USER CODE END EXTI2_3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Key_IN2_Pin);
 80017e6:	2004      	movs	r0, #4
 80017e8:	f000 ff1c 	bl	8002624 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_3_IRQn 1 */

  /* USER CODE END EXTI2_3_IRQn 1 */
}
 80017ec:	46c0      	nop			; (mov r8, r8)
 80017ee:	46bd      	mov	sp, r7
 80017f0:	bd80      	pop	{r7, pc}

080017f2 <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 80017f2:	b580      	push	{r7, lr}
 80017f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(nRF_IRQ_Pin);
 80017f6:	2010      	movs	r0, #16
 80017f8:	f000 ff14 	bl	8002624 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(Key_IN1_Pin);
 80017fc:	2380      	movs	r3, #128	; 0x80
 80017fe:	015b      	lsls	r3, r3, #5
 8001800:	0018      	movs	r0, r3
 8001802:	f000 ff0f 	bl	8002624 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(Key_IN3_Pin);
 8001806:	2380      	movs	r3, #128	; 0x80
 8001808:	019b      	lsls	r3, r3, #6
 800180a:	0018      	movs	r0, r3
 800180c:	f000 ff0a 	bl	8002624 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 8001810:	46c0      	nop			; (mov r8, r8)
 8001812:	46bd      	mov	sp, r7
 8001814:	bd80      	pop	{r7, pc}
	...

08001818 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001818:	b580      	push	{r7, lr}
 800181a:	b086      	sub	sp, #24
 800181c:	af00      	add	r7, sp, #0
 800181e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001820:	4a14      	ldr	r2, [pc, #80]	; (8001874 <_sbrk+0x5c>)
 8001822:	4b15      	ldr	r3, [pc, #84]	; (8001878 <_sbrk+0x60>)
 8001824:	1ad3      	subs	r3, r2, r3
 8001826:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001828:	697b      	ldr	r3, [r7, #20]
 800182a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800182c:	4b13      	ldr	r3, [pc, #76]	; (800187c <_sbrk+0x64>)
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	2b00      	cmp	r3, #0
 8001832:	d102      	bne.n	800183a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001834:	4b11      	ldr	r3, [pc, #68]	; (800187c <_sbrk+0x64>)
 8001836:	4a12      	ldr	r2, [pc, #72]	; (8001880 <_sbrk+0x68>)
 8001838:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800183a:	4b10      	ldr	r3, [pc, #64]	; (800187c <_sbrk+0x64>)
 800183c:	681a      	ldr	r2, [r3, #0]
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	18d3      	adds	r3, r2, r3
 8001842:	693a      	ldr	r2, [r7, #16]
 8001844:	429a      	cmp	r2, r3
 8001846:	d207      	bcs.n	8001858 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001848:	f003 fdc8 	bl	80053dc <__errno>
 800184c:	0003      	movs	r3, r0
 800184e:	220c      	movs	r2, #12
 8001850:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001852:	2301      	movs	r3, #1
 8001854:	425b      	negs	r3, r3
 8001856:	e009      	b.n	800186c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001858:	4b08      	ldr	r3, [pc, #32]	; (800187c <_sbrk+0x64>)
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800185e:	4b07      	ldr	r3, [pc, #28]	; (800187c <_sbrk+0x64>)
 8001860:	681a      	ldr	r2, [r3, #0]
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	18d2      	adds	r2, r2, r3
 8001866:	4b05      	ldr	r3, [pc, #20]	; (800187c <_sbrk+0x64>)
 8001868:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 800186a:	68fb      	ldr	r3, [r7, #12]
}
 800186c:	0018      	movs	r0, r3
 800186e:	46bd      	mov	sp, r7
 8001870:	b006      	add	sp, #24
 8001872:	bd80      	pop	{r7, pc}
 8001874:	20002000 	.word	0x20002000
 8001878:	00000400 	.word	0x00000400
 800187c:	20000220 	.word	0x20000220
 8001880:	20000238 	.word	0x20000238

08001884 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001884:	b580      	push	{r7, lr}
 8001886:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001888:	46c0      	nop			; (mov r8, r8)
 800188a:	46bd      	mov	sp, r7
 800188c:	bd80      	pop	{r7, pc}
	...

08001890 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 8001890:	480d      	ldr	r0, [pc, #52]	; (80018c8 <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 8001892:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001894:	f7ff fff6 	bl	8001884 <SystemInit>
  
/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001898:	480c      	ldr	r0, [pc, #48]	; (80018cc <LoopForever+0x6>)
  ldr r1, =_edata
 800189a:	490d      	ldr	r1, [pc, #52]	; (80018d0 <LoopForever+0xa>)
  ldr r2, =_sidata
 800189c:	4a0d      	ldr	r2, [pc, #52]	; (80018d4 <LoopForever+0xe>)
  movs r3, #0
 800189e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80018a0:	e002      	b.n	80018a8 <LoopCopyDataInit>

080018a2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80018a2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80018a4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80018a6:	3304      	adds	r3, #4

080018a8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80018a8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80018aa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80018ac:	d3f9      	bcc.n	80018a2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80018ae:	4a0a      	ldr	r2, [pc, #40]	; (80018d8 <LoopForever+0x12>)
  ldr r4, =_ebss
 80018b0:	4c0a      	ldr	r4, [pc, #40]	; (80018dc <LoopForever+0x16>)
  movs r3, #0
 80018b2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80018b4:	e001      	b.n	80018ba <LoopFillZerobss>

080018b6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80018b6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80018b8:	3204      	adds	r2, #4

080018ba <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80018ba:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80018bc:	d3fb      	bcc.n	80018b6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80018be:	f003 fd93 	bl	80053e8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80018c2:	f7ff f83d 	bl	8000940 <main>

080018c6 <LoopForever>:

LoopForever:
    b LoopForever
 80018c6:	e7fe      	b.n	80018c6 <LoopForever>
   ldr   r0, =_estack
 80018c8:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 80018cc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80018d0:	20000080 	.word	0x20000080
  ldr r2, =_sidata
 80018d4:	080061d4 	.word	0x080061d4
  ldr r2, =_sbss
 80018d8:	20000080 	.word	0x20000080
  ldr r4, =_ebss
 80018dc:	20000238 	.word	0x20000238

080018e0 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80018e0:	e7fe      	b.n	80018e0 <ADC1_COMP_IRQHandler>
	...

080018e4 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80018e4:	b580      	push	{r7, lr}
 80018e6:	b082      	sub	sp, #8
 80018e8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80018ea:	1dfb      	adds	r3, r7, #7
 80018ec:	2200      	movs	r2, #0
 80018ee:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 80018f0:	4b0b      	ldr	r3, [pc, #44]	; (8001920 <HAL_Init+0x3c>)
 80018f2:	681a      	ldr	r2, [r3, #0]
 80018f4:	4b0a      	ldr	r3, [pc, #40]	; (8001920 <HAL_Init+0x3c>)
 80018f6:	2140      	movs	r1, #64	; 0x40
 80018f8:	430a      	orrs	r2, r1
 80018fa:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80018fc:	2003      	movs	r0, #3
 80018fe:	f000 f811 	bl	8001924 <HAL_InitTick>
 8001902:	1e03      	subs	r3, r0, #0
 8001904:	d003      	beq.n	800190e <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 8001906:	1dfb      	adds	r3, r7, #7
 8001908:	2201      	movs	r2, #1
 800190a:	701a      	strb	r2, [r3, #0]
 800190c:	e001      	b.n	8001912 <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800190e:	f7ff fe55 	bl	80015bc <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001912:	1dfb      	adds	r3, r7, #7
 8001914:	781b      	ldrb	r3, [r3, #0]
}
 8001916:	0018      	movs	r0, r3
 8001918:	46bd      	mov	sp, r7
 800191a:	b002      	add	sp, #8
 800191c:	bd80      	pop	{r7, pc}
 800191e:	46c0      	nop			; (mov r8, r8)
 8001920:	40022000 	.word	0x40022000

08001924 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001924:	b590      	push	{r4, r7, lr}
 8001926:	b083      	sub	sp, #12
 8001928:	af00      	add	r7, sp, #0
 800192a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800192c:	4b14      	ldr	r3, [pc, #80]	; (8001980 <HAL_InitTick+0x5c>)
 800192e:	681c      	ldr	r4, [r3, #0]
 8001930:	4b14      	ldr	r3, [pc, #80]	; (8001984 <HAL_InitTick+0x60>)
 8001932:	781b      	ldrb	r3, [r3, #0]
 8001934:	0019      	movs	r1, r3
 8001936:	23fa      	movs	r3, #250	; 0xfa
 8001938:	0098      	lsls	r0, r3, #2
 800193a:	f7fe fbf7 	bl	800012c <__udivsi3>
 800193e:	0003      	movs	r3, r0
 8001940:	0019      	movs	r1, r3
 8001942:	0020      	movs	r0, r4
 8001944:	f7fe fbf2 	bl	800012c <__udivsi3>
 8001948:	0003      	movs	r3, r0
 800194a:	0018      	movs	r0, r3
 800194c:	f000 fcad 	bl	80022aa <HAL_SYSTICK_Config>
 8001950:	1e03      	subs	r3, r0, #0
 8001952:	d001      	beq.n	8001958 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8001954:	2301      	movs	r3, #1
 8001956:	e00f      	b.n	8001978 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	2b03      	cmp	r3, #3
 800195c:	d80b      	bhi.n	8001976 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800195e:	6879      	ldr	r1, [r7, #4]
 8001960:	2301      	movs	r3, #1
 8001962:	425b      	negs	r3, r3
 8001964:	2200      	movs	r2, #0
 8001966:	0018      	movs	r0, r3
 8001968:	f000 fc7a 	bl	8002260 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800196c:	4b06      	ldr	r3, [pc, #24]	; (8001988 <HAL_InitTick+0x64>)
 800196e:	687a      	ldr	r2, [r7, #4]
 8001970:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001972:	2300      	movs	r3, #0
 8001974:	e000      	b.n	8001978 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8001976:	2301      	movs	r3, #1
}
 8001978:	0018      	movs	r0, r3
 800197a:	46bd      	mov	sp, r7
 800197c:	b003      	add	sp, #12
 800197e:	bd90      	pop	{r4, r7, pc}
 8001980:	20000010 	.word	0x20000010
 8001984:	20000018 	.word	0x20000018
 8001988:	20000014 	.word	0x20000014

0800198c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800198c:	b580      	push	{r7, lr}
 800198e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001990:	4b05      	ldr	r3, [pc, #20]	; (80019a8 <HAL_IncTick+0x1c>)
 8001992:	781b      	ldrb	r3, [r3, #0]
 8001994:	001a      	movs	r2, r3
 8001996:	4b05      	ldr	r3, [pc, #20]	; (80019ac <HAL_IncTick+0x20>)
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	18d2      	adds	r2, r2, r3
 800199c:	4b03      	ldr	r3, [pc, #12]	; (80019ac <HAL_IncTick+0x20>)
 800199e:	601a      	str	r2, [r3, #0]
}
 80019a0:	46c0      	nop			; (mov r8, r8)
 80019a2:	46bd      	mov	sp, r7
 80019a4:	bd80      	pop	{r7, pc}
 80019a6:	46c0      	nop			; (mov r8, r8)
 80019a8:	20000018 	.word	0x20000018
 80019ac:	20000224 	.word	0x20000224

080019b0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80019b0:	b580      	push	{r7, lr}
 80019b2:	af00      	add	r7, sp, #0
  return uwTick;
 80019b4:	4b02      	ldr	r3, [pc, #8]	; (80019c0 <HAL_GetTick+0x10>)
 80019b6:	681b      	ldr	r3, [r3, #0]
}
 80019b8:	0018      	movs	r0, r3
 80019ba:	46bd      	mov	sp, r7
 80019bc:	bd80      	pop	{r7, pc}
 80019be:	46c0      	nop			; (mov r8, r8)
 80019c0:	20000224 	.word	0x20000224

080019c4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80019c4:	b580      	push	{r7, lr}
 80019c6:	b084      	sub	sp, #16
 80019c8:	af00      	add	r7, sp, #0
 80019ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80019cc:	f7ff fff0 	bl	80019b0 <HAL_GetTick>
 80019d0:	0003      	movs	r3, r0
 80019d2:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80019d8:	68fb      	ldr	r3, [r7, #12]
 80019da:	3301      	adds	r3, #1
 80019dc:	d005      	beq.n	80019ea <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80019de:	4b0a      	ldr	r3, [pc, #40]	; (8001a08 <HAL_Delay+0x44>)
 80019e0:	781b      	ldrb	r3, [r3, #0]
 80019e2:	001a      	movs	r2, r3
 80019e4:	68fb      	ldr	r3, [r7, #12]
 80019e6:	189b      	adds	r3, r3, r2
 80019e8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80019ea:	46c0      	nop			; (mov r8, r8)
 80019ec:	f7ff ffe0 	bl	80019b0 <HAL_GetTick>
 80019f0:	0002      	movs	r2, r0
 80019f2:	68bb      	ldr	r3, [r7, #8]
 80019f4:	1ad3      	subs	r3, r2, r3
 80019f6:	68fa      	ldr	r2, [r7, #12]
 80019f8:	429a      	cmp	r2, r3
 80019fa:	d8f7      	bhi.n	80019ec <HAL_Delay+0x28>
  {
  }
}
 80019fc:	46c0      	nop			; (mov r8, r8)
 80019fe:	46c0      	nop			; (mov r8, r8)
 8001a00:	46bd      	mov	sp, r7
 8001a02:	b004      	add	sp, #16
 8001a04:	bd80      	pop	{r7, pc}
 8001a06:	46c0      	nop			; (mov r8, r8)
 8001a08:	20000018 	.word	0x20000018

08001a0c <HAL_ADC_Init>:
  *         function "HAL_ADCEx_EnableVREFINTTempSensor()" must be called similarilly.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001a0c:	b580      	push	{r7, lr}
 8001a0e:	b082      	sub	sp, #8
 8001a10:	af00      	add	r7, sp, #0
 8001a12:	6078      	str	r0, [r7, #4]

  /* Check ADC handle */
  if (hadc == NULL)
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d101      	bne.n	8001a1e <HAL_ADC_Init+0x12>
  {
    return HAL_ERROR;
 8001a1a:	2301      	movs	r3, #1
 8001a1c:	e159      	b.n	8001cd2 <HAL_ADC_Init+0x2c6>
  /* Refer to header of this file for more details on clock enabling procedure*/

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d10a      	bne.n	8001a3c <HAL_ADC_Init+0x30>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	2200      	movs	r2, #0
 8001a2a:	659a      	str	r2, [r3, #88]	; 0x58

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	2250      	movs	r2, #80	; 0x50
 8001a30:	2100      	movs	r1, #0
 8001a32:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	0018      	movs	r0, r3
 8001a38:	f7ff fdd4 	bl	80015e4 <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001a40:	2210      	movs	r2, #16
 8001a42:	4013      	ands	r3, r2
 8001a44:	2b10      	cmp	r3, #16
 8001a46:	d005      	beq.n	8001a54 <HAL_ADC_Init+0x48>
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET))
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	689b      	ldr	r3, [r3, #8]
 8001a4e:	2204      	movs	r2, #4
 8001a50:	4013      	ands	r3, r2
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 8001a52:	d00b      	beq.n	8001a6c <HAL_ADC_Init+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001a58:	2210      	movs	r2, #16
 8001a5a:	431a      	orrs	r2, r3
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	2250      	movs	r2, #80	; 0x50
 8001a64:	2100      	movs	r1, #0
 8001a66:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 8001a68:	2301      	movs	r3, #1
 8001a6a:	e132      	b.n	8001cd2 <HAL_ADC_Init+0x2c6>
  }

  /* Set ADC state */
  ADC_STATE_CLR_SET(hadc->State,
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001a70:	4a9a      	ldr	r2, [pc, #616]	; (8001cdc <HAL_ADC_Init+0x2d0>)
 8001a72:	4013      	ands	r3, r2
 8001a74:	2202      	movs	r2, #2
 8001a76:	431a      	orrs	r2, r3
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	655a      	str	r2, [r3, #84]	; 0x54
  /* Parameters update conditioned to ADC state:                            */
  /* Parameters that can be updated only when ADC is disabled:              */
  /*  - ADC clock mode                                                      */
  /*  - ADC clock prescaler                                                 */
  /*  - ADC Resolution                                                      */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	689b      	ldr	r3, [r3, #8]
 8001a82:	2203      	movs	r2, #3
 8001a84:	4013      	ands	r3, r2
 8001a86:	2b01      	cmp	r3, #1
 8001a88:	d108      	bne.n	8001a9c <HAL_ADC_Init+0x90>
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	2201      	movs	r2, #1
 8001a92:	4013      	ands	r3, r2
 8001a94:	2b01      	cmp	r3, #1
 8001a96:	d101      	bne.n	8001a9c <HAL_ADC_Init+0x90>
 8001a98:	2301      	movs	r3, #1
 8001a9a:	e000      	b.n	8001a9e <HAL_ADC_Init+0x92>
 8001a9c:	2300      	movs	r3, #0
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d149      	bne.n	8001b36 <HAL_ADC_Init+0x12a>
    /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
    /*     (set into HAL_ADC_ConfigChannel() )                              */

    /* Configuration of ADC clock: clock source PCLK or asynchronous with
    selectable prescaler */
    __HAL_ADC_CLOCK_PRESCALER(hadc);
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	685a      	ldr	r2, [r3, #4]
 8001aa6:	23c0      	movs	r3, #192	; 0xc0
 8001aa8:	061b      	lsls	r3, r3, #24
 8001aaa:	429a      	cmp	r2, r3
 8001aac:	d00b      	beq.n	8001ac6 <HAL_ADC_Init+0xba>
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	685a      	ldr	r2, [r3, #4]
 8001ab2:	2380      	movs	r3, #128	; 0x80
 8001ab4:	05db      	lsls	r3, r3, #23
 8001ab6:	429a      	cmp	r2, r3
 8001ab8:	d005      	beq.n	8001ac6 <HAL_ADC_Init+0xba>
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	685a      	ldr	r2, [r3, #4]
 8001abe:	2380      	movs	r3, #128	; 0x80
 8001ac0:	061b      	lsls	r3, r3, #24
 8001ac2:	429a      	cmp	r2, r3
 8001ac4:	d111      	bne.n	8001aea <HAL_ADC_Init+0xde>
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	691a      	ldr	r2, [r3, #16]
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	0092      	lsls	r2, r2, #2
 8001ad2:	0892      	lsrs	r2, r2, #2
 8001ad4:	611a      	str	r2, [r3, #16]
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	6919      	ldr	r1, [r3, #16]
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	685a      	ldr	r2, [r3, #4]
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	430a      	orrs	r2, r1
 8001ae6:	611a      	str	r2, [r3, #16]
 8001ae8:	e014      	b.n	8001b14 <HAL_ADC_Init+0x108>
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	691a      	ldr	r2, [r3, #16]
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	0092      	lsls	r2, r2, #2
 8001af6:	0892      	lsrs	r2, r2, #2
 8001af8:	611a      	str	r2, [r3, #16]
 8001afa:	4b79      	ldr	r3, [pc, #484]	; (8001ce0 <HAL_ADC_Init+0x2d4>)
 8001afc:	681a      	ldr	r2, [r3, #0]
 8001afe:	4b78      	ldr	r3, [pc, #480]	; (8001ce0 <HAL_ADC_Init+0x2d4>)
 8001b00:	4978      	ldr	r1, [pc, #480]	; (8001ce4 <HAL_ADC_Init+0x2d8>)
 8001b02:	400a      	ands	r2, r1
 8001b04:	601a      	str	r2, [r3, #0]
 8001b06:	4b76      	ldr	r3, [pc, #472]	; (8001ce0 <HAL_ADC_Init+0x2d4>)
 8001b08:	6819      	ldr	r1, [r3, #0]
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	685a      	ldr	r2, [r3, #4]
 8001b0e:	4b74      	ldr	r3, [pc, #464]	; (8001ce0 <HAL_ADC_Init+0x2d4>)
 8001b10:	430a      	orrs	r2, r1
 8001b12:	601a      	str	r2, [r3, #0]

    /* Configuration of ADC:                                                */
    /*  - Resolution                                                        */
    hadc->Instance->CFGR1 &= ~(ADC_CFGR1_RES);
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	68da      	ldr	r2, [r3, #12]
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	2118      	movs	r1, #24
 8001b20:	438a      	bics	r2, r1
 8001b22:	60da      	str	r2, [r3, #12]
    hadc->Instance->CFGR1 |= hadc->Init.Resolution;
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	68d9      	ldr	r1, [r3, #12]
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	689a      	ldr	r2, [r3, #8]
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	430a      	orrs	r2, r1
 8001b34:	60da      	str	r2, [r3, #12]
  }

  /* Set the Low Frequency mode */
  ADC->CCR &= (uint32_t)~ADC_CCR_LFMEN;
 8001b36:	4b6a      	ldr	r3, [pc, #424]	; (8001ce0 <HAL_ADC_Init+0x2d4>)
 8001b38:	681a      	ldr	r2, [r3, #0]
 8001b3a:	4b69      	ldr	r3, [pc, #420]	; (8001ce0 <HAL_ADC_Init+0x2d4>)
 8001b3c:	496a      	ldr	r1, [pc, #424]	; (8001ce8 <HAL_ADC_Init+0x2dc>)
 8001b3e:	400a      	ands	r2, r1
 8001b40:	601a      	str	r2, [r3, #0]
  ADC->CCR |= __HAL_ADC_CCR_LOWFREQUENCY(hadc->Init.LowPowerFrequencyMode);
 8001b42:	4b67      	ldr	r3, [pc, #412]	; (8001ce0 <HAL_ADC_Init+0x2d4>)
 8001b44:	6819      	ldr	r1, [r3, #0]
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001b4a:	065a      	lsls	r2, r3, #25
 8001b4c:	4b64      	ldr	r3, [pc, #400]	; (8001ce0 <HAL_ADC_Init+0x2d4>)
 8001b4e:	430a      	orrs	r2, r1
 8001b50:	601a      	str	r2, [r3, #0]

  /* Enable voltage regulator (if disabled at this step) */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN))
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	689a      	ldr	r2, [r3, #8]
 8001b58:	2380      	movs	r3, #128	; 0x80
 8001b5a:	055b      	lsls	r3, r3, #21
 8001b5c:	4013      	ands	r3, r2
 8001b5e:	d108      	bne.n	8001b72 <HAL_ADC_Init+0x166>
  {
    /* Set ADVREGEN bit */
    hadc->Instance->CR |= ADC_CR_ADVREGEN;
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	689a      	ldr	r2, [r3, #8]
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	2180      	movs	r1, #128	; 0x80
 8001b6c:	0549      	lsls	r1, r1, #21
 8001b6e:	430a      	orrs	r2, r1
 8001b70:	609a      	str	r2, [r3, #8]
  /*  - Continuous conversion mode                                            */
  /*  - DMA continuous request                                                */
  /*  - Overrun                                                               */
  /*  - AutoDelay feature                                                     */
  /*  - Discontinuous mode                                                    */
  hadc->Instance->CFGR1 &= ~(ADC_CFGR1_ALIGN   |
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	68da      	ldr	r2, [r3, #12]
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	495b      	ldr	r1, [pc, #364]	; (8001cec <HAL_ADC_Init+0x2e0>)
 8001b7e:	400a      	ands	r2, r1
 8001b80:	60da      	str	r2, [r3, #12]
                             ADC_CFGR1_OVRMOD  |
                             ADC_CFGR1_AUTDLY  |
                             ADC_CFGR1_AUTOFF  |
                             ADC_CFGR1_DISCEN);

  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	68d9      	ldr	r1, [r3, #12]
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	68da      	ldr	r2, [r3, #12]
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	691b      	ldr	r3, [r3, #16]
 8001b90:	2b02      	cmp	r3, #2
 8001b92:	d101      	bne.n	8001b98 <HAL_ADC_Init+0x18c>
 8001b94:	2304      	movs	r3, #4
 8001b96:	e000      	b.n	8001b9a <HAL_ADC_Init+0x18e>
 8001b98:	2300      	movs	r3, #0
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8001b9a:	431a      	orrs	r2, r3
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	2020      	movs	r0, #32
 8001ba0:	5c1b      	ldrb	r3, [r3, r0]
 8001ba2:	035b      	lsls	r3, r3, #13
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 8001ba4:	431a      	orrs	r2, r3
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	202c      	movs	r0, #44	; 0x2c
 8001baa:	5c1b      	ldrb	r3, [r3, r0]
 8001bac:	005b      	lsls	r3, r3, #1
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8001bae:	431a      	orrs	r2, r3
                            hadc->Init.Overrun                               |
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 8001bb4:	431a      	orrs	r2, r3
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	699b      	ldr	r3, [r3, #24]
 8001bba:	039b      	lsls	r3, r3, #14
                            hadc->Init.Overrun                               |
 8001bbc:	431a      	orrs	r2, r3
                            __HAL_ADC_CFGR1_AUTOFF(hadc->Init.LowPowerAutoPowerOff));
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	69db      	ldr	r3, [r3, #28]
 8001bc2:	03db      	lsls	r3, r3, #15
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 8001bc4:	431a      	orrs	r2, r3
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	430a      	orrs	r2, r1
 8001bcc:	60da      	str	r2, [r3, #12]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001bd2:	23c2      	movs	r3, #194	; 0xc2
 8001bd4:	33ff      	adds	r3, #255	; 0xff
 8001bd6:	429a      	cmp	r2, r3
 8001bd8:	d00b      	beq.n	8001bf2 <HAL_ADC_Init+0x1e6>
  {
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	68d9      	ldr	r1, [r3, #12]
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
                             hadc->Init.ExternalTrigConvEdge;
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 8001be8:	431a      	orrs	r2, r3
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	430a      	orrs	r2, r1
 8001bf0:	60da      	str	r2, [r3, #12]
  }

  /* Enable discontinuous mode only if continuous mode is disabled */
  if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	2221      	movs	r2, #33	; 0x21
 8001bf6:	5c9b      	ldrb	r3, [r3, r2]
 8001bf8:	2b01      	cmp	r3, #1
 8001bfa:	d11a      	bne.n	8001c32 <HAL_ADC_Init+0x226>
  {
    if (hadc->Init.ContinuousConvMode == DISABLE)
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	2220      	movs	r2, #32
 8001c00:	5c9b      	ldrb	r3, [r3, r2]
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d109      	bne.n	8001c1a <HAL_ADC_Init+0x20e>
    {
      /* Enable the selected ADC group regular discontinuous mode */
      hadc->Instance->CFGR1 |= (ADC_CFGR1_DISCEN);
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	68da      	ldr	r2, [r3, #12]
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	2180      	movs	r1, #128	; 0x80
 8001c12:	0249      	lsls	r1, r1, #9
 8001c14:	430a      	orrs	r2, r1
 8001c16:	60da      	str	r2, [r3, #12]
 8001c18:	e00b      	b.n	8001c32 <HAL_ADC_Init+0x226>
      /* ADC regular group discontinuous was intended to be enabled,        */
      /* but ADC regular group modes continuous and sequencer discontinuous */
      /* cannot be enabled simultaneously.                                  */

      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c1e:	2220      	movs	r2, #32
 8001c20:	431a      	orrs	r2, r3
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c2a:	2201      	movs	r2, #1
 8001c2c:	431a      	orrs	r2, r3
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	659a      	str	r2, [r3, #88]	; 0x58
    }
  }

  if (hadc->Init.OversamplingMode == ENABLE)
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001c36:	2b01      	cmp	r3, #1
 8001c38:	d11f      	bne.n	8001c7a <HAL_ADC_Init+0x26e>
    /* Configuration of Oversampler:                                          */
    /*  - Oversampling Ratio                                                  */
    /*  - Right bit shift                                                     */
    /*  - Triggered mode                                                      */

    hadc->Instance->CFGR2 &= ~(ADC_CFGR2_OVSR |
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	691a      	ldr	r2, [r3, #16]
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	492a      	ldr	r1, [pc, #168]	; (8001cf0 <HAL_ADC_Init+0x2e4>)
 8001c46:	400a      	ands	r2, r1
 8001c48:	611a      	str	r2, [r3, #16]
                               ADC_CFGR2_OVSS |
                               ADC_CFGR2_TOVS);

    hadc->Instance->CFGR2 |= (hadc->Init.Oversample.Ratio         |
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	6919      	ldr	r1, [r3, #16]
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	6c1a      	ldr	r2, [r3, #64]	; 0x40
                              hadc->Init.Oversample.RightBitShift             |
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    hadc->Instance->CFGR2 |= (hadc->Init.Oversample.Ratio         |
 8001c58:	431a      	orrs	r2, r3
                              hadc->Init.Oversample.TriggeredMode);
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                              hadc->Init.Oversample.RightBitShift             |
 8001c5e:	431a      	orrs	r2, r3
    hadc->Instance->CFGR2 |= (hadc->Init.Oversample.Ratio         |
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	430a      	orrs	r2, r1
 8001c66:	611a      	str	r2, [r3, #16]

    /* Enable OverSampling mode */
    hadc->Instance->CFGR2 |= ADC_CFGR2_OVSE;
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	691a      	ldr	r2, [r3, #16]
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	2101      	movs	r1, #1
 8001c74:	430a      	orrs	r2, r1
 8001c76:	611a      	str	r2, [r3, #16]
 8001c78:	e00e      	b.n	8001c98 <HAL_ADC_Init+0x28c>
  }
  else
  {
    if (HAL_IS_BIT_SET(hadc->Instance->CFGR2, ADC_CFGR2_OVSE))
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	691b      	ldr	r3, [r3, #16]
 8001c80:	2201      	movs	r2, #1
 8001c82:	4013      	ands	r3, r2
 8001c84:	2b01      	cmp	r3, #1
 8001c86:	d107      	bne.n	8001c98 <HAL_ADC_Init+0x28c>
    {
      /* Disable OverSampling mode if needed */
      hadc->Instance->CFGR2 &= ~ADC_CFGR2_OVSE;
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	691a      	ldr	r2, [r3, #16]
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	2101      	movs	r1, #1
 8001c94:	438a      	bics	r2, r1
 8001c96:	611a      	str	r2, [r3, #16]
    }
  }

  /* Clear the old sampling time */
  hadc->Instance->SMPR &= (uint32_t)(~ADC_SMPR_SMPR);
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	695a      	ldr	r2, [r3, #20]
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	2107      	movs	r1, #7
 8001ca4:	438a      	bics	r2, r1
 8001ca6:	615a      	str	r2, [r3, #20]

  /* Set the new sample time */
  hadc->Instance->SMPR |= hadc->Init.SamplingTime;
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	6959      	ldr	r1, [r3, #20]
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	430a      	orrs	r2, r1
 8001cb8:	615a      	str	r2, [r3, #20]

  /* Clear ADC error code */
  ADC_CLEAR_ERRORCODE(hadc);
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	2200      	movs	r2, #0
 8001cbe:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set the ADC state */
  ADC_STATE_CLR_SET(hadc->State,
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001cc4:	2203      	movs	r2, #3
 8001cc6:	4393      	bics	r3, r2
 8001cc8:	2201      	movs	r2, #1
 8001cca:	431a      	orrs	r2, r3
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	655a      	str	r2, [r3, #84]	; 0x54
                    HAL_ADC_STATE_BUSY_INTERNAL,
                    HAL_ADC_STATE_READY);


  /* Return function status */
  return HAL_OK;
 8001cd0:	2300      	movs	r3, #0
}
 8001cd2:	0018      	movs	r0, r3
 8001cd4:	46bd      	mov	sp, r7
 8001cd6:	b002      	add	sp, #8
 8001cd8:	bd80      	pop	{r7, pc}
 8001cda:	46c0      	nop			; (mov r8, r8)
 8001cdc:	fffffefd 	.word	0xfffffefd
 8001ce0:	40012708 	.word	0x40012708
 8001ce4:	ffc3ffff 	.word	0xffc3ffff
 8001ce8:	fdffffff 	.word	0xfdffffff
 8001cec:	fffe0219 	.word	0xfffe0219
 8001cf0:	fffffc03 	.word	0xfffffc03

08001cf4 <HAL_ADC_Start>:
  * @note   Interruptions enabled in this function: None.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8001cf4:	b590      	push	{r4, r7, lr}
 8001cf6:	b085      	sub	sp, #20
 8001cf8:	af00      	add	r7, sp, #0
 8001cfa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001cfc:	230f      	movs	r3, #15
 8001cfe:	18fb      	adds	r3, r7, r3
 8001d00:	2200      	movs	r2, #0
 8001d02:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	689b      	ldr	r3, [r3, #8]
 8001d0a:	2204      	movs	r2, #4
 8001d0c:	4013      	ands	r3, r2
 8001d0e:	d138      	bne.n	8001d82 <HAL_ADC_Start+0x8e>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	2250      	movs	r2, #80	; 0x50
 8001d14:	5c9b      	ldrb	r3, [r3, r2]
 8001d16:	2b01      	cmp	r3, #1
 8001d18:	d101      	bne.n	8001d1e <HAL_ADC_Start+0x2a>
 8001d1a:	2302      	movs	r3, #2
 8001d1c:	e038      	b.n	8001d90 <HAL_ADC_Start+0x9c>
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	2250      	movs	r2, #80	; 0x50
 8001d22:	2101      	movs	r1, #1
 8001d24:	5499      	strb	r1, [r3, r2]

    /* Enable the ADC peripheral */
    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware.                                   */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	69db      	ldr	r3, [r3, #28]
 8001d2a:	2b01      	cmp	r3, #1
 8001d2c:	d007      	beq.n	8001d3e <HAL_ADC_Start+0x4a>
    {
      tmp_hal_status = ADC_Enable(hadc);
 8001d2e:	230f      	movs	r3, #15
 8001d30:	18fc      	adds	r4, r7, r3
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	0018      	movs	r0, r3
 8001d36:	f000 f95f 	bl	8001ff8 <ADC_Enable>
 8001d3a:	0003      	movs	r3, r0
 8001d3c:	7023      	strb	r3, [r4, #0]
    }

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8001d3e:	230f      	movs	r3, #15
 8001d40:	18fb      	adds	r3, r7, r3
 8001d42:	781b      	ldrb	r3, [r3, #0]
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d120      	bne.n	8001d8a <HAL_ADC_Start+0x96>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d4c:	4a12      	ldr	r2, [pc, #72]	; (8001d98 <HAL_ADC_Start+0xa4>)
 8001d4e:	4013      	ands	r3, r2
 8001d50:	2280      	movs	r2, #128	; 0x80
 8001d52:	0052      	lsls	r2, r2, #1
 8001d54:	431a      	orrs	r2, r3
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	655a      	str	r2, [r3, #84]	; 0x54
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);

      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	2200      	movs	r2, #0
 8001d5e:	659a      	str	r2, [r3, #88]	; 0x58

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	2250      	movs	r2, #80	; 0x50
 8001d64:	2100      	movs	r1, #0
 8001d66:	5499      	strb	r1, [r3, r2]

      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	221c      	movs	r2, #28
 8001d6e:	601a      	str	r2, [r3, #0]

      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      hadc->Instance->CR |= ADC_CR_ADSTART;
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	689a      	ldr	r2, [r3, #8]
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	2104      	movs	r1, #4
 8001d7c:	430a      	orrs	r2, r1
 8001d7e:	609a      	str	r2, [r3, #8]
 8001d80:	e003      	b.n	8001d8a <HAL_ADC_Start+0x96>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8001d82:	230f      	movs	r3, #15
 8001d84:	18fb      	adds	r3, r7, r3
 8001d86:	2202      	movs	r2, #2
 8001d88:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return tmp_hal_status;
 8001d8a:	230f      	movs	r3, #15
 8001d8c:	18fb      	adds	r3, r7, r3
 8001d8e:	781b      	ldrb	r3, [r3, #0]
}
 8001d90:	0018      	movs	r0, r3
 8001d92:	46bd      	mov	sp, r7
 8001d94:	b005      	add	sp, #20
 8001d96:	bd90      	pop	{r4, r7, pc}
 8001d98:	fffff0fe 	.word	0xfffff0fe

08001d9c <HAL_ADC_PollForConversion>:
  * @param  hadc ADC handle
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8001d9c:	b580      	push	{r7, lr}
 8001d9e:	b084      	sub	sp, #16
 8001da0:	af00      	add	r7, sp, #0
 8001da2:	6078      	str	r0, [r7, #4]
 8001da4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8001da6:	2300      	movs	r3, #0
 8001da8:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_Flag_EOC   = 0x00;
 8001daa:	2300      	movs	r3, #0
 8001dac:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	695b      	ldr	r3, [r3, #20]
 8001db2:	2b08      	cmp	r3, #8
 8001db4:	d102      	bne.n	8001dbc <HAL_ADC_PollForConversion+0x20>
  {
    tmp_Flag_EOC = ADC_FLAG_EOS;
 8001db6:	2308      	movs	r3, #8
 8001db8:	60fb      	str	r3, [r7, #12]
 8001dba:	e014      	b.n	8001de6 <HAL_ADC_PollForConversion+0x4a>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if (HAL_IS_BIT_SET(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN))
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	68db      	ldr	r3, [r3, #12]
 8001dc2:	2201      	movs	r2, #1
 8001dc4:	4013      	ands	r3, r2
 8001dc6:	2b01      	cmp	r3, #1
 8001dc8:	d10b      	bne.n	8001de2 <HAL_ADC_PollForConversion+0x46>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001dce:	2220      	movs	r2, #32
 8001dd0:	431a      	orrs	r2, r3
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	655a      	str	r2, [r3, #84]	; 0x54

      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	2250      	movs	r2, #80	; 0x50
 8001dda:	2100      	movs	r1, #0
 8001ddc:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 8001dde:	2301      	movs	r3, #1
 8001de0:	e072      	b.n	8001ec8 <HAL_ADC_PollForConversion+0x12c>
    }
    else
    {
      tmp_Flag_EOC = (ADC_FLAG_EOC | ADC_FLAG_EOS);
 8001de2:	230c      	movs	r3, #12
 8001de4:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8001de6:	f7ff fde3 	bl	80019b0 <HAL_GetTick>
 8001dea:	0003      	movs	r3, r0
 8001dec:	60bb      	str	r3, [r7, #8]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while (HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8001dee:	e01f      	b.n	8001e30 <HAL_ADC_PollForConversion+0x94>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8001df0:	683b      	ldr	r3, [r7, #0]
 8001df2:	3301      	adds	r3, #1
 8001df4:	d01c      	beq.n	8001e30 <HAL_ADC_PollForConversion+0x94>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8001df6:	683b      	ldr	r3, [r7, #0]
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d007      	beq.n	8001e0c <HAL_ADC_PollForConversion+0x70>
 8001dfc:	f7ff fdd8 	bl	80019b0 <HAL_GetTick>
 8001e00:	0002      	movs	r2, r0
 8001e02:	68bb      	ldr	r3, [r7, #8]
 8001e04:	1ad3      	subs	r3, r2, r3
 8001e06:	683a      	ldr	r2, [r7, #0]
 8001e08:	429a      	cmp	r2, r3
 8001e0a:	d211      	bcs.n	8001e30 <HAL_ADC_PollForConversion+0x94>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	68fa      	ldr	r2, [r7, #12]
 8001e14:	4013      	ands	r3, r2
 8001e16:	d10b      	bne.n	8001e30 <HAL_ADC_PollForConversion+0x94>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e1c:	2204      	movs	r2, #4
 8001e1e:	431a      	orrs	r2, r3
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	655a      	str	r2, [r3, #84]	; 0x54

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	2250      	movs	r2, #80	; 0x50
 8001e28:	2100      	movs	r1, #0
 8001e2a:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8001e2c:	2303      	movs	r3, #3
 8001e2e:	e04b      	b.n	8001ec8 <HAL_ADC_PollForConversion+0x12c>
  while (HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	68fa      	ldr	r2, [r7, #12]
 8001e38:	4013      	ands	r3, r2
 8001e3a:	d0d9      	beq.n	8001df0 <HAL_ADC_PollForConversion+0x54>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e40:	2280      	movs	r2, #128	; 0x80
 8001e42:	0092      	lsls	r2, r2, #2
 8001e44:	431a      	orrs	r2, r3
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	655a      	str	r2, [r3, #84]	; 0x54

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	68da      	ldr	r2, [r3, #12]
 8001e50:	23c0      	movs	r3, #192	; 0xc0
 8001e52:	011b      	lsls	r3, r3, #4
 8001e54:	4013      	ands	r3, r2
 8001e56:	d12e      	bne.n	8001eb6 <HAL_ADC_PollForConversion+0x11a>
      (hadc->Init.ContinuousConvMode == DISABLE))
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	2220      	movs	r2, #32
 8001e5c:	5c9b      	ldrb	r3, [r3, r2]
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d129      	bne.n	8001eb6 <HAL_ADC_PollForConversion+0x11a>
  {
    /* If End of Sequence is reached, disable interrupts */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	2208      	movs	r2, #8
 8001e6a:	4013      	ands	r3, r2
 8001e6c:	2b08      	cmp	r3, #8
 8001e6e:	d122      	bne.n	8001eb6 <HAL_ADC_PollForConversion+0x11a>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	689b      	ldr	r3, [r3, #8]
 8001e76:	2204      	movs	r2, #4
 8001e78:	4013      	ands	r3, r2
 8001e7a:	d110      	bne.n	8001e9e <HAL_ADC_PollForConversion+0x102>
      {
        /* Disable ADC end of single conversion interrupt on group regular */
        /* Note: Overrun interrupt was enabled with EOC interrupt in          */
        /* HAL_Start_IT(), but is not disabled here because can be used       */
        /* by overrun IRQ process below.                                      */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	685a      	ldr	r2, [r3, #4]
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	210c      	movs	r1, #12
 8001e88:	438a      	bics	r2, r1
 8001e8a:	605a      	str	r2, [r3, #4]

        /* Set ADC state */
        ADC_STATE_CLR_SET(hadc->State,
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e90:	4a0f      	ldr	r2, [pc, #60]	; (8001ed0 <HAL_ADC_PollForConversion+0x134>)
 8001e92:	4013      	ands	r3, r2
 8001e94:	2201      	movs	r2, #1
 8001e96:	431a      	orrs	r2, r3
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	655a      	str	r2, [r3, #84]	; 0x54
 8001e9c:	e00b      	b.n	8001eb6 <HAL_ADC_PollForConversion+0x11a>
                          HAL_ADC_STATE_READY);
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ea2:	2220      	movs	r2, #32
 8001ea4:	431a      	orrs	r2, r3
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	655a      	str	r2, [r3, #84]	; 0x54

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001eae:	2201      	movs	r2, #1
 8001eb0:	431a      	orrs	r2, r3
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	659a      	str	r2, [r3, #88]	; 0x58
  }

  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	699b      	ldr	r3, [r3, #24]
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d103      	bne.n	8001ec6 <HAL_ADC_PollForConversion+0x12a>
  {
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	220c      	movs	r2, #12
 8001ec4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001ec6:	2300      	movs	r3, #0
}
 8001ec8:	0018      	movs	r0, r3
 8001eca:	46bd      	mov	sp, r7
 8001ecc:	b004      	add	sp, #16
 8001ece:	bd80      	pop	{r7, pc}
 8001ed0:	fffffefe 	.word	0xfffffefe

08001ed4 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8001ed4:	b580      	push	{r7, lr}
 8001ed6:	b082      	sub	sp, #8
 8001ed8:	af00      	add	r7, sp, #0
 8001eda:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8001ee2:	0018      	movs	r0, r3
 8001ee4:	46bd      	mov	sp, r7
 8001ee6:	b002      	add	sp, #8
 8001ee8:	bd80      	pop	{r7, pc}
	...

08001eec <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8001eec:	b580      	push	{r7, lr}
 8001eee:	b082      	sub	sp, #8
 8001ef0:	af00      	add	r7, sp, #0
 8001ef2:	6078      	str	r0, [r7, #4]
 8001ef4:	6039      	str	r1, [r7, #0]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	2250      	movs	r2, #80	; 0x50
 8001efa:	5c9b      	ldrb	r3, [r3, r2]
 8001efc:	2b01      	cmp	r3, #1
 8001efe:	d101      	bne.n	8001f04 <HAL_ADC_ConfigChannel+0x18>
 8001f00:	2302      	movs	r3, #2
 8001f02:	e06c      	b.n	8001fde <HAL_ADC_ConfigChannel+0xf2>
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	2250      	movs	r2, #80	; 0x50
 8001f08:	2101      	movs	r1, #1
 8001f0a:	5499      	strb	r1, [r3, r2]
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Management of internal measurement channels: Vbat/VrefInt/TempSensor  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET)
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	689b      	ldr	r3, [r3, #8]
 8001f12:	2204      	movs	r2, #4
 8001f14:	4013      	ands	r3, r2
 8001f16:	d00b      	beq.n	8001f30 <HAL_ADC_ConfigChannel+0x44>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f1c:	2220      	movs	r2, #32
 8001f1e:	431a      	orrs	r2, r3
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	655a      	str	r2, [r3, #84]	; 0x54
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	2250      	movs	r2, #80	; 0x50
 8001f28:	2100      	movs	r1, #0
 8001f2a:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 8001f2c:	2301      	movs	r3, #1
 8001f2e:	e056      	b.n	8001fde <HAL_ADC_ConfigChannel+0xf2>
  }

  if (sConfig->Rank != ADC_RANK_NONE)
 8001f30:	683b      	ldr	r3, [r7, #0]
 8001f32:	685b      	ldr	r3, [r3, #4]
 8001f34:	4a2c      	ldr	r2, [pc, #176]	; (8001fe8 <HAL_ADC_ConfigChannel+0xfc>)
 8001f36:	4293      	cmp	r3, r2
 8001f38:	d028      	beq.n	8001f8c <HAL_ADC_ConfigChannel+0xa0>
  {
    /* Enable selected channels */
    hadc->Instance->CHSELR |= (uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK);
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8001f40:	683b      	ldr	r3, [r7, #0]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	035b      	lsls	r3, r3, #13
 8001f46:	0b5a      	lsrs	r2, r3, #13
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	430a      	orrs	r2, r1
 8001f4e:	629a      	str	r2, [r3, #40]	; 0x28
    /* dedicated internal buffers and path.                                     */

#if defined(ADC_CCR_TSEN)
    /* If Temperature sensor channel is selected, then enable the internal      */
    /* buffers and path  */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 8001f50:	683b      	ldr	r3, [r7, #0]
 8001f52:	681a      	ldr	r2, [r3, #0]
 8001f54:	2380      	movs	r3, #128	; 0x80
 8001f56:	02db      	lsls	r3, r3, #11
 8001f58:	4013      	ands	r3, r2
 8001f5a:	d009      	beq.n	8001f70 <HAL_ADC_ConfigChannel+0x84>
    {
      ADC->CCR |= ADC_CCR_TSEN;
 8001f5c:	4b23      	ldr	r3, [pc, #140]	; (8001fec <HAL_ADC_ConfigChannel+0x100>)
 8001f5e:	681a      	ldr	r2, [r3, #0]
 8001f60:	4b22      	ldr	r3, [pc, #136]	; (8001fec <HAL_ADC_ConfigChannel+0x100>)
 8001f62:	2180      	movs	r1, #128	; 0x80
 8001f64:	0409      	lsls	r1, r1, #16
 8001f66:	430a      	orrs	r2, r1
 8001f68:	601a      	str	r2, [r3, #0]

      /* Delay for temperature sensor stabilization time */
      ADC_DelayMicroSecond(ADC_TEMPSENSOR_DELAY_US);
 8001f6a:	200a      	movs	r0, #10
 8001f6c:	f000 f8ac 	bl	80020c8 <ADC_DelayMicroSecond>
    }
#endif

    /* If VRefInt channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 8001f70:	683b      	ldr	r3, [r7, #0]
 8001f72:	681a      	ldr	r2, [r3, #0]
 8001f74:	2380      	movs	r3, #128	; 0x80
 8001f76:	029b      	lsls	r3, r3, #10
 8001f78:	4013      	ands	r3, r2
 8001f7a:	d02b      	beq.n	8001fd4 <HAL_ADC_ConfigChannel+0xe8>
    {
      ADC->CCR |= ADC_CCR_VREFEN;
 8001f7c:	4b1b      	ldr	r3, [pc, #108]	; (8001fec <HAL_ADC_ConfigChannel+0x100>)
 8001f7e:	681a      	ldr	r2, [r3, #0]
 8001f80:	4b1a      	ldr	r3, [pc, #104]	; (8001fec <HAL_ADC_ConfigChannel+0x100>)
 8001f82:	2180      	movs	r1, #128	; 0x80
 8001f84:	03c9      	lsls	r1, r1, #15
 8001f86:	430a      	orrs	r2, r1
 8001f88:	601a      	str	r2, [r3, #0]
 8001f8a:	e023      	b.n	8001fd4 <HAL_ADC_ConfigChannel+0xe8>
  }
  else
  {
    /* Regular sequence configuration */
    /* Reset the channel selection register from the selected channel */
    hadc->Instance->CHSELR &= ~((uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK));
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001f92:	683b      	ldr	r3, [r7, #0]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	035b      	lsls	r3, r3, #13
 8001f98:	0b5b      	lsrs	r3, r3, #13
 8001f9a:	43d9      	mvns	r1, r3
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	400a      	ands	r2, r1
 8001fa2:	629a      	str	r2, [r3, #40]	; 0x28

    /* Management of internal measurement channels: VrefInt/TempSensor/Vbat */
    /* internal measurement paths disable: If internal channel selected,    */
    /* disable dedicated internal buffers and path.                         */
#if defined(ADC_CCR_TSEN)
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 8001fa4:	683b      	ldr	r3, [r7, #0]
 8001fa6:	681a      	ldr	r2, [r3, #0]
 8001fa8:	2380      	movs	r3, #128	; 0x80
 8001faa:	02db      	lsls	r3, r3, #11
 8001fac:	4013      	ands	r3, r2
 8001fae:	d005      	beq.n	8001fbc <HAL_ADC_ConfigChannel+0xd0>
    {
      ADC->CCR &= ~ADC_CCR_TSEN;
 8001fb0:	4b0e      	ldr	r3, [pc, #56]	; (8001fec <HAL_ADC_ConfigChannel+0x100>)
 8001fb2:	681a      	ldr	r2, [r3, #0]
 8001fb4:	4b0d      	ldr	r3, [pc, #52]	; (8001fec <HAL_ADC_ConfigChannel+0x100>)
 8001fb6:	490e      	ldr	r1, [pc, #56]	; (8001ff0 <HAL_ADC_ConfigChannel+0x104>)
 8001fb8:	400a      	ands	r2, r1
 8001fba:	601a      	str	r2, [r3, #0]
    }
#endif

    /* If VRefInt channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 8001fbc:	683b      	ldr	r3, [r7, #0]
 8001fbe:	681a      	ldr	r2, [r3, #0]
 8001fc0:	2380      	movs	r3, #128	; 0x80
 8001fc2:	029b      	lsls	r3, r3, #10
 8001fc4:	4013      	ands	r3, r2
 8001fc6:	d005      	beq.n	8001fd4 <HAL_ADC_ConfigChannel+0xe8>
    {
      ADC->CCR &= ~ADC_CCR_VREFEN;
 8001fc8:	4b08      	ldr	r3, [pc, #32]	; (8001fec <HAL_ADC_ConfigChannel+0x100>)
 8001fca:	681a      	ldr	r2, [r3, #0]
 8001fcc:	4b07      	ldr	r3, [pc, #28]	; (8001fec <HAL_ADC_ConfigChannel+0x100>)
 8001fce:	4909      	ldr	r1, [pc, #36]	; (8001ff4 <HAL_ADC_ConfigChannel+0x108>)
 8001fd0:	400a      	ands	r2, r1
 8001fd2:	601a      	str	r2, [r3, #0]
    }
#endif
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	2250      	movs	r2, #80	; 0x50
 8001fd8:	2100      	movs	r1, #0
 8001fda:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 8001fdc:	2300      	movs	r3, #0
}
 8001fde:	0018      	movs	r0, r3
 8001fe0:	46bd      	mov	sp, r7
 8001fe2:	b002      	add	sp, #8
 8001fe4:	bd80      	pop	{r7, pc}
 8001fe6:	46c0      	nop			; (mov r8, r8)
 8001fe8:	00001001 	.word	0x00001001
 8001fec:	40012708 	.word	0x40012708
 8001ff0:	ff7fffff 	.word	0xff7fffff
 8001ff4:	ffbfffff 	.word	0xffbfffff

08001ff8 <ADC_Enable>:
  *         "if (hadc->Init.LowPowerAutoPowerOff != ENABLE)".
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8001ff8:	b580      	push	{r7, lr}
 8001ffa:	b084      	sub	sp, #16
 8001ffc:	af00      	add	r7, sp, #0
 8001ffe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002000:	2300      	movs	r3, #0
 8002002:	60fb      	str	r3, [r7, #12]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	689b      	ldr	r3, [r3, #8]
 800200a:	2203      	movs	r2, #3
 800200c:	4013      	ands	r3, r2
 800200e:	2b01      	cmp	r3, #1
 8002010:	d108      	bne.n	8002024 <ADC_Enable+0x2c>
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	2201      	movs	r2, #1
 800201a:	4013      	ands	r3, r2
 800201c:	2b01      	cmp	r3, #1
 800201e:	d101      	bne.n	8002024 <ADC_Enable+0x2c>
 8002020:	2301      	movs	r3, #1
 8002022:	e000      	b.n	8002026 <ADC_Enable+0x2e>
 8002024:	2300      	movs	r3, #0
 8002026:	2b00      	cmp	r3, #0
 8002028:	d146      	bne.n	80020b8 <ADC_Enable+0xc0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	689b      	ldr	r3, [r3, #8]
 8002030:	4a24      	ldr	r2, [pc, #144]	; (80020c4 <ADC_Enable+0xcc>)
 8002032:	4013      	ands	r3, r2
 8002034:	d00d      	beq.n	8002052 <ADC_Enable+0x5a>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800203a:	2210      	movs	r2, #16
 800203c:	431a      	orrs	r2, r3
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002046:	2201      	movs	r2, #1
 8002048:	431a      	orrs	r2, r3
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 800204e:	2301      	movs	r3, #1
 8002050:	e033      	b.n	80020ba <ADC_Enable+0xc2>
    }

    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	689a      	ldr	r2, [r3, #8]
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	2101      	movs	r1, #1
 800205e:	430a      	orrs	r2, r1
 8002060:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time. */
    ADC_DelayMicroSecond(ADC_STAB_DELAY_US);
 8002062:	2001      	movs	r0, #1
 8002064:	f000 f830 	bl	80020c8 <ADC_DelayMicroSecond>

    /* Get tick count */
    tickstart = HAL_GetTick();
 8002068:	f7ff fca2 	bl	80019b0 <HAL_GetTick>
 800206c:	0003      	movs	r3, r0
 800206e:	60fb      	str	r3, [r7, #12]

    /* Wait for ADC effectively enabled */
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8002070:	e01b      	b.n	80020aa <ADC_Enable+0xb2>
    {
      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002072:	f7ff fc9d 	bl	80019b0 <HAL_GetTick>
 8002076:	0002      	movs	r2, r0
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	1ad3      	subs	r3, r2, r3
 800207c:	2b0a      	cmp	r3, #10
 800207e:	d914      	bls.n	80020aa <ADC_Enable+0xb2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	2201      	movs	r2, #1
 8002088:	4013      	ands	r3, r2
 800208a:	2b01      	cmp	r3, #1
 800208c:	d00d      	beq.n	80020aa <ADC_Enable+0xb2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002092:	2210      	movs	r2, #16
 8002094:	431a      	orrs	r2, r3
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800209e:	2201      	movs	r2, #1
 80020a0:	431a      	orrs	r2, r3
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 80020a6:	2301      	movs	r3, #1
 80020a8:	e007      	b.n	80020ba <ADC_Enable+0xc2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	2201      	movs	r2, #1
 80020b2:	4013      	ands	r3, r2
 80020b4:	2b01      	cmp	r3, #1
 80020b6:	d1dc      	bne.n	8002072 <ADC_Enable+0x7a>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80020b8:	2300      	movs	r3, #0
}
 80020ba:	0018      	movs	r0, r3
 80020bc:	46bd      	mov	sp, r7
 80020be:	b004      	add	sp, #16
 80020c0:	bd80      	pop	{r7, pc}
 80020c2:	46c0      	nop			; (mov r8, r8)
 80020c4:	80000017 	.word	0x80000017

080020c8 <ADC_DelayMicroSecond>:
  * @brief  Delay micro seconds
  * @param  microSecond  delay
  * @retval None
  */
static void ADC_DelayMicroSecond(uint32_t microSecond)
{
 80020c8:	b580      	push	{r7, lr}
 80020ca:	b084      	sub	sp, #16
 80020cc:	af00      	add	r7, sp, #0
 80020ce:	6078      	str	r0, [r7, #4]
  /* Compute number of CPU cycles to wait for */
  __IO uint32_t waitLoopIndex = (microSecond * (SystemCoreClock / 1000000U));
 80020d0:	4b0b      	ldr	r3, [pc, #44]	; (8002100 <ADC_DelayMicroSecond+0x38>)
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	490b      	ldr	r1, [pc, #44]	; (8002104 <ADC_DelayMicroSecond+0x3c>)
 80020d6:	0018      	movs	r0, r3
 80020d8:	f7fe f828 	bl	800012c <__udivsi3>
 80020dc:	0003      	movs	r3, r0
 80020de:	001a      	movs	r2, r3
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	4353      	muls	r3, r2
 80020e4:	60fb      	str	r3, [r7, #12]

  while (waitLoopIndex != 0U)
 80020e6:	e002      	b.n	80020ee <ADC_DelayMicroSecond+0x26>
  {
    waitLoopIndex--;
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	3b01      	subs	r3, #1
 80020ec:	60fb      	str	r3, [r7, #12]
  while (waitLoopIndex != 0U)
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d1f9      	bne.n	80020e8 <ADC_DelayMicroSecond+0x20>
  }
}
 80020f4:	46c0      	nop			; (mov r8, r8)
 80020f6:	46c0      	nop			; (mov r8, r8)
 80020f8:	46bd      	mov	sp, r7
 80020fa:	b004      	add	sp, #16
 80020fc:	bd80      	pop	{r7, pc}
 80020fe:	46c0      	nop			; (mov r8, r8)
 8002100:	20000010 	.word	0x20000010
 8002104:	000f4240 	.word	0x000f4240

08002108 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002108:	b580      	push	{r7, lr}
 800210a:	b082      	sub	sp, #8
 800210c:	af00      	add	r7, sp, #0
 800210e:	0002      	movs	r2, r0
 8002110:	1dfb      	adds	r3, r7, #7
 8002112:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8002114:	1dfb      	adds	r3, r7, #7
 8002116:	781b      	ldrb	r3, [r3, #0]
 8002118:	2b7f      	cmp	r3, #127	; 0x7f
 800211a:	d809      	bhi.n	8002130 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800211c:	1dfb      	adds	r3, r7, #7
 800211e:	781b      	ldrb	r3, [r3, #0]
 8002120:	001a      	movs	r2, r3
 8002122:	231f      	movs	r3, #31
 8002124:	401a      	ands	r2, r3
 8002126:	4b04      	ldr	r3, [pc, #16]	; (8002138 <__NVIC_EnableIRQ+0x30>)
 8002128:	2101      	movs	r1, #1
 800212a:	4091      	lsls	r1, r2
 800212c:	000a      	movs	r2, r1
 800212e:	601a      	str	r2, [r3, #0]
  }
}
 8002130:	46c0      	nop			; (mov r8, r8)
 8002132:	46bd      	mov	sp, r7
 8002134:	b002      	add	sp, #8
 8002136:	bd80      	pop	{r7, pc}
 8002138:	e000e100 	.word	0xe000e100

0800213c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800213c:	b590      	push	{r4, r7, lr}
 800213e:	b083      	sub	sp, #12
 8002140:	af00      	add	r7, sp, #0
 8002142:	0002      	movs	r2, r0
 8002144:	6039      	str	r1, [r7, #0]
 8002146:	1dfb      	adds	r3, r7, #7
 8002148:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800214a:	1dfb      	adds	r3, r7, #7
 800214c:	781b      	ldrb	r3, [r3, #0]
 800214e:	2b7f      	cmp	r3, #127	; 0x7f
 8002150:	d828      	bhi.n	80021a4 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002152:	4a2f      	ldr	r2, [pc, #188]	; (8002210 <__NVIC_SetPriority+0xd4>)
 8002154:	1dfb      	adds	r3, r7, #7
 8002156:	781b      	ldrb	r3, [r3, #0]
 8002158:	b25b      	sxtb	r3, r3
 800215a:	089b      	lsrs	r3, r3, #2
 800215c:	33c0      	adds	r3, #192	; 0xc0
 800215e:	009b      	lsls	r3, r3, #2
 8002160:	589b      	ldr	r3, [r3, r2]
 8002162:	1dfa      	adds	r2, r7, #7
 8002164:	7812      	ldrb	r2, [r2, #0]
 8002166:	0011      	movs	r1, r2
 8002168:	2203      	movs	r2, #3
 800216a:	400a      	ands	r2, r1
 800216c:	00d2      	lsls	r2, r2, #3
 800216e:	21ff      	movs	r1, #255	; 0xff
 8002170:	4091      	lsls	r1, r2
 8002172:	000a      	movs	r2, r1
 8002174:	43d2      	mvns	r2, r2
 8002176:	401a      	ands	r2, r3
 8002178:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800217a:	683b      	ldr	r3, [r7, #0]
 800217c:	019b      	lsls	r3, r3, #6
 800217e:	22ff      	movs	r2, #255	; 0xff
 8002180:	401a      	ands	r2, r3
 8002182:	1dfb      	adds	r3, r7, #7
 8002184:	781b      	ldrb	r3, [r3, #0]
 8002186:	0018      	movs	r0, r3
 8002188:	2303      	movs	r3, #3
 800218a:	4003      	ands	r3, r0
 800218c:	00db      	lsls	r3, r3, #3
 800218e:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002190:	481f      	ldr	r0, [pc, #124]	; (8002210 <__NVIC_SetPriority+0xd4>)
 8002192:	1dfb      	adds	r3, r7, #7
 8002194:	781b      	ldrb	r3, [r3, #0]
 8002196:	b25b      	sxtb	r3, r3
 8002198:	089b      	lsrs	r3, r3, #2
 800219a:	430a      	orrs	r2, r1
 800219c:	33c0      	adds	r3, #192	; 0xc0
 800219e:	009b      	lsls	r3, r3, #2
 80021a0:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80021a2:	e031      	b.n	8002208 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80021a4:	4a1b      	ldr	r2, [pc, #108]	; (8002214 <__NVIC_SetPriority+0xd8>)
 80021a6:	1dfb      	adds	r3, r7, #7
 80021a8:	781b      	ldrb	r3, [r3, #0]
 80021aa:	0019      	movs	r1, r3
 80021ac:	230f      	movs	r3, #15
 80021ae:	400b      	ands	r3, r1
 80021b0:	3b08      	subs	r3, #8
 80021b2:	089b      	lsrs	r3, r3, #2
 80021b4:	3306      	adds	r3, #6
 80021b6:	009b      	lsls	r3, r3, #2
 80021b8:	18d3      	adds	r3, r2, r3
 80021ba:	3304      	adds	r3, #4
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	1dfa      	adds	r2, r7, #7
 80021c0:	7812      	ldrb	r2, [r2, #0]
 80021c2:	0011      	movs	r1, r2
 80021c4:	2203      	movs	r2, #3
 80021c6:	400a      	ands	r2, r1
 80021c8:	00d2      	lsls	r2, r2, #3
 80021ca:	21ff      	movs	r1, #255	; 0xff
 80021cc:	4091      	lsls	r1, r2
 80021ce:	000a      	movs	r2, r1
 80021d0:	43d2      	mvns	r2, r2
 80021d2:	401a      	ands	r2, r3
 80021d4:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80021d6:	683b      	ldr	r3, [r7, #0]
 80021d8:	019b      	lsls	r3, r3, #6
 80021da:	22ff      	movs	r2, #255	; 0xff
 80021dc:	401a      	ands	r2, r3
 80021de:	1dfb      	adds	r3, r7, #7
 80021e0:	781b      	ldrb	r3, [r3, #0]
 80021e2:	0018      	movs	r0, r3
 80021e4:	2303      	movs	r3, #3
 80021e6:	4003      	ands	r3, r0
 80021e8:	00db      	lsls	r3, r3, #3
 80021ea:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80021ec:	4809      	ldr	r0, [pc, #36]	; (8002214 <__NVIC_SetPriority+0xd8>)
 80021ee:	1dfb      	adds	r3, r7, #7
 80021f0:	781b      	ldrb	r3, [r3, #0]
 80021f2:	001c      	movs	r4, r3
 80021f4:	230f      	movs	r3, #15
 80021f6:	4023      	ands	r3, r4
 80021f8:	3b08      	subs	r3, #8
 80021fa:	089b      	lsrs	r3, r3, #2
 80021fc:	430a      	orrs	r2, r1
 80021fe:	3306      	adds	r3, #6
 8002200:	009b      	lsls	r3, r3, #2
 8002202:	18c3      	adds	r3, r0, r3
 8002204:	3304      	adds	r3, #4
 8002206:	601a      	str	r2, [r3, #0]
}
 8002208:	46c0      	nop			; (mov r8, r8)
 800220a:	46bd      	mov	sp, r7
 800220c:	b003      	add	sp, #12
 800220e:	bd90      	pop	{r4, r7, pc}
 8002210:	e000e100 	.word	0xe000e100
 8002214:	e000ed00 	.word	0xe000ed00

08002218 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002218:	b580      	push	{r7, lr}
 800221a:	b082      	sub	sp, #8
 800221c:	af00      	add	r7, sp, #0
 800221e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	1e5a      	subs	r2, r3, #1
 8002224:	2380      	movs	r3, #128	; 0x80
 8002226:	045b      	lsls	r3, r3, #17
 8002228:	429a      	cmp	r2, r3
 800222a:	d301      	bcc.n	8002230 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 800222c:	2301      	movs	r3, #1
 800222e:	e010      	b.n	8002252 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002230:	4b0a      	ldr	r3, [pc, #40]	; (800225c <SysTick_Config+0x44>)
 8002232:	687a      	ldr	r2, [r7, #4]
 8002234:	3a01      	subs	r2, #1
 8002236:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002238:	2301      	movs	r3, #1
 800223a:	425b      	negs	r3, r3
 800223c:	2103      	movs	r1, #3
 800223e:	0018      	movs	r0, r3
 8002240:	f7ff ff7c 	bl	800213c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002244:	4b05      	ldr	r3, [pc, #20]	; (800225c <SysTick_Config+0x44>)
 8002246:	2200      	movs	r2, #0
 8002248:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800224a:	4b04      	ldr	r3, [pc, #16]	; (800225c <SysTick_Config+0x44>)
 800224c:	2207      	movs	r2, #7
 800224e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002250:	2300      	movs	r3, #0
}
 8002252:	0018      	movs	r0, r3
 8002254:	46bd      	mov	sp, r7
 8002256:	b002      	add	sp, #8
 8002258:	bd80      	pop	{r7, pc}
 800225a:	46c0      	nop			; (mov r8, r8)
 800225c:	e000e010 	.word	0xe000e010

08002260 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002260:	b580      	push	{r7, lr}
 8002262:	b084      	sub	sp, #16
 8002264:	af00      	add	r7, sp, #0
 8002266:	60b9      	str	r1, [r7, #8]
 8002268:	607a      	str	r2, [r7, #4]
 800226a:	210f      	movs	r1, #15
 800226c:	187b      	adds	r3, r7, r1
 800226e:	1c02      	adds	r2, r0, #0
 8002270:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8002272:	68ba      	ldr	r2, [r7, #8]
 8002274:	187b      	adds	r3, r7, r1
 8002276:	781b      	ldrb	r3, [r3, #0]
 8002278:	b25b      	sxtb	r3, r3
 800227a:	0011      	movs	r1, r2
 800227c:	0018      	movs	r0, r3
 800227e:	f7ff ff5d 	bl	800213c <__NVIC_SetPriority>
}
 8002282:	46c0      	nop			; (mov r8, r8)
 8002284:	46bd      	mov	sp, r7
 8002286:	b004      	add	sp, #16
 8002288:	bd80      	pop	{r7, pc}

0800228a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of  IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800228a:	b580      	push	{r7, lr}
 800228c:	b082      	sub	sp, #8
 800228e:	af00      	add	r7, sp, #0
 8002290:	0002      	movs	r2, r0
 8002292:	1dfb      	adds	r3, r7, #7
 8002294:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002296:	1dfb      	adds	r3, r7, #7
 8002298:	781b      	ldrb	r3, [r3, #0]
 800229a:	b25b      	sxtb	r3, r3
 800229c:	0018      	movs	r0, r3
 800229e:	f7ff ff33 	bl	8002108 <__NVIC_EnableIRQ>
}
 80022a2:	46c0      	nop			; (mov r8, r8)
 80022a4:	46bd      	mov	sp, r7
 80022a6:	b002      	add	sp, #8
 80022a8:	bd80      	pop	{r7, pc}

080022aa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80022aa:	b580      	push	{r7, lr}
 80022ac:	b082      	sub	sp, #8
 80022ae:	af00      	add	r7, sp, #0
 80022b0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	0018      	movs	r0, r3
 80022b6:	f7ff ffaf 	bl	8002218 <SysTick_Config>
 80022ba:	0003      	movs	r3, r0
}
 80022bc:	0018      	movs	r0, r3
 80022be:	46bd      	mov	sp, r7
 80022c0:	b002      	add	sp, #8
 80022c2:	bd80      	pop	{r7, pc}

080022c4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80022c4:	b580      	push	{r7, lr}
 80022c6:	b086      	sub	sp, #24
 80022c8:	af00      	add	r7, sp, #0
 80022ca:	6078      	str	r0, [r7, #4]
 80022cc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80022ce:	2300      	movs	r3, #0
 80022d0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80022d2:	2300      	movs	r3, #0
 80022d4:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 80022d6:	2300      	movs	r3, #0
 80022d8:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 80022da:	e14f      	b.n	800257c <HAL_GPIO_Init+0x2b8>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 80022dc:	683b      	ldr	r3, [r7, #0]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	2101      	movs	r1, #1
 80022e2:	697a      	ldr	r2, [r7, #20]
 80022e4:	4091      	lsls	r1, r2
 80022e6:	000a      	movs	r2, r1
 80022e8:	4013      	ands	r3, r2
 80022ea:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d100      	bne.n	80022f4 <HAL_GPIO_Init+0x30>
 80022f2:	e140      	b.n	8002576 <HAL_GPIO_Init+0x2b2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80022f4:	683b      	ldr	r3, [r7, #0]
 80022f6:	685b      	ldr	r3, [r3, #4]
 80022f8:	2203      	movs	r2, #3
 80022fa:	4013      	ands	r3, r2
 80022fc:	2b01      	cmp	r3, #1
 80022fe:	d005      	beq.n	800230c <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002300:	683b      	ldr	r3, [r7, #0]
 8002302:	685b      	ldr	r3, [r3, #4]
 8002304:	2203      	movs	r2, #3
 8002306:	4013      	ands	r3, r2
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002308:	2b02      	cmp	r3, #2
 800230a:	d130      	bne.n	800236e <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	689b      	ldr	r3, [r3, #8]
 8002310:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 8002312:	697b      	ldr	r3, [r7, #20]
 8002314:	005b      	lsls	r3, r3, #1
 8002316:	2203      	movs	r2, #3
 8002318:	409a      	lsls	r2, r3
 800231a:	0013      	movs	r3, r2
 800231c:	43da      	mvns	r2, r3
 800231e:	693b      	ldr	r3, [r7, #16]
 8002320:	4013      	ands	r3, r2
 8002322:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002324:	683b      	ldr	r3, [r7, #0]
 8002326:	68da      	ldr	r2, [r3, #12]
 8002328:	697b      	ldr	r3, [r7, #20]
 800232a:	005b      	lsls	r3, r3, #1
 800232c:	409a      	lsls	r2, r3
 800232e:	0013      	movs	r3, r2
 8002330:	693a      	ldr	r2, [r7, #16]
 8002332:	4313      	orrs	r3, r2
 8002334:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	693a      	ldr	r2, [r7, #16]
 800233a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	685b      	ldr	r3, [r3, #4]
 8002340:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002342:	2201      	movs	r2, #1
 8002344:	697b      	ldr	r3, [r7, #20]
 8002346:	409a      	lsls	r2, r3
 8002348:	0013      	movs	r3, r2
 800234a:	43da      	mvns	r2, r3
 800234c:	693b      	ldr	r3, [r7, #16]
 800234e:	4013      	ands	r3, r2
 8002350:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002352:	683b      	ldr	r3, [r7, #0]
 8002354:	685b      	ldr	r3, [r3, #4]
 8002356:	091b      	lsrs	r3, r3, #4
 8002358:	2201      	movs	r2, #1
 800235a:	401a      	ands	r2, r3
 800235c:	697b      	ldr	r3, [r7, #20]
 800235e:	409a      	lsls	r2, r3
 8002360:	0013      	movs	r3, r2
 8002362:	693a      	ldr	r2, [r7, #16]
 8002364:	4313      	orrs	r3, r2
 8002366:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	693a      	ldr	r2, [r7, #16]
 800236c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800236e:	683b      	ldr	r3, [r7, #0]
 8002370:	685b      	ldr	r3, [r3, #4]
 8002372:	2203      	movs	r2, #3
 8002374:	4013      	ands	r3, r2
 8002376:	2b03      	cmp	r3, #3
 8002378:	d017      	beq.n	80023aa <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	68db      	ldr	r3, [r3, #12]
 800237e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002380:	697b      	ldr	r3, [r7, #20]
 8002382:	005b      	lsls	r3, r3, #1
 8002384:	2203      	movs	r2, #3
 8002386:	409a      	lsls	r2, r3
 8002388:	0013      	movs	r3, r2
 800238a:	43da      	mvns	r2, r3
 800238c:	693b      	ldr	r3, [r7, #16]
 800238e:	4013      	ands	r3, r2
 8002390:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002392:	683b      	ldr	r3, [r7, #0]
 8002394:	689a      	ldr	r2, [r3, #8]
 8002396:	697b      	ldr	r3, [r7, #20]
 8002398:	005b      	lsls	r3, r3, #1
 800239a:	409a      	lsls	r2, r3
 800239c:	0013      	movs	r3, r2
 800239e:	693a      	ldr	r2, [r7, #16]
 80023a0:	4313      	orrs	r3, r2
 80023a2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	693a      	ldr	r2, [r7, #16]
 80023a8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80023aa:	683b      	ldr	r3, [r7, #0]
 80023ac:	685b      	ldr	r3, [r3, #4]
 80023ae:	2203      	movs	r2, #3
 80023b0:	4013      	ands	r3, r2
 80023b2:	2b02      	cmp	r3, #2
 80023b4:	d123      	bne.n	80023fe <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80023b6:	697b      	ldr	r3, [r7, #20]
 80023b8:	08da      	lsrs	r2, r3, #3
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	3208      	adds	r2, #8
 80023be:	0092      	lsls	r2, r2, #2
 80023c0:	58d3      	ldr	r3, [r2, r3]
 80023c2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 80023c4:	697b      	ldr	r3, [r7, #20]
 80023c6:	2207      	movs	r2, #7
 80023c8:	4013      	ands	r3, r2
 80023ca:	009b      	lsls	r3, r3, #2
 80023cc:	220f      	movs	r2, #15
 80023ce:	409a      	lsls	r2, r3
 80023d0:	0013      	movs	r3, r2
 80023d2:	43da      	mvns	r2, r3
 80023d4:	693b      	ldr	r3, [r7, #16]
 80023d6:	4013      	ands	r3, r2
 80023d8:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 80023da:	683b      	ldr	r3, [r7, #0]
 80023dc:	691a      	ldr	r2, [r3, #16]
 80023de:	697b      	ldr	r3, [r7, #20]
 80023e0:	2107      	movs	r1, #7
 80023e2:	400b      	ands	r3, r1
 80023e4:	009b      	lsls	r3, r3, #2
 80023e6:	409a      	lsls	r2, r3
 80023e8:	0013      	movs	r3, r2
 80023ea:	693a      	ldr	r2, [r7, #16]
 80023ec:	4313      	orrs	r3, r2
 80023ee:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80023f0:	697b      	ldr	r3, [r7, #20]
 80023f2:	08da      	lsrs	r2, r3, #3
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	3208      	adds	r2, #8
 80023f8:	0092      	lsls	r2, r2, #2
 80023fa:	6939      	ldr	r1, [r7, #16]
 80023fc:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002404:	697b      	ldr	r3, [r7, #20]
 8002406:	005b      	lsls	r3, r3, #1
 8002408:	2203      	movs	r2, #3
 800240a:	409a      	lsls	r2, r3
 800240c:	0013      	movs	r3, r2
 800240e:	43da      	mvns	r2, r3
 8002410:	693b      	ldr	r3, [r7, #16]
 8002412:	4013      	ands	r3, r2
 8002414:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002416:	683b      	ldr	r3, [r7, #0]
 8002418:	685b      	ldr	r3, [r3, #4]
 800241a:	2203      	movs	r2, #3
 800241c:	401a      	ands	r2, r3
 800241e:	697b      	ldr	r3, [r7, #20]
 8002420:	005b      	lsls	r3, r3, #1
 8002422:	409a      	lsls	r2, r3
 8002424:	0013      	movs	r3, r2
 8002426:	693a      	ldr	r2, [r7, #16]
 8002428:	4313      	orrs	r3, r2
 800242a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	693a      	ldr	r2, [r7, #16]
 8002430:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002432:	683b      	ldr	r3, [r7, #0]
 8002434:	685a      	ldr	r2, [r3, #4]
 8002436:	23c0      	movs	r3, #192	; 0xc0
 8002438:	029b      	lsls	r3, r3, #10
 800243a:	4013      	ands	r3, r2
 800243c:	d100      	bne.n	8002440 <HAL_GPIO_Init+0x17c>
 800243e:	e09a      	b.n	8002576 <HAL_GPIO_Init+0x2b2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002440:	4b54      	ldr	r3, [pc, #336]	; (8002594 <HAL_GPIO_Init+0x2d0>)
 8002442:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002444:	4b53      	ldr	r3, [pc, #332]	; (8002594 <HAL_GPIO_Init+0x2d0>)
 8002446:	2101      	movs	r1, #1
 8002448:	430a      	orrs	r2, r1
 800244a:	635a      	str	r2, [r3, #52]	; 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 800244c:	4a52      	ldr	r2, [pc, #328]	; (8002598 <HAL_GPIO_Init+0x2d4>)
 800244e:	697b      	ldr	r3, [r7, #20]
 8002450:	089b      	lsrs	r3, r3, #2
 8002452:	3302      	adds	r3, #2
 8002454:	009b      	lsls	r3, r3, #2
 8002456:	589b      	ldr	r3, [r3, r2]
 8002458:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 800245a:	697b      	ldr	r3, [r7, #20]
 800245c:	2203      	movs	r2, #3
 800245e:	4013      	ands	r3, r2
 8002460:	009b      	lsls	r3, r3, #2
 8002462:	220f      	movs	r2, #15
 8002464:	409a      	lsls	r2, r3
 8002466:	0013      	movs	r3, r2
 8002468:	43da      	mvns	r2, r3
 800246a:	693b      	ldr	r3, [r7, #16]
 800246c:	4013      	ands	r3, r2
 800246e:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8002470:	687a      	ldr	r2, [r7, #4]
 8002472:	23a0      	movs	r3, #160	; 0xa0
 8002474:	05db      	lsls	r3, r3, #23
 8002476:	429a      	cmp	r2, r3
 8002478:	d019      	beq.n	80024ae <HAL_GPIO_Init+0x1ea>
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	4a47      	ldr	r2, [pc, #284]	; (800259c <HAL_GPIO_Init+0x2d8>)
 800247e:	4293      	cmp	r3, r2
 8002480:	d013      	beq.n	80024aa <HAL_GPIO_Init+0x1e6>
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	4a46      	ldr	r2, [pc, #280]	; (80025a0 <HAL_GPIO_Init+0x2dc>)
 8002486:	4293      	cmp	r3, r2
 8002488:	d00d      	beq.n	80024a6 <HAL_GPIO_Init+0x1e2>
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	4a45      	ldr	r2, [pc, #276]	; (80025a4 <HAL_GPIO_Init+0x2e0>)
 800248e:	4293      	cmp	r3, r2
 8002490:	d007      	beq.n	80024a2 <HAL_GPIO_Init+0x1de>
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	4a44      	ldr	r2, [pc, #272]	; (80025a8 <HAL_GPIO_Init+0x2e4>)
 8002496:	4293      	cmp	r3, r2
 8002498:	d101      	bne.n	800249e <HAL_GPIO_Init+0x1da>
 800249a:	2305      	movs	r3, #5
 800249c:	e008      	b.n	80024b0 <HAL_GPIO_Init+0x1ec>
 800249e:	2306      	movs	r3, #6
 80024a0:	e006      	b.n	80024b0 <HAL_GPIO_Init+0x1ec>
 80024a2:	2303      	movs	r3, #3
 80024a4:	e004      	b.n	80024b0 <HAL_GPIO_Init+0x1ec>
 80024a6:	2302      	movs	r3, #2
 80024a8:	e002      	b.n	80024b0 <HAL_GPIO_Init+0x1ec>
 80024aa:	2301      	movs	r3, #1
 80024ac:	e000      	b.n	80024b0 <HAL_GPIO_Init+0x1ec>
 80024ae:	2300      	movs	r3, #0
 80024b0:	697a      	ldr	r2, [r7, #20]
 80024b2:	2103      	movs	r1, #3
 80024b4:	400a      	ands	r2, r1
 80024b6:	0092      	lsls	r2, r2, #2
 80024b8:	4093      	lsls	r3, r2
 80024ba:	693a      	ldr	r2, [r7, #16]
 80024bc:	4313      	orrs	r3, r2
 80024be:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80024c0:	4935      	ldr	r1, [pc, #212]	; (8002598 <HAL_GPIO_Init+0x2d4>)
 80024c2:	697b      	ldr	r3, [r7, #20]
 80024c4:	089b      	lsrs	r3, r3, #2
 80024c6:	3302      	adds	r3, #2
 80024c8:	009b      	lsls	r3, r3, #2
 80024ca:	693a      	ldr	r2, [r7, #16]
 80024cc:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80024ce:	4b37      	ldr	r3, [pc, #220]	; (80025ac <HAL_GPIO_Init+0x2e8>)
 80024d0:	689b      	ldr	r3, [r3, #8]
 80024d2:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	43da      	mvns	r2, r3
 80024d8:	693b      	ldr	r3, [r7, #16]
 80024da:	4013      	ands	r3, r2
 80024dc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80024de:	683b      	ldr	r3, [r7, #0]
 80024e0:	685a      	ldr	r2, [r3, #4]
 80024e2:	2380      	movs	r3, #128	; 0x80
 80024e4:	035b      	lsls	r3, r3, #13
 80024e6:	4013      	ands	r3, r2
 80024e8:	d003      	beq.n	80024f2 <HAL_GPIO_Init+0x22e>
        {
          temp |= iocurrent;
 80024ea:	693a      	ldr	r2, [r7, #16]
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	4313      	orrs	r3, r2
 80024f0:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80024f2:	4b2e      	ldr	r3, [pc, #184]	; (80025ac <HAL_GPIO_Init+0x2e8>)
 80024f4:	693a      	ldr	r2, [r7, #16]
 80024f6:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 80024f8:	4b2c      	ldr	r3, [pc, #176]	; (80025ac <HAL_GPIO_Init+0x2e8>)
 80024fa:	68db      	ldr	r3, [r3, #12]
 80024fc:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	43da      	mvns	r2, r3
 8002502:	693b      	ldr	r3, [r7, #16]
 8002504:	4013      	ands	r3, r2
 8002506:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002508:	683b      	ldr	r3, [r7, #0]
 800250a:	685a      	ldr	r2, [r3, #4]
 800250c:	2380      	movs	r3, #128	; 0x80
 800250e:	039b      	lsls	r3, r3, #14
 8002510:	4013      	ands	r3, r2
 8002512:	d003      	beq.n	800251c <HAL_GPIO_Init+0x258>
        {
          temp |= iocurrent;
 8002514:	693a      	ldr	r2, [r7, #16]
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	4313      	orrs	r3, r2
 800251a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800251c:	4b23      	ldr	r3, [pc, #140]	; (80025ac <HAL_GPIO_Init+0x2e8>)
 800251e:	693a      	ldr	r2, [r7, #16]
 8002520:	60da      	str	r2, [r3, #12]

        temp = EXTI->EMR;
 8002522:	4b22      	ldr	r3, [pc, #136]	; (80025ac <HAL_GPIO_Init+0x2e8>)
 8002524:	685b      	ldr	r3, [r3, #4]
 8002526:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	43da      	mvns	r2, r3
 800252c:	693b      	ldr	r3, [r7, #16]
 800252e:	4013      	ands	r3, r2
 8002530:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002532:	683b      	ldr	r3, [r7, #0]
 8002534:	685a      	ldr	r2, [r3, #4]
 8002536:	2380      	movs	r3, #128	; 0x80
 8002538:	029b      	lsls	r3, r3, #10
 800253a:	4013      	ands	r3, r2
 800253c:	d003      	beq.n	8002546 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800253e:	693a      	ldr	r2, [r7, #16]
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	4313      	orrs	r3, r2
 8002544:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8002546:	4b19      	ldr	r3, [pc, #100]	; (80025ac <HAL_GPIO_Init+0x2e8>)
 8002548:	693a      	ldr	r2, [r7, #16]
 800254a:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800254c:	4b17      	ldr	r3, [pc, #92]	; (80025ac <HAL_GPIO_Init+0x2e8>)
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	43da      	mvns	r2, r3
 8002556:	693b      	ldr	r3, [r7, #16]
 8002558:	4013      	ands	r3, r2
 800255a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800255c:	683b      	ldr	r3, [r7, #0]
 800255e:	685a      	ldr	r2, [r3, #4]
 8002560:	2380      	movs	r3, #128	; 0x80
 8002562:	025b      	lsls	r3, r3, #9
 8002564:	4013      	ands	r3, r2
 8002566:	d003      	beq.n	8002570 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002568:	693a      	ldr	r2, [r7, #16]
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	4313      	orrs	r3, r2
 800256e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8002570:	4b0e      	ldr	r3, [pc, #56]	; (80025ac <HAL_GPIO_Init+0x2e8>)
 8002572:	693a      	ldr	r2, [r7, #16]
 8002574:	601a      	str	r2, [r3, #0]
      }
    }
    position++;
 8002576:	697b      	ldr	r3, [r7, #20]
 8002578:	3301      	adds	r3, #1
 800257a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 800257c:	683b      	ldr	r3, [r7, #0]
 800257e:	681a      	ldr	r2, [r3, #0]
 8002580:	697b      	ldr	r3, [r7, #20]
 8002582:	40da      	lsrs	r2, r3
 8002584:	1e13      	subs	r3, r2, #0
 8002586:	d000      	beq.n	800258a <HAL_GPIO_Init+0x2c6>
 8002588:	e6a8      	b.n	80022dc <HAL_GPIO_Init+0x18>
  }
}
 800258a:	46c0      	nop			; (mov r8, r8)
 800258c:	46c0      	nop			; (mov r8, r8)
 800258e:	46bd      	mov	sp, r7
 8002590:	b006      	add	sp, #24
 8002592:	bd80      	pop	{r7, pc}
 8002594:	40021000 	.word	0x40021000
 8002598:	40010000 	.word	0x40010000
 800259c:	50000400 	.word	0x50000400
 80025a0:	50000800 	.word	0x50000800
 80025a4:	50000c00 	.word	0x50000c00
 80025a8:	50001c00 	.word	0x50001c00
 80025ac:	40010400 	.word	0x40010400

080025b0 <HAL_GPIO_ReadPin>:
  *                   This parameter can be GPIO_PIN_x where x can be (0..15).
  *                   All port bits are not necessarily available on all GPIOs.
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80025b0:	b580      	push	{r7, lr}
 80025b2:	b084      	sub	sp, #16
 80025b4:	af00      	add	r7, sp, #0
 80025b6:	6078      	str	r0, [r7, #4]
 80025b8:	000a      	movs	r2, r1
 80025ba:	1cbb      	adds	r3, r7, #2
 80025bc:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	691b      	ldr	r3, [r3, #16]
 80025c2:	1cba      	adds	r2, r7, #2
 80025c4:	8812      	ldrh	r2, [r2, #0]
 80025c6:	4013      	ands	r3, r2
 80025c8:	d004      	beq.n	80025d4 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 80025ca:	230f      	movs	r3, #15
 80025cc:	18fb      	adds	r3, r7, r3
 80025ce:	2201      	movs	r2, #1
 80025d0:	701a      	strb	r2, [r3, #0]
 80025d2:	e003      	b.n	80025dc <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80025d4:	230f      	movs	r3, #15
 80025d6:	18fb      	adds	r3, r7, r3
 80025d8:	2200      	movs	r2, #0
 80025da:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 80025dc:	230f      	movs	r3, #15
 80025de:	18fb      	adds	r3, r7, r3
 80025e0:	781b      	ldrb	r3, [r3, #0]
}
 80025e2:	0018      	movs	r0, r3
 80025e4:	46bd      	mov	sp, r7
 80025e6:	b004      	add	sp, #16
 80025e8:	bd80      	pop	{r7, pc}

080025ea <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80025ea:	b580      	push	{r7, lr}
 80025ec:	b082      	sub	sp, #8
 80025ee:	af00      	add	r7, sp, #0
 80025f0:	6078      	str	r0, [r7, #4]
 80025f2:	0008      	movs	r0, r1
 80025f4:	0011      	movs	r1, r2
 80025f6:	1cbb      	adds	r3, r7, #2
 80025f8:	1c02      	adds	r2, r0, #0
 80025fa:	801a      	strh	r2, [r3, #0]
 80025fc:	1c7b      	adds	r3, r7, #1
 80025fe:	1c0a      	adds	r2, r1, #0
 8002600:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002602:	1c7b      	adds	r3, r7, #1
 8002604:	781b      	ldrb	r3, [r3, #0]
 8002606:	2b00      	cmp	r3, #0
 8002608:	d004      	beq.n	8002614 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 800260a:	1cbb      	adds	r3, r7, #2
 800260c:	881a      	ldrh	r2, [r3, #0]
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 8002612:	e003      	b.n	800261c <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 8002614:	1cbb      	adds	r3, r7, #2
 8002616:	881a      	ldrh	r2, [r3, #0]
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800261c:	46c0      	nop			; (mov r8, r8)
 800261e:	46bd      	mov	sp, r7
 8002620:	b002      	add	sp, #8
 8002622:	bd80      	pop	{r7, pc}

08002624 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected to the EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002624:	b580      	push	{r7, lr}
 8002626:	b082      	sub	sp, #8
 8002628:	af00      	add	r7, sp, #0
 800262a:	0002      	movs	r2, r0
 800262c:	1dbb      	adds	r3, r7, #6
 800262e:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8002630:	4b09      	ldr	r3, [pc, #36]	; (8002658 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 8002632:	695b      	ldr	r3, [r3, #20]
 8002634:	1dba      	adds	r2, r7, #6
 8002636:	8812      	ldrh	r2, [r2, #0]
 8002638:	4013      	ands	r3, r2
 800263a:	d008      	beq.n	800264e <HAL_GPIO_EXTI_IRQHandler+0x2a>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800263c:	4b06      	ldr	r3, [pc, #24]	; (8002658 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 800263e:	1dba      	adds	r2, r7, #6
 8002640:	8812      	ldrh	r2, [r2, #0]
 8002642:	615a      	str	r2, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002644:	1dbb      	adds	r3, r7, #6
 8002646:	881b      	ldrh	r3, [r3, #0]
 8002648:	0018      	movs	r0, r3
 800264a:	f7fd ffed 	bl	8000628 <HAL_GPIO_EXTI_Callback>
  }
}
 800264e:	46c0      	nop			; (mov r8, r8)
 8002650:	46bd      	mov	sp, r7
 8002652:	b002      	add	sp, #8
 8002654:	bd80      	pop	{r7, pc}
 8002656:	46c0      	nop			; (mov r8, r8)
 8002658:	40010400 	.word	0x40010400

0800265c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800265c:	b5b0      	push	{r4, r5, r7, lr}
 800265e:	b08a      	sub	sp, #40	; 0x28
 8002660:	af00      	add	r7, sp, #0
 8002662:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	2b00      	cmp	r3, #0
 8002668:	d102      	bne.n	8002670 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800266a:	2301      	movs	r3, #1
 800266c:	f000 fb5a 	bl	8002d24 <HAL_RCC_OscConfig+0x6c8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002670:	4bce      	ldr	r3, [pc, #824]	; (80029ac <HAL_RCC_OscConfig+0x350>)
 8002672:	68db      	ldr	r3, [r3, #12]
 8002674:	220c      	movs	r2, #12
 8002676:	4013      	ands	r3, r2
 8002678:	623b      	str	r3, [r7, #32]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800267a:	4bcc      	ldr	r3, [pc, #816]	; (80029ac <HAL_RCC_OscConfig+0x350>)
 800267c:	68da      	ldr	r2, [r3, #12]
 800267e:	2380      	movs	r3, #128	; 0x80
 8002680:	025b      	lsls	r3, r3, #9
 8002682:	4013      	ands	r3, r2
 8002684:	61fb      	str	r3, [r7, #28]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	2201      	movs	r2, #1
 800268c:	4013      	ands	r3, r2
 800268e:	d100      	bne.n	8002692 <HAL_RCC_OscConfig+0x36>
 8002690:	e07c      	b.n	800278c <HAL_RCC_OscConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002692:	6a3b      	ldr	r3, [r7, #32]
 8002694:	2b08      	cmp	r3, #8
 8002696:	d007      	beq.n	80026a8 <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002698:	6a3b      	ldr	r3, [r7, #32]
 800269a:	2b0c      	cmp	r3, #12
 800269c:	d111      	bne.n	80026c2 <HAL_RCC_OscConfig+0x66>
 800269e:	69fa      	ldr	r2, [r7, #28]
 80026a0:	2380      	movs	r3, #128	; 0x80
 80026a2:	025b      	lsls	r3, r3, #9
 80026a4:	429a      	cmp	r2, r3
 80026a6:	d10c      	bne.n	80026c2 <HAL_RCC_OscConfig+0x66>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80026a8:	4bc0      	ldr	r3, [pc, #768]	; (80029ac <HAL_RCC_OscConfig+0x350>)
 80026aa:	681a      	ldr	r2, [r3, #0]
 80026ac:	2380      	movs	r3, #128	; 0x80
 80026ae:	029b      	lsls	r3, r3, #10
 80026b0:	4013      	ands	r3, r2
 80026b2:	d100      	bne.n	80026b6 <HAL_RCC_OscConfig+0x5a>
 80026b4:	e069      	b.n	800278a <HAL_RCC_OscConfig+0x12e>
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	685b      	ldr	r3, [r3, #4]
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d165      	bne.n	800278a <HAL_RCC_OscConfig+0x12e>
      {
        return HAL_ERROR;
 80026be:	2301      	movs	r3, #1
 80026c0:	e330      	b.n	8002d24 <HAL_RCC_OscConfig+0x6c8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	685a      	ldr	r2, [r3, #4]
 80026c6:	2380      	movs	r3, #128	; 0x80
 80026c8:	025b      	lsls	r3, r3, #9
 80026ca:	429a      	cmp	r2, r3
 80026cc:	d107      	bne.n	80026de <HAL_RCC_OscConfig+0x82>
 80026ce:	4bb7      	ldr	r3, [pc, #732]	; (80029ac <HAL_RCC_OscConfig+0x350>)
 80026d0:	681a      	ldr	r2, [r3, #0]
 80026d2:	4bb6      	ldr	r3, [pc, #728]	; (80029ac <HAL_RCC_OscConfig+0x350>)
 80026d4:	2180      	movs	r1, #128	; 0x80
 80026d6:	0249      	lsls	r1, r1, #9
 80026d8:	430a      	orrs	r2, r1
 80026da:	601a      	str	r2, [r3, #0]
 80026dc:	e027      	b.n	800272e <HAL_RCC_OscConfig+0xd2>
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	685a      	ldr	r2, [r3, #4]
 80026e2:	23a0      	movs	r3, #160	; 0xa0
 80026e4:	02db      	lsls	r3, r3, #11
 80026e6:	429a      	cmp	r2, r3
 80026e8:	d10e      	bne.n	8002708 <HAL_RCC_OscConfig+0xac>
 80026ea:	4bb0      	ldr	r3, [pc, #704]	; (80029ac <HAL_RCC_OscConfig+0x350>)
 80026ec:	681a      	ldr	r2, [r3, #0]
 80026ee:	4baf      	ldr	r3, [pc, #700]	; (80029ac <HAL_RCC_OscConfig+0x350>)
 80026f0:	2180      	movs	r1, #128	; 0x80
 80026f2:	02c9      	lsls	r1, r1, #11
 80026f4:	430a      	orrs	r2, r1
 80026f6:	601a      	str	r2, [r3, #0]
 80026f8:	4bac      	ldr	r3, [pc, #688]	; (80029ac <HAL_RCC_OscConfig+0x350>)
 80026fa:	681a      	ldr	r2, [r3, #0]
 80026fc:	4bab      	ldr	r3, [pc, #684]	; (80029ac <HAL_RCC_OscConfig+0x350>)
 80026fe:	2180      	movs	r1, #128	; 0x80
 8002700:	0249      	lsls	r1, r1, #9
 8002702:	430a      	orrs	r2, r1
 8002704:	601a      	str	r2, [r3, #0]
 8002706:	e012      	b.n	800272e <HAL_RCC_OscConfig+0xd2>
 8002708:	4ba8      	ldr	r3, [pc, #672]	; (80029ac <HAL_RCC_OscConfig+0x350>)
 800270a:	681a      	ldr	r2, [r3, #0]
 800270c:	4ba7      	ldr	r3, [pc, #668]	; (80029ac <HAL_RCC_OscConfig+0x350>)
 800270e:	49a8      	ldr	r1, [pc, #672]	; (80029b0 <HAL_RCC_OscConfig+0x354>)
 8002710:	400a      	ands	r2, r1
 8002712:	601a      	str	r2, [r3, #0]
 8002714:	4ba5      	ldr	r3, [pc, #660]	; (80029ac <HAL_RCC_OscConfig+0x350>)
 8002716:	681a      	ldr	r2, [r3, #0]
 8002718:	2380      	movs	r3, #128	; 0x80
 800271a:	025b      	lsls	r3, r3, #9
 800271c:	4013      	ands	r3, r2
 800271e:	60fb      	str	r3, [r7, #12]
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	4ba2      	ldr	r3, [pc, #648]	; (80029ac <HAL_RCC_OscConfig+0x350>)
 8002724:	681a      	ldr	r2, [r3, #0]
 8002726:	4ba1      	ldr	r3, [pc, #644]	; (80029ac <HAL_RCC_OscConfig+0x350>)
 8002728:	49a2      	ldr	r1, [pc, #648]	; (80029b4 <HAL_RCC_OscConfig+0x358>)
 800272a:	400a      	ands	r2, r1
 800272c:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	685b      	ldr	r3, [r3, #4]
 8002732:	2b00      	cmp	r3, #0
 8002734:	d014      	beq.n	8002760 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002736:	f7ff f93b 	bl	80019b0 <HAL_GetTick>
 800273a:	0003      	movs	r3, r0
 800273c:	61bb      	str	r3, [r7, #24]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800273e:	e008      	b.n	8002752 <HAL_RCC_OscConfig+0xf6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002740:	f7ff f936 	bl	80019b0 <HAL_GetTick>
 8002744:	0002      	movs	r2, r0
 8002746:	69bb      	ldr	r3, [r7, #24]
 8002748:	1ad3      	subs	r3, r2, r3
 800274a:	2b64      	cmp	r3, #100	; 0x64
 800274c:	d901      	bls.n	8002752 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800274e:	2303      	movs	r3, #3
 8002750:	e2e8      	b.n	8002d24 <HAL_RCC_OscConfig+0x6c8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002752:	4b96      	ldr	r3, [pc, #600]	; (80029ac <HAL_RCC_OscConfig+0x350>)
 8002754:	681a      	ldr	r2, [r3, #0]
 8002756:	2380      	movs	r3, #128	; 0x80
 8002758:	029b      	lsls	r3, r3, #10
 800275a:	4013      	ands	r3, r2
 800275c:	d0f0      	beq.n	8002740 <HAL_RCC_OscConfig+0xe4>
 800275e:	e015      	b.n	800278c <HAL_RCC_OscConfig+0x130>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002760:	f7ff f926 	bl	80019b0 <HAL_GetTick>
 8002764:	0003      	movs	r3, r0
 8002766:	61bb      	str	r3, [r7, #24]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002768:	e008      	b.n	800277c <HAL_RCC_OscConfig+0x120>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800276a:	f7ff f921 	bl	80019b0 <HAL_GetTick>
 800276e:	0002      	movs	r2, r0
 8002770:	69bb      	ldr	r3, [r7, #24]
 8002772:	1ad3      	subs	r3, r2, r3
 8002774:	2b64      	cmp	r3, #100	; 0x64
 8002776:	d901      	bls.n	800277c <HAL_RCC_OscConfig+0x120>
          {
            return HAL_TIMEOUT;
 8002778:	2303      	movs	r3, #3
 800277a:	e2d3      	b.n	8002d24 <HAL_RCC_OscConfig+0x6c8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800277c:	4b8b      	ldr	r3, [pc, #556]	; (80029ac <HAL_RCC_OscConfig+0x350>)
 800277e:	681a      	ldr	r2, [r3, #0]
 8002780:	2380      	movs	r3, #128	; 0x80
 8002782:	029b      	lsls	r3, r3, #10
 8002784:	4013      	ands	r3, r2
 8002786:	d1f0      	bne.n	800276a <HAL_RCC_OscConfig+0x10e>
 8002788:	e000      	b.n	800278c <HAL_RCC_OscConfig+0x130>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800278a:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	2202      	movs	r2, #2
 8002792:	4013      	ands	r3, r2
 8002794:	d100      	bne.n	8002798 <HAL_RCC_OscConfig+0x13c>
 8002796:	e08b      	b.n	80028b0 <HAL_RCC_OscConfig+0x254>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	68db      	ldr	r3, [r3, #12]
 800279c:	617b      	str	r3, [r7, #20]
      hsi_state &= ~RCC_CR_HSIOUTEN;
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 800279e:	6a3b      	ldr	r3, [r7, #32]
 80027a0:	2b04      	cmp	r3, #4
 80027a2:	d005      	beq.n	80027b0 <HAL_RCC_OscConfig+0x154>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 80027a4:	6a3b      	ldr	r3, [r7, #32]
 80027a6:	2b0c      	cmp	r3, #12
 80027a8:	d13e      	bne.n	8002828 <HAL_RCC_OscConfig+0x1cc>
 80027aa:	69fb      	ldr	r3, [r7, #28]
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d13b      	bne.n	8002828 <HAL_RCC_OscConfig+0x1cc>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 80027b0:	4b7e      	ldr	r3, [pc, #504]	; (80029ac <HAL_RCC_OscConfig+0x350>)
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	2204      	movs	r2, #4
 80027b6:	4013      	ands	r3, r2
 80027b8:	d004      	beq.n	80027c4 <HAL_RCC_OscConfig+0x168>
 80027ba:	697b      	ldr	r3, [r7, #20]
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d101      	bne.n	80027c4 <HAL_RCC_OscConfig+0x168>
      {
        return HAL_ERROR;
 80027c0:	2301      	movs	r3, #1
 80027c2:	e2af      	b.n	8002d24 <HAL_RCC_OscConfig+0x6c8>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80027c4:	4b79      	ldr	r3, [pc, #484]	; (80029ac <HAL_RCC_OscConfig+0x350>)
 80027c6:	685b      	ldr	r3, [r3, #4]
 80027c8:	4a7b      	ldr	r2, [pc, #492]	; (80029b8 <HAL_RCC_OscConfig+0x35c>)
 80027ca:	4013      	ands	r3, r2
 80027cc:	0019      	movs	r1, r3
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	691b      	ldr	r3, [r3, #16]
 80027d2:	021a      	lsls	r2, r3, #8
 80027d4:	4b75      	ldr	r3, [pc, #468]	; (80029ac <HAL_RCC_OscConfig+0x350>)
 80027d6:	430a      	orrs	r2, r1
 80027d8:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 80027da:	4b74      	ldr	r3, [pc, #464]	; (80029ac <HAL_RCC_OscConfig+0x350>)
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	2209      	movs	r2, #9
 80027e0:	4393      	bics	r3, r2
 80027e2:	0019      	movs	r1, r3
 80027e4:	4b71      	ldr	r3, [pc, #452]	; (80029ac <HAL_RCC_OscConfig+0x350>)
 80027e6:	697a      	ldr	r2, [r7, #20]
 80027e8:	430a      	orrs	r2, r1
 80027ea:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80027ec:	f000 fbe8 	bl	8002fc0 <HAL_RCC_GetSysClockFreq>
 80027f0:	0001      	movs	r1, r0
 80027f2:	4b6e      	ldr	r3, [pc, #440]	; (80029ac <HAL_RCC_OscConfig+0x350>)
 80027f4:	68db      	ldr	r3, [r3, #12]
 80027f6:	091b      	lsrs	r3, r3, #4
 80027f8:	220f      	movs	r2, #15
 80027fa:	4013      	ands	r3, r2
 80027fc:	4a6f      	ldr	r2, [pc, #444]	; (80029bc <HAL_RCC_OscConfig+0x360>)
 80027fe:	5cd3      	ldrb	r3, [r2, r3]
 8002800:	000a      	movs	r2, r1
 8002802:	40da      	lsrs	r2, r3
 8002804:	4b6e      	ldr	r3, [pc, #440]	; (80029c0 <HAL_RCC_OscConfig+0x364>)
 8002806:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 8002808:	4b6e      	ldr	r3, [pc, #440]	; (80029c4 <HAL_RCC_OscConfig+0x368>)
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	2513      	movs	r5, #19
 800280e:	197c      	adds	r4, r7, r5
 8002810:	0018      	movs	r0, r3
 8002812:	f7ff f887 	bl	8001924 <HAL_InitTick>
 8002816:	0003      	movs	r3, r0
 8002818:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 800281a:	197b      	adds	r3, r7, r5
 800281c:	781b      	ldrb	r3, [r3, #0]
 800281e:	2b00      	cmp	r3, #0
 8002820:	d046      	beq.n	80028b0 <HAL_RCC_OscConfig+0x254>
      {
        return status;
 8002822:	197b      	adds	r3, r7, r5
 8002824:	781b      	ldrb	r3, [r3, #0]
 8002826:	e27d      	b.n	8002d24 <HAL_RCC_OscConfig+0x6c8>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 8002828:	697b      	ldr	r3, [r7, #20]
 800282a:	2b00      	cmp	r3, #0
 800282c:	d027      	beq.n	800287e <HAL_RCC_OscConfig+0x222>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 800282e:	4b5f      	ldr	r3, [pc, #380]	; (80029ac <HAL_RCC_OscConfig+0x350>)
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	2209      	movs	r2, #9
 8002834:	4393      	bics	r3, r2
 8002836:	0019      	movs	r1, r3
 8002838:	4b5c      	ldr	r3, [pc, #368]	; (80029ac <HAL_RCC_OscConfig+0x350>)
 800283a:	697a      	ldr	r2, [r7, #20]
 800283c:	430a      	orrs	r2, r1
 800283e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002840:	f7ff f8b6 	bl	80019b0 <HAL_GetTick>
 8002844:	0003      	movs	r3, r0
 8002846:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002848:	e008      	b.n	800285c <HAL_RCC_OscConfig+0x200>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800284a:	f7ff f8b1 	bl	80019b0 <HAL_GetTick>
 800284e:	0002      	movs	r2, r0
 8002850:	69bb      	ldr	r3, [r7, #24]
 8002852:	1ad3      	subs	r3, r2, r3
 8002854:	2b02      	cmp	r3, #2
 8002856:	d901      	bls.n	800285c <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 8002858:	2303      	movs	r3, #3
 800285a:	e263      	b.n	8002d24 <HAL_RCC_OscConfig+0x6c8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800285c:	4b53      	ldr	r3, [pc, #332]	; (80029ac <HAL_RCC_OscConfig+0x350>)
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	2204      	movs	r2, #4
 8002862:	4013      	ands	r3, r2
 8002864:	d0f1      	beq.n	800284a <HAL_RCC_OscConfig+0x1ee>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002866:	4b51      	ldr	r3, [pc, #324]	; (80029ac <HAL_RCC_OscConfig+0x350>)
 8002868:	685b      	ldr	r3, [r3, #4]
 800286a:	4a53      	ldr	r2, [pc, #332]	; (80029b8 <HAL_RCC_OscConfig+0x35c>)
 800286c:	4013      	ands	r3, r2
 800286e:	0019      	movs	r1, r3
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	691b      	ldr	r3, [r3, #16]
 8002874:	021a      	lsls	r2, r3, #8
 8002876:	4b4d      	ldr	r3, [pc, #308]	; (80029ac <HAL_RCC_OscConfig+0x350>)
 8002878:	430a      	orrs	r2, r1
 800287a:	605a      	str	r2, [r3, #4]
 800287c:	e018      	b.n	80028b0 <HAL_RCC_OscConfig+0x254>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800287e:	4b4b      	ldr	r3, [pc, #300]	; (80029ac <HAL_RCC_OscConfig+0x350>)
 8002880:	681a      	ldr	r2, [r3, #0]
 8002882:	4b4a      	ldr	r3, [pc, #296]	; (80029ac <HAL_RCC_OscConfig+0x350>)
 8002884:	2101      	movs	r1, #1
 8002886:	438a      	bics	r2, r1
 8002888:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800288a:	f7ff f891 	bl	80019b0 <HAL_GetTick>
 800288e:	0003      	movs	r3, r0
 8002890:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002892:	e008      	b.n	80028a6 <HAL_RCC_OscConfig+0x24a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002894:	f7ff f88c 	bl	80019b0 <HAL_GetTick>
 8002898:	0002      	movs	r2, r0
 800289a:	69bb      	ldr	r3, [r7, #24]
 800289c:	1ad3      	subs	r3, r2, r3
 800289e:	2b02      	cmp	r3, #2
 80028a0:	d901      	bls.n	80028a6 <HAL_RCC_OscConfig+0x24a>
          {
            return HAL_TIMEOUT;
 80028a2:	2303      	movs	r3, #3
 80028a4:	e23e      	b.n	8002d24 <HAL_RCC_OscConfig+0x6c8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80028a6:	4b41      	ldr	r3, [pc, #260]	; (80029ac <HAL_RCC_OscConfig+0x350>)
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	2204      	movs	r2, #4
 80028ac:	4013      	ands	r3, r2
 80028ae:	d1f1      	bne.n	8002894 <HAL_RCC_OscConfig+0x238>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	2210      	movs	r2, #16
 80028b6:	4013      	ands	r3, r2
 80028b8:	d100      	bne.n	80028bc <HAL_RCC_OscConfig+0x260>
 80028ba:	e0a1      	b.n	8002a00 <HAL_RCC_OscConfig+0x3a4>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80028bc:	6a3b      	ldr	r3, [r7, #32]
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d140      	bne.n	8002944 <HAL_RCC_OscConfig+0x2e8>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80028c2:	4b3a      	ldr	r3, [pc, #232]	; (80029ac <HAL_RCC_OscConfig+0x350>)
 80028c4:	681a      	ldr	r2, [r3, #0]
 80028c6:	2380      	movs	r3, #128	; 0x80
 80028c8:	009b      	lsls	r3, r3, #2
 80028ca:	4013      	ands	r3, r2
 80028cc:	d005      	beq.n	80028da <HAL_RCC_OscConfig+0x27e>
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	699b      	ldr	r3, [r3, #24]
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d101      	bne.n	80028da <HAL_RCC_OscConfig+0x27e>
      {
        return HAL_ERROR;
 80028d6:	2301      	movs	r3, #1
 80028d8:	e224      	b.n	8002d24 <HAL_RCC_OscConfig+0x6c8>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80028da:	4b34      	ldr	r3, [pc, #208]	; (80029ac <HAL_RCC_OscConfig+0x350>)
 80028dc:	685b      	ldr	r3, [r3, #4]
 80028de:	4a3a      	ldr	r2, [pc, #232]	; (80029c8 <HAL_RCC_OscConfig+0x36c>)
 80028e0:	4013      	ands	r3, r2
 80028e2:	0019      	movs	r1, r3
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	6a1a      	ldr	r2, [r3, #32]
 80028e8:	4b30      	ldr	r3, [pc, #192]	; (80029ac <HAL_RCC_OscConfig+0x350>)
 80028ea:	430a      	orrs	r2, r1
 80028ec:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80028ee:	4b2f      	ldr	r3, [pc, #188]	; (80029ac <HAL_RCC_OscConfig+0x350>)
 80028f0:	685b      	ldr	r3, [r3, #4]
 80028f2:	021b      	lsls	r3, r3, #8
 80028f4:	0a19      	lsrs	r1, r3, #8
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	69db      	ldr	r3, [r3, #28]
 80028fa:	061a      	lsls	r2, r3, #24
 80028fc:	4b2b      	ldr	r3, [pc, #172]	; (80029ac <HAL_RCC_OscConfig+0x350>)
 80028fe:	430a      	orrs	r2, r1
 8002900:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	6a1b      	ldr	r3, [r3, #32]
 8002906:	0b5b      	lsrs	r3, r3, #13
 8002908:	3301      	adds	r3, #1
 800290a:	2280      	movs	r2, #128	; 0x80
 800290c:	0212      	lsls	r2, r2, #8
 800290e:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8002910:	4b26      	ldr	r3, [pc, #152]	; (80029ac <HAL_RCC_OscConfig+0x350>)
 8002912:	68db      	ldr	r3, [r3, #12]
 8002914:	091b      	lsrs	r3, r3, #4
 8002916:	210f      	movs	r1, #15
 8002918:	400b      	ands	r3, r1
 800291a:	4928      	ldr	r1, [pc, #160]	; (80029bc <HAL_RCC_OscConfig+0x360>)
 800291c:	5ccb      	ldrb	r3, [r1, r3]
 800291e:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8002920:	4b27      	ldr	r3, [pc, #156]	; (80029c0 <HAL_RCC_OscConfig+0x364>)
 8002922:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 8002924:	4b27      	ldr	r3, [pc, #156]	; (80029c4 <HAL_RCC_OscConfig+0x368>)
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	2513      	movs	r5, #19
 800292a:	197c      	adds	r4, r7, r5
 800292c:	0018      	movs	r0, r3
 800292e:	f7fe fff9 	bl	8001924 <HAL_InitTick>
 8002932:	0003      	movs	r3, r0
 8002934:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 8002936:	197b      	adds	r3, r7, r5
 8002938:	781b      	ldrb	r3, [r3, #0]
 800293a:	2b00      	cmp	r3, #0
 800293c:	d060      	beq.n	8002a00 <HAL_RCC_OscConfig+0x3a4>
        {
          return status;
 800293e:	197b      	adds	r3, r7, r5
 8002940:	781b      	ldrb	r3, [r3, #0]
 8002942:	e1ef      	b.n	8002d24 <HAL_RCC_OscConfig+0x6c8>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	699b      	ldr	r3, [r3, #24]
 8002948:	2b00      	cmp	r3, #0
 800294a:	d03f      	beq.n	80029cc <HAL_RCC_OscConfig+0x370>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800294c:	4b17      	ldr	r3, [pc, #92]	; (80029ac <HAL_RCC_OscConfig+0x350>)
 800294e:	681a      	ldr	r2, [r3, #0]
 8002950:	4b16      	ldr	r3, [pc, #88]	; (80029ac <HAL_RCC_OscConfig+0x350>)
 8002952:	2180      	movs	r1, #128	; 0x80
 8002954:	0049      	lsls	r1, r1, #1
 8002956:	430a      	orrs	r2, r1
 8002958:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800295a:	f7ff f829 	bl	80019b0 <HAL_GetTick>
 800295e:	0003      	movs	r3, r0
 8002960:	61bb      	str	r3, [r7, #24]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8002962:	e008      	b.n	8002976 <HAL_RCC_OscConfig+0x31a>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002964:	f7ff f824 	bl	80019b0 <HAL_GetTick>
 8002968:	0002      	movs	r2, r0
 800296a:	69bb      	ldr	r3, [r7, #24]
 800296c:	1ad3      	subs	r3, r2, r3
 800296e:	2b02      	cmp	r3, #2
 8002970:	d901      	bls.n	8002976 <HAL_RCC_OscConfig+0x31a>
          {
            return HAL_TIMEOUT;
 8002972:	2303      	movs	r3, #3
 8002974:	e1d6      	b.n	8002d24 <HAL_RCC_OscConfig+0x6c8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8002976:	4b0d      	ldr	r3, [pc, #52]	; (80029ac <HAL_RCC_OscConfig+0x350>)
 8002978:	681a      	ldr	r2, [r3, #0]
 800297a:	2380      	movs	r3, #128	; 0x80
 800297c:	009b      	lsls	r3, r3, #2
 800297e:	4013      	ands	r3, r2
 8002980:	d0f0      	beq.n	8002964 <HAL_RCC_OscConfig+0x308>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002982:	4b0a      	ldr	r3, [pc, #40]	; (80029ac <HAL_RCC_OscConfig+0x350>)
 8002984:	685b      	ldr	r3, [r3, #4]
 8002986:	4a10      	ldr	r2, [pc, #64]	; (80029c8 <HAL_RCC_OscConfig+0x36c>)
 8002988:	4013      	ands	r3, r2
 800298a:	0019      	movs	r1, r3
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	6a1a      	ldr	r2, [r3, #32]
 8002990:	4b06      	ldr	r3, [pc, #24]	; (80029ac <HAL_RCC_OscConfig+0x350>)
 8002992:	430a      	orrs	r2, r1
 8002994:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002996:	4b05      	ldr	r3, [pc, #20]	; (80029ac <HAL_RCC_OscConfig+0x350>)
 8002998:	685b      	ldr	r3, [r3, #4]
 800299a:	021b      	lsls	r3, r3, #8
 800299c:	0a19      	lsrs	r1, r3, #8
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	69db      	ldr	r3, [r3, #28]
 80029a2:	061a      	lsls	r2, r3, #24
 80029a4:	4b01      	ldr	r3, [pc, #4]	; (80029ac <HAL_RCC_OscConfig+0x350>)
 80029a6:	430a      	orrs	r2, r1
 80029a8:	605a      	str	r2, [r3, #4]
 80029aa:	e029      	b.n	8002a00 <HAL_RCC_OscConfig+0x3a4>
 80029ac:	40021000 	.word	0x40021000
 80029b0:	fffeffff 	.word	0xfffeffff
 80029b4:	fffbffff 	.word	0xfffbffff
 80029b8:	ffffe0ff 	.word	0xffffe0ff
 80029bc:	08006124 	.word	0x08006124
 80029c0:	20000010 	.word	0x20000010
 80029c4:	20000014 	.word	0x20000014
 80029c8:	ffff1fff 	.word	0xffff1fff
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80029cc:	4bbe      	ldr	r3, [pc, #760]	; (8002cc8 <HAL_RCC_OscConfig+0x66c>)
 80029ce:	681a      	ldr	r2, [r3, #0]
 80029d0:	4bbd      	ldr	r3, [pc, #756]	; (8002cc8 <HAL_RCC_OscConfig+0x66c>)
 80029d2:	49be      	ldr	r1, [pc, #760]	; (8002ccc <HAL_RCC_OscConfig+0x670>)
 80029d4:	400a      	ands	r2, r1
 80029d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029d8:	f7fe ffea 	bl	80019b0 <HAL_GetTick>
 80029dc:	0003      	movs	r3, r0
 80029de:	61bb      	str	r3, [r7, #24]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 80029e0:	e008      	b.n	80029f4 <HAL_RCC_OscConfig+0x398>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80029e2:	f7fe ffe5 	bl	80019b0 <HAL_GetTick>
 80029e6:	0002      	movs	r2, r0
 80029e8:	69bb      	ldr	r3, [r7, #24]
 80029ea:	1ad3      	subs	r3, r2, r3
 80029ec:	2b02      	cmp	r3, #2
 80029ee:	d901      	bls.n	80029f4 <HAL_RCC_OscConfig+0x398>
          {
            return HAL_TIMEOUT;
 80029f0:	2303      	movs	r3, #3
 80029f2:	e197      	b.n	8002d24 <HAL_RCC_OscConfig+0x6c8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 80029f4:	4bb4      	ldr	r3, [pc, #720]	; (8002cc8 <HAL_RCC_OscConfig+0x66c>)
 80029f6:	681a      	ldr	r2, [r3, #0]
 80029f8:	2380      	movs	r3, #128	; 0x80
 80029fa:	009b      	lsls	r3, r3, #2
 80029fc:	4013      	ands	r3, r2
 80029fe:	d1f0      	bne.n	80029e2 <HAL_RCC_OscConfig+0x386>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	2208      	movs	r2, #8
 8002a06:	4013      	ands	r3, r2
 8002a08:	d036      	beq.n	8002a78 <HAL_RCC_OscConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	695b      	ldr	r3, [r3, #20]
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d019      	beq.n	8002a46 <HAL_RCC_OscConfig+0x3ea>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002a12:	4bad      	ldr	r3, [pc, #692]	; (8002cc8 <HAL_RCC_OscConfig+0x66c>)
 8002a14:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002a16:	4bac      	ldr	r3, [pc, #688]	; (8002cc8 <HAL_RCC_OscConfig+0x66c>)
 8002a18:	2101      	movs	r1, #1
 8002a1a:	430a      	orrs	r2, r1
 8002a1c:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002a1e:	f7fe ffc7 	bl	80019b0 <HAL_GetTick>
 8002a22:	0003      	movs	r3, r0
 8002a24:	61bb      	str	r3, [r7, #24]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002a26:	e008      	b.n	8002a3a <HAL_RCC_OscConfig+0x3de>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002a28:	f7fe ffc2 	bl	80019b0 <HAL_GetTick>
 8002a2c:	0002      	movs	r2, r0
 8002a2e:	69bb      	ldr	r3, [r7, #24]
 8002a30:	1ad3      	subs	r3, r2, r3
 8002a32:	2b02      	cmp	r3, #2
 8002a34:	d901      	bls.n	8002a3a <HAL_RCC_OscConfig+0x3de>
        {
          return HAL_TIMEOUT;
 8002a36:	2303      	movs	r3, #3
 8002a38:	e174      	b.n	8002d24 <HAL_RCC_OscConfig+0x6c8>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002a3a:	4ba3      	ldr	r3, [pc, #652]	; (8002cc8 <HAL_RCC_OscConfig+0x66c>)
 8002a3c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002a3e:	2202      	movs	r2, #2
 8002a40:	4013      	ands	r3, r2
 8002a42:	d0f1      	beq.n	8002a28 <HAL_RCC_OscConfig+0x3cc>
 8002a44:	e018      	b.n	8002a78 <HAL_RCC_OscConfig+0x41c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002a46:	4ba0      	ldr	r3, [pc, #640]	; (8002cc8 <HAL_RCC_OscConfig+0x66c>)
 8002a48:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002a4a:	4b9f      	ldr	r3, [pc, #636]	; (8002cc8 <HAL_RCC_OscConfig+0x66c>)
 8002a4c:	2101      	movs	r1, #1
 8002a4e:	438a      	bics	r2, r1
 8002a50:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002a52:	f7fe ffad 	bl	80019b0 <HAL_GetTick>
 8002a56:	0003      	movs	r3, r0
 8002a58:	61bb      	str	r3, [r7, #24]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002a5a:	e008      	b.n	8002a6e <HAL_RCC_OscConfig+0x412>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002a5c:	f7fe ffa8 	bl	80019b0 <HAL_GetTick>
 8002a60:	0002      	movs	r2, r0
 8002a62:	69bb      	ldr	r3, [r7, #24]
 8002a64:	1ad3      	subs	r3, r2, r3
 8002a66:	2b02      	cmp	r3, #2
 8002a68:	d901      	bls.n	8002a6e <HAL_RCC_OscConfig+0x412>
        {
          return HAL_TIMEOUT;
 8002a6a:	2303      	movs	r3, #3
 8002a6c:	e15a      	b.n	8002d24 <HAL_RCC_OscConfig+0x6c8>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002a6e:	4b96      	ldr	r3, [pc, #600]	; (8002cc8 <HAL_RCC_OscConfig+0x66c>)
 8002a70:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002a72:	2202      	movs	r2, #2
 8002a74:	4013      	ands	r3, r2
 8002a76:	d1f1      	bne.n	8002a5c <HAL_RCC_OscConfig+0x400>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	2204      	movs	r2, #4
 8002a7e:	4013      	ands	r3, r2
 8002a80:	d100      	bne.n	8002a84 <HAL_RCC_OscConfig+0x428>
 8002a82:	e0ae      	b.n	8002be2 <HAL_RCC_OscConfig+0x586>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002a84:	2027      	movs	r0, #39	; 0x27
 8002a86:	183b      	adds	r3, r7, r0
 8002a88:	2200      	movs	r2, #0
 8002a8a:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002a8c:	4b8e      	ldr	r3, [pc, #568]	; (8002cc8 <HAL_RCC_OscConfig+0x66c>)
 8002a8e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002a90:	2380      	movs	r3, #128	; 0x80
 8002a92:	055b      	lsls	r3, r3, #21
 8002a94:	4013      	ands	r3, r2
 8002a96:	d109      	bne.n	8002aac <HAL_RCC_OscConfig+0x450>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002a98:	4b8b      	ldr	r3, [pc, #556]	; (8002cc8 <HAL_RCC_OscConfig+0x66c>)
 8002a9a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002a9c:	4b8a      	ldr	r3, [pc, #552]	; (8002cc8 <HAL_RCC_OscConfig+0x66c>)
 8002a9e:	2180      	movs	r1, #128	; 0x80
 8002aa0:	0549      	lsls	r1, r1, #21
 8002aa2:	430a      	orrs	r2, r1
 8002aa4:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 8002aa6:	183b      	adds	r3, r7, r0
 8002aa8:	2201      	movs	r2, #1
 8002aaa:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002aac:	4b88      	ldr	r3, [pc, #544]	; (8002cd0 <HAL_RCC_OscConfig+0x674>)
 8002aae:	681a      	ldr	r2, [r3, #0]
 8002ab0:	2380      	movs	r3, #128	; 0x80
 8002ab2:	005b      	lsls	r3, r3, #1
 8002ab4:	4013      	ands	r3, r2
 8002ab6:	d11a      	bne.n	8002aee <HAL_RCC_OscConfig+0x492>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002ab8:	4b85      	ldr	r3, [pc, #532]	; (8002cd0 <HAL_RCC_OscConfig+0x674>)
 8002aba:	681a      	ldr	r2, [r3, #0]
 8002abc:	4b84      	ldr	r3, [pc, #528]	; (8002cd0 <HAL_RCC_OscConfig+0x674>)
 8002abe:	2180      	movs	r1, #128	; 0x80
 8002ac0:	0049      	lsls	r1, r1, #1
 8002ac2:	430a      	orrs	r2, r1
 8002ac4:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002ac6:	f7fe ff73 	bl	80019b0 <HAL_GetTick>
 8002aca:	0003      	movs	r3, r0
 8002acc:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ace:	e008      	b.n	8002ae2 <HAL_RCC_OscConfig+0x486>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002ad0:	f7fe ff6e 	bl	80019b0 <HAL_GetTick>
 8002ad4:	0002      	movs	r2, r0
 8002ad6:	69bb      	ldr	r3, [r7, #24]
 8002ad8:	1ad3      	subs	r3, r2, r3
 8002ada:	2b64      	cmp	r3, #100	; 0x64
 8002adc:	d901      	bls.n	8002ae2 <HAL_RCC_OscConfig+0x486>
        {
          return HAL_TIMEOUT;
 8002ade:	2303      	movs	r3, #3
 8002ae0:	e120      	b.n	8002d24 <HAL_RCC_OscConfig+0x6c8>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ae2:	4b7b      	ldr	r3, [pc, #492]	; (8002cd0 <HAL_RCC_OscConfig+0x674>)
 8002ae4:	681a      	ldr	r2, [r3, #0]
 8002ae6:	2380      	movs	r3, #128	; 0x80
 8002ae8:	005b      	lsls	r3, r3, #1
 8002aea:	4013      	ands	r3, r2
 8002aec:	d0f0      	beq.n	8002ad0 <HAL_RCC_OscConfig+0x474>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	689a      	ldr	r2, [r3, #8]
 8002af2:	2380      	movs	r3, #128	; 0x80
 8002af4:	005b      	lsls	r3, r3, #1
 8002af6:	429a      	cmp	r2, r3
 8002af8:	d107      	bne.n	8002b0a <HAL_RCC_OscConfig+0x4ae>
 8002afa:	4b73      	ldr	r3, [pc, #460]	; (8002cc8 <HAL_RCC_OscConfig+0x66c>)
 8002afc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002afe:	4b72      	ldr	r3, [pc, #456]	; (8002cc8 <HAL_RCC_OscConfig+0x66c>)
 8002b00:	2180      	movs	r1, #128	; 0x80
 8002b02:	0049      	lsls	r1, r1, #1
 8002b04:	430a      	orrs	r2, r1
 8002b06:	651a      	str	r2, [r3, #80]	; 0x50
 8002b08:	e031      	b.n	8002b6e <HAL_RCC_OscConfig+0x512>
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	689b      	ldr	r3, [r3, #8]
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d10c      	bne.n	8002b2c <HAL_RCC_OscConfig+0x4d0>
 8002b12:	4b6d      	ldr	r3, [pc, #436]	; (8002cc8 <HAL_RCC_OscConfig+0x66c>)
 8002b14:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002b16:	4b6c      	ldr	r3, [pc, #432]	; (8002cc8 <HAL_RCC_OscConfig+0x66c>)
 8002b18:	496c      	ldr	r1, [pc, #432]	; (8002ccc <HAL_RCC_OscConfig+0x670>)
 8002b1a:	400a      	ands	r2, r1
 8002b1c:	651a      	str	r2, [r3, #80]	; 0x50
 8002b1e:	4b6a      	ldr	r3, [pc, #424]	; (8002cc8 <HAL_RCC_OscConfig+0x66c>)
 8002b20:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002b22:	4b69      	ldr	r3, [pc, #420]	; (8002cc8 <HAL_RCC_OscConfig+0x66c>)
 8002b24:	496b      	ldr	r1, [pc, #428]	; (8002cd4 <HAL_RCC_OscConfig+0x678>)
 8002b26:	400a      	ands	r2, r1
 8002b28:	651a      	str	r2, [r3, #80]	; 0x50
 8002b2a:	e020      	b.n	8002b6e <HAL_RCC_OscConfig+0x512>
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	689a      	ldr	r2, [r3, #8]
 8002b30:	23a0      	movs	r3, #160	; 0xa0
 8002b32:	00db      	lsls	r3, r3, #3
 8002b34:	429a      	cmp	r2, r3
 8002b36:	d10e      	bne.n	8002b56 <HAL_RCC_OscConfig+0x4fa>
 8002b38:	4b63      	ldr	r3, [pc, #396]	; (8002cc8 <HAL_RCC_OscConfig+0x66c>)
 8002b3a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002b3c:	4b62      	ldr	r3, [pc, #392]	; (8002cc8 <HAL_RCC_OscConfig+0x66c>)
 8002b3e:	2180      	movs	r1, #128	; 0x80
 8002b40:	00c9      	lsls	r1, r1, #3
 8002b42:	430a      	orrs	r2, r1
 8002b44:	651a      	str	r2, [r3, #80]	; 0x50
 8002b46:	4b60      	ldr	r3, [pc, #384]	; (8002cc8 <HAL_RCC_OscConfig+0x66c>)
 8002b48:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002b4a:	4b5f      	ldr	r3, [pc, #380]	; (8002cc8 <HAL_RCC_OscConfig+0x66c>)
 8002b4c:	2180      	movs	r1, #128	; 0x80
 8002b4e:	0049      	lsls	r1, r1, #1
 8002b50:	430a      	orrs	r2, r1
 8002b52:	651a      	str	r2, [r3, #80]	; 0x50
 8002b54:	e00b      	b.n	8002b6e <HAL_RCC_OscConfig+0x512>
 8002b56:	4b5c      	ldr	r3, [pc, #368]	; (8002cc8 <HAL_RCC_OscConfig+0x66c>)
 8002b58:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002b5a:	4b5b      	ldr	r3, [pc, #364]	; (8002cc8 <HAL_RCC_OscConfig+0x66c>)
 8002b5c:	495b      	ldr	r1, [pc, #364]	; (8002ccc <HAL_RCC_OscConfig+0x670>)
 8002b5e:	400a      	ands	r2, r1
 8002b60:	651a      	str	r2, [r3, #80]	; 0x50
 8002b62:	4b59      	ldr	r3, [pc, #356]	; (8002cc8 <HAL_RCC_OscConfig+0x66c>)
 8002b64:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002b66:	4b58      	ldr	r3, [pc, #352]	; (8002cc8 <HAL_RCC_OscConfig+0x66c>)
 8002b68:	495a      	ldr	r1, [pc, #360]	; (8002cd4 <HAL_RCC_OscConfig+0x678>)
 8002b6a:	400a      	ands	r2, r1
 8002b6c:	651a      	str	r2, [r3, #80]	; 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	689b      	ldr	r3, [r3, #8]
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d015      	beq.n	8002ba2 <HAL_RCC_OscConfig+0x546>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002b76:	f7fe ff1b 	bl	80019b0 <HAL_GetTick>
 8002b7a:	0003      	movs	r3, r0
 8002b7c:	61bb      	str	r3, [r7, #24]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002b7e:	e009      	b.n	8002b94 <HAL_RCC_OscConfig+0x538>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002b80:	f7fe ff16 	bl	80019b0 <HAL_GetTick>
 8002b84:	0002      	movs	r2, r0
 8002b86:	69bb      	ldr	r3, [r7, #24]
 8002b88:	1ad3      	subs	r3, r2, r3
 8002b8a:	4a53      	ldr	r2, [pc, #332]	; (8002cd8 <HAL_RCC_OscConfig+0x67c>)
 8002b8c:	4293      	cmp	r3, r2
 8002b8e:	d901      	bls.n	8002b94 <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 8002b90:	2303      	movs	r3, #3
 8002b92:	e0c7      	b.n	8002d24 <HAL_RCC_OscConfig+0x6c8>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002b94:	4b4c      	ldr	r3, [pc, #304]	; (8002cc8 <HAL_RCC_OscConfig+0x66c>)
 8002b96:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002b98:	2380      	movs	r3, #128	; 0x80
 8002b9a:	009b      	lsls	r3, r3, #2
 8002b9c:	4013      	ands	r3, r2
 8002b9e:	d0ef      	beq.n	8002b80 <HAL_RCC_OscConfig+0x524>
 8002ba0:	e014      	b.n	8002bcc <HAL_RCC_OscConfig+0x570>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002ba2:	f7fe ff05 	bl	80019b0 <HAL_GetTick>
 8002ba6:	0003      	movs	r3, r0
 8002ba8:	61bb      	str	r3, [r7, #24]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002baa:	e009      	b.n	8002bc0 <HAL_RCC_OscConfig+0x564>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002bac:	f7fe ff00 	bl	80019b0 <HAL_GetTick>
 8002bb0:	0002      	movs	r2, r0
 8002bb2:	69bb      	ldr	r3, [r7, #24]
 8002bb4:	1ad3      	subs	r3, r2, r3
 8002bb6:	4a48      	ldr	r2, [pc, #288]	; (8002cd8 <HAL_RCC_OscConfig+0x67c>)
 8002bb8:	4293      	cmp	r3, r2
 8002bba:	d901      	bls.n	8002bc0 <HAL_RCC_OscConfig+0x564>
        {
          return HAL_TIMEOUT;
 8002bbc:	2303      	movs	r3, #3
 8002bbe:	e0b1      	b.n	8002d24 <HAL_RCC_OscConfig+0x6c8>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002bc0:	4b41      	ldr	r3, [pc, #260]	; (8002cc8 <HAL_RCC_OscConfig+0x66c>)
 8002bc2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002bc4:	2380      	movs	r3, #128	; 0x80
 8002bc6:	009b      	lsls	r3, r3, #2
 8002bc8:	4013      	ands	r3, r2
 8002bca:	d1ef      	bne.n	8002bac <HAL_RCC_OscConfig+0x550>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002bcc:	2327      	movs	r3, #39	; 0x27
 8002bce:	18fb      	adds	r3, r7, r3
 8002bd0:	781b      	ldrb	r3, [r3, #0]
 8002bd2:	2b01      	cmp	r3, #1
 8002bd4:	d105      	bne.n	8002be2 <HAL_RCC_OscConfig+0x586>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002bd6:	4b3c      	ldr	r3, [pc, #240]	; (8002cc8 <HAL_RCC_OscConfig+0x66c>)
 8002bd8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002bda:	4b3b      	ldr	r3, [pc, #236]	; (8002cc8 <HAL_RCC_OscConfig+0x66c>)
 8002bdc:	493f      	ldr	r1, [pc, #252]	; (8002cdc <HAL_RCC_OscConfig+0x680>)
 8002bde:	400a      	ands	r2, r1
 8002be0:	639a      	str	r2, [r3, #56]	; 0x38
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d100      	bne.n	8002bec <HAL_RCC_OscConfig+0x590>
 8002bea:	e09a      	b.n	8002d22 <HAL_RCC_OscConfig+0x6c6>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002bec:	6a3b      	ldr	r3, [r7, #32]
 8002bee:	2b0c      	cmp	r3, #12
 8002bf0:	d064      	beq.n	8002cbc <HAL_RCC_OscConfig+0x660>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bf6:	2b02      	cmp	r3, #2
 8002bf8:	d145      	bne.n	8002c86 <HAL_RCC_OscConfig+0x62a>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002bfa:	4b33      	ldr	r3, [pc, #204]	; (8002cc8 <HAL_RCC_OscConfig+0x66c>)
 8002bfc:	681a      	ldr	r2, [r3, #0]
 8002bfe:	4b32      	ldr	r3, [pc, #200]	; (8002cc8 <HAL_RCC_OscConfig+0x66c>)
 8002c00:	4937      	ldr	r1, [pc, #220]	; (8002ce0 <HAL_RCC_OscConfig+0x684>)
 8002c02:	400a      	ands	r2, r1
 8002c04:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c06:	f7fe fed3 	bl	80019b0 <HAL_GetTick>
 8002c0a:	0003      	movs	r3, r0
 8002c0c:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8002c0e:	e008      	b.n	8002c22 <HAL_RCC_OscConfig+0x5c6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002c10:	f7fe fece 	bl	80019b0 <HAL_GetTick>
 8002c14:	0002      	movs	r2, r0
 8002c16:	69bb      	ldr	r3, [r7, #24]
 8002c18:	1ad3      	subs	r3, r2, r3
 8002c1a:	2b02      	cmp	r3, #2
 8002c1c:	d901      	bls.n	8002c22 <HAL_RCC_OscConfig+0x5c6>
          {
            return HAL_TIMEOUT;
 8002c1e:	2303      	movs	r3, #3
 8002c20:	e080      	b.n	8002d24 <HAL_RCC_OscConfig+0x6c8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8002c22:	4b29      	ldr	r3, [pc, #164]	; (8002cc8 <HAL_RCC_OscConfig+0x66c>)
 8002c24:	681a      	ldr	r2, [r3, #0]
 8002c26:	2380      	movs	r3, #128	; 0x80
 8002c28:	049b      	lsls	r3, r3, #18
 8002c2a:	4013      	ands	r3, r2
 8002c2c:	d1f0      	bne.n	8002c10 <HAL_RCC_OscConfig+0x5b4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002c2e:	4b26      	ldr	r3, [pc, #152]	; (8002cc8 <HAL_RCC_OscConfig+0x66c>)
 8002c30:	68db      	ldr	r3, [r3, #12]
 8002c32:	4a2c      	ldr	r2, [pc, #176]	; (8002ce4 <HAL_RCC_OscConfig+0x688>)
 8002c34:	4013      	ands	r3, r2
 8002c36:	0019      	movs	r1, r3
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c40:	431a      	orrs	r2, r3
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c46:	431a      	orrs	r2, r3
 8002c48:	4b1f      	ldr	r3, [pc, #124]	; (8002cc8 <HAL_RCC_OscConfig+0x66c>)
 8002c4a:	430a      	orrs	r2, r1
 8002c4c:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002c4e:	4b1e      	ldr	r3, [pc, #120]	; (8002cc8 <HAL_RCC_OscConfig+0x66c>)
 8002c50:	681a      	ldr	r2, [r3, #0]
 8002c52:	4b1d      	ldr	r3, [pc, #116]	; (8002cc8 <HAL_RCC_OscConfig+0x66c>)
 8002c54:	2180      	movs	r1, #128	; 0x80
 8002c56:	0449      	lsls	r1, r1, #17
 8002c58:	430a      	orrs	r2, r1
 8002c5a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c5c:	f7fe fea8 	bl	80019b0 <HAL_GetTick>
 8002c60:	0003      	movs	r3, r0
 8002c62:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8002c64:	e008      	b.n	8002c78 <HAL_RCC_OscConfig+0x61c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002c66:	f7fe fea3 	bl	80019b0 <HAL_GetTick>
 8002c6a:	0002      	movs	r2, r0
 8002c6c:	69bb      	ldr	r3, [r7, #24]
 8002c6e:	1ad3      	subs	r3, r2, r3
 8002c70:	2b02      	cmp	r3, #2
 8002c72:	d901      	bls.n	8002c78 <HAL_RCC_OscConfig+0x61c>
          {
            return HAL_TIMEOUT;
 8002c74:	2303      	movs	r3, #3
 8002c76:	e055      	b.n	8002d24 <HAL_RCC_OscConfig+0x6c8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8002c78:	4b13      	ldr	r3, [pc, #76]	; (8002cc8 <HAL_RCC_OscConfig+0x66c>)
 8002c7a:	681a      	ldr	r2, [r3, #0]
 8002c7c:	2380      	movs	r3, #128	; 0x80
 8002c7e:	049b      	lsls	r3, r3, #18
 8002c80:	4013      	ands	r3, r2
 8002c82:	d0f0      	beq.n	8002c66 <HAL_RCC_OscConfig+0x60a>
 8002c84:	e04d      	b.n	8002d22 <HAL_RCC_OscConfig+0x6c6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c86:	4b10      	ldr	r3, [pc, #64]	; (8002cc8 <HAL_RCC_OscConfig+0x66c>)
 8002c88:	681a      	ldr	r2, [r3, #0]
 8002c8a:	4b0f      	ldr	r3, [pc, #60]	; (8002cc8 <HAL_RCC_OscConfig+0x66c>)
 8002c8c:	4914      	ldr	r1, [pc, #80]	; (8002ce0 <HAL_RCC_OscConfig+0x684>)
 8002c8e:	400a      	ands	r2, r1
 8002c90:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c92:	f7fe fe8d 	bl	80019b0 <HAL_GetTick>
 8002c96:	0003      	movs	r3, r0
 8002c98:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8002c9a:	e008      	b.n	8002cae <HAL_RCC_OscConfig+0x652>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002c9c:	f7fe fe88 	bl	80019b0 <HAL_GetTick>
 8002ca0:	0002      	movs	r2, r0
 8002ca2:	69bb      	ldr	r3, [r7, #24]
 8002ca4:	1ad3      	subs	r3, r2, r3
 8002ca6:	2b02      	cmp	r3, #2
 8002ca8:	d901      	bls.n	8002cae <HAL_RCC_OscConfig+0x652>
          {
            return HAL_TIMEOUT;
 8002caa:	2303      	movs	r3, #3
 8002cac:	e03a      	b.n	8002d24 <HAL_RCC_OscConfig+0x6c8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8002cae:	4b06      	ldr	r3, [pc, #24]	; (8002cc8 <HAL_RCC_OscConfig+0x66c>)
 8002cb0:	681a      	ldr	r2, [r3, #0]
 8002cb2:	2380      	movs	r3, #128	; 0x80
 8002cb4:	049b      	lsls	r3, r3, #18
 8002cb6:	4013      	ands	r3, r2
 8002cb8:	d1f0      	bne.n	8002c9c <HAL_RCC_OscConfig+0x640>
 8002cba:	e032      	b.n	8002d22 <HAL_RCC_OscConfig+0x6c6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cc0:	2b01      	cmp	r3, #1
 8002cc2:	d111      	bne.n	8002ce8 <HAL_RCC_OscConfig+0x68c>
      {
        return HAL_ERROR;
 8002cc4:	2301      	movs	r3, #1
 8002cc6:	e02d      	b.n	8002d24 <HAL_RCC_OscConfig+0x6c8>
 8002cc8:	40021000 	.word	0x40021000
 8002ccc:	fffffeff 	.word	0xfffffeff
 8002cd0:	40007000 	.word	0x40007000
 8002cd4:	fffffbff 	.word	0xfffffbff
 8002cd8:	00001388 	.word	0x00001388
 8002cdc:	efffffff 	.word	0xefffffff
 8002ce0:	feffffff 	.word	0xfeffffff
 8002ce4:	ff02ffff 	.word	0xff02ffff
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002ce8:	4b10      	ldr	r3, [pc, #64]	; (8002d2c <HAL_RCC_OscConfig+0x6d0>)
 8002cea:	68db      	ldr	r3, [r3, #12]
 8002cec:	61fb      	str	r3, [r7, #28]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002cee:	69fa      	ldr	r2, [r7, #28]
 8002cf0:	2380      	movs	r3, #128	; 0x80
 8002cf2:	025b      	lsls	r3, r3, #9
 8002cf4:	401a      	ands	r2, r3
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002cfa:	429a      	cmp	r2, r3
 8002cfc:	d10f      	bne.n	8002d1e <HAL_RCC_OscConfig+0x6c2>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8002cfe:	69fa      	ldr	r2, [r7, #28]
 8002d00:	23f0      	movs	r3, #240	; 0xf0
 8002d02:	039b      	lsls	r3, r3, #14
 8002d04:	401a      	ands	r2, r3
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002d0a:	429a      	cmp	r2, r3
 8002d0c:	d107      	bne.n	8002d1e <HAL_RCC_OscConfig+0x6c2>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8002d0e:	69fa      	ldr	r2, [r7, #28]
 8002d10:	23c0      	movs	r3, #192	; 0xc0
 8002d12:	041b      	lsls	r3, r3, #16
 8002d14:	401a      	ands	r2, r3
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8002d1a:	429a      	cmp	r2, r3
 8002d1c:	d001      	beq.n	8002d22 <HAL_RCC_OscConfig+0x6c6>
        {
          return HAL_ERROR;
 8002d1e:	2301      	movs	r3, #1
 8002d20:	e000      	b.n	8002d24 <HAL_RCC_OscConfig+0x6c8>
        }
      }
    }
  }
  return HAL_OK;
 8002d22:	2300      	movs	r3, #0
}
 8002d24:	0018      	movs	r0, r3
 8002d26:	46bd      	mov	sp, r7
 8002d28:	b00a      	add	sp, #40	; 0x28
 8002d2a:	bdb0      	pop	{r4, r5, r7, pc}
 8002d2c:	40021000 	.word	0x40021000

08002d30 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002d30:	b5b0      	push	{r4, r5, r7, lr}
 8002d32:	b084      	sub	sp, #16
 8002d34:	af00      	add	r7, sp, #0
 8002d36:	6078      	str	r0, [r7, #4]
 8002d38:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d101      	bne.n	8002d44 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002d40:	2301      	movs	r3, #1
 8002d42:	e128      	b.n	8002f96 <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002d44:	4b96      	ldr	r3, [pc, #600]	; (8002fa0 <HAL_RCC_ClockConfig+0x270>)
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	2201      	movs	r2, #1
 8002d4a:	4013      	ands	r3, r2
 8002d4c:	683a      	ldr	r2, [r7, #0]
 8002d4e:	429a      	cmp	r2, r3
 8002d50:	d91e      	bls.n	8002d90 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d52:	4b93      	ldr	r3, [pc, #588]	; (8002fa0 <HAL_RCC_ClockConfig+0x270>)
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	2201      	movs	r2, #1
 8002d58:	4393      	bics	r3, r2
 8002d5a:	0019      	movs	r1, r3
 8002d5c:	4b90      	ldr	r3, [pc, #576]	; (8002fa0 <HAL_RCC_ClockConfig+0x270>)
 8002d5e:	683a      	ldr	r2, [r7, #0]
 8002d60:	430a      	orrs	r2, r1
 8002d62:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002d64:	f7fe fe24 	bl	80019b0 <HAL_GetTick>
 8002d68:	0003      	movs	r3, r0
 8002d6a:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d6c:	e009      	b.n	8002d82 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002d6e:	f7fe fe1f 	bl	80019b0 <HAL_GetTick>
 8002d72:	0002      	movs	r2, r0
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	1ad3      	subs	r3, r2, r3
 8002d78:	4a8a      	ldr	r2, [pc, #552]	; (8002fa4 <HAL_RCC_ClockConfig+0x274>)
 8002d7a:	4293      	cmp	r3, r2
 8002d7c:	d901      	bls.n	8002d82 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8002d7e:	2303      	movs	r3, #3
 8002d80:	e109      	b.n	8002f96 <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d82:	4b87      	ldr	r3, [pc, #540]	; (8002fa0 <HAL_RCC_ClockConfig+0x270>)
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	2201      	movs	r2, #1
 8002d88:	4013      	ands	r3, r2
 8002d8a:	683a      	ldr	r2, [r7, #0]
 8002d8c:	429a      	cmp	r2, r3
 8002d8e:	d1ee      	bne.n	8002d6e <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	2202      	movs	r2, #2
 8002d96:	4013      	ands	r3, r2
 8002d98:	d009      	beq.n	8002dae <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002d9a:	4b83      	ldr	r3, [pc, #524]	; (8002fa8 <HAL_RCC_ClockConfig+0x278>)
 8002d9c:	68db      	ldr	r3, [r3, #12]
 8002d9e:	22f0      	movs	r2, #240	; 0xf0
 8002da0:	4393      	bics	r3, r2
 8002da2:	0019      	movs	r1, r3
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	689a      	ldr	r2, [r3, #8]
 8002da8:	4b7f      	ldr	r3, [pc, #508]	; (8002fa8 <HAL_RCC_ClockConfig+0x278>)
 8002daa:	430a      	orrs	r2, r1
 8002dac:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	2201      	movs	r2, #1
 8002db4:	4013      	ands	r3, r2
 8002db6:	d100      	bne.n	8002dba <HAL_RCC_ClockConfig+0x8a>
 8002db8:	e089      	b.n	8002ece <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	685b      	ldr	r3, [r3, #4]
 8002dbe:	2b02      	cmp	r3, #2
 8002dc0:	d107      	bne.n	8002dd2 <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002dc2:	4b79      	ldr	r3, [pc, #484]	; (8002fa8 <HAL_RCC_ClockConfig+0x278>)
 8002dc4:	681a      	ldr	r2, [r3, #0]
 8002dc6:	2380      	movs	r3, #128	; 0x80
 8002dc8:	029b      	lsls	r3, r3, #10
 8002dca:	4013      	ands	r3, r2
 8002dcc:	d120      	bne.n	8002e10 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8002dce:	2301      	movs	r3, #1
 8002dd0:	e0e1      	b.n	8002f96 <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	685b      	ldr	r3, [r3, #4]
 8002dd6:	2b03      	cmp	r3, #3
 8002dd8:	d107      	bne.n	8002dea <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002dda:	4b73      	ldr	r3, [pc, #460]	; (8002fa8 <HAL_RCC_ClockConfig+0x278>)
 8002ddc:	681a      	ldr	r2, [r3, #0]
 8002dde:	2380      	movs	r3, #128	; 0x80
 8002de0:	049b      	lsls	r3, r3, #18
 8002de2:	4013      	ands	r3, r2
 8002de4:	d114      	bne.n	8002e10 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8002de6:	2301      	movs	r3, #1
 8002de8:	e0d5      	b.n	8002f96 <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	685b      	ldr	r3, [r3, #4]
 8002dee:	2b01      	cmp	r3, #1
 8002df0:	d106      	bne.n	8002e00 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002df2:	4b6d      	ldr	r3, [pc, #436]	; (8002fa8 <HAL_RCC_ClockConfig+0x278>)
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	2204      	movs	r2, #4
 8002df8:	4013      	ands	r3, r2
 8002dfa:	d109      	bne.n	8002e10 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8002dfc:	2301      	movs	r3, #1
 8002dfe:	e0ca      	b.n	8002f96 <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8002e00:	4b69      	ldr	r3, [pc, #420]	; (8002fa8 <HAL_RCC_ClockConfig+0x278>)
 8002e02:	681a      	ldr	r2, [r3, #0]
 8002e04:	2380      	movs	r3, #128	; 0x80
 8002e06:	009b      	lsls	r3, r3, #2
 8002e08:	4013      	ands	r3, r2
 8002e0a:	d101      	bne.n	8002e10 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8002e0c:	2301      	movs	r3, #1
 8002e0e:	e0c2      	b.n	8002f96 <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002e10:	4b65      	ldr	r3, [pc, #404]	; (8002fa8 <HAL_RCC_ClockConfig+0x278>)
 8002e12:	68db      	ldr	r3, [r3, #12]
 8002e14:	2203      	movs	r2, #3
 8002e16:	4393      	bics	r3, r2
 8002e18:	0019      	movs	r1, r3
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	685a      	ldr	r2, [r3, #4]
 8002e1e:	4b62      	ldr	r3, [pc, #392]	; (8002fa8 <HAL_RCC_ClockConfig+0x278>)
 8002e20:	430a      	orrs	r2, r1
 8002e22:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002e24:	f7fe fdc4 	bl	80019b0 <HAL_GetTick>
 8002e28:	0003      	movs	r3, r0
 8002e2a:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	685b      	ldr	r3, [r3, #4]
 8002e30:	2b02      	cmp	r3, #2
 8002e32:	d111      	bne.n	8002e58 <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8002e34:	e009      	b.n	8002e4a <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002e36:	f7fe fdbb 	bl	80019b0 <HAL_GetTick>
 8002e3a:	0002      	movs	r2, r0
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	1ad3      	subs	r3, r2, r3
 8002e40:	4a58      	ldr	r2, [pc, #352]	; (8002fa4 <HAL_RCC_ClockConfig+0x274>)
 8002e42:	4293      	cmp	r3, r2
 8002e44:	d901      	bls.n	8002e4a <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 8002e46:	2303      	movs	r3, #3
 8002e48:	e0a5      	b.n	8002f96 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8002e4a:	4b57      	ldr	r3, [pc, #348]	; (8002fa8 <HAL_RCC_ClockConfig+0x278>)
 8002e4c:	68db      	ldr	r3, [r3, #12]
 8002e4e:	220c      	movs	r2, #12
 8002e50:	4013      	ands	r3, r2
 8002e52:	2b08      	cmp	r3, #8
 8002e54:	d1ef      	bne.n	8002e36 <HAL_RCC_ClockConfig+0x106>
 8002e56:	e03a      	b.n	8002ece <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	685b      	ldr	r3, [r3, #4]
 8002e5c:	2b03      	cmp	r3, #3
 8002e5e:	d111      	bne.n	8002e84 <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002e60:	e009      	b.n	8002e76 <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002e62:	f7fe fda5 	bl	80019b0 <HAL_GetTick>
 8002e66:	0002      	movs	r2, r0
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	1ad3      	subs	r3, r2, r3
 8002e6c:	4a4d      	ldr	r2, [pc, #308]	; (8002fa4 <HAL_RCC_ClockConfig+0x274>)
 8002e6e:	4293      	cmp	r3, r2
 8002e70:	d901      	bls.n	8002e76 <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 8002e72:	2303      	movs	r3, #3
 8002e74:	e08f      	b.n	8002f96 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002e76:	4b4c      	ldr	r3, [pc, #304]	; (8002fa8 <HAL_RCC_ClockConfig+0x278>)
 8002e78:	68db      	ldr	r3, [r3, #12]
 8002e7a:	220c      	movs	r2, #12
 8002e7c:	4013      	ands	r3, r2
 8002e7e:	2b0c      	cmp	r3, #12
 8002e80:	d1ef      	bne.n	8002e62 <HAL_RCC_ClockConfig+0x132>
 8002e82:	e024      	b.n	8002ece <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	685b      	ldr	r3, [r3, #4]
 8002e88:	2b01      	cmp	r3, #1
 8002e8a:	d11b      	bne.n	8002ec4 <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8002e8c:	e009      	b.n	8002ea2 <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002e8e:	f7fe fd8f 	bl	80019b0 <HAL_GetTick>
 8002e92:	0002      	movs	r2, r0
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	1ad3      	subs	r3, r2, r3
 8002e98:	4a42      	ldr	r2, [pc, #264]	; (8002fa4 <HAL_RCC_ClockConfig+0x274>)
 8002e9a:	4293      	cmp	r3, r2
 8002e9c:	d901      	bls.n	8002ea2 <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 8002e9e:	2303      	movs	r3, #3
 8002ea0:	e079      	b.n	8002f96 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8002ea2:	4b41      	ldr	r3, [pc, #260]	; (8002fa8 <HAL_RCC_ClockConfig+0x278>)
 8002ea4:	68db      	ldr	r3, [r3, #12]
 8002ea6:	220c      	movs	r2, #12
 8002ea8:	4013      	ands	r3, r2
 8002eaa:	2b04      	cmp	r3, #4
 8002eac:	d1ef      	bne.n	8002e8e <HAL_RCC_ClockConfig+0x15e>
 8002eae:	e00e      	b.n	8002ece <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002eb0:	f7fe fd7e 	bl	80019b0 <HAL_GetTick>
 8002eb4:	0002      	movs	r2, r0
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	1ad3      	subs	r3, r2, r3
 8002eba:	4a3a      	ldr	r2, [pc, #232]	; (8002fa4 <HAL_RCC_ClockConfig+0x274>)
 8002ebc:	4293      	cmp	r3, r2
 8002ebe:	d901      	bls.n	8002ec4 <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 8002ec0:	2303      	movs	r3, #3
 8002ec2:	e068      	b.n	8002f96 <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8002ec4:	4b38      	ldr	r3, [pc, #224]	; (8002fa8 <HAL_RCC_ClockConfig+0x278>)
 8002ec6:	68db      	ldr	r3, [r3, #12]
 8002ec8:	220c      	movs	r2, #12
 8002eca:	4013      	ands	r3, r2
 8002ecc:	d1f0      	bne.n	8002eb0 <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002ece:	4b34      	ldr	r3, [pc, #208]	; (8002fa0 <HAL_RCC_ClockConfig+0x270>)
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	2201      	movs	r2, #1
 8002ed4:	4013      	ands	r3, r2
 8002ed6:	683a      	ldr	r2, [r7, #0]
 8002ed8:	429a      	cmp	r2, r3
 8002eda:	d21e      	bcs.n	8002f1a <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002edc:	4b30      	ldr	r3, [pc, #192]	; (8002fa0 <HAL_RCC_ClockConfig+0x270>)
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	2201      	movs	r2, #1
 8002ee2:	4393      	bics	r3, r2
 8002ee4:	0019      	movs	r1, r3
 8002ee6:	4b2e      	ldr	r3, [pc, #184]	; (8002fa0 <HAL_RCC_ClockConfig+0x270>)
 8002ee8:	683a      	ldr	r2, [r7, #0]
 8002eea:	430a      	orrs	r2, r1
 8002eec:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002eee:	f7fe fd5f 	bl	80019b0 <HAL_GetTick>
 8002ef2:	0003      	movs	r3, r0
 8002ef4:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002ef6:	e009      	b.n	8002f0c <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002ef8:	f7fe fd5a 	bl	80019b0 <HAL_GetTick>
 8002efc:	0002      	movs	r2, r0
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	1ad3      	subs	r3, r2, r3
 8002f02:	4a28      	ldr	r2, [pc, #160]	; (8002fa4 <HAL_RCC_ClockConfig+0x274>)
 8002f04:	4293      	cmp	r3, r2
 8002f06:	d901      	bls.n	8002f0c <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 8002f08:	2303      	movs	r3, #3
 8002f0a:	e044      	b.n	8002f96 <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f0c:	4b24      	ldr	r3, [pc, #144]	; (8002fa0 <HAL_RCC_ClockConfig+0x270>)
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	2201      	movs	r2, #1
 8002f12:	4013      	ands	r3, r2
 8002f14:	683a      	ldr	r2, [r7, #0]
 8002f16:	429a      	cmp	r2, r3
 8002f18:	d1ee      	bne.n	8002ef8 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	2204      	movs	r2, #4
 8002f20:	4013      	ands	r3, r2
 8002f22:	d009      	beq.n	8002f38 <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002f24:	4b20      	ldr	r3, [pc, #128]	; (8002fa8 <HAL_RCC_ClockConfig+0x278>)
 8002f26:	68db      	ldr	r3, [r3, #12]
 8002f28:	4a20      	ldr	r2, [pc, #128]	; (8002fac <HAL_RCC_ClockConfig+0x27c>)
 8002f2a:	4013      	ands	r3, r2
 8002f2c:	0019      	movs	r1, r3
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	68da      	ldr	r2, [r3, #12]
 8002f32:	4b1d      	ldr	r3, [pc, #116]	; (8002fa8 <HAL_RCC_ClockConfig+0x278>)
 8002f34:	430a      	orrs	r2, r1
 8002f36:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	2208      	movs	r2, #8
 8002f3e:	4013      	ands	r3, r2
 8002f40:	d00a      	beq.n	8002f58 <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002f42:	4b19      	ldr	r3, [pc, #100]	; (8002fa8 <HAL_RCC_ClockConfig+0x278>)
 8002f44:	68db      	ldr	r3, [r3, #12]
 8002f46:	4a1a      	ldr	r2, [pc, #104]	; (8002fb0 <HAL_RCC_ClockConfig+0x280>)
 8002f48:	4013      	ands	r3, r2
 8002f4a:	0019      	movs	r1, r3
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	691b      	ldr	r3, [r3, #16]
 8002f50:	00da      	lsls	r2, r3, #3
 8002f52:	4b15      	ldr	r3, [pc, #84]	; (8002fa8 <HAL_RCC_ClockConfig+0x278>)
 8002f54:	430a      	orrs	r2, r1
 8002f56:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002f58:	f000 f832 	bl	8002fc0 <HAL_RCC_GetSysClockFreq>
 8002f5c:	0001      	movs	r1, r0
 8002f5e:	4b12      	ldr	r3, [pc, #72]	; (8002fa8 <HAL_RCC_ClockConfig+0x278>)
 8002f60:	68db      	ldr	r3, [r3, #12]
 8002f62:	091b      	lsrs	r3, r3, #4
 8002f64:	220f      	movs	r2, #15
 8002f66:	4013      	ands	r3, r2
 8002f68:	4a12      	ldr	r2, [pc, #72]	; (8002fb4 <HAL_RCC_ClockConfig+0x284>)
 8002f6a:	5cd3      	ldrb	r3, [r2, r3]
 8002f6c:	000a      	movs	r2, r1
 8002f6e:	40da      	lsrs	r2, r3
 8002f70:	4b11      	ldr	r3, [pc, #68]	; (8002fb8 <HAL_RCC_ClockConfig+0x288>)
 8002f72:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002f74:	4b11      	ldr	r3, [pc, #68]	; (8002fbc <HAL_RCC_ClockConfig+0x28c>)
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	250b      	movs	r5, #11
 8002f7a:	197c      	adds	r4, r7, r5
 8002f7c:	0018      	movs	r0, r3
 8002f7e:	f7fe fcd1 	bl	8001924 <HAL_InitTick>
 8002f82:	0003      	movs	r3, r0
 8002f84:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 8002f86:	197b      	adds	r3, r7, r5
 8002f88:	781b      	ldrb	r3, [r3, #0]
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d002      	beq.n	8002f94 <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 8002f8e:	197b      	adds	r3, r7, r5
 8002f90:	781b      	ldrb	r3, [r3, #0]
 8002f92:	e000      	b.n	8002f96 <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 8002f94:	2300      	movs	r3, #0
}
 8002f96:	0018      	movs	r0, r3
 8002f98:	46bd      	mov	sp, r7
 8002f9a:	b004      	add	sp, #16
 8002f9c:	bdb0      	pop	{r4, r5, r7, pc}
 8002f9e:	46c0      	nop			; (mov r8, r8)
 8002fa0:	40022000 	.word	0x40022000
 8002fa4:	00001388 	.word	0x00001388
 8002fa8:	40021000 	.word	0x40021000
 8002fac:	fffff8ff 	.word	0xfffff8ff
 8002fb0:	ffffc7ff 	.word	0xffffc7ff
 8002fb4:	08006124 	.word	0x08006124
 8002fb8:	20000010 	.word	0x20000010
 8002fbc:	20000014 	.word	0x20000014

08002fc0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002fc0:	b5b0      	push	{r4, r5, r7, lr}
 8002fc2:	b08e      	sub	sp, #56	; 0x38
 8002fc4:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 8002fc6:	4b4c      	ldr	r3, [pc, #304]	; (80030f8 <HAL_RCC_GetSysClockFreq+0x138>)
 8002fc8:	68db      	ldr	r3, [r3, #12]
 8002fca:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002fcc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002fce:	230c      	movs	r3, #12
 8002fd0:	4013      	ands	r3, r2
 8002fd2:	2b0c      	cmp	r3, #12
 8002fd4:	d014      	beq.n	8003000 <HAL_RCC_GetSysClockFreq+0x40>
 8002fd6:	d900      	bls.n	8002fda <HAL_RCC_GetSysClockFreq+0x1a>
 8002fd8:	e07b      	b.n	80030d2 <HAL_RCC_GetSysClockFreq+0x112>
 8002fda:	2b04      	cmp	r3, #4
 8002fdc:	d002      	beq.n	8002fe4 <HAL_RCC_GetSysClockFreq+0x24>
 8002fde:	2b08      	cmp	r3, #8
 8002fe0:	d00b      	beq.n	8002ffa <HAL_RCC_GetSysClockFreq+0x3a>
 8002fe2:	e076      	b.n	80030d2 <HAL_RCC_GetSysClockFreq+0x112>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8002fe4:	4b44      	ldr	r3, [pc, #272]	; (80030f8 <HAL_RCC_GetSysClockFreq+0x138>)
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	2210      	movs	r2, #16
 8002fea:	4013      	ands	r3, r2
 8002fec:	d002      	beq.n	8002ff4 <HAL_RCC_GetSysClockFreq+0x34>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 8002fee:	4b43      	ldr	r3, [pc, #268]	; (80030fc <HAL_RCC_GetSysClockFreq+0x13c>)
 8002ff0:	633b      	str	r3, [r7, #48]	; 0x30
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 8002ff2:	e07c      	b.n	80030ee <HAL_RCC_GetSysClockFreq+0x12e>
        sysclockfreq =  HSI_VALUE;
 8002ff4:	4b42      	ldr	r3, [pc, #264]	; (8003100 <HAL_RCC_GetSysClockFreq+0x140>)
 8002ff6:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002ff8:	e079      	b.n	80030ee <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002ffa:	4b42      	ldr	r3, [pc, #264]	; (8003104 <HAL_RCC_GetSysClockFreq+0x144>)
 8002ffc:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002ffe:	e076      	b.n	80030ee <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8003000:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003002:	0c9a      	lsrs	r2, r3, #18
 8003004:	230f      	movs	r3, #15
 8003006:	401a      	ands	r2, r3
 8003008:	4b3f      	ldr	r3, [pc, #252]	; (8003108 <HAL_RCC_GetSysClockFreq+0x148>)
 800300a:	5c9b      	ldrb	r3, [r3, r2]
 800300c:	62bb      	str	r3, [r7, #40]	; 0x28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 800300e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003010:	0d9a      	lsrs	r2, r3, #22
 8003012:	2303      	movs	r3, #3
 8003014:	4013      	ands	r3, r2
 8003016:	3301      	adds	r3, #1
 8003018:	627b      	str	r3, [r7, #36]	; 0x24
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800301a:	4b37      	ldr	r3, [pc, #220]	; (80030f8 <HAL_RCC_GetSysClockFreq+0x138>)
 800301c:	68da      	ldr	r2, [r3, #12]
 800301e:	2380      	movs	r3, #128	; 0x80
 8003020:	025b      	lsls	r3, r3, #9
 8003022:	4013      	ands	r3, r2
 8003024:	d01a      	beq.n	800305c <HAL_RCC_GetSysClockFreq+0x9c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8003026:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003028:	61bb      	str	r3, [r7, #24]
 800302a:	2300      	movs	r3, #0
 800302c:	61fb      	str	r3, [r7, #28]
 800302e:	4a35      	ldr	r2, [pc, #212]	; (8003104 <HAL_RCC_GetSysClockFreq+0x144>)
 8003030:	2300      	movs	r3, #0
 8003032:	69b8      	ldr	r0, [r7, #24]
 8003034:	69f9      	ldr	r1, [r7, #28]
 8003036:	f7fd f925 	bl	8000284 <__aeabi_lmul>
 800303a:	0002      	movs	r2, r0
 800303c:	000b      	movs	r3, r1
 800303e:	0010      	movs	r0, r2
 8003040:	0019      	movs	r1, r3
 8003042:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003044:	613b      	str	r3, [r7, #16]
 8003046:	2300      	movs	r3, #0
 8003048:	617b      	str	r3, [r7, #20]
 800304a:	693a      	ldr	r2, [r7, #16]
 800304c:	697b      	ldr	r3, [r7, #20]
 800304e:	f7fd f8f9 	bl	8000244 <__aeabi_uldivmod>
 8003052:	0002      	movs	r2, r0
 8003054:	000b      	movs	r3, r1
 8003056:	0013      	movs	r3, r2
 8003058:	637b      	str	r3, [r7, #52]	; 0x34
 800305a:	e037      	b.n	80030cc <HAL_RCC_GetSysClockFreq+0x10c>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 800305c:	4b26      	ldr	r3, [pc, #152]	; (80030f8 <HAL_RCC_GetSysClockFreq+0x138>)
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	2210      	movs	r2, #16
 8003062:	4013      	ands	r3, r2
 8003064:	d01a      	beq.n	800309c <HAL_RCC_GetSysClockFreq+0xdc>
        {
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 8003066:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003068:	60bb      	str	r3, [r7, #8]
 800306a:	2300      	movs	r3, #0
 800306c:	60fb      	str	r3, [r7, #12]
 800306e:	4a23      	ldr	r2, [pc, #140]	; (80030fc <HAL_RCC_GetSysClockFreq+0x13c>)
 8003070:	2300      	movs	r3, #0
 8003072:	68b8      	ldr	r0, [r7, #8]
 8003074:	68f9      	ldr	r1, [r7, #12]
 8003076:	f7fd f905 	bl	8000284 <__aeabi_lmul>
 800307a:	0002      	movs	r2, r0
 800307c:	000b      	movs	r3, r1
 800307e:	0010      	movs	r0, r2
 8003080:	0019      	movs	r1, r3
 8003082:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003084:	603b      	str	r3, [r7, #0]
 8003086:	2300      	movs	r3, #0
 8003088:	607b      	str	r3, [r7, #4]
 800308a:	683a      	ldr	r2, [r7, #0]
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	f7fd f8d9 	bl	8000244 <__aeabi_uldivmod>
 8003092:	0002      	movs	r2, r0
 8003094:	000b      	movs	r3, r1
 8003096:	0013      	movs	r3, r2
 8003098:	637b      	str	r3, [r7, #52]	; 0x34
 800309a:	e017      	b.n	80030cc <HAL_RCC_GetSysClockFreq+0x10c>
        }
        else
        {
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 800309c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800309e:	0018      	movs	r0, r3
 80030a0:	2300      	movs	r3, #0
 80030a2:	0019      	movs	r1, r3
 80030a4:	4a16      	ldr	r2, [pc, #88]	; (8003100 <HAL_RCC_GetSysClockFreq+0x140>)
 80030a6:	2300      	movs	r3, #0
 80030a8:	f7fd f8ec 	bl	8000284 <__aeabi_lmul>
 80030ac:	0002      	movs	r2, r0
 80030ae:	000b      	movs	r3, r1
 80030b0:	0010      	movs	r0, r2
 80030b2:	0019      	movs	r1, r3
 80030b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030b6:	001c      	movs	r4, r3
 80030b8:	2300      	movs	r3, #0
 80030ba:	001d      	movs	r5, r3
 80030bc:	0022      	movs	r2, r4
 80030be:	002b      	movs	r3, r5
 80030c0:	f7fd f8c0 	bl	8000244 <__aeabi_uldivmod>
 80030c4:	0002      	movs	r2, r0
 80030c6:	000b      	movs	r3, r1
 80030c8:	0013      	movs	r3, r2
 80030ca:	637b      	str	r3, [r7, #52]	; 0x34
        }
      }
      sysclockfreq = pllvco;
 80030cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80030ce:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80030d0:	e00d      	b.n	80030ee <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 80030d2:	4b09      	ldr	r3, [pc, #36]	; (80030f8 <HAL_RCC_GetSysClockFreq+0x138>)
 80030d4:	685b      	ldr	r3, [r3, #4]
 80030d6:	0b5b      	lsrs	r3, r3, #13
 80030d8:	2207      	movs	r2, #7
 80030da:	4013      	ands	r3, r2
 80030dc:	623b      	str	r3, [r7, #32]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 80030de:	6a3b      	ldr	r3, [r7, #32]
 80030e0:	3301      	adds	r3, #1
 80030e2:	2280      	movs	r2, #128	; 0x80
 80030e4:	0212      	lsls	r2, r2, #8
 80030e6:	409a      	lsls	r2, r3
 80030e8:	0013      	movs	r3, r2
 80030ea:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80030ec:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 80030ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 80030f0:	0018      	movs	r0, r3
 80030f2:	46bd      	mov	sp, r7
 80030f4:	b00e      	add	sp, #56	; 0x38
 80030f6:	bdb0      	pop	{r4, r5, r7, pc}
 80030f8:	40021000 	.word	0x40021000
 80030fc:	003d0900 	.word	0x003d0900
 8003100:	00f42400 	.word	0x00f42400
 8003104:	007a1200 	.word	0x007a1200
 8003108:	0800613c 	.word	0x0800613c

0800310c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800310c:	b580      	push	{r7, lr}
 800310e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003110:	4b02      	ldr	r3, [pc, #8]	; (800311c <HAL_RCC_GetHCLKFreq+0x10>)
 8003112:	681b      	ldr	r3, [r3, #0]
}
 8003114:	0018      	movs	r0, r3
 8003116:	46bd      	mov	sp, r7
 8003118:	bd80      	pop	{r7, pc}
 800311a:	46c0      	nop			; (mov r8, r8)
 800311c:	20000010 	.word	0x20000010

08003120 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003120:	b580      	push	{r7, lr}
 8003122:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003124:	f7ff fff2 	bl	800310c <HAL_RCC_GetHCLKFreq>
 8003128:	0001      	movs	r1, r0
 800312a:	4b06      	ldr	r3, [pc, #24]	; (8003144 <HAL_RCC_GetPCLK1Freq+0x24>)
 800312c:	68db      	ldr	r3, [r3, #12]
 800312e:	0a1b      	lsrs	r3, r3, #8
 8003130:	2207      	movs	r2, #7
 8003132:	4013      	ands	r3, r2
 8003134:	4a04      	ldr	r2, [pc, #16]	; (8003148 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003136:	5cd3      	ldrb	r3, [r2, r3]
 8003138:	40d9      	lsrs	r1, r3
 800313a:	000b      	movs	r3, r1
}
 800313c:	0018      	movs	r0, r3
 800313e:	46bd      	mov	sp, r7
 8003140:	bd80      	pop	{r7, pc}
 8003142:	46c0      	nop			; (mov r8, r8)
 8003144:	40021000 	.word	0x40021000
 8003148:	08006134 	.word	0x08006134

0800314c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800314c:	b580      	push	{r7, lr}
 800314e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003150:	f7ff ffdc 	bl	800310c <HAL_RCC_GetHCLKFreq>
 8003154:	0001      	movs	r1, r0
 8003156:	4b06      	ldr	r3, [pc, #24]	; (8003170 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003158:	68db      	ldr	r3, [r3, #12]
 800315a:	0adb      	lsrs	r3, r3, #11
 800315c:	2207      	movs	r2, #7
 800315e:	4013      	ands	r3, r2
 8003160:	4a04      	ldr	r2, [pc, #16]	; (8003174 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003162:	5cd3      	ldrb	r3, [r2, r3]
 8003164:	40d9      	lsrs	r1, r3
 8003166:	000b      	movs	r3, r1
}
 8003168:	0018      	movs	r0, r3
 800316a:	46bd      	mov	sp, r7
 800316c:	bd80      	pop	{r7, pc}
 800316e:	46c0      	nop			; (mov r8, r8)
 8003170:	40021000 	.word	0x40021000
 8003174:	08006134 	.word	0x08006134

08003178 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003178:	b580      	push	{r7, lr}
 800317a:	b086      	sub	sp, #24
 800317c:	af00      	add	r7, sp, #0
 800317e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_reg;
  FlagStatus       pwrclkchanged = RESET;
 8003180:	2017      	movs	r0, #23
 8003182:	183b      	adds	r3, r7, r0
 8003184:	2200      	movs	r2, #0
 8003186:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	2220      	movs	r2, #32
 800318e:	4013      	ands	r3, r2
 8003190:	d100      	bne.n	8003194 <HAL_RCCEx_PeriphCLKConfig+0x1c>
 8003192:	e0c7      	b.n	8003324 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003194:	4b8b      	ldr	r3, [pc, #556]	; (80033c4 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8003196:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003198:	2380      	movs	r3, #128	; 0x80
 800319a:	055b      	lsls	r3, r3, #21
 800319c:	4013      	ands	r3, r2
 800319e:	d109      	bne.n	80031b4 <HAL_RCCEx_PeriphCLKConfig+0x3c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80031a0:	4b88      	ldr	r3, [pc, #544]	; (80033c4 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 80031a2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80031a4:	4b87      	ldr	r3, [pc, #540]	; (80033c4 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 80031a6:	2180      	movs	r1, #128	; 0x80
 80031a8:	0549      	lsls	r1, r1, #21
 80031aa:	430a      	orrs	r2, r1
 80031ac:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 80031ae:	183b      	adds	r3, r7, r0
 80031b0:	2201      	movs	r2, #1
 80031b2:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80031b4:	4b84      	ldr	r3, [pc, #528]	; (80033c8 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 80031b6:	681a      	ldr	r2, [r3, #0]
 80031b8:	2380      	movs	r3, #128	; 0x80
 80031ba:	005b      	lsls	r3, r3, #1
 80031bc:	4013      	ands	r3, r2
 80031be:	d11a      	bne.n	80031f6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80031c0:	4b81      	ldr	r3, [pc, #516]	; (80033c8 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 80031c2:	681a      	ldr	r2, [r3, #0]
 80031c4:	4b80      	ldr	r3, [pc, #512]	; (80033c8 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 80031c6:	2180      	movs	r1, #128	; 0x80
 80031c8:	0049      	lsls	r1, r1, #1
 80031ca:	430a      	orrs	r2, r1
 80031cc:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80031ce:	f7fe fbef 	bl	80019b0 <HAL_GetTick>
 80031d2:	0003      	movs	r3, r0
 80031d4:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80031d6:	e008      	b.n	80031ea <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80031d8:	f7fe fbea 	bl	80019b0 <HAL_GetTick>
 80031dc:	0002      	movs	r2, r0
 80031de:	693b      	ldr	r3, [r7, #16]
 80031e0:	1ad3      	subs	r3, r2, r3
 80031e2:	2b64      	cmp	r3, #100	; 0x64
 80031e4:	d901      	bls.n	80031ea <HAL_RCCEx_PeriphCLKConfig+0x72>
        {
          return HAL_TIMEOUT;
 80031e6:	2303      	movs	r3, #3
 80031e8:	e0e8      	b.n	80033bc <HAL_RCCEx_PeriphCLKConfig+0x244>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80031ea:	4b77      	ldr	r3, [pc, #476]	; (80033c8 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 80031ec:	681a      	ldr	r2, [r3, #0]
 80031ee:	2380      	movs	r3, #128	; 0x80
 80031f0:	005b      	lsls	r3, r3, #1
 80031f2:	4013      	ands	r3, r2
 80031f4:	d0f0      	beq.n	80031d8 <HAL_RCCEx_PeriphCLKConfig+0x60>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 80031f6:	4b73      	ldr	r3, [pc, #460]	; (80033c4 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 80031f8:	681a      	ldr	r2, [r3, #0]
 80031fa:	23c0      	movs	r3, #192	; 0xc0
 80031fc:	039b      	lsls	r3, r3, #14
 80031fe:	4013      	ands	r3, r2
 8003200:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	685a      	ldr	r2, [r3, #4]
 8003206:	23c0      	movs	r3, #192	; 0xc0
 8003208:	039b      	lsls	r3, r3, #14
 800320a:	4013      	ands	r3, r2
 800320c:	68fa      	ldr	r2, [r7, #12]
 800320e:	429a      	cmp	r2, r3
 8003210:	d013      	beq.n	800323a <HAL_RCCEx_PeriphCLKConfig+0xc2>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	685a      	ldr	r2, [r3, #4]
 8003216:	23c0      	movs	r3, #192	; 0xc0
 8003218:	029b      	lsls	r3, r3, #10
 800321a:	401a      	ands	r2, r3
 800321c:	23c0      	movs	r3, #192	; 0xc0
 800321e:	029b      	lsls	r3, r3, #10
 8003220:	429a      	cmp	r2, r3
 8003222:	d10a      	bne.n	800323a <HAL_RCCEx_PeriphCLKConfig+0xc2>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8003224:	4b67      	ldr	r3, [pc, #412]	; (80033c4 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8003226:	681a      	ldr	r2, [r3, #0]
 8003228:	2380      	movs	r3, #128	; 0x80
 800322a:	029b      	lsls	r3, r3, #10
 800322c:	401a      	ands	r2, r3
 800322e:	2380      	movs	r3, #128	; 0x80
 8003230:	029b      	lsls	r3, r3, #10
 8003232:	429a      	cmp	r2, r3
 8003234:	d101      	bne.n	800323a <HAL_RCCEx_PeriphCLKConfig+0xc2>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 8003236:	2301      	movs	r3, #1
 8003238:	e0c0      	b.n	80033bc <HAL_RCCEx_PeriphCLKConfig+0x244>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 800323a:	4b62      	ldr	r3, [pc, #392]	; (80033c4 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 800323c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800323e:	23c0      	movs	r3, #192	; 0xc0
 8003240:	029b      	lsls	r3, r3, #10
 8003242:	4013      	ands	r3, r2
 8003244:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	2b00      	cmp	r3, #0
 800324a:	d03b      	beq.n	80032c4 <HAL_RCCEx_PeriphCLKConfig+0x14c>
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	685a      	ldr	r2, [r3, #4]
 8003250:	23c0      	movs	r3, #192	; 0xc0
 8003252:	029b      	lsls	r3, r3, #10
 8003254:	4013      	ands	r3, r2
 8003256:	68fa      	ldr	r2, [r7, #12]
 8003258:	429a      	cmp	r2, r3
 800325a:	d033      	beq.n	80032c4 <HAL_RCCEx_PeriphCLKConfig+0x14c>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	2220      	movs	r2, #32
 8003262:	4013      	ands	r3, r2
 8003264:	d02e      	beq.n	80032c4 <HAL_RCCEx_PeriphCLKConfig+0x14c>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 8003266:	4b57      	ldr	r3, [pc, #348]	; (80033c4 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8003268:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800326a:	4a58      	ldr	r2, [pc, #352]	; (80033cc <HAL_RCCEx_PeriphCLKConfig+0x254>)
 800326c:	4013      	ands	r3, r2
 800326e:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003270:	4b54      	ldr	r3, [pc, #336]	; (80033c4 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8003272:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003274:	4b53      	ldr	r3, [pc, #332]	; (80033c4 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8003276:	2180      	movs	r1, #128	; 0x80
 8003278:	0309      	lsls	r1, r1, #12
 800327a:	430a      	orrs	r2, r1
 800327c:	651a      	str	r2, [r3, #80]	; 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 800327e:	4b51      	ldr	r3, [pc, #324]	; (80033c4 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8003280:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003282:	4b50      	ldr	r3, [pc, #320]	; (80033c4 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8003284:	4952      	ldr	r1, [pc, #328]	; (80033d0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003286:	400a      	ands	r2, r1
 8003288:	651a      	str	r2, [r3, #80]	; 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 800328a:	4b4e      	ldr	r3, [pc, #312]	; (80033c4 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 800328c:	68fa      	ldr	r2, [r7, #12]
 800328e:	651a      	str	r2, [r3, #80]	; 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 8003290:	68fa      	ldr	r2, [r7, #12]
 8003292:	2380      	movs	r3, #128	; 0x80
 8003294:	005b      	lsls	r3, r3, #1
 8003296:	4013      	ands	r3, r2
 8003298:	d014      	beq.n	80032c4 <HAL_RCCEx_PeriphCLKConfig+0x14c>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800329a:	f7fe fb89 	bl	80019b0 <HAL_GetTick>
 800329e:	0003      	movs	r3, r0
 80032a0:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80032a2:	e009      	b.n	80032b8 <HAL_RCCEx_PeriphCLKConfig+0x140>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80032a4:	f7fe fb84 	bl	80019b0 <HAL_GetTick>
 80032a8:	0002      	movs	r2, r0
 80032aa:	693b      	ldr	r3, [r7, #16]
 80032ac:	1ad3      	subs	r3, r2, r3
 80032ae:	4a49      	ldr	r2, [pc, #292]	; (80033d4 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 80032b0:	4293      	cmp	r3, r2
 80032b2:	d901      	bls.n	80032b8 <HAL_RCCEx_PeriphCLKConfig+0x140>
          {
            return HAL_TIMEOUT;
 80032b4:	2303      	movs	r3, #3
 80032b6:	e081      	b.n	80033bc <HAL_RCCEx_PeriphCLKConfig+0x244>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80032b8:	4b42      	ldr	r3, [pc, #264]	; (80033c4 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 80032ba:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80032bc:	2380      	movs	r3, #128	; 0x80
 80032be:	009b      	lsls	r3, r3, #2
 80032c0:	4013      	ands	r3, r2
 80032c2:	d0ef      	beq.n	80032a4 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      __HAL_RCC_LCD_CONFIG(PeriphClkInit->LCDClockSelection);
    } 
#endif /* LCD */

    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	2220      	movs	r2, #32
 80032ca:	4013      	ands	r3, r2
 80032cc:	d01f      	beq.n	800330e <HAL_RCCEx_PeriphCLKConfig+0x196>
    {
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	685a      	ldr	r2, [r3, #4]
 80032d2:	23c0      	movs	r3, #192	; 0xc0
 80032d4:	029b      	lsls	r3, r3, #10
 80032d6:	401a      	ands	r2, r3
 80032d8:	23c0      	movs	r3, #192	; 0xc0
 80032da:	029b      	lsls	r3, r3, #10
 80032dc:	429a      	cmp	r2, r3
 80032de:	d10c      	bne.n	80032fa <HAL_RCCEx_PeriphCLKConfig+0x182>
 80032e0:	4b38      	ldr	r3, [pc, #224]	; (80033c4 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	4a3c      	ldr	r2, [pc, #240]	; (80033d8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80032e6:	4013      	ands	r3, r2
 80032e8:	0019      	movs	r1, r3
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	685a      	ldr	r2, [r3, #4]
 80032ee:	23c0      	movs	r3, #192	; 0xc0
 80032f0:	039b      	lsls	r3, r3, #14
 80032f2:	401a      	ands	r2, r3
 80032f4:	4b33      	ldr	r3, [pc, #204]	; (80033c4 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 80032f6:	430a      	orrs	r2, r1
 80032f8:	601a      	str	r2, [r3, #0]
 80032fa:	4b32      	ldr	r3, [pc, #200]	; (80033c4 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 80032fc:	6d19      	ldr	r1, [r3, #80]	; 0x50
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	685a      	ldr	r2, [r3, #4]
 8003302:	23c0      	movs	r3, #192	; 0xc0
 8003304:	029b      	lsls	r3, r3, #10
 8003306:	401a      	ands	r2, r3
 8003308:	4b2e      	ldr	r3, [pc, #184]	; (80033c4 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 800330a:	430a      	orrs	r2, r1
 800330c:	651a      	str	r2, [r3, #80]	; 0x50
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800330e:	2317      	movs	r3, #23
 8003310:	18fb      	adds	r3, r7, r3
 8003312:	781b      	ldrb	r3, [r3, #0]
 8003314:	2b01      	cmp	r3, #1
 8003316:	d105      	bne.n	8003324 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003318:	4b2a      	ldr	r3, [pc, #168]	; (80033c4 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 800331a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800331c:	4b29      	ldr	r3, [pc, #164]	; (80033c4 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 800331e:	492f      	ldr	r1, [pc, #188]	; (80033dc <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003320:	400a      	ands	r2, r1
 8003322:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined (RCC_CCIPR_USART1SEL)
  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	2201      	movs	r2, #1
 800332a:	4013      	ands	r3, r2
 800332c:	d009      	beq.n	8003342 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800332e:	4b25      	ldr	r3, [pc, #148]	; (80033c4 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8003330:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003332:	2203      	movs	r2, #3
 8003334:	4393      	bics	r3, r2
 8003336:	0019      	movs	r1, r3
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	689a      	ldr	r2, [r3, #8]
 800333c:	4b21      	ldr	r3, [pc, #132]	; (80033c4 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 800333e:	430a      	orrs	r2, r1
 8003340:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	2202      	movs	r2, #2
 8003348:	4013      	ands	r3, r2
 800334a:	d009      	beq.n	8003360 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800334c:	4b1d      	ldr	r3, [pc, #116]	; (80033c4 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 800334e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003350:	220c      	movs	r2, #12
 8003352:	4393      	bics	r3, r2
 8003354:	0019      	movs	r1, r3
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	68da      	ldr	r2, [r3, #12]
 800335a:	4b1a      	ldr	r3, [pc, #104]	; (80033c4 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 800335c:	430a      	orrs	r2, r1
 800335e:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	2204      	movs	r2, #4
 8003366:	4013      	ands	r3, r2
 8003368:	d009      	beq.n	800337e <HAL_RCCEx_PeriphCLKConfig+0x206>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800336a:	4b16      	ldr	r3, [pc, #88]	; (80033c4 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 800336c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800336e:	4a1c      	ldr	r2, [pc, #112]	; (80033e0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003370:	4013      	ands	r3, r2
 8003372:	0019      	movs	r1, r3
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	691a      	ldr	r2, [r3, #16]
 8003378:	4b12      	ldr	r3, [pc, #72]	; (80033c4 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 800337a:	430a      	orrs	r2, r1
 800337c:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	2208      	movs	r2, #8
 8003384:	4013      	ands	r3, r2
 8003386:	d009      	beq.n	800339c <HAL_RCCEx_PeriphCLKConfig+0x224>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003388:	4b0e      	ldr	r3, [pc, #56]	; (80033c4 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 800338a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800338c:	4a15      	ldr	r2, [pc, #84]	; (80033e4 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 800338e:	4013      	ands	r3, r2
 8003390:	0019      	movs	r1, r3
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	695a      	ldr	r2, [r3, #20]
 8003396:	4b0b      	ldr	r3, [pc, #44]	; (80033c4 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8003398:	430a      	orrs	r2, r1
 800339a:	64da      	str	r2, [r3, #76]	; 0x4c
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	2280      	movs	r2, #128	; 0x80
 80033a2:	4013      	ands	r3, r2
 80033a4:	d009      	beq.n	80033ba <HAL_RCCEx_PeriphCLKConfig+0x242>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 80033a6:	4b07      	ldr	r3, [pc, #28]	; (80033c4 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 80033a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80033aa:	4a0f      	ldr	r2, [pc, #60]	; (80033e8 <HAL_RCCEx_PeriphCLKConfig+0x270>)
 80033ac:	4013      	ands	r3, r2
 80033ae:	0019      	movs	r1, r3
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	699a      	ldr	r2, [r3, #24]
 80033b4:	4b03      	ldr	r3, [pc, #12]	; (80033c4 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 80033b6:	430a      	orrs	r2, r1
 80033b8:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 80033ba:	2300      	movs	r3, #0
}
 80033bc:	0018      	movs	r0, r3
 80033be:	46bd      	mov	sp, r7
 80033c0:	b006      	add	sp, #24
 80033c2:	bd80      	pop	{r7, pc}
 80033c4:	40021000 	.word	0x40021000
 80033c8:	40007000 	.word	0x40007000
 80033cc:	fffcffff 	.word	0xfffcffff
 80033d0:	fff7ffff 	.word	0xfff7ffff
 80033d4:	00001388 	.word	0x00001388
 80033d8:	ffcfffff 	.word	0xffcfffff
 80033dc:	efffffff 	.word	0xefffffff
 80033e0:	fffff3ff 	.word	0xfffff3ff
 80033e4:	ffffcfff 	.word	0xffffcfff
 80033e8:	fff3ffff 	.word	0xfff3ffff

080033ec <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80033ec:	b580      	push	{r7, lr}
 80033ee:	b082      	sub	sp, #8
 80033f0:	af00      	add	r7, sp, #0
 80033f2:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d101      	bne.n	80033fe <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80033fa:	2301      	movs	r3, #1
 80033fc:	e083      	b.n	8003506 <HAL_SPI_Init+0x11a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003402:	2b00      	cmp	r3, #0
 8003404:	d109      	bne.n	800341a <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	685a      	ldr	r2, [r3, #4]
 800340a:	2382      	movs	r3, #130	; 0x82
 800340c:	005b      	lsls	r3, r3, #1
 800340e:	429a      	cmp	r2, r3
 8003410:	d009      	beq.n	8003426 <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	2200      	movs	r2, #0
 8003416:	61da      	str	r2, [r3, #28]
 8003418:	e005      	b.n	8003426 <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	2200      	movs	r2, #0
 800341e:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	2200      	movs	r2, #0
 8003424:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	2200      	movs	r2, #0
 800342a:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	2251      	movs	r2, #81	; 0x51
 8003430:	5c9b      	ldrb	r3, [r3, r2]
 8003432:	b2db      	uxtb	r3, r3
 8003434:	2b00      	cmp	r3, #0
 8003436:	d107      	bne.n	8003448 <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	2250      	movs	r2, #80	; 0x50
 800343c:	2100      	movs	r1, #0
 800343e:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	0018      	movs	r0, r3
 8003444:	f7fe f952 	bl	80016ec <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	2251      	movs	r2, #81	; 0x51
 800344c:	2102      	movs	r1, #2
 800344e:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	681a      	ldr	r2, [r3, #0]
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	2140      	movs	r1, #64	; 0x40
 800345c:	438a      	bics	r2, r1
 800345e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	685a      	ldr	r2, [r3, #4]
 8003464:	2382      	movs	r3, #130	; 0x82
 8003466:	005b      	lsls	r3, r3, #1
 8003468:	401a      	ands	r2, r3
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	6899      	ldr	r1, [r3, #8]
 800346e:	2384      	movs	r3, #132	; 0x84
 8003470:	021b      	lsls	r3, r3, #8
 8003472:	400b      	ands	r3, r1
 8003474:	431a      	orrs	r2, r3
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	68d9      	ldr	r1, [r3, #12]
 800347a:	2380      	movs	r3, #128	; 0x80
 800347c:	011b      	lsls	r3, r3, #4
 800347e:	400b      	ands	r3, r1
 8003480:	431a      	orrs	r2, r3
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	691b      	ldr	r3, [r3, #16]
 8003486:	2102      	movs	r1, #2
 8003488:	400b      	ands	r3, r1
 800348a:	431a      	orrs	r2, r3
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	695b      	ldr	r3, [r3, #20]
 8003490:	2101      	movs	r1, #1
 8003492:	400b      	ands	r3, r1
 8003494:	431a      	orrs	r2, r3
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	6999      	ldr	r1, [r3, #24]
 800349a:	2380      	movs	r3, #128	; 0x80
 800349c:	009b      	lsls	r3, r3, #2
 800349e:	400b      	ands	r3, r1
 80034a0:	431a      	orrs	r2, r3
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	69db      	ldr	r3, [r3, #28]
 80034a6:	2138      	movs	r1, #56	; 0x38
 80034a8:	400b      	ands	r3, r1
 80034aa:	431a      	orrs	r2, r3
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	6a1b      	ldr	r3, [r3, #32]
 80034b0:	2180      	movs	r1, #128	; 0x80
 80034b2:	400b      	ands	r3, r1
 80034b4:	431a      	orrs	r2, r3
 80034b6:	0011      	movs	r1, r2
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80034bc:	2380      	movs	r3, #128	; 0x80
 80034be:	019b      	lsls	r3, r3, #6
 80034c0:	401a      	ands	r2, r3
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	430a      	orrs	r2, r1
 80034c8:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	699b      	ldr	r3, [r3, #24]
 80034ce:	0c1b      	lsrs	r3, r3, #16
 80034d0:	2204      	movs	r2, #4
 80034d2:	4013      	ands	r3, r2
 80034d4:	0019      	movs	r1, r3
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034da:	2210      	movs	r2, #16
 80034dc:	401a      	ands	r2, r3
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	430a      	orrs	r2, r1
 80034e4:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	69da      	ldr	r2, [r3, #28]
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	4907      	ldr	r1, [pc, #28]	; (8003510 <HAL_SPI_Init+0x124>)
 80034f2:	400a      	ands	r2, r1
 80034f4:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	2200      	movs	r2, #0
 80034fa:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	2251      	movs	r2, #81	; 0x51
 8003500:	2101      	movs	r1, #1
 8003502:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003504:	2300      	movs	r3, #0
}
 8003506:	0018      	movs	r0, r3
 8003508:	46bd      	mov	sp, r7
 800350a:	b002      	add	sp, #8
 800350c:	bd80      	pop	{r7, pc}
 800350e:	46c0      	nop			; (mov r8, r8)
 8003510:	fffff7ff 	.word	0xfffff7ff

08003514 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003514:	b580      	push	{r7, lr}
 8003516:	b088      	sub	sp, #32
 8003518:	af00      	add	r7, sp, #0
 800351a:	60f8      	str	r0, [r7, #12]
 800351c:	60b9      	str	r1, [r7, #8]
 800351e:	603b      	str	r3, [r7, #0]
 8003520:	1dbb      	adds	r3, r7, #6
 8003522:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003524:	231f      	movs	r3, #31
 8003526:	18fb      	adds	r3, r7, r3
 8003528:	2200      	movs	r2, #0
 800352a:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	2250      	movs	r2, #80	; 0x50
 8003530:	5c9b      	ldrb	r3, [r3, r2]
 8003532:	2b01      	cmp	r3, #1
 8003534:	d101      	bne.n	800353a <HAL_SPI_Transmit+0x26>
 8003536:	2302      	movs	r3, #2
 8003538:	e145      	b.n	80037c6 <HAL_SPI_Transmit+0x2b2>
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	2250      	movs	r2, #80	; 0x50
 800353e:	2101      	movs	r1, #1
 8003540:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003542:	f7fe fa35 	bl	80019b0 <HAL_GetTick>
 8003546:	0003      	movs	r3, r0
 8003548:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 800354a:	2316      	movs	r3, #22
 800354c:	18fb      	adds	r3, r7, r3
 800354e:	1dba      	adds	r2, r7, #6
 8003550:	8812      	ldrh	r2, [r2, #0]
 8003552:	801a      	strh	r2, [r3, #0]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	2251      	movs	r2, #81	; 0x51
 8003558:	5c9b      	ldrb	r3, [r3, r2]
 800355a:	b2db      	uxtb	r3, r3
 800355c:	2b01      	cmp	r3, #1
 800355e:	d004      	beq.n	800356a <HAL_SPI_Transmit+0x56>
  {
    errorcode = HAL_BUSY;
 8003560:	231f      	movs	r3, #31
 8003562:	18fb      	adds	r3, r7, r3
 8003564:	2202      	movs	r2, #2
 8003566:	701a      	strb	r2, [r3, #0]
    goto error;
 8003568:	e126      	b.n	80037b8 <HAL_SPI_Transmit+0x2a4>
  }

  if ((pData == NULL) || (Size == 0U))
 800356a:	68bb      	ldr	r3, [r7, #8]
 800356c:	2b00      	cmp	r3, #0
 800356e:	d003      	beq.n	8003578 <HAL_SPI_Transmit+0x64>
 8003570:	1dbb      	adds	r3, r7, #6
 8003572:	881b      	ldrh	r3, [r3, #0]
 8003574:	2b00      	cmp	r3, #0
 8003576:	d104      	bne.n	8003582 <HAL_SPI_Transmit+0x6e>
  {
    errorcode = HAL_ERROR;
 8003578:	231f      	movs	r3, #31
 800357a:	18fb      	adds	r3, r7, r3
 800357c:	2201      	movs	r2, #1
 800357e:	701a      	strb	r2, [r3, #0]
    goto error;
 8003580:	e11a      	b.n	80037b8 <HAL_SPI_Transmit+0x2a4>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	2251      	movs	r2, #81	; 0x51
 8003586:	2103      	movs	r1, #3
 8003588:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	2200      	movs	r2, #0
 800358e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	68ba      	ldr	r2, [r7, #8]
 8003594:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	1dba      	adds	r2, r7, #6
 800359a:	8812      	ldrh	r2, [r2, #0]
 800359c:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	1dba      	adds	r2, r7, #6
 80035a2:	8812      	ldrh	r2, [r2, #0]
 80035a4:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	2200      	movs	r2, #0
 80035aa:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	2200      	movs	r2, #0
 80035b0:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	2200      	movs	r2, #0
 80035b6:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	2200      	movs	r2, #0
 80035bc:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	2200      	movs	r2, #0
 80035c2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	689a      	ldr	r2, [r3, #8]
 80035c8:	2380      	movs	r3, #128	; 0x80
 80035ca:	021b      	lsls	r3, r3, #8
 80035cc:	429a      	cmp	r2, r3
 80035ce:	d110      	bne.n	80035f2 <HAL_SPI_Transmit+0xde>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	681a      	ldr	r2, [r3, #0]
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	2140      	movs	r1, #64	; 0x40
 80035dc:	438a      	bics	r2, r1
 80035de:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	681a      	ldr	r2, [r3, #0]
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	2180      	movs	r1, #128	; 0x80
 80035ec:	01c9      	lsls	r1, r1, #7
 80035ee:	430a      	orrs	r2, r1
 80035f0:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	2240      	movs	r2, #64	; 0x40
 80035fa:	4013      	ands	r3, r2
 80035fc:	2b40      	cmp	r3, #64	; 0x40
 80035fe:	d007      	beq.n	8003610 <HAL_SPI_Transmit+0xfc>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	681a      	ldr	r2, [r3, #0]
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	2140      	movs	r1, #64	; 0x40
 800360c:	430a      	orrs	r2, r1
 800360e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	68da      	ldr	r2, [r3, #12]
 8003614:	2380      	movs	r3, #128	; 0x80
 8003616:	011b      	lsls	r3, r3, #4
 8003618:	429a      	cmp	r2, r3
 800361a:	d152      	bne.n	80036c2 <HAL_SPI_Transmit+0x1ae>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	685b      	ldr	r3, [r3, #4]
 8003620:	2b00      	cmp	r3, #0
 8003622:	d004      	beq.n	800362e <HAL_SPI_Transmit+0x11a>
 8003624:	2316      	movs	r3, #22
 8003626:	18fb      	adds	r3, r7, r3
 8003628:	881b      	ldrh	r3, [r3, #0]
 800362a:	2b01      	cmp	r3, #1
 800362c:	d143      	bne.n	80036b6 <HAL_SPI_Transmit+0x1a2>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003632:	881a      	ldrh	r2, [r3, #0]
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800363e:	1c9a      	adds	r2, r3, #2
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003648:	b29b      	uxth	r3, r3
 800364a:	3b01      	subs	r3, #1
 800364c:	b29a      	uxth	r2, r3
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003652:	e030      	b.n	80036b6 <HAL_SPI_Transmit+0x1a2>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	689b      	ldr	r3, [r3, #8]
 800365a:	2202      	movs	r2, #2
 800365c:	4013      	ands	r3, r2
 800365e:	2b02      	cmp	r3, #2
 8003660:	d112      	bne.n	8003688 <HAL_SPI_Transmit+0x174>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003666:	881a      	ldrh	r2, [r3, #0]
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003672:	1c9a      	adds	r2, r3, #2
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800367c:	b29b      	uxth	r3, r3
 800367e:	3b01      	subs	r3, #1
 8003680:	b29a      	uxth	r2, r3
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	86da      	strh	r2, [r3, #54]	; 0x36
 8003686:	e016      	b.n	80036b6 <HAL_SPI_Transmit+0x1a2>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003688:	f7fe f992 	bl	80019b0 <HAL_GetTick>
 800368c:	0002      	movs	r2, r0
 800368e:	69bb      	ldr	r3, [r7, #24]
 8003690:	1ad3      	subs	r3, r2, r3
 8003692:	683a      	ldr	r2, [r7, #0]
 8003694:	429a      	cmp	r2, r3
 8003696:	d802      	bhi.n	800369e <HAL_SPI_Transmit+0x18a>
 8003698:	683b      	ldr	r3, [r7, #0]
 800369a:	3301      	adds	r3, #1
 800369c:	d102      	bne.n	80036a4 <HAL_SPI_Transmit+0x190>
 800369e:	683b      	ldr	r3, [r7, #0]
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d108      	bne.n	80036b6 <HAL_SPI_Transmit+0x1a2>
        {
          errorcode = HAL_TIMEOUT;
 80036a4:	231f      	movs	r3, #31
 80036a6:	18fb      	adds	r3, r7, r3
 80036a8:	2203      	movs	r2, #3
 80036aa:	701a      	strb	r2, [r3, #0]
          hspi->State = HAL_SPI_STATE_READY;
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	2251      	movs	r2, #81	; 0x51
 80036b0:	2101      	movs	r1, #1
 80036b2:	5499      	strb	r1, [r3, r2]
          goto error;
 80036b4:	e080      	b.n	80037b8 <HAL_SPI_Transmit+0x2a4>
    while (hspi->TxXferCount > 0U)
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80036ba:	b29b      	uxth	r3, r3
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d1c9      	bne.n	8003654 <HAL_SPI_Transmit+0x140>
 80036c0:	e053      	b.n	800376a <HAL_SPI_Transmit+0x256>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	685b      	ldr	r3, [r3, #4]
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d004      	beq.n	80036d4 <HAL_SPI_Transmit+0x1c0>
 80036ca:	2316      	movs	r3, #22
 80036cc:	18fb      	adds	r3, r7, r3
 80036ce:	881b      	ldrh	r3, [r3, #0]
 80036d0:	2b01      	cmp	r3, #1
 80036d2:	d145      	bne.n	8003760 <HAL_SPI_Transmit+0x24c>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	330c      	adds	r3, #12
 80036de:	7812      	ldrb	r2, [r2, #0]
 80036e0:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036e6:	1c5a      	adds	r2, r3, #1
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80036f0:	b29b      	uxth	r3, r3
 80036f2:	3b01      	subs	r3, #1
 80036f4:	b29a      	uxth	r2, r3
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80036fa:	e031      	b.n	8003760 <HAL_SPI_Transmit+0x24c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	689b      	ldr	r3, [r3, #8]
 8003702:	2202      	movs	r2, #2
 8003704:	4013      	ands	r3, r2
 8003706:	2b02      	cmp	r3, #2
 8003708:	d113      	bne.n	8003732 <HAL_SPI_Transmit+0x21e>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	330c      	adds	r3, #12
 8003714:	7812      	ldrb	r2, [r2, #0]
 8003716:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800371c:	1c5a      	adds	r2, r3, #1
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003726:	b29b      	uxth	r3, r3
 8003728:	3b01      	subs	r3, #1
 800372a:	b29a      	uxth	r2, r3
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	86da      	strh	r2, [r3, #54]	; 0x36
 8003730:	e016      	b.n	8003760 <HAL_SPI_Transmit+0x24c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003732:	f7fe f93d 	bl	80019b0 <HAL_GetTick>
 8003736:	0002      	movs	r2, r0
 8003738:	69bb      	ldr	r3, [r7, #24]
 800373a:	1ad3      	subs	r3, r2, r3
 800373c:	683a      	ldr	r2, [r7, #0]
 800373e:	429a      	cmp	r2, r3
 8003740:	d802      	bhi.n	8003748 <HAL_SPI_Transmit+0x234>
 8003742:	683b      	ldr	r3, [r7, #0]
 8003744:	3301      	adds	r3, #1
 8003746:	d102      	bne.n	800374e <HAL_SPI_Transmit+0x23a>
 8003748:	683b      	ldr	r3, [r7, #0]
 800374a:	2b00      	cmp	r3, #0
 800374c:	d108      	bne.n	8003760 <HAL_SPI_Transmit+0x24c>
        {
          errorcode = HAL_TIMEOUT;
 800374e:	231f      	movs	r3, #31
 8003750:	18fb      	adds	r3, r7, r3
 8003752:	2203      	movs	r2, #3
 8003754:	701a      	strb	r2, [r3, #0]
          hspi->State = HAL_SPI_STATE_READY;
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	2251      	movs	r2, #81	; 0x51
 800375a:	2101      	movs	r1, #1
 800375c:	5499      	strb	r1, [r3, r2]
          goto error;
 800375e:	e02b      	b.n	80037b8 <HAL_SPI_Transmit+0x2a4>
    while (hspi->TxXferCount > 0U)
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003764:	b29b      	uxth	r3, r3
 8003766:	2b00      	cmp	r3, #0
 8003768:	d1c8      	bne.n	80036fc <HAL_SPI_Transmit+0x1e8>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800376a:	69ba      	ldr	r2, [r7, #24]
 800376c:	6839      	ldr	r1, [r7, #0]
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	0018      	movs	r0, r3
 8003772:	f000 fc1f 	bl	8003fb4 <SPI_EndRxTxTransaction>
 8003776:	1e03      	subs	r3, r0, #0
 8003778:	d002      	beq.n	8003780 <HAL_SPI_Transmit+0x26c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	2220      	movs	r2, #32
 800377e:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	689b      	ldr	r3, [r3, #8]
 8003784:	2b00      	cmp	r3, #0
 8003786:	d10a      	bne.n	800379e <HAL_SPI_Transmit+0x28a>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003788:	2300      	movs	r3, #0
 800378a:	613b      	str	r3, [r7, #16]
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	68db      	ldr	r3, [r3, #12]
 8003792:	613b      	str	r3, [r7, #16]
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	689b      	ldr	r3, [r3, #8]
 800379a:	613b      	str	r3, [r7, #16]
 800379c:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d004      	beq.n	80037b0 <HAL_SPI_Transmit+0x29c>
  {
    errorcode = HAL_ERROR;
 80037a6:	231f      	movs	r3, #31
 80037a8:	18fb      	adds	r3, r7, r3
 80037aa:	2201      	movs	r2, #1
 80037ac:	701a      	strb	r2, [r3, #0]
 80037ae:	e003      	b.n	80037b8 <HAL_SPI_Transmit+0x2a4>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	2251      	movs	r2, #81	; 0x51
 80037b4:	2101      	movs	r1, #1
 80037b6:	5499      	strb	r1, [r3, r2]
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	2250      	movs	r2, #80	; 0x50
 80037bc:	2100      	movs	r1, #0
 80037be:	5499      	strb	r1, [r3, r2]
  return errorcode;
 80037c0:	231f      	movs	r3, #31
 80037c2:	18fb      	adds	r3, r7, r3
 80037c4:	781b      	ldrb	r3, [r3, #0]
}
 80037c6:	0018      	movs	r0, r3
 80037c8:	46bd      	mov	sp, r7
 80037ca:	b008      	add	sp, #32
 80037cc:	bd80      	pop	{r7, pc}
	...

080037d0 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80037d0:	b590      	push	{r4, r7, lr}
 80037d2:	b089      	sub	sp, #36	; 0x24
 80037d4:	af02      	add	r7, sp, #8
 80037d6:	60f8      	str	r0, [r7, #12]
 80037d8:	60b9      	str	r1, [r7, #8]
 80037da:	603b      	str	r3, [r7, #0]
 80037dc:	1dbb      	adds	r3, r7, #6
 80037de:	801a      	strh	r2, [r3, #0]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80037e0:	2117      	movs	r1, #23
 80037e2:	187b      	adds	r3, r7, r1
 80037e4:	2200      	movs	r2, #0
 80037e6:	701a      	strb	r2, [r3, #0]
    /* in this case, 16-bit access is performed on Data
       So, check Data is 16-bit aligned address */
    assert_param(IS_SPI_16BIT_ALIGNED_ADDRESS(pData));
  }

  if (hspi->State != HAL_SPI_STATE_READY)
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	2251      	movs	r2, #81	; 0x51
 80037ec:	5c9b      	ldrb	r3, [r3, r2]
 80037ee:	b2db      	uxtb	r3, r3
 80037f0:	2b01      	cmp	r3, #1
 80037f2:	d003      	beq.n	80037fc <HAL_SPI_Receive+0x2c>
  {
    errorcode = HAL_BUSY;
 80037f4:	187b      	adds	r3, r7, r1
 80037f6:	2202      	movs	r2, #2
 80037f8:	701a      	strb	r2, [r3, #0]
    goto error;
 80037fa:	e109      	b.n	8003a10 <HAL_SPI_Receive+0x240>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	685a      	ldr	r2, [r3, #4]
 8003800:	2382      	movs	r3, #130	; 0x82
 8003802:	005b      	lsls	r3, r3, #1
 8003804:	429a      	cmp	r2, r3
 8003806:	d113      	bne.n	8003830 <HAL_SPI_Receive+0x60>
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	689b      	ldr	r3, [r3, #8]
 800380c:	2b00      	cmp	r3, #0
 800380e:	d10f      	bne.n	8003830 <HAL_SPI_Receive+0x60>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	2251      	movs	r2, #81	; 0x51
 8003814:	2104      	movs	r1, #4
 8003816:	5499      	strb	r1, [r3, r2]
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8003818:	1dbb      	adds	r3, r7, #6
 800381a:	881c      	ldrh	r4, [r3, #0]
 800381c:	68ba      	ldr	r2, [r7, #8]
 800381e:	68b9      	ldr	r1, [r7, #8]
 8003820:	68f8      	ldr	r0, [r7, #12]
 8003822:	683b      	ldr	r3, [r7, #0]
 8003824:	9300      	str	r3, [sp, #0]
 8003826:	0023      	movs	r3, r4
 8003828:	f000 f900 	bl	8003a2c <HAL_SPI_TransmitReceive>
 800382c:	0003      	movs	r3, r0
 800382e:	e0f6      	b.n	8003a1e <HAL_SPI_Receive+0x24e>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	2250      	movs	r2, #80	; 0x50
 8003834:	5c9b      	ldrb	r3, [r3, r2]
 8003836:	2b01      	cmp	r3, #1
 8003838:	d101      	bne.n	800383e <HAL_SPI_Receive+0x6e>
 800383a:	2302      	movs	r3, #2
 800383c:	e0ef      	b.n	8003a1e <HAL_SPI_Receive+0x24e>
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	2250      	movs	r2, #80	; 0x50
 8003842:	2101      	movs	r1, #1
 8003844:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003846:	f7fe f8b3 	bl	80019b0 <HAL_GetTick>
 800384a:	0003      	movs	r3, r0
 800384c:	613b      	str	r3, [r7, #16]

  if ((pData == NULL) || (Size == 0U))
 800384e:	68bb      	ldr	r3, [r7, #8]
 8003850:	2b00      	cmp	r3, #0
 8003852:	d003      	beq.n	800385c <HAL_SPI_Receive+0x8c>
 8003854:	1dbb      	adds	r3, r7, #6
 8003856:	881b      	ldrh	r3, [r3, #0]
 8003858:	2b00      	cmp	r3, #0
 800385a:	d104      	bne.n	8003866 <HAL_SPI_Receive+0x96>
  {
    errorcode = HAL_ERROR;
 800385c:	2317      	movs	r3, #23
 800385e:	18fb      	adds	r3, r7, r3
 8003860:	2201      	movs	r2, #1
 8003862:	701a      	strb	r2, [r3, #0]
    goto error;
 8003864:	e0d4      	b.n	8003a10 <HAL_SPI_Receive+0x240>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	2251      	movs	r2, #81	; 0x51
 800386a:	2104      	movs	r1, #4
 800386c:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	2200      	movs	r2, #0
 8003872:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	68ba      	ldr	r2, [r7, #8]
 8003878:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	1dba      	adds	r2, r7, #6
 800387e:	8812      	ldrh	r2, [r2, #0]
 8003880:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	1dba      	adds	r2, r7, #6
 8003886:	8812      	ldrh	r2, [r2, #0]
 8003888:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	2200      	movs	r2, #0
 800388e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	2200      	movs	r2, #0
 8003894:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	2200      	movs	r2, #0
 800389a:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	2200      	movs	r2, #0
 80038a0:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	2200      	movs	r2, #0
 80038a6:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	689a      	ldr	r2, [r3, #8]
 80038ac:	2380      	movs	r3, #128	; 0x80
 80038ae:	021b      	lsls	r3, r3, #8
 80038b0:	429a      	cmp	r2, r3
 80038b2:	d10f      	bne.n	80038d4 <HAL_SPI_Receive+0x104>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	681a      	ldr	r2, [r3, #0]
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	2140      	movs	r1, #64	; 0x40
 80038c0:	438a      	bics	r2, r1
 80038c2:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	681a      	ldr	r2, [r3, #0]
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	4956      	ldr	r1, [pc, #344]	; (8003a28 <HAL_SPI_Receive+0x258>)
 80038d0:	400a      	ands	r2, r1
 80038d2:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	2240      	movs	r2, #64	; 0x40
 80038dc:	4013      	ands	r3, r2
 80038de:	2b40      	cmp	r3, #64	; 0x40
 80038e0:	d007      	beq.n	80038f2 <HAL_SPI_Receive+0x122>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	681a      	ldr	r2, [r3, #0]
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	2140      	movs	r1, #64	; 0x40
 80038ee:	430a      	orrs	r2, r1
 80038f0:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	68db      	ldr	r3, [r3, #12]
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d000      	beq.n	80038fc <HAL_SPI_Receive+0x12c>
 80038fa:	e06c      	b.n	80039d6 <HAL_SPI_Receive+0x206>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80038fc:	e033      	b.n	8003966 <HAL_SPI_Receive+0x196>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	689b      	ldr	r3, [r3, #8]
 8003904:	2201      	movs	r2, #1
 8003906:	4013      	ands	r3, r2
 8003908:	2b01      	cmp	r3, #1
 800390a:	d115      	bne.n	8003938 <HAL_SPI_Receive+0x168>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	330c      	adds	r3, #12
 8003912:	001a      	movs	r2, r3
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003918:	7812      	ldrb	r2, [r2, #0]
 800391a:	b2d2      	uxtb	r2, r2
 800391c:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003922:	1c5a      	adds	r2, r3, #1
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800392c:	b29b      	uxth	r3, r3
 800392e:	3b01      	subs	r3, #1
 8003930:	b29a      	uxth	r2, r3
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003936:	e016      	b.n	8003966 <HAL_SPI_Receive+0x196>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003938:	f7fe f83a 	bl	80019b0 <HAL_GetTick>
 800393c:	0002      	movs	r2, r0
 800393e:	693b      	ldr	r3, [r7, #16]
 8003940:	1ad3      	subs	r3, r2, r3
 8003942:	683a      	ldr	r2, [r7, #0]
 8003944:	429a      	cmp	r2, r3
 8003946:	d802      	bhi.n	800394e <HAL_SPI_Receive+0x17e>
 8003948:	683b      	ldr	r3, [r7, #0]
 800394a:	3301      	adds	r3, #1
 800394c:	d102      	bne.n	8003954 <HAL_SPI_Receive+0x184>
 800394e:	683b      	ldr	r3, [r7, #0]
 8003950:	2b00      	cmp	r3, #0
 8003952:	d108      	bne.n	8003966 <HAL_SPI_Receive+0x196>
        {
          errorcode = HAL_TIMEOUT;
 8003954:	2317      	movs	r3, #23
 8003956:	18fb      	adds	r3, r7, r3
 8003958:	2203      	movs	r2, #3
 800395a:	701a      	strb	r2, [r3, #0]
          hspi->State = HAL_SPI_STATE_READY;
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	2251      	movs	r2, #81	; 0x51
 8003960:	2101      	movs	r1, #1
 8003962:	5499      	strb	r1, [r3, r2]
          goto error;
 8003964:	e054      	b.n	8003a10 <HAL_SPI_Receive+0x240>
    while (hspi->RxXferCount > 0U)
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800396a:	b29b      	uxth	r3, r3
 800396c:	2b00      	cmp	r3, #0
 800396e:	d1c6      	bne.n	80038fe <HAL_SPI_Receive+0x12e>
 8003970:	e036      	b.n	80039e0 <HAL_SPI_Receive+0x210>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	689b      	ldr	r3, [r3, #8]
 8003978:	2201      	movs	r2, #1
 800397a:	4013      	ands	r3, r2
 800397c:	2b01      	cmp	r3, #1
 800397e:	d113      	bne.n	80039a8 <HAL_SPI_Receive+0x1d8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	68da      	ldr	r2, [r3, #12]
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800398a:	b292      	uxth	r2, r2
 800398c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003992:	1c9a      	adds	r2, r3, #2
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800399c:	b29b      	uxth	r3, r3
 800399e:	3b01      	subs	r3, #1
 80039a0:	b29a      	uxth	r2, r3
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	87da      	strh	r2, [r3, #62]	; 0x3e
 80039a6:	e016      	b.n	80039d6 <HAL_SPI_Receive+0x206>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80039a8:	f7fe f802 	bl	80019b0 <HAL_GetTick>
 80039ac:	0002      	movs	r2, r0
 80039ae:	693b      	ldr	r3, [r7, #16]
 80039b0:	1ad3      	subs	r3, r2, r3
 80039b2:	683a      	ldr	r2, [r7, #0]
 80039b4:	429a      	cmp	r2, r3
 80039b6:	d802      	bhi.n	80039be <HAL_SPI_Receive+0x1ee>
 80039b8:	683b      	ldr	r3, [r7, #0]
 80039ba:	3301      	adds	r3, #1
 80039bc:	d102      	bne.n	80039c4 <HAL_SPI_Receive+0x1f4>
 80039be:	683b      	ldr	r3, [r7, #0]
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d108      	bne.n	80039d6 <HAL_SPI_Receive+0x206>
        {
          errorcode = HAL_TIMEOUT;
 80039c4:	2317      	movs	r3, #23
 80039c6:	18fb      	adds	r3, r7, r3
 80039c8:	2203      	movs	r2, #3
 80039ca:	701a      	strb	r2, [r3, #0]
          hspi->State = HAL_SPI_STATE_READY;
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	2251      	movs	r2, #81	; 0x51
 80039d0:	2101      	movs	r1, #1
 80039d2:	5499      	strb	r1, [r3, r2]
          goto error;
 80039d4:	e01c      	b.n	8003a10 <HAL_SPI_Receive+0x240>
    while (hspi->RxXferCount > 0U)
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80039da:	b29b      	uxth	r3, r3
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d1c8      	bne.n	8003972 <HAL_SPI_Receive+0x1a2>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80039e0:	693a      	ldr	r2, [r7, #16]
 80039e2:	6839      	ldr	r1, [r7, #0]
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	0018      	movs	r0, r3
 80039e8:	f000 fa7a 	bl	8003ee0 <SPI_EndRxTransaction>
 80039ec:	1e03      	subs	r3, r0, #0
 80039ee:	d002      	beq.n	80039f6 <HAL_SPI_Receive+0x226>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	2220      	movs	r2, #32
 80039f4:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d004      	beq.n	8003a08 <HAL_SPI_Receive+0x238>
  {
    errorcode = HAL_ERROR;
 80039fe:	2317      	movs	r3, #23
 8003a00:	18fb      	adds	r3, r7, r3
 8003a02:	2201      	movs	r2, #1
 8003a04:	701a      	strb	r2, [r3, #0]
 8003a06:	e003      	b.n	8003a10 <HAL_SPI_Receive+0x240>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	2251      	movs	r2, #81	; 0x51
 8003a0c:	2101      	movs	r1, #1
 8003a0e:	5499      	strb	r1, [r3, r2]
  }

error :
  __HAL_UNLOCK(hspi);
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	2250      	movs	r2, #80	; 0x50
 8003a14:	2100      	movs	r1, #0
 8003a16:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8003a18:	2317      	movs	r3, #23
 8003a1a:	18fb      	adds	r3, r7, r3
 8003a1c:	781b      	ldrb	r3, [r3, #0]
}
 8003a1e:	0018      	movs	r0, r3
 8003a20:	46bd      	mov	sp, r7
 8003a22:	b007      	add	sp, #28
 8003a24:	bd90      	pop	{r4, r7, pc}
 8003a26:	46c0      	nop			; (mov r8, r8)
 8003a28:	ffffbfff 	.word	0xffffbfff

08003a2c <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8003a2c:	b580      	push	{r7, lr}
 8003a2e:	b08c      	sub	sp, #48	; 0x30
 8003a30:	af00      	add	r7, sp, #0
 8003a32:	60f8      	str	r0, [r7, #12]
 8003a34:	60b9      	str	r1, [r7, #8]
 8003a36:	607a      	str	r2, [r7, #4]
 8003a38:	001a      	movs	r2, r3
 8003a3a:	1cbb      	adds	r3, r7, #2
 8003a3c:	801a      	strh	r2, [r3, #0]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8003a3e:	2301      	movs	r3, #1
 8003a40:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8003a42:	232b      	movs	r3, #43	; 0x2b
 8003a44:	18fb      	adds	r3, r7, r3
 8003a46:	2200      	movs	r2, #0
 8003a48:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	2250      	movs	r2, #80	; 0x50
 8003a4e:	5c9b      	ldrb	r3, [r3, r2]
 8003a50:	2b01      	cmp	r3, #1
 8003a52:	d101      	bne.n	8003a58 <HAL_SPI_TransmitReceive+0x2c>
 8003a54:	2302      	movs	r3, #2
 8003a56:	e1b0      	b.n	8003dba <HAL_SPI_TransmitReceive+0x38e>
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	2250      	movs	r2, #80	; 0x50
 8003a5c:	2101      	movs	r1, #1
 8003a5e:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003a60:	f7fd ffa6 	bl	80019b0 <HAL_GetTick>
 8003a64:	0003      	movs	r3, r0
 8003a66:	627b      	str	r3, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8003a68:	2023      	movs	r0, #35	; 0x23
 8003a6a:	183b      	adds	r3, r7, r0
 8003a6c:	68fa      	ldr	r2, [r7, #12]
 8003a6e:	2151      	movs	r1, #81	; 0x51
 8003a70:	5c52      	ldrb	r2, [r2, r1]
 8003a72:	701a      	strb	r2, [r3, #0]
  tmp_mode            = hspi->Init.Mode;
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	685b      	ldr	r3, [r3, #4]
 8003a78:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8003a7a:	231a      	movs	r3, #26
 8003a7c:	18fb      	adds	r3, r7, r3
 8003a7e:	1cba      	adds	r2, r7, #2
 8003a80:	8812      	ldrh	r2, [r2, #0]
 8003a82:	801a      	strh	r2, [r3, #0]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8003a84:	183b      	adds	r3, r7, r0
 8003a86:	781b      	ldrb	r3, [r3, #0]
 8003a88:	2b01      	cmp	r3, #1
 8003a8a:	d011      	beq.n	8003ab0 <HAL_SPI_TransmitReceive+0x84>
 8003a8c:	69fa      	ldr	r2, [r7, #28]
 8003a8e:	2382      	movs	r3, #130	; 0x82
 8003a90:	005b      	lsls	r3, r3, #1
 8003a92:	429a      	cmp	r2, r3
 8003a94:	d107      	bne.n	8003aa6 <HAL_SPI_TransmitReceive+0x7a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	689b      	ldr	r3, [r3, #8]
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d103      	bne.n	8003aa6 <HAL_SPI_TransmitReceive+0x7a>
 8003a9e:	183b      	adds	r3, r7, r0
 8003aa0:	781b      	ldrb	r3, [r3, #0]
 8003aa2:	2b04      	cmp	r3, #4
 8003aa4:	d004      	beq.n	8003ab0 <HAL_SPI_TransmitReceive+0x84>
  {
    errorcode = HAL_BUSY;
 8003aa6:	232b      	movs	r3, #43	; 0x2b
 8003aa8:	18fb      	adds	r3, r7, r3
 8003aaa:	2202      	movs	r2, #2
 8003aac:	701a      	strb	r2, [r3, #0]
    goto error;
 8003aae:	e17d      	b.n	8003dac <HAL_SPI_TransmitReceive+0x380>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003ab0:	68bb      	ldr	r3, [r7, #8]
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d006      	beq.n	8003ac4 <HAL_SPI_TransmitReceive+0x98>
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	d003      	beq.n	8003ac4 <HAL_SPI_TransmitReceive+0x98>
 8003abc:	1cbb      	adds	r3, r7, #2
 8003abe:	881b      	ldrh	r3, [r3, #0]
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d104      	bne.n	8003ace <HAL_SPI_TransmitReceive+0xa2>
  {
    errorcode = HAL_ERROR;
 8003ac4:	232b      	movs	r3, #43	; 0x2b
 8003ac6:	18fb      	adds	r3, r7, r3
 8003ac8:	2201      	movs	r2, #1
 8003aca:	701a      	strb	r2, [r3, #0]
    goto error;
 8003acc:	e16e      	b.n	8003dac <HAL_SPI_TransmitReceive+0x380>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	2251      	movs	r2, #81	; 0x51
 8003ad2:	5c9b      	ldrb	r3, [r3, r2]
 8003ad4:	b2db      	uxtb	r3, r3
 8003ad6:	2b04      	cmp	r3, #4
 8003ad8:	d003      	beq.n	8003ae2 <HAL_SPI_TransmitReceive+0xb6>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	2251      	movs	r2, #81	; 0x51
 8003ade:	2105      	movs	r1, #5
 8003ae0:	5499      	strb	r1, [r3, r2]
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	2200      	movs	r2, #0
 8003ae6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	687a      	ldr	r2, [r7, #4]
 8003aec:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	1cba      	adds	r2, r7, #2
 8003af2:	8812      	ldrh	r2, [r2, #0]
 8003af4:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	1cba      	adds	r2, r7, #2
 8003afa:	8812      	ldrh	r2, [r2, #0]
 8003afc:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	68ba      	ldr	r2, [r7, #8]
 8003b02:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	1cba      	adds	r2, r7, #2
 8003b08:	8812      	ldrh	r2, [r2, #0]
 8003b0a:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	1cba      	adds	r2, r7, #2
 8003b10:	8812      	ldrh	r2, [r2, #0]
 8003b12:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	2200      	movs	r2, #0
 8003b18:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	2200      	movs	r2, #0
 8003b1e:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	2240      	movs	r2, #64	; 0x40
 8003b28:	4013      	ands	r3, r2
 8003b2a:	2b40      	cmp	r3, #64	; 0x40
 8003b2c:	d007      	beq.n	8003b3e <HAL_SPI_TransmitReceive+0x112>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	681a      	ldr	r2, [r3, #0]
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	2140      	movs	r1, #64	; 0x40
 8003b3a:	430a      	orrs	r2, r1
 8003b3c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	68da      	ldr	r2, [r3, #12]
 8003b42:	2380      	movs	r3, #128	; 0x80
 8003b44:	011b      	lsls	r3, r3, #4
 8003b46:	429a      	cmp	r2, r3
 8003b48:	d000      	beq.n	8003b4c <HAL_SPI_TransmitReceive+0x120>
 8003b4a:	e07f      	b.n	8003c4c <HAL_SPI_TransmitReceive+0x220>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	685b      	ldr	r3, [r3, #4]
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d005      	beq.n	8003b60 <HAL_SPI_TransmitReceive+0x134>
 8003b54:	231a      	movs	r3, #26
 8003b56:	18fb      	adds	r3, r7, r3
 8003b58:	881b      	ldrh	r3, [r3, #0]
 8003b5a:	2b01      	cmp	r3, #1
 8003b5c:	d000      	beq.n	8003b60 <HAL_SPI_TransmitReceive+0x134>
 8003b5e:	e06a      	b.n	8003c36 <HAL_SPI_TransmitReceive+0x20a>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b64:	881a      	ldrh	r2, [r3, #0]
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b70:	1c9a      	adds	r2, r3, #2
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003b7a:	b29b      	uxth	r3, r3
 8003b7c:	3b01      	subs	r3, #1
 8003b7e:	b29a      	uxth	r2, r3
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003b84:	e057      	b.n	8003c36 <HAL_SPI_TransmitReceive+0x20a>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	689b      	ldr	r3, [r3, #8]
 8003b8c:	2202      	movs	r2, #2
 8003b8e:	4013      	ands	r3, r2
 8003b90:	2b02      	cmp	r3, #2
 8003b92:	d11b      	bne.n	8003bcc <HAL_SPI_TransmitReceive+0x1a0>
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003b98:	b29b      	uxth	r3, r3
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d016      	beq.n	8003bcc <HAL_SPI_TransmitReceive+0x1a0>
 8003b9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ba0:	2b01      	cmp	r3, #1
 8003ba2:	d113      	bne.n	8003bcc <HAL_SPI_TransmitReceive+0x1a0>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ba8:	881a      	ldrh	r2, [r3, #0]
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bb4:	1c9a      	adds	r2, r3, #2
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003bbe:	b29b      	uxth	r3, r3
 8003bc0:	3b01      	subs	r3, #1
 8003bc2:	b29a      	uxth	r2, r3
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003bc8:	2300      	movs	r3, #0
 8003bca:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	689b      	ldr	r3, [r3, #8]
 8003bd2:	2201      	movs	r2, #1
 8003bd4:	4013      	ands	r3, r2
 8003bd6:	2b01      	cmp	r3, #1
 8003bd8:	d119      	bne.n	8003c0e <HAL_SPI_TransmitReceive+0x1e2>
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003bde:	b29b      	uxth	r3, r3
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	d014      	beq.n	8003c0e <HAL_SPI_TransmitReceive+0x1e2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	68da      	ldr	r2, [r3, #12]
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bee:	b292      	uxth	r2, r2
 8003bf0:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bf6:	1c9a      	adds	r2, r3, #2
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003c00:	b29b      	uxth	r3, r3
 8003c02:	3b01      	subs	r3, #1
 8003c04:	b29a      	uxth	r2, r3
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003c0a:	2301      	movs	r3, #1
 8003c0c:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8003c0e:	f7fd fecf 	bl	80019b0 <HAL_GetTick>
 8003c12:	0002      	movs	r2, r0
 8003c14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c16:	1ad3      	subs	r3, r2, r3
 8003c18:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003c1a:	429a      	cmp	r2, r3
 8003c1c:	d80b      	bhi.n	8003c36 <HAL_SPI_TransmitReceive+0x20a>
 8003c1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c20:	3301      	adds	r3, #1
 8003c22:	d008      	beq.n	8003c36 <HAL_SPI_TransmitReceive+0x20a>
      {
        errorcode = HAL_TIMEOUT;
 8003c24:	232b      	movs	r3, #43	; 0x2b
 8003c26:	18fb      	adds	r3, r7, r3
 8003c28:	2203      	movs	r2, #3
 8003c2a:	701a      	strb	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	2251      	movs	r2, #81	; 0x51
 8003c30:	2101      	movs	r1, #1
 8003c32:	5499      	strb	r1, [r3, r2]
        goto error;
 8003c34:	e0ba      	b.n	8003dac <HAL_SPI_TransmitReceive+0x380>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003c3a:	b29b      	uxth	r3, r3
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d1a2      	bne.n	8003b86 <HAL_SPI_TransmitReceive+0x15a>
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003c44:	b29b      	uxth	r3, r3
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d19d      	bne.n	8003b86 <HAL_SPI_TransmitReceive+0x15a>
 8003c4a:	e083      	b.n	8003d54 <HAL_SPI_TransmitReceive+0x328>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	685b      	ldr	r3, [r3, #4]
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d005      	beq.n	8003c60 <HAL_SPI_TransmitReceive+0x234>
 8003c54:	231a      	movs	r3, #26
 8003c56:	18fb      	adds	r3, r7, r3
 8003c58:	881b      	ldrh	r3, [r3, #0]
 8003c5a:	2b01      	cmp	r3, #1
 8003c5c:	d000      	beq.n	8003c60 <HAL_SPI_TransmitReceive+0x234>
 8003c5e:	e06f      	b.n	8003d40 <HAL_SPI_TransmitReceive+0x314>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	330c      	adds	r3, #12
 8003c6a:	7812      	ldrb	r2, [r2, #0]
 8003c6c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c72:	1c5a      	adds	r2, r3, #1
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003c7c:	b29b      	uxth	r3, r3
 8003c7e:	3b01      	subs	r3, #1
 8003c80:	b29a      	uxth	r2, r3
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003c86:	e05b      	b.n	8003d40 <HAL_SPI_TransmitReceive+0x314>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	689b      	ldr	r3, [r3, #8]
 8003c8e:	2202      	movs	r2, #2
 8003c90:	4013      	ands	r3, r2
 8003c92:	2b02      	cmp	r3, #2
 8003c94:	d11c      	bne.n	8003cd0 <HAL_SPI_TransmitReceive+0x2a4>
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003c9a:	b29b      	uxth	r3, r3
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	d017      	beq.n	8003cd0 <HAL_SPI_TransmitReceive+0x2a4>
 8003ca0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ca2:	2b01      	cmp	r3, #1
 8003ca4:	d114      	bne.n	8003cd0 <HAL_SPI_TransmitReceive+0x2a4>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	330c      	adds	r3, #12
 8003cb0:	7812      	ldrb	r2, [r2, #0]
 8003cb2:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cb8:	1c5a      	adds	r2, r3, #1
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003cc2:	b29b      	uxth	r3, r3
 8003cc4:	3b01      	subs	r3, #1
 8003cc6:	b29a      	uxth	r2, r3
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003ccc:	2300      	movs	r3, #0
 8003cce:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	689b      	ldr	r3, [r3, #8]
 8003cd6:	2201      	movs	r2, #1
 8003cd8:	4013      	ands	r3, r2
 8003cda:	2b01      	cmp	r3, #1
 8003cdc:	d119      	bne.n	8003d12 <HAL_SPI_TransmitReceive+0x2e6>
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003ce2:	b29b      	uxth	r3, r3
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	d014      	beq.n	8003d12 <HAL_SPI_TransmitReceive+0x2e6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	68da      	ldr	r2, [r3, #12]
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003cf2:	b2d2      	uxtb	r2, r2
 8003cf4:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003cfa:	1c5a      	adds	r2, r3, #1
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003d04:	b29b      	uxth	r3, r3
 8003d06:	3b01      	subs	r3, #1
 8003d08:	b29a      	uxth	r2, r3
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003d0e:	2301      	movs	r3, #1
 8003d10:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8003d12:	f7fd fe4d 	bl	80019b0 <HAL_GetTick>
 8003d16:	0002      	movs	r2, r0
 8003d18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d1a:	1ad3      	subs	r3, r2, r3
 8003d1c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003d1e:	429a      	cmp	r2, r3
 8003d20:	d802      	bhi.n	8003d28 <HAL_SPI_TransmitReceive+0x2fc>
 8003d22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d24:	3301      	adds	r3, #1
 8003d26:	d102      	bne.n	8003d2e <HAL_SPI_TransmitReceive+0x302>
 8003d28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d108      	bne.n	8003d40 <HAL_SPI_TransmitReceive+0x314>
      {
        errorcode = HAL_TIMEOUT;
 8003d2e:	232b      	movs	r3, #43	; 0x2b
 8003d30:	18fb      	adds	r3, r7, r3
 8003d32:	2203      	movs	r2, #3
 8003d34:	701a      	strb	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	2251      	movs	r2, #81	; 0x51
 8003d3a:	2101      	movs	r1, #1
 8003d3c:	5499      	strb	r1, [r3, r2]
        goto error;
 8003d3e:	e035      	b.n	8003dac <HAL_SPI_TransmitReceive+0x380>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003d44:	b29b      	uxth	r3, r3
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d19e      	bne.n	8003c88 <HAL_SPI_TransmitReceive+0x25c>
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003d4e:	b29b      	uxth	r3, r3
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d199      	bne.n	8003c88 <HAL_SPI_TransmitReceive+0x25c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003d54:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003d56:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	0018      	movs	r0, r3
 8003d5c:	f000 f92a 	bl	8003fb4 <SPI_EndRxTxTransaction>
 8003d60:	1e03      	subs	r3, r0, #0
 8003d62:	d007      	beq.n	8003d74 <HAL_SPI_TransmitReceive+0x348>
  {
    errorcode = HAL_ERROR;
 8003d64:	232b      	movs	r3, #43	; 0x2b
 8003d66:	18fb      	adds	r3, r7, r3
 8003d68:	2201      	movs	r2, #1
 8003d6a:	701a      	strb	r2, [r3, #0]
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	2220      	movs	r2, #32
 8003d70:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8003d72:	e01b      	b.n	8003dac <HAL_SPI_TransmitReceive+0x380>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	689b      	ldr	r3, [r3, #8]
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d10a      	bne.n	8003d92 <HAL_SPI_TransmitReceive+0x366>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003d7c:	2300      	movs	r3, #0
 8003d7e:	617b      	str	r3, [r7, #20]
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	68db      	ldr	r3, [r3, #12]
 8003d86:	617b      	str	r3, [r7, #20]
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	689b      	ldr	r3, [r3, #8]
 8003d8e:	617b      	str	r3, [r7, #20]
 8003d90:	697b      	ldr	r3, [r7, #20]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d004      	beq.n	8003da4 <HAL_SPI_TransmitReceive+0x378>
  {
    errorcode = HAL_ERROR;
 8003d9a:	232b      	movs	r3, #43	; 0x2b
 8003d9c:	18fb      	adds	r3, r7, r3
 8003d9e:	2201      	movs	r2, #1
 8003da0:	701a      	strb	r2, [r3, #0]
 8003da2:	e003      	b.n	8003dac <HAL_SPI_TransmitReceive+0x380>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	2251      	movs	r2, #81	; 0x51
 8003da8:	2101      	movs	r1, #1
 8003daa:	5499      	strb	r1, [r3, r2]
  }
  
error :
  __HAL_UNLOCK(hspi);
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	2250      	movs	r2, #80	; 0x50
 8003db0:	2100      	movs	r1, #0
 8003db2:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8003db4:	232b      	movs	r3, #43	; 0x2b
 8003db6:	18fb      	adds	r3, r7, r3
 8003db8:	781b      	ldrb	r3, [r3, #0]
}
 8003dba:	0018      	movs	r0, r3
 8003dbc:	46bd      	mov	sp, r7
 8003dbe:	b00c      	add	sp, #48	; 0x30
 8003dc0:	bd80      	pop	{r7, pc}
	...

08003dc4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003dc4:	b580      	push	{r7, lr}
 8003dc6:	b088      	sub	sp, #32
 8003dc8:	af00      	add	r7, sp, #0
 8003dca:	60f8      	str	r0, [r7, #12]
 8003dcc:	60b9      	str	r1, [r7, #8]
 8003dce:	603b      	str	r3, [r7, #0]
 8003dd0:	1dfb      	adds	r3, r7, #7
 8003dd2:	701a      	strb	r2, [r3, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003dd4:	f7fd fdec 	bl	80019b0 <HAL_GetTick>
 8003dd8:	0002      	movs	r2, r0
 8003dda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ddc:	1a9b      	subs	r3, r3, r2
 8003dde:	683a      	ldr	r2, [r7, #0]
 8003de0:	18d3      	adds	r3, r2, r3
 8003de2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003de4:	f7fd fde4 	bl	80019b0 <HAL_GetTick>
 8003de8:	0003      	movs	r3, r0
 8003dea:	61bb      	str	r3, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003dec:	4b3a      	ldr	r3, [pc, #232]	; (8003ed8 <SPI_WaitFlagStateUntilTimeout+0x114>)
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	015b      	lsls	r3, r3, #5
 8003df2:	0d1b      	lsrs	r3, r3, #20
 8003df4:	69fa      	ldr	r2, [r7, #28]
 8003df6:	4353      	muls	r3, r2
 8003df8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003dfa:	e058      	b.n	8003eae <SPI_WaitFlagStateUntilTimeout+0xea>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003dfc:	683b      	ldr	r3, [r7, #0]
 8003dfe:	3301      	adds	r3, #1
 8003e00:	d055      	beq.n	8003eae <SPI_WaitFlagStateUntilTimeout+0xea>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003e02:	f7fd fdd5 	bl	80019b0 <HAL_GetTick>
 8003e06:	0002      	movs	r2, r0
 8003e08:	69bb      	ldr	r3, [r7, #24]
 8003e0a:	1ad3      	subs	r3, r2, r3
 8003e0c:	69fa      	ldr	r2, [r7, #28]
 8003e0e:	429a      	cmp	r2, r3
 8003e10:	d902      	bls.n	8003e18 <SPI_WaitFlagStateUntilTimeout+0x54>
 8003e12:	69fb      	ldr	r3, [r7, #28]
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	d142      	bne.n	8003e9e <SPI_WaitFlagStateUntilTimeout+0xda>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	685a      	ldr	r2, [r3, #4]
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	21e0      	movs	r1, #224	; 0xe0
 8003e24:	438a      	bics	r2, r1
 8003e26:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	685a      	ldr	r2, [r3, #4]
 8003e2c:	2382      	movs	r3, #130	; 0x82
 8003e2e:	005b      	lsls	r3, r3, #1
 8003e30:	429a      	cmp	r2, r3
 8003e32:	d113      	bne.n	8003e5c <SPI_WaitFlagStateUntilTimeout+0x98>
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	689a      	ldr	r2, [r3, #8]
 8003e38:	2380      	movs	r3, #128	; 0x80
 8003e3a:	021b      	lsls	r3, r3, #8
 8003e3c:	429a      	cmp	r2, r3
 8003e3e:	d005      	beq.n	8003e4c <SPI_WaitFlagStateUntilTimeout+0x88>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	689a      	ldr	r2, [r3, #8]
 8003e44:	2380      	movs	r3, #128	; 0x80
 8003e46:	00db      	lsls	r3, r3, #3
 8003e48:	429a      	cmp	r2, r3
 8003e4a:	d107      	bne.n	8003e5c <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	681a      	ldr	r2, [r3, #0]
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	2140      	movs	r1, #64	; 0x40
 8003e58:	438a      	bics	r2, r1
 8003e5a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003e60:	2380      	movs	r3, #128	; 0x80
 8003e62:	019b      	lsls	r3, r3, #6
 8003e64:	429a      	cmp	r2, r3
 8003e66:	d110      	bne.n	8003e8a <SPI_WaitFlagStateUntilTimeout+0xc6>
        {
          SPI_RESET_CRC(hspi);
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	681a      	ldr	r2, [r3, #0]
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	491a      	ldr	r1, [pc, #104]	; (8003edc <SPI_WaitFlagStateUntilTimeout+0x118>)
 8003e74:	400a      	ands	r2, r1
 8003e76:	601a      	str	r2, [r3, #0]
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	681a      	ldr	r2, [r3, #0]
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	2180      	movs	r1, #128	; 0x80
 8003e84:	0189      	lsls	r1, r1, #6
 8003e86:	430a      	orrs	r2, r1
 8003e88:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	2251      	movs	r2, #81	; 0x51
 8003e8e:	2101      	movs	r1, #1
 8003e90:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	2250      	movs	r2, #80	; 0x50
 8003e96:	2100      	movs	r1, #0
 8003e98:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8003e9a:	2303      	movs	r3, #3
 8003e9c:	e017      	b.n	8003ece <SPI_WaitFlagStateUntilTimeout+0x10a>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003e9e:	697b      	ldr	r3, [r7, #20]
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d101      	bne.n	8003ea8 <SPI_WaitFlagStateUntilTimeout+0xe4>
      {
        tmp_timeout = 0U;
 8003ea4:	2300      	movs	r3, #0
 8003ea6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003ea8:	697b      	ldr	r3, [r7, #20]
 8003eaa:	3b01      	subs	r3, #1
 8003eac:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	689b      	ldr	r3, [r3, #8]
 8003eb4:	68ba      	ldr	r2, [r7, #8]
 8003eb6:	4013      	ands	r3, r2
 8003eb8:	68ba      	ldr	r2, [r7, #8]
 8003eba:	1ad3      	subs	r3, r2, r3
 8003ebc:	425a      	negs	r2, r3
 8003ebe:	4153      	adcs	r3, r2
 8003ec0:	b2db      	uxtb	r3, r3
 8003ec2:	001a      	movs	r2, r3
 8003ec4:	1dfb      	adds	r3, r7, #7
 8003ec6:	781b      	ldrb	r3, [r3, #0]
 8003ec8:	429a      	cmp	r2, r3
 8003eca:	d197      	bne.n	8003dfc <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003ecc:	2300      	movs	r3, #0
}
 8003ece:	0018      	movs	r0, r3
 8003ed0:	46bd      	mov	sp, r7
 8003ed2:	b008      	add	sp, #32
 8003ed4:	bd80      	pop	{r7, pc}
 8003ed6:	46c0      	nop			; (mov r8, r8)
 8003ed8:	20000010 	.word	0x20000010
 8003edc:	ffffdfff 	.word	0xffffdfff

08003ee0 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8003ee0:	b580      	push	{r7, lr}
 8003ee2:	b086      	sub	sp, #24
 8003ee4:	af02      	add	r7, sp, #8
 8003ee6:	60f8      	str	r0, [r7, #12]
 8003ee8:	60b9      	str	r1, [r7, #8]
 8003eea:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	685a      	ldr	r2, [r3, #4]
 8003ef0:	2382      	movs	r3, #130	; 0x82
 8003ef2:	005b      	lsls	r3, r3, #1
 8003ef4:	429a      	cmp	r2, r3
 8003ef6:	d113      	bne.n	8003f20 <SPI_EndRxTransaction+0x40>
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	689a      	ldr	r2, [r3, #8]
 8003efc:	2380      	movs	r3, #128	; 0x80
 8003efe:	021b      	lsls	r3, r3, #8
 8003f00:	429a      	cmp	r2, r3
 8003f02:	d005      	beq.n	8003f10 <SPI_EndRxTransaction+0x30>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	689a      	ldr	r2, [r3, #8]
 8003f08:	2380      	movs	r3, #128	; 0x80
 8003f0a:	00db      	lsls	r3, r3, #3
 8003f0c:	429a      	cmp	r2, r3
 8003f0e:	d107      	bne.n	8003f20 <SPI_EndRxTransaction+0x40>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	681a      	ldr	r2, [r3, #0]
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	2140      	movs	r1, #64	; 0x40
 8003f1c:	438a      	bics	r2, r1
 8003f1e:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	685a      	ldr	r2, [r3, #4]
 8003f24:	2382      	movs	r3, #130	; 0x82
 8003f26:	005b      	lsls	r3, r3, #1
 8003f28:	429a      	cmp	r2, r3
 8003f2a:	d12b      	bne.n	8003f84 <SPI_EndRxTransaction+0xa4>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	689a      	ldr	r2, [r3, #8]
 8003f30:	2380      	movs	r3, #128	; 0x80
 8003f32:	00db      	lsls	r3, r3, #3
 8003f34:	429a      	cmp	r2, r3
 8003f36:	d012      	beq.n	8003f5e <SPI_EndRxTransaction+0x7e>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003f38:	68ba      	ldr	r2, [r7, #8]
 8003f3a:	68f8      	ldr	r0, [r7, #12]
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	9300      	str	r3, [sp, #0]
 8003f40:	0013      	movs	r3, r2
 8003f42:	2200      	movs	r2, #0
 8003f44:	2180      	movs	r1, #128	; 0x80
 8003f46:	f7ff ff3d 	bl	8003dc4 <SPI_WaitFlagStateUntilTimeout>
 8003f4a:	1e03      	subs	r3, r0, #0
 8003f4c:	d02d      	beq.n	8003faa <SPI_EndRxTransaction+0xca>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f52:	2220      	movs	r2, #32
 8003f54:	431a      	orrs	r2, r3
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8003f5a:	2303      	movs	r3, #3
 8003f5c:	e026      	b.n	8003fac <SPI_EndRxTransaction+0xcc>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8003f5e:	68ba      	ldr	r2, [r7, #8]
 8003f60:	68f8      	ldr	r0, [r7, #12]
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	9300      	str	r3, [sp, #0]
 8003f66:	0013      	movs	r3, r2
 8003f68:	2200      	movs	r2, #0
 8003f6a:	2101      	movs	r1, #1
 8003f6c:	f7ff ff2a 	bl	8003dc4 <SPI_WaitFlagStateUntilTimeout>
 8003f70:	1e03      	subs	r3, r0, #0
 8003f72:	d01a      	beq.n	8003faa <SPI_EndRxTransaction+0xca>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f78:	2220      	movs	r2, #32
 8003f7a:	431a      	orrs	r2, r3
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8003f80:	2303      	movs	r3, #3
 8003f82:	e013      	b.n	8003fac <SPI_EndRxTransaction+0xcc>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8003f84:	68ba      	ldr	r2, [r7, #8]
 8003f86:	68f8      	ldr	r0, [r7, #12]
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	9300      	str	r3, [sp, #0]
 8003f8c:	0013      	movs	r3, r2
 8003f8e:	2200      	movs	r2, #0
 8003f90:	2101      	movs	r1, #1
 8003f92:	f7ff ff17 	bl	8003dc4 <SPI_WaitFlagStateUntilTimeout>
 8003f96:	1e03      	subs	r3, r0, #0
 8003f98:	d007      	beq.n	8003faa <SPI_EndRxTransaction+0xca>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f9e:	2220      	movs	r2, #32
 8003fa0:	431a      	orrs	r2, r3
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8003fa6:	2303      	movs	r3, #3
 8003fa8:	e000      	b.n	8003fac <SPI_EndRxTransaction+0xcc>
    }
  }
  return HAL_OK;
 8003faa:	2300      	movs	r3, #0
}
 8003fac:	0018      	movs	r0, r3
 8003fae:	46bd      	mov	sp, r7
 8003fb0:	b004      	add	sp, #16
 8003fb2:	bd80      	pop	{r7, pc}

08003fb4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003fb4:	b580      	push	{r7, lr}
 8003fb6:	b088      	sub	sp, #32
 8003fb8:	af02      	add	r7, sp, #8
 8003fba:	60f8      	str	r0, [r7, #12]
 8003fbc:	60b9      	str	r1, [r7, #8]
 8003fbe:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8003fc0:	4b1d      	ldr	r3, [pc, #116]	; (8004038 <SPI_EndRxTxTransaction+0x84>)
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	491d      	ldr	r1, [pc, #116]	; (800403c <SPI_EndRxTxTransaction+0x88>)
 8003fc6:	0018      	movs	r0, r3
 8003fc8:	f7fc f8b0 	bl	800012c <__udivsi3>
 8003fcc:	0003      	movs	r3, r0
 8003fce:	001a      	movs	r2, r3
 8003fd0:	0013      	movs	r3, r2
 8003fd2:	015b      	lsls	r3, r3, #5
 8003fd4:	1a9b      	subs	r3, r3, r2
 8003fd6:	009b      	lsls	r3, r3, #2
 8003fd8:	189b      	adds	r3, r3, r2
 8003fda:	00db      	lsls	r3, r3, #3
 8003fdc:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	685a      	ldr	r2, [r3, #4]
 8003fe2:	2382      	movs	r3, #130	; 0x82
 8003fe4:	005b      	lsls	r3, r3, #1
 8003fe6:	429a      	cmp	r2, r3
 8003fe8:	d112      	bne.n	8004010 <SPI_EndRxTxTransaction+0x5c>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003fea:	68ba      	ldr	r2, [r7, #8]
 8003fec:	68f8      	ldr	r0, [r7, #12]
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	9300      	str	r3, [sp, #0]
 8003ff2:	0013      	movs	r3, r2
 8003ff4:	2200      	movs	r2, #0
 8003ff6:	2180      	movs	r1, #128	; 0x80
 8003ff8:	f7ff fee4 	bl	8003dc4 <SPI_WaitFlagStateUntilTimeout>
 8003ffc:	1e03      	subs	r3, r0, #0
 8003ffe:	d016      	beq.n	800402e <SPI_EndRxTxTransaction+0x7a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004004:	2220      	movs	r2, #32
 8004006:	431a      	orrs	r2, r3
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800400c:	2303      	movs	r3, #3
 800400e:	e00f      	b.n	8004030 <SPI_EndRxTxTransaction+0x7c>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8004010:	697b      	ldr	r3, [r7, #20]
 8004012:	2b00      	cmp	r3, #0
 8004014:	d00a      	beq.n	800402c <SPI_EndRxTxTransaction+0x78>
      {
        break;
      }
      count--;
 8004016:	697b      	ldr	r3, [r7, #20]
 8004018:	3b01      	subs	r3, #1
 800401a:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	689b      	ldr	r3, [r3, #8]
 8004022:	2280      	movs	r2, #128	; 0x80
 8004024:	4013      	ands	r3, r2
 8004026:	2b80      	cmp	r3, #128	; 0x80
 8004028:	d0f2      	beq.n	8004010 <SPI_EndRxTxTransaction+0x5c>
 800402a:	e000      	b.n	800402e <SPI_EndRxTxTransaction+0x7a>
        break;
 800402c:	46c0      	nop			; (mov r8, r8)
  }

  return HAL_OK;
 800402e:	2300      	movs	r3, #0
}
 8004030:	0018      	movs	r0, r3
 8004032:	46bd      	mov	sp, r7
 8004034:	b006      	add	sp, #24
 8004036:	bd80      	pop	{r7, pc}
 8004038:	20000010 	.word	0x20000010
 800403c:	016e3600 	.word	0x016e3600

08004040 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004040:	b580      	push	{r7, lr}
 8004042:	b082      	sub	sp, #8
 8004044:	af00      	add	r7, sp, #0
 8004046:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	2b00      	cmp	r3, #0
 800404c:	d101      	bne.n	8004052 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800404e:	2301      	movs	r3, #1
 8004050:	e032      	b.n	80040b8 <HAL_TIM_Base_Init+0x78>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_PRESCALER(htim->Init.Prescaler));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	2239      	movs	r2, #57	; 0x39
 8004056:	5c9b      	ldrb	r3, [r3, r2]
 8004058:	b2db      	uxtb	r3, r3
 800405a:	2b00      	cmp	r3, #0
 800405c:	d107      	bne.n	800406e <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	2238      	movs	r2, #56	; 0x38
 8004062:	2100      	movs	r1, #0
 8004064:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	0018      	movs	r0, r3
 800406a:	f7fd fb83 	bl	8001774 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	2239      	movs	r2, #57	; 0x39
 8004072:	2102      	movs	r1, #2
 8004074:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	681a      	ldr	r2, [r3, #0]
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	3304      	adds	r3, #4
 800407e:	0019      	movs	r1, r3
 8004080:	0010      	movs	r0, r2
 8004082:	f000 f81d 	bl	80040c0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	223e      	movs	r2, #62	; 0x3e
 800408a:	2101      	movs	r1, #1
 800408c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	223a      	movs	r2, #58	; 0x3a
 8004092:	2101      	movs	r1, #1
 8004094:	5499      	strb	r1, [r3, r2]
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	223b      	movs	r2, #59	; 0x3b
 800409a:	2101      	movs	r1, #1
 800409c:	5499      	strb	r1, [r3, r2]
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	223c      	movs	r2, #60	; 0x3c
 80040a2:	2101      	movs	r1, #1
 80040a4:	5499      	strb	r1, [r3, r2]
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	223d      	movs	r2, #61	; 0x3d
 80040aa:	2101      	movs	r1, #1
 80040ac:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	2239      	movs	r2, #57	; 0x39
 80040b2:	2101      	movs	r1, #1
 80040b4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80040b6:	2300      	movs	r3, #0
}
 80040b8:	0018      	movs	r0, r3
 80040ba:	46bd      	mov	sp, r7
 80040bc:	b002      	add	sp, #8
 80040be:	bd80      	pop	{r7, pc}

080040c0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
static void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80040c0:	b580      	push	{r7, lr}
 80040c2:	b084      	sub	sp, #16
 80040c4:	af00      	add	r7, sp, #0
 80040c6:	6078      	str	r0, [r7, #4]
 80040c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80040d0:	687a      	ldr	r2, [r7, #4]
 80040d2:	2380      	movs	r3, #128	; 0x80
 80040d4:	05db      	lsls	r3, r3, #23
 80040d6:	429a      	cmp	r2, r3
 80040d8:	d007      	beq.n	80040ea <TIM_Base_SetConfig+0x2a>
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	4a1f      	ldr	r2, [pc, #124]	; (800415c <TIM_Base_SetConfig+0x9c>)
 80040de:	4293      	cmp	r3, r2
 80040e0:	d003      	beq.n	80040ea <TIM_Base_SetConfig+0x2a>
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	4a1e      	ldr	r2, [pc, #120]	; (8004160 <TIM_Base_SetConfig+0xa0>)
 80040e6:	4293      	cmp	r3, r2
 80040e8:	d108      	bne.n	80040fc <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	2270      	movs	r2, #112	; 0x70
 80040ee:	4393      	bics	r3, r2
 80040f0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80040f2:	683b      	ldr	r3, [r7, #0]
 80040f4:	685b      	ldr	r3, [r3, #4]
 80040f6:	68fa      	ldr	r2, [r7, #12]
 80040f8:	4313      	orrs	r3, r2
 80040fa:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80040fc:	687a      	ldr	r2, [r7, #4]
 80040fe:	2380      	movs	r3, #128	; 0x80
 8004100:	05db      	lsls	r3, r3, #23
 8004102:	429a      	cmp	r2, r3
 8004104:	d007      	beq.n	8004116 <TIM_Base_SetConfig+0x56>
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	4a14      	ldr	r2, [pc, #80]	; (800415c <TIM_Base_SetConfig+0x9c>)
 800410a:	4293      	cmp	r3, r2
 800410c:	d003      	beq.n	8004116 <TIM_Base_SetConfig+0x56>
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	4a13      	ldr	r2, [pc, #76]	; (8004160 <TIM_Base_SetConfig+0xa0>)
 8004112:	4293      	cmp	r3, r2
 8004114:	d108      	bne.n	8004128 <TIM_Base_SetConfig+0x68>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	4a12      	ldr	r2, [pc, #72]	; (8004164 <TIM_Base_SetConfig+0xa4>)
 800411a:	4013      	ands	r3, r2
 800411c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800411e:	683b      	ldr	r3, [r7, #0]
 8004120:	68db      	ldr	r3, [r3, #12]
 8004122:	68fa      	ldr	r2, [r7, #12]
 8004124:	4313      	orrs	r3, r2
 8004126:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	2280      	movs	r2, #128	; 0x80
 800412c:	4393      	bics	r3, r2
 800412e:	001a      	movs	r2, r3
 8004130:	683b      	ldr	r3, [r7, #0]
 8004132:	691b      	ldr	r3, [r3, #16]
 8004134:	4313      	orrs	r3, r2
 8004136:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	68fa      	ldr	r2, [r7, #12]
 800413c:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800413e:	683b      	ldr	r3, [r7, #0]
 8004140:	689a      	ldr	r2, [r3, #8]
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004146:	683b      	ldr	r3, [r7, #0]
 8004148:	681a      	ldr	r2, [r3, #0]
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	629a      	str	r2, [r3, #40]	; 0x28

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	2201      	movs	r2, #1
 8004152:	615a      	str	r2, [r3, #20]
}
 8004154:	46c0      	nop			; (mov r8, r8)
 8004156:	46bd      	mov	sp, r7
 8004158:	b004      	add	sp, #16
 800415a:	bd80      	pop	{r7, pc}
 800415c:	40010800 	.word	0x40010800
 8004160:	40011400 	.word	0x40011400
 8004164:	fffffcff 	.word	0xfffffcff

08004168 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004168:	b580      	push	{r7, lr}
 800416a:	b084      	sub	sp, #16
 800416c:	af00      	add	r7, sp, #0
 800416e:	6078      	str	r0, [r7, #4]
 8004170:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	2238      	movs	r2, #56	; 0x38
 8004176:	5c9b      	ldrb	r3, [r3, r2]
 8004178:	2b01      	cmp	r3, #1
 800417a:	d101      	bne.n	8004180 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800417c:	2302      	movs	r3, #2
 800417e:	e042      	b.n	8004206 <HAL_TIMEx_MasterConfigSynchronization+0x9e>
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	2238      	movs	r2, #56	; 0x38
 8004184:	2101      	movs	r1, #1
 8004186:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	2239      	movs	r2, #57	; 0x39
 800418c:	2102      	movs	r1, #2
 800418e:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	685b      	ldr	r3, [r3, #4]
 8004196:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	689b      	ldr	r3, [r3, #8]
 800419e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	2270      	movs	r2, #112	; 0x70
 80041a4:	4393      	bics	r3, r2
 80041a6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80041a8:	683b      	ldr	r3, [r7, #0]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	68fa      	ldr	r2, [r7, #12]
 80041ae:	4313      	orrs	r3, r2
 80041b0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	68fa      	ldr	r2, [r7, #12]
 80041b8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	681a      	ldr	r2, [r3, #0]
 80041be:	2380      	movs	r3, #128	; 0x80
 80041c0:	05db      	lsls	r3, r3, #23
 80041c2:	429a      	cmp	r2, r3
 80041c4:	d009      	beq.n	80041da <HAL_TIMEx_MasterConfigSynchronization+0x72>
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	4a11      	ldr	r2, [pc, #68]	; (8004210 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 80041cc:	4293      	cmp	r3, r2
 80041ce:	d004      	beq.n	80041da <HAL_TIMEx_MasterConfigSynchronization+0x72>
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	4a0f      	ldr	r2, [pc, #60]	; (8004214 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 80041d6:	4293      	cmp	r3, r2
 80041d8:	d10c      	bne.n	80041f4 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80041da:	68bb      	ldr	r3, [r7, #8]
 80041dc:	2280      	movs	r2, #128	; 0x80
 80041de:	4393      	bics	r3, r2
 80041e0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80041e2:	683b      	ldr	r3, [r7, #0]
 80041e4:	685b      	ldr	r3, [r3, #4]
 80041e6:	68ba      	ldr	r2, [r7, #8]
 80041e8:	4313      	orrs	r3, r2
 80041ea:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	68ba      	ldr	r2, [r7, #8]
 80041f2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	2239      	movs	r2, #57	; 0x39
 80041f8:	2101      	movs	r1, #1
 80041fa:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	2238      	movs	r2, #56	; 0x38
 8004200:	2100      	movs	r1, #0
 8004202:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004204:	2300      	movs	r3, #0
}
 8004206:	0018      	movs	r0, r3
 8004208:	46bd      	mov	sp, r7
 800420a:	b004      	add	sp, #16
 800420c:	bd80      	pop	{r7, pc}
 800420e:	46c0      	nop			; (mov r8, r8)
 8004210:	40010800 	.word	0x40010800
 8004214:	40011400 	.word	0x40011400

08004218 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004218:	b580      	push	{r7, lr}
 800421a:	b082      	sub	sp, #8
 800421c:	af00      	add	r7, sp, #0
 800421e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	2b00      	cmp	r3, #0
 8004224:	d101      	bne.n	800422a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004226:	2301      	movs	r3, #1
 8004228:	e044      	b.n	80042b4 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800422e:	2b00      	cmp	r3, #0
 8004230:	d107      	bne.n	8004242 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	2278      	movs	r2, #120	; 0x78
 8004236:	2100      	movs	r1, #0
 8004238:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	0018      	movs	r0, r3
 800423e:	f7fd fa0f 	bl	8001660 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	2224      	movs	r2, #36	; 0x24
 8004246:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	681a      	ldr	r2, [r3, #0]
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	2101      	movs	r1, #1
 8004254:	438a      	bics	r2, r1
 8004256:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	0018      	movs	r0, r3
 800425c:	f000 f8d0 	bl	8004400 <UART_SetConfig>
 8004260:	0003      	movs	r3, r0
 8004262:	2b01      	cmp	r3, #1
 8004264:	d101      	bne.n	800426a <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8004266:	2301      	movs	r3, #1
 8004268:	e024      	b.n	80042b4 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800426e:	2b00      	cmp	r3, #0
 8004270:	d003      	beq.n	800427a <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	0018      	movs	r0, r3
 8004276:	f000 fb47 	bl	8004908 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	685a      	ldr	r2, [r3, #4]
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	490d      	ldr	r1, [pc, #52]	; (80042bc <HAL_UART_Init+0xa4>)
 8004286:	400a      	ands	r2, r1
 8004288:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	689a      	ldr	r2, [r3, #8]
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	212a      	movs	r1, #42	; 0x2a
 8004296:	438a      	bics	r2, r1
 8004298:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	681a      	ldr	r2, [r3, #0]
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	2101      	movs	r1, #1
 80042a6:	430a      	orrs	r2, r1
 80042a8:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	0018      	movs	r0, r3
 80042ae:	f000 fbdf 	bl	8004a70 <UART_CheckIdleState>
 80042b2:	0003      	movs	r3, r0
}
 80042b4:	0018      	movs	r0, r3
 80042b6:	46bd      	mov	sp, r7
 80042b8:	b002      	add	sp, #8
 80042ba:	bd80      	pop	{r7, pc}
 80042bc:	ffffb7ff 	.word	0xffffb7ff

080042c0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80042c0:	b580      	push	{r7, lr}
 80042c2:	b08a      	sub	sp, #40	; 0x28
 80042c4:	af02      	add	r7, sp, #8
 80042c6:	60f8      	str	r0, [r7, #12]
 80042c8:	60b9      	str	r1, [r7, #8]
 80042ca:	603b      	str	r3, [r7, #0]
 80042cc:	1dbb      	adds	r3, r7, #6
 80042ce:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80042d4:	2b20      	cmp	r3, #32
 80042d6:	d000      	beq.n	80042da <HAL_UART_Transmit+0x1a>
 80042d8:	e08c      	b.n	80043f4 <HAL_UART_Transmit+0x134>
  {
    if ((pData == NULL) || (Size == 0U))
 80042da:	68bb      	ldr	r3, [r7, #8]
 80042dc:	2b00      	cmp	r3, #0
 80042de:	d003      	beq.n	80042e8 <HAL_UART_Transmit+0x28>
 80042e0:	1dbb      	adds	r3, r7, #6
 80042e2:	881b      	ldrh	r3, [r3, #0]
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	d101      	bne.n	80042ec <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 80042e8:	2301      	movs	r3, #1
 80042ea:	e084      	b.n	80043f6 <HAL_UART_Transmit+0x136>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	689a      	ldr	r2, [r3, #8]
 80042f0:	2380      	movs	r3, #128	; 0x80
 80042f2:	015b      	lsls	r3, r3, #5
 80042f4:	429a      	cmp	r2, r3
 80042f6:	d109      	bne.n	800430c <HAL_UART_Transmit+0x4c>
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	691b      	ldr	r3, [r3, #16]
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	d105      	bne.n	800430c <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8004300:	68bb      	ldr	r3, [r7, #8]
 8004302:	2201      	movs	r2, #1
 8004304:	4013      	ands	r3, r2
 8004306:	d001      	beq.n	800430c <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 8004308:	2301      	movs	r3, #1
 800430a:	e074      	b.n	80043f6 <HAL_UART_Transmit+0x136>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	2284      	movs	r2, #132	; 0x84
 8004310:	2100      	movs	r1, #0
 8004312:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	2221      	movs	r2, #33	; 0x21
 8004318:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800431a:	f7fd fb49 	bl	80019b0 <HAL_GetTick>
 800431e:	0003      	movs	r3, r0
 8004320:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	1dba      	adds	r2, r7, #6
 8004326:	2150      	movs	r1, #80	; 0x50
 8004328:	8812      	ldrh	r2, [r2, #0]
 800432a:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	1dba      	adds	r2, r7, #6
 8004330:	2152      	movs	r1, #82	; 0x52
 8004332:	8812      	ldrh	r2, [r2, #0]
 8004334:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	689a      	ldr	r2, [r3, #8]
 800433a:	2380      	movs	r3, #128	; 0x80
 800433c:	015b      	lsls	r3, r3, #5
 800433e:	429a      	cmp	r2, r3
 8004340:	d108      	bne.n	8004354 <HAL_UART_Transmit+0x94>
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	691b      	ldr	r3, [r3, #16]
 8004346:	2b00      	cmp	r3, #0
 8004348:	d104      	bne.n	8004354 <HAL_UART_Transmit+0x94>
    {
      pdata8bits  = NULL;
 800434a:	2300      	movs	r3, #0
 800434c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800434e:	68bb      	ldr	r3, [r7, #8]
 8004350:	61bb      	str	r3, [r7, #24]
 8004352:	e003      	b.n	800435c <HAL_UART_Transmit+0x9c>
    }
    else
    {
      pdata8bits  = pData;
 8004354:	68bb      	ldr	r3, [r7, #8]
 8004356:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004358:	2300      	movs	r3, #0
 800435a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800435c:	e02f      	b.n	80043be <HAL_UART_Transmit+0xfe>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800435e:	697a      	ldr	r2, [r7, #20]
 8004360:	68f8      	ldr	r0, [r7, #12]
 8004362:	683b      	ldr	r3, [r7, #0]
 8004364:	9300      	str	r3, [sp, #0]
 8004366:	0013      	movs	r3, r2
 8004368:	2200      	movs	r2, #0
 800436a:	2180      	movs	r1, #128	; 0x80
 800436c:	f000 fc28 	bl	8004bc0 <UART_WaitOnFlagUntilTimeout>
 8004370:	1e03      	subs	r3, r0, #0
 8004372:	d004      	beq.n	800437e <HAL_UART_Transmit+0xbe>
      {

        huart->gState = HAL_UART_STATE_READY;
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	2220      	movs	r2, #32
 8004378:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 800437a:	2303      	movs	r3, #3
 800437c:	e03b      	b.n	80043f6 <HAL_UART_Transmit+0x136>
      }
      if (pdata8bits == NULL)
 800437e:	69fb      	ldr	r3, [r7, #28]
 8004380:	2b00      	cmp	r3, #0
 8004382:	d10b      	bne.n	800439c <HAL_UART_Transmit+0xdc>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004384:	69bb      	ldr	r3, [r7, #24]
 8004386:	881b      	ldrh	r3, [r3, #0]
 8004388:	001a      	movs	r2, r3
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	05d2      	lsls	r2, r2, #23
 8004390:	0dd2      	lsrs	r2, r2, #23
 8004392:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8004394:	69bb      	ldr	r3, [r7, #24]
 8004396:	3302      	adds	r3, #2
 8004398:	61bb      	str	r3, [r7, #24]
 800439a:	e007      	b.n	80043ac <HAL_UART_Transmit+0xec>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800439c:	69fb      	ldr	r3, [r7, #28]
 800439e:	781a      	ldrb	r2, [r3, #0]
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80043a6:	69fb      	ldr	r3, [r7, #28]
 80043a8:	3301      	adds	r3, #1
 80043aa:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	2252      	movs	r2, #82	; 0x52
 80043b0:	5a9b      	ldrh	r3, [r3, r2]
 80043b2:	b29b      	uxth	r3, r3
 80043b4:	3b01      	subs	r3, #1
 80043b6:	b299      	uxth	r1, r3
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	2252      	movs	r2, #82	; 0x52
 80043bc:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	2252      	movs	r2, #82	; 0x52
 80043c2:	5a9b      	ldrh	r3, [r3, r2]
 80043c4:	b29b      	uxth	r3, r3
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d1c9      	bne.n	800435e <HAL_UART_Transmit+0x9e>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80043ca:	697a      	ldr	r2, [r7, #20]
 80043cc:	68f8      	ldr	r0, [r7, #12]
 80043ce:	683b      	ldr	r3, [r7, #0]
 80043d0:	9300      	str	r3, [sp, #0]
 80043d2:	0013      	movs	r3, r2
 80043d4:	2200      	movs	r2, #0
 80043d6:	2140      	movs	r1, #64	; 0x40
 80043d8:	f000 fbf2 	bl	8004bc0 <UART_WaitOnFlagUntilTimeout>
 80043dc:	1e03      	subs	r3, r0, #0
 80043de:	d004      	beq.n	80043ea <HAL_UART_Transmit+0x12a>
    {
      huart->gState = HAL_UART_STATE_READY;
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	2220      	movs	r2, #32
 80043e4:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 80043e6:	2303      	movs	r3, #3
 80043e8:	e005      	b.n	80043f6 <HAL_UART_Transmit+0x136>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	2220      	movs	r2, #32
 80043ee:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 80043f0:	2300      	movs	r3, #0
 80043f2:	e000      	b.n	80043f6 <HAL_UART_Transmit+0x136>
  }
  else
  {
    return HAL_BUSY;
 80043f4:	2302      	movs	r3, #2
  }
}
 80043f6:	0018      	movs	r0, r3
 80043f8:	46bd      	mov	sp, r7
 80043fa:	b008      	add	sp, #32
 80043fc:	bd80      	pop	{r7, pc}
	...

08004400 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004400:	b5b0      	push	{r4, r5, r7, lr}
 8004402:	b08e      	sub	sp, #56	; 0x38
 8004404:	af00      	add	r7, sp, #0
 8004406:	61f8      	str	r0, [r7, #28]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004408:	231a      	movs	r3, #26
 800440a:	2218      	movs	r2, #24
 800440c:	189b      	adds	r3, r3, r2
 800440e:	19db      	adds	r3, r3, r7
 8004410:	2200      	movs	r2, #0
 8004412:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004414:	69fb      	ldr	r3, [r7, #28]
 8004416:	689a      	ldr	r2, [r3, #8]
 8004418:	69fb      	ldr	r3, [r7, #28]
 800441a:	691b      	ldr	r3, [r3, #16]
 800441c:	431a      	orrs	r2, r3
 800441e:	69fb      	ldr	r3, [r7, #28]
 8004420:	695b      	ldr	r3, [r3, #20]
 8004422:	431a      	orrs	r2, r3
 8004424:	69fb      	ldr	r3, [r7, #28]
 8004426:	69db      	ldr	r3, [r3, #28]
 8004428:	4313      	orrs	r3, r2
 800442a:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800442c:	69fb      	ldr	r3, [r7, #28]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	4ac6      	ldr	r2, [pc, #792]	; (800474c <UART_SetConfig+0x34c>)
 8004434:	4013      	ands	r3, r2
 8004436:	0019      	movs	r1, r3
 8004438:	69fb      	ldr	r3, [r7, #28]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800443e:	430a      	orrs	r2, r1
 8004440:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004442:	69fb      	ldr	r3, [r7, #28]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	685b      	ldr	r3, [r3, #4]
 8004448:	4ac1      	ldr	r2, [pc, #772]	; (8004750 <UART_SetConfig+0x350>)
 800444a:	4013      	ands	r3, r2
 800444c:	0019      	movs	r1, r3
 800444e:	69fb      	ldr	r3, [r7, #28]
 8004450:	68da      	ldr	r2, [r3, #12]
 8004452:	69fb      	ldr	r3, [r7, #28]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	430a      	orrs	r2, r1
 8004458:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800445a:	69fb      	ldr	r3, [r7, #28]
 800445c:	699b      	ldr	r3, [r3, #24]
 800445e:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004460:	69fb      	ldr	r3, [r7, #28]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	4abb      	ldr	r2, [pc, #748]	; (8004754 <UART_SetConfig+0x354>)
 8004466:	4293      	cmp	r3, r2
 8004468:	d004      	beq.n	8004474 <UART_SetConfig+0x74>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800446a:	69fb      	ldr	r3, [r7, #28]
 800446c:	6a1b      	ldr	r3, [r3, #32]
 800446e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004470:	4313      	orrs	r3, r2
 8004472:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004474:	69fb      	ldr	r3, [r7, #28]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	689b      	ldr	r3, [r3, #8]
 800447a:	4ab7      	ldr	r2, [pc, #732]	; (8004758 <UART_SetConfig+0x358>)
 800447c:	4013      	ands	r3, r2
 800447e:	0019      	movs	r1, r3
 8004480:	69fb      	ldr	r3, [r7, #28]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004486:	430a      	orrs	r2, r1
 8004488:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800448a:	69fb      	ldr	r3, [r7, #28]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	4ab3      	ldr	r2, [pc, #716]	; (800475c <UART_SetConfig+0x35c>)
 8004490:	4293      	cmp	r3, r2
 8004492:	d131      	bne.n	80044f8 <UART_SetConfig+0xf8>
 8004494:	4bb2      	ldr	r3, [pc, #712]	; (8004760 <UART_SetConfig+0x360>)
 8004496:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004498:	2203      	movs	r2, #3
 800449a:	4013      	ands	r3, r2
 800449c:	2b03      	cmp	r3, #3
 800449e:	d01d      	beq.n	80044dc <UART_SetConfig+0xdc>
 80044a0:	d823      	bhi.n	80044ea <UART_SetConfig+0xea>
 80044a2:	2b02      	cmp	r3, #2
 80044a4:	d00c      	beq.n	80044c0 <UART_SetConfig+0xc0>
 80044a6:	d820      	bhi.n	80044ea <UART_SetConfig+0xea>
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	d002      	beq.n	80044b2 <UART_SetConfig+0xb2>
 80044ac:	2b01      	cmp	r3, #1
 80044ae:	d00e      	beq.n	80044ce <UART_SetConfig+0xce>
 80044b0:	e01b      	b.n	80044ea <UART_SetConfig+0xea>
 80044b2:	231b      	movs	r3, #27
 80044b4:	2218      	movs	r2, #24
 80044b6:	189b      	adds	r3, r3, r2
 80044b8:	19db      	adds	r3, r3, r7
 80044ba:	2201      	movs	r2, #1
 80044bc:	701a      	strb	r2, [r3, #0]
 80044be:	e09c      	b.n	80045fa <UART_SetConfig+0x1fa>
 80044c0:	231b      	movs	r3, #27
 80044c2:	2218      	movs	r2, #24
 80044c4:	189b      	adds	r3, r3, r2
 80044c6:	19db      	adds	r3, r3, r7
 80044c8:	2202      	movs	r2, #2
 80044ca:	701a      	strb	r2, [r3, #0]
 80044cc:	e095      	b.n	80045fa <UART_SetConfig+0x1fa>
 80044ce:	231b      	movs	r3, #27
 80044d0:	2218      	movs	r2, #24
 80044d2:	189b      	adds	r3, r3, r2
 80044d4:	19db      	adds	r3, r3, r7
 80044d6:	2204      	movs	r2, #4
 80044d8:	701a      	strb	r2, [r3, #0]
 80044da:	e08e      	b.n	80045fa <UART_SetConfig+0x1fa>
 80044dc:	231b      	movs	r3, #27
 80044de:	2218      	movs	r2, #24
 80044e0:	189b      	adds	r3, r3, r2
 80044e2:	19db      	adds	r3, r3, r7
 80044e4:	2208      	movs	r2, #8
 80044e6:	701a      	strb	r2, [r3, #0]
 80044e8:	e087      	b.n	80045fa <UART_SetConfig+0x1fa>
 80044ea:	231b      	movs	r3, #27
 80044ec:	2218      	movs	r2, #24
 80044ee:	189b      	adds	r3, r3, r2
 80044f0:	19db      	adds	r3, r3, r7
 80044f2:	2210      	movs	r2, #16
 80044f4:	701a      	strb	r2, [r3, #0]
 80044f6:	e080      	b.n	80045fa <UART_SetConfig+0x1fa>
 80044f8:	69fb      	ldr	r3, [r7, #28]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	4a99      	ldr	r2, [pc, #612]	; (8004764 <UART_SetConfig+0x364>)
 80044fe:	4293      	cmp	r3, r2
 8004500:	d131      	bne.n	8004566 <UART_SetConfig+0x166>
 8004502:	4b97      	ldr	r3, [pc, #604]	; (8004760 <UART_SetConfig+0x360>)
 8004504:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004506:	220c      	movs	r2, #12
 8004508:	4013      	ands	r3, r2
 800450a:	2b0c      	cmp	r3, #12
 800450c:	d01d      	beq.n	800454a <UART_SetConfig+0x14a>
 800450e:	d823      	bhi.n	8004558 <UART_SetConfig+0x158>
 8004510:	2b08      	cmp	r3, #8
 8004512:	d00c      	beq.n	800452e <UART_SetConfig+0x12e>
 8004514:	d820      	bhi.n	8004558 <UART_SetConfig+0x158>
 8004516:	2b00      	cmp	r3, #0
 8004518:	d002      	beq.n	8004520 <UART_SetConfig+0x120>
 800451a:	2b04      	cmp	r3, #4
 800451c:	d00e      	beq.n	800453c <UART_SetConfig+0x13c>
 800451e:	e01b      	b.n	8004558 <UART_SetConfig+0x158>
 8004520:	231b      	movs	r3, #27
 8004522:	2218      	movs	r2, #24
 8004524:	189b      	adds	r3, r3, r2
 8004526:	19db      	adds	r3, r3, r7
 8004528:	2200      	movs	r2, #0
 800452a:	701a      	strb	r2, [r3, #0]
 800452c:	e065      	b.n	80045fa <UART_SetConfig+0x1fa>
 800452e:	231b      	movs	r3, #27
 8004530:	2218      	movs	r2, #24
 8004532:	189b      	adds	r3, r3, r2
 8004534:	19db      	adds	r3, r3, r7
 8004536:	2202      	movs	r2, #2
 8004538:	701a      	strb	r2, [r3, #0]
 800453a:	e05e      	b.n	80045fa <UART_SetConfig+0x1fa>
 800453c:	231b      	movs	r3, #27
 800453e:	2218      	movs	r2, #24
 8004540:	189b      	adds	r3, r3, r2
 8004542:	19db      	adds	r3, r3, r7
 8004544:	2204      	movs	r2, #4
 8004546:	701a      	strb	r2, [r3, #0]
 8004548:	e057      	b.n	80045fa <UART_SetConfig+0x1fa>
 800454a:	231b      	movs	r3, #27
 800454c:	2218      	movs	r2, #24
 800454e:	189b      	adds	r3, r3, r2
 8004550:	19db      	adds	r3, r3, r7
 8004552:	2208      	movs	r2, #8
 8004554:	701a      	strb	r2, [r3, #0]
 8004556:	e050      	b.n	80045fa <UART_SetConfig+0x1fa>
 8004558:	231b      	movs	r3, #27
 800455a:	2218      	movs	r2, #24
 800455c:	189b      	adds	r3, r3, r2
 800455e:	19db      	adds	r3, r3, r7
 8004560:	2210      	movs	r2, #16
 8004562:	701a      	strb	r2, [r3, #0]
 8004564:	e049      	b.n	80045fa <UART_SetConfig+0x1fa>
 8004566:	69fb      	ldr	r3, [r7, #28]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	4a7a      	ldr	r2, [pc, #488]	; (8004754 <UART_SetConfig+0x354>)
 800456c:	4293      	cmp	r3, r2
 800456e:	d13e      	bne.n	80045ee <UART_SetConfig+0x1ee>
 8004570:	4b7b      	ldr	r3, [pc, #492]	; (8004760 <UART_SetConfig+0x360>)
 8004572:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004574:	23c0      	movs	r3, #192	; 0xc0
 8004576:	011b      	lsls	r3, r3, #4
 8004578:	4013      	ands	r3, r2
 800457a:	22c0      	movs	r2, #192	; 0xc0
 800457c:	0112      	lsls	r2, r2, #4
 800457e:	4293      	cmp	r3, r2
 8004580:	d027      	beq.n	80045d2 <UART_SetConfig+0x1d2>
 8004582:	22c0      	movs	r2, #192	; 0xc0
 8004584:	0112      	lsls	r2, r2, #4
 8004586:	4293      	cmp	r3, r2
 8004588:	d82a      	bhi.n	80045e0 <UART_SetConfig+0x1e0>
 800458a:	2280      	movs	r2, #128	; 0x80
 800458c:	0112      	lsls	r2, r2, #4
 800458e:	4293      	cmp	r3, r2
 8004590:	d011      	beq.n	80045b6 <UART_SetConfig+0x1b6>
 8004592:	2280      	movs	r2, #128	; 0x80
 8004594:	0112      	lsls	r2, r2, #4
 8004596:	4293      	cmp	r3, r2
 8004598:	d822      	bhi.n	80045e0 <UART_SetConfig+0x1e0>
 800459a:	2b00      	cmp	r3, #0
 800459c:	d004      	beq.n	80045a8 <UART_SetConfig+0x1a8>
 800459e:	2280      	movs	r2, #128	; 0x80
 80045a0:	00d2      	lsls	r2, r2, #3
 80045a2:	4293      	cmp	r3, r2
 80045a4:	d00e      	beq.n	80045c4 <UART_SetConfig+0x1c4>
 80045a6:	e01b      	b.n	80045e0 <UART_SetConfig+0x1e0>
 80045a8:	231b      	movs	r3, #27
 80045aa:	2218      	movs	r2, #24
 80045ac:	189b      	adds	r3, r3, r2
 80045ae:	19db      	adds	r3, r3, r7
 80045b0:	2200      	movs	r2, #0
 80045b2:	701a      	strb	r2, [r3, #0]
 80045b4:	e021      	b.n	80045fa <UART_SetConfig+0x1fa>
 80045b6:	231b      	movs	r3, #27
 80045b8:	2218      	movs	r2, #24
 80045ba:	189b      	adds	r3, r3, r2
 80045bc:	19db      	adds	r3, r3, r7
 80045be:	2202      	movs	r2, #2
 80045c0:	701a      	strb	r2, [r3, #0]
 80045c2:	e01a      	b.n	80045fa <UART_SetConfig+0x1fa>
 80045c4:	231b      	movs	r3, #27
 80045c6:	2218      	movs	r2, #24
 80045c8:	189b      	adds	r3, r3, r2
 80045ca:	19db      	adds	r3, r3, r7
 80045cc:	2204      	movs	r2, #4
 80045ce:	701a      	strb	r2, [r3, #0]
 80045d0:	e013      	b.n	80045fa <UART_SetConfig+0x1fa>
 80045d2:	231b      	movs	r3, #27
 80045d4:	2218      	movs	r2, #24
 80045d6:	189b      	adds	r3, r3, r2
 80045d8:	19db      	adds	r3, r3, r7
 80045da:	2208      	movs	r2, #8
 80045dc:	701a      	strb	r2, [r3, #0]
 80045de:	e00c      	b.n	80045fa <UART_SetConfig+0x1fa>
 80045e0:	231b      	movs	r3, #27
 80045e2:	2218      	movs	r2, #24
 80045e4:	189b      	adds	r3, r3, r2
 80045e6:	19db      	adds	r3, r3, r7
 80045e8:	2210      	movs	r2, #16
 80045ea:	701a      	strb	r2, [r3, #0]
 80045ec:	e005      	b.n	80045fa <UART_SetConfig+0x1fa>
 80045ee:	231b      	movs	r3, #27
 80045f0:	2218      	movs	r2, #24
 80045f2:	189b      	adds	r3, r3, r2
 80045f4:	19db      	adds	r3, r3, r7
 80045f6:	2210      	movs	r2, #16
 80045f8:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80045fa:	69fb      	ldr	r3, [r7, #28]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	4a55      	ldr	r2, [pc, #340]	; (8004754 <UART_SetConfig+0x354>)
 8004600:	4293      	cmp	r3, r2
 8004602:	d000      	beq.n	8004606 <UART_SetConfig+0x206>
 8004604:	e084      	b.n	8004710 <UART_SetConfig+0x310>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004606:	231b      	movs	r3, #27
 8004608:	2218      	movs	r2, #24
 800460a:	189b      	adds	r3, r3, r2
 800460c:	19db      	adds	r3, r3, r7
 800460e:	781b      	ldrb	r3, [r3, #0]
 8004610:	2b08      	cmp	r3, #8
 8004612:	d01d      	beq.n	8004650 <UART_SetConfig+0x250>
 8004614:	dc20      	bgt.n	8004658 <UART_SetConfig+0x258>
 8004616:	2b04      	cmp	r3, #4
 8004618:	d015      	beq.n	8004646 <UART_SetConfig+0x246>
 800461a:	dc1d      	bgt.n	8004658 <UART_SetConfig+0x258>
 800461c:	2b00      	cmp	r3, #0
 800461e:	d002      	beq.n	8004626 <UART_SetConfig+0x226>
 8004620:	2b02      	cmp	r3, #2
 8004622:	d005      	beq.n	8004630 <UART_SetConfig+0x230>
 8004624:	e018      	b.n	8004658 <UART_SetConfig+0x258>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004626:	f7fe fd7b 	bl	8003120 <HAL_RCC_GetPCLK1Freq>
 800462a:	0003      	movs	r3, r0
 800462c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800462e:	e01c      	b.n	800466a <UART_SetConfig+0x26a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004630:	4b4b      	ldr	r3, [pc, #300]	; (8004760 <UART_SetConfig+0x360>)
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	2210      	movs	r2, #16
 8004636:	4013      	ands	r3, r2
 8004638:	d002      	beq.n	8004640 <UART_SetConfig+0x240>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 800463a:	4b4b      	ldr	r3, [pc, #300]	; (8004768 <UART_SetConfig+0x368>)
 800463c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800463e:	e014      	b.n	800466a <UART_SetConfig+0x26a>
          pclk = (uint32_t) HSI_VALUE;
 8004640:	4b4a      	ldr	r3, [pc, #296]	; (800476c <UART_SetConfig+0x36c>)
 8004642:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004644:	e011      	b.n	800466a <UART_SetConfig+0x26a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004646:	f7fe fcbb 	bl	8002fc0 <HAL_RCC_GetSysClockFreq>
 800464a:	0003      	movs	r3, r0
 800464c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800464e:	e00c      	b.n	800466a <UART_SetConfig+0x26a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004650:	2380      	movs	r3, #128	; 0x80
 8004652:	021b      	lsls	r3, r3, #8
 8004654:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004656:	e008      	b.n	800466a <UART_SetConfig+0x26a>
      default:
        pclk = 0U;
 8004658:	2300      	movs	r3, #0
 800465a:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800465c:	231a      	movs	r3, #26
 800465e:	2218      	movs	r2, #24
 8004660:	189b      	adds	r3, r3, r2
 8004662:	19db      	adds	r3, r3, r7
 8004664:	2201      	movs	r2, #1
 8004666:	701a      	strb	r2, [r3, #0]
        break;
 8004668:	46c0      	nop			; (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800466a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800466c:	2b00      	cmp	r3, #0
 800466e:	d100      	bne.n	8004672 <UART_SetConfig+0x272>
 8004670:	e132      	b.n	80048d8 <UART_SetConfig+0x4d8>
    {
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004672:	69fb      	ldr	r3, [r7, #28]
 8004674:	685a      	ldr	r2, [r3, #4]
 8004676:	0013      	movs	r3, r2
 8004678:	005b      	lsls	r3, r3, #1
 800467a:	189b      	adds	r3, r3, r2
 800467c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800467e:	429a      	cmp	r2, r3
 8004680:	d305      	bcc.n	800468e <UART_SetConfig+0x28e>
          (pclk > (4096U * huart->Init.BaudRate)))
 8004682:	69fb      	ldr	r3, [r7, #28]
 8004684:	685b      	ldr	r3, [r3, #4]
 8004686:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004688:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800468a:	429a      	cmp	r2, r3
 800468c:	d906      	bls.n	800469c <UART_SetConfig+0x29c>
      {
        ret = HAL_ERROR;
 800468e:	231a      	movs	r3, #26
 8004690:	2218      	movs	r2, #24
 8004692:	189b      	adds	r3, r3, r2
 8004694:	19db      	adds	r3, r3, r7
 8004696:	2201      	movs	r2, #1
 8004698:	701a      	strb	r2, [r3, #0]
 800469a:	e11d      	b.n	80048d8 <UART_SetConfig+0x4d8>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800469c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800469e:	613b      	str	r3, [r7, #16]
 80046a0:	2300      	movs	r3, #0
 80046a2:	617b      	str	r3, [r7, #20]
 80046a4:	6939      	ldr	r1, [r7, #16]
 80046a6:	697a      	ldr	r2, [r7, #20]
 80046a8:	000b      	movs	r3, r1
 80046aa:	0e1b      	lsrs	r3, r3, #24
 80046ac:	0010      	movs	r0, r2
 80046ae:	0205      	lsls	r5, r0, #8
 80046b0:	431d      	orrs	r5, r3
 80046b2:	000b      	movs	r3, r1
 80046b4:	021c      	lsls	r4, r3, #8
 80046b6:	69fb      	ldr	r3, [r7, #28]
 80046b8:	685b      	ldr	r3, [r3, #4]
 80046ba:	085b      	lsrs	r3, r3, #1
 80046bc:	60bb      	str	r3, [r7, #8]
 80046be:	2300      	movs	r3, #0
 80046c0:	60fb      	str	r3, [r7, #12]
 80046c2:	68b8      	ldr	r0, [r7, #8]
 80046c4:	68f9      	ldr	r1, [r7, #12]
 80046c6:	1900      	adds	r0, r0, r4
 80046c8:	4169      	adcs	r1, r5
 80046ca:	69fb      	ldr	r3, [r7, #28]
 80046cc:	685b      	ldr	r3, [r3, #4]
 80046ce:	603b      	str	r3, [r7, #0]
 80046d0:	2300      	movs	r3, #0
 80046d2:	607b      	str	r3, [r7, #4]
 80046d4:	683a      	ldr	r2, [r7, #0]
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	f7fb fdb4 	bl	8000244 <__aeabi_uldivmod>
 80046dc:	0002      	movs	r2, r0
 80046de:	000b      	movs	r3, r1
 80046e0:	0013      	movs	r3, r2
 80046e2:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80046e4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80046e6:	23c0      	movs	r3, #192	; 0xc0
 80046e8:	009b      	lsls	r3, r3, #2
 80046ea:	429a      	cmp	r2, r3
 80046ec:	d309      	bcc.n	8004702 <UART_SetConfig+0x302>
 80046ee:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80046f0:	2380      	movs	r3, #128	; 0x80
 80046f2:	035b      	lsls	r3, r3, #13
 80046f4:	429a      	cmp	r2, r3
 80046f6:	d204      	bcs.n	8004702 <UART_SetConfig+0x302>
        {
          huart->Instance->BRR = usartdiv;
 80046f8:	69fb      	ldr	r3, [r7, #28]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80046fe:	60da      	str	r2, [r3, #12]
 8004700:	e0ea      	b.n	80048d8 <UART_SetConfig+0x4d8>
        }
        else
        {
          ret = HAL_ERROR;
 8004702:	231a      	movs	r3, #26
 8004704:	2218      	movs	r2, #24
 8004706:	189b      	adds	r3, r3, r2
 8004708:	19db      	adds	r3, r3, r7
 800470a:	2201      	movs	r2, #1
 800470c:	701a      	strb	r2, [r3, #0]
 800470e:	e0e3      	b.n	80048d8 <UART_SetConfig+0x4d8>
        }
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004710:	69fb      	ldr	r3, [r7, #28]
 8004712:	69da      	ldr	r2, [r3, #28]
 8004714:	2380      	movs	r3, #128	; 0x80
 8004716:	021b      	lsls	r3, r3, #8
 8004718:	429a      	cmp	r2, r3
 800471a:	d000      	beq.n	800471e <UART_SetConfig+0x31e>
 800471c:	e085      	b.n	800482a <UART_SetConfig+0x42a>
  {
    switch (clocksource)
 800471e:	231b      	movs	r3, #27
 8004720:	2218      	movs	r2, #24
 8004722:	189b      	adds	r3, r3, r2
 8004724:	19db      	adds	r3, r3, r7
 8004726:	781b      	ldrb	r3, [r3, #0]
 8004728:	2b08      	cmp	r3, #8
 800472a:	d837      	bhi.n	800479c <UART_SetConfig+0x39c>
 800472c:	009a      	lsls	r2, r3, #2
 800472e:	4b10      	ldr	r3, [pc, #64]	; (8004770 <UART_SetConfig+0x370>)
 8004730:	18d3      	adds	r3, r2, r3
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004736:	f7fe fcf3 	bl	8003120 <HAL_RCC_GetPCLK1Freq>
 800473a:	0003      	movs	r3, r0
 800473c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800473e:	e036      	b.n	80047ae <UART_SetConfig+0x3ae>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004740:	f7fe fd04 	bl	800314c <HAL_RCC_GetPCLK2Freq>
 8004744:	0003      	movs	r3, r0
 8004746:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004748:	e031      	b.n	80047ae <UART_SetConfig+0x3ae>
 800474a:	46c0      	nop			; (mov r8, r8)
 800474c:	efff69f3 	.word	0xefff69f3
 8004750:	ffffcfff 	.word	0xffffcfff
 8004754:	40004800 	.word	0x40004800
 8004758:	fffff4ff 	.word	0xfffff4ff
 800475c:	40013800 	.word	0x40013800
 8004760:	40021000 	.word	0x40021000
 8004764:	40004400 	.word	0x40004400
 8004768:	003d0900 	.word	0x003d0900
 800476c:	00f42400 	.word	0x00f42400
 8004770:	08006148 	.word	0x08006148
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004774:	4b60      	ldr	r3, [pc, #384]	; (80048f8 <UART_SetConfig+0x4f8>)
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	2210      	movs	r2, #16
 800477a:	4013      	ands	r3, r2
 800477c:	d002      	beq.n	8004784 <UART_SetConfig+0x384>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 800477e:	4b5f      	ldr	r3, [pc, #380]	; (80048fc <UART_SetConfig+0x4fc>)
 8004780:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8004782:	e014      	b.n	80047ae <UART_SetConfig+0x3ae>
          pclk = (uint32_t) HSI_VALUE;
 8004784:	4b5e      	ldr	r3, [pc, #376]	; (8004900 <UART_SetConfig+0x500>)
 8004786:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004788:	e011      	b.n	80047ae <UART_SetConfig+0x3ae>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800478a:	f7fe fc19 	bl	8002fc0 <HAL_RCC_GetSysClockFreq>
 800478e:	0003      	movs	r3, r0
 8004790:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004792:	e00c      	b.n	80047ae <UART_SetConfig+0x3ae>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004794:	2380      	movs	r3, #128	; 0x80
 8004796:	021b      	lsls	r3, r3, #8
 8004798:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800479a:	e008      	b.n	80047ae <UART_SetConfig+0x3ae>
      default:
        pclk = 0U;
 800479c:	2300      	movs	r3, #0
 800479e:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 80047a0:	231a      	movs	r3, #26
 80047a2:	2218      	movs	r2, #24
 80047a4:	189b      	adds	r3, r3, r2
 80047a6:	19db      	adds	r3, r3, r7
 80047a8:	2201      	movs	r2, #1
 80047aa:	701a      	strb	r2, [r3, #0]
        break;
 80047ac:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80047ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	d100      	bne.n	80047b6 <UART_SetConfig+0x3b6>
 80047b4:	e090      	b.n	80048d8 <UART_SetConfig+0x4d8>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80047b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80047b8:	005a      	lsls	r2, r3, #1
 80047ba:	69fb      	ldr	r3, [r7, #28]
 80047bc:	685b      	ldr	r3, [r3, #4]
 80047be:	085b      	lsrs	r3, r3, #1
 80047c0:	18d2      	adds	r2, r2, r3
 80047c2:	69fb      	ldr	r3, [r7, #28]
 80047c4:	685b      	ldr	r3, [r3, #4]
 80047c6:	0019      	movs	r1, r3
 80047c8:	0010      	movs	r0, r2
 80047ca:	f7fb fcaf 	bl	800012c <__udivsi3>
 80047ce:	0003      	movs	r3, r0
 80047d0:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80047d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047d4:	2b0f      	cmp	r3, #15
 80047d6:	d921      	bls.n	800481c <UART_SetConfig+0x41c>
 80047d8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80047da:	2380      	movs	r3, #128	; 0x80
 80047dc:	025b      	lsls	r3, r3, #9
 80047de:	429a      	cmp	r2, r3
 80047e0:	d21c      	bcs.n	800481c <UART_SetConfig+0x41c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80047e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047e4:	b29a      	uxth	r2, r3
 80047e6:	200e      	movs	r0, #14
 80047e8:	2418      	movs	r4, #24
 80047ea:	1903      	adds	r3, r0, r4
 80047ec:	19db      	adds	r3, r3, r7
 80047ee:	210f      	movs	r1, #15
 80047f0:	438a      	bics	r2, r1
 80047f2:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80047f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047f6:	085b      	lsrs	r3, r3, #1
 80047f8:	b29b      	uxth	r3, r3
 80047fa:	2207      	movs	r2, #7
 80047fc:	4013      	ands	r3, r2
 80047fe:	b299      	uxth	r1, r3
 8004800:	1903      	adds	r3, r0, r4
 8004802:	19db      	adds	r3, r3, r7
 8004804:	1902      	adds	r2, r0, r4
 8004806:	19d2      	adds	r2, r2, r7
 8004808:	8812      	ldrh	r2, [r2, #0]
 800480a:	430a      	orrs	r2, r1
 800480c:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 800480e:	69fb      	ldr	r3, [r7, #28]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	1902      	adds	r2, r0, r4
 8004814:	19d2      	adds	r2, r2, r7
 8004816:	8812      	ldrh	r2, [r2, #0]
 8004818:	60da      	str	r2, [r3, #12]
 800481a:	e05d      	b.n	80048d8 <UART_SetConfig+0x4d8>
      }
      else
      {
        ret = HAL_ERROR;
 800481c:	231a      	movs	r3, #26
 800481e:	2218      	movs	r2, #24
 8004820:	189b      	adds	r3, r3, r2
 8004822:	19db      	adds	r3, r3, r7
 8004824:	2201      	movs	r2, #1
 8004826:	701a      	strb	r2, [r3, #0]
 8004828:	e056      	b.n	80048d8 <UART_SetConfig+0x4d8>
      }
    }
  }
  else
  {
    switch (clocksource)
 800482a:	231b      	movs	r3, #27
 800482c:	2218      	movs	r2, #24
 800482e:	189b      	adds	r3, r3, r2
 8004830:	19db      	adds	r3, r3, r7
 8004832:	781b      	ldrb	r3, [r3, #0]
 8004834:	2b08      	cmp	r3, #8
 8004836:	d822      	bhi.n	800487e <UART_SetConfig+0x47e>
 8004838:	009a      	lsls	r2, r3, #2
 800483a:	4b32      	ldr	r3, [pc, #200]	; (8004904 <UART_SetConfig+0x504>)
 800483c:	18d3      	adds	r3, r2, r3
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004842:	f7fe fc6d 	bl	8003120 <HAL_RCC_GetPCLK1Freq>
 8004846:	0003      	movs	r3, r0
 8004848:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800484a:	e021      	b.n	8004890 <UART_SetConfig+0x490>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800484c:	f7fe fc7e 	bl	800314c <HAL_RCC_GetPCLK2Freq>
 8004850:	0003      	movs	r3, r0
 8004852:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004854:	e01c      	b.n	8004890 <UART_SetConfig+0x490>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004856:	4b28      	ldr	r3, [pc, #160]	; (80048f8 <UART_SetConfig+0x4f8>)
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	2210      	movs	r2, #16
 800485c:	4013      	ands	r3, r2
 800485e:	d002      	beq.n	8004866 <UART_SetConfig+0x466>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8004860:	4b26      	ldr	r3, [pc, #152]	; (80048fc <UART_SetConfig+0x4fc>)
 8004862:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8004864:	e014      	b.n	8004890 <UART_SetConfig+0x490>
          pclk = (uint32_t) HSI_VALUE;
 8004866:	4b26      	ldr	r3, [pc, #152]	; (8004900 <UART_SetConfig+0x500>)
 8004868:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800486a:	e011      	b.n	8004890 <UART_SetConfig+0x490>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800486c:	f7fe fba8 	bl	8002fc0 <HAL_RCC_GetSysClockFreq>
 8004870:	0003      	movs	r3, r0
 8004872:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004874:	e00c      	b.n	8004890 <UART_SetConfig+0x490>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004876:	2380      	movs	r3, #128	; 0x80
 8004878:	021b      	lsls	r3, r3, #8
 800487a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800487c:	e008      	b.n	8004890 <UART_SetConfig+0x490>
      default:
        pclk = 0U;
 800487e:	2300      	movs	r3, #0
 8004880:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8004882:	231a      	movs	r3, #26
 8004884:	2218      	movs	r2, #24
 8004886:	189b      	adds	r3, r3, r2
 8004888:	19db      	adds	r3, r3, r7
 800488a:	2201      	movs	r2, #1
 800488c:	701a      	strb	r2, [r3, #0]
        break;
 800488e:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8004890:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004892:	2b00      	cmp	r3, #0
 8004894:	d020      	beq.n	80048d8 <UART_SetConfig+0x4d8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004896:	69fb      	ldr	r3, [r7, #28]
 8004898:	685b      	ldr	r3, [r3, #4]
 800489a:	085a      	lsrs	r2, r3, #1
 800489c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800489e:	18d2      	adds	r2, r2, r3
 80048a0:	69fb      	ldr	r3, [r7, #28]
 80048a2:	685b      	ldr	r3, [r3, #4]
 80048a4:	0019      	movs	r1, r3
 80048a6:	0010      	movs	r0, r2
 80048a8:	f7fb fc40 	bl	800012c <__udivsi3>
 80048ac:	0003      	movs	r3, r0
 80048ae:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80048b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048b2:	2b0f      	cmp	r3, #15
 80048b4:	d90a      	bls.n	80048cc <UART_SetConfig+0x4cc>
 80048b6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80048b8:	2380      	movs	r3, #128	; 0x80
 80048ba:	025b      	lsls	r3, r3, #9
 80048bc:	429a      	cmp	r2, r3
 80048be:	d205      	bcs.n	80048cc <UART_SetConfig+0x4cc>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80048c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048c2:	b29a      	uxth	r2, r3
 80048c4:	69fb      	ldr	r3, [r7, #28]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	60da      	str	r2, [r3, #12]
 80048ca:	e005      	b.n	80048d8 <UART_SetConfig+0x4d8>
      }
      else
      {
        ret = HAL_ERROR;
 80048cc:	231a      	movs	r3, #26
 80048ce:	2218      	movs	r2, #24
 80048d0:	189b      	adds	r3, r3, r2
 80048d2:	19db      	adds	r3, r3, r7
 80048d4:	2201      	movs	r2, #1
 80048d6:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80048d8:	69fb      	ldr	r3, [r7, #28]
 80048da:	2200      	movs	r2, #0
 80048dc:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 80048de:	69fb      	ldr	r3, [r7, #28]
 80048e0:	2200      	movs	r2, #0
 80048e2:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 80048e4:	231a      	movs	r3, #26
 80048e6:	2218      	movs	r2, #24
 80048e8:	189b      	adds	r3, r3, r2
 80048ea:	19db      	adds	r3, r3, r7
 80048ec:	781b      	ldrb	r3, [r3, #0]
}
 80048ee:	0018      	movs	r0, r3
 80048f0:	46bd      	mov	sp, r7
 80048f2:	b00e      	add	sp, #56	; 0x38
 80048f4:	bdb0      	pop	{r4, r5, r7, pc}
 80048f6:	46c0      	nop			; (mov r8, r8)
 80048f8:	40021000 	.word	0x40021000
 80048fc:	003d0900 	.word	0x003d0900
 8004900:	00f42400 	.word	0x00f42400
 8004904:	0800616c 	.word	0x0800616c

08004908 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004908:	b580      	push	{r7, lr}
 800490a:	b082      	sub	sp, #8
 800490c:	af00      	add	r7, sp, #0
 800490e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004914:	2201      	movs	r2, #1
 8004916:	4013      	ands	r3, r2
 8004918:	d00b      	beq.n	8004932 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	685b      	ldr	r3, [r3, #4]
 8004920:	4a4a      	ldr	r2, [pc, #296]	; (8004a4c <UART_AdvFeatureConfig+0x144>)
 8004922:	4013      	ands	r3, r2
 8004924:	0019      	movs	r1, r3
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	430a      	orrs	r2, r1
 8004930:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004936:	2202      	movs	r2, #2
 8004938:	4013      	ands	r3, r2
 800493a:	d00b      	beq.n	8004954 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	685b      	ldr	r3, [r3, #4]
 8004942:	4a43      	ldr	r2, [pc, #268]	; (8004a50 <UART_AdvFeatureConfig+0x148>)
 8004944:	4013      	ands	r3, r2
 8004946:	0019      	movs	r1, r3
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	430a      	orrs	r2, r1
 8004952:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004958:	2204      	movs	r2, #4
 800495a:	4013      	ands	r3, r2
 800495c:	d00b      	beq.n	8004976 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	685b      	ldr	r3, [r3, #4]
 8004964:	4a3b      	ldr	r2, [pc, #236]	; (8004a54 <UART_AdvFeatureConfig+0x14c>)
 8004966:	4013      	ands	r3, r2
 8004968:	0019      	movs	r1, r3
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	430a      	orrs	r2, r1
 8004974:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800497a:	2208      	movs	r2, #8
 800497c:	4013      	ands	r3, r2
 800497e:	d00b      	beq.n	8004998 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	685b      	ldr	r3, [r3, #4]
 8004986:	4a34      	ldr	r2, [pc, #208]	; (8004a58 <UART_AdvFeatureConfig+0x150>)
 8004988:	4013      	ands	r3, r2
 800498a:	0019      	movs	r1, r3
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	430a      	orrs	r2, r1
 8004996:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800499c:	2210      	movs	r2, #16
 800499e:	4013      	ands	r3, r2
 80049a0:	d00b      	beq.n	80049ba <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	689b      	ldr	r3, [r3, #8]
 80049a8:	4a2c      	ldr	r2, [pc, #176]	; (8004a5c <UART_AdvFeatureConfig+0x154>)
 80049aa:	4013      	ands	r3, r2
 80049ac:	0019      	movs	r1, r3
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	430a      	orrs	r2, r1
 80049b8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049be:	2220      	movs	r2, #32
 80049c0:	4013      	ands	r3, r2
 80049c2:	d00b      	beq.n	80049dc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	689b      	ldr	r3, [r3, #8]
 80049ca:	4a25      	ldr	r2, [pc, #148]	; (8004a60 <UART_AdvFeatureConfig+0x158>)
 80049cc:	4013      	ands	r3, r2
 80049ce:	0019      	movs	r1, r3
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	430a      	orrs	r2, r1
 80049da:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049e0:	2240      	movs	r2, #64	; 0x40
 80049e2:	4013      	ands	r3, r2
 80049e4:	d01d      	beq.n	8004a22 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	685b      	ldr	r3, [r3, #4]
 80049ec:	4a1d      	ldr	r2, [pc, #116]	; (8004a64 <UART_AdvFeatureConfig+0x15c>)
 80049ee:	4013      	ands	r3, r2
 80049f0:	0019      	movs	r1, r3
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	430a      	orrs	r2, r1
 80049fc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004a02:	2380      	movs	r3, #128	; 0x80
 8004a04:	035b      	lsls	r3, r3, #13
 8004a06:	429a      	cmp	r2, r3
 8004a08:	d10b      	bne.n	8004a22 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	685b      	ldr	r3, [r3, #4]
 8004a10:	4a15      	ldr	r2, [pc, #84]	; (8004a68 <UART_AdvFeatureConfig+0x160>)
 8004a12:	4013      	ands	r3, r2
 8004a14:	0019      	movs	r1, r3
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	430a      	orrs	r2, r1
 8004a20:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a26:	2280      	movs	r2, #128	; 0x80
 8004a28:	4013      	ands	r3, r2
 8004a2a:	d00b      	beq.n	8004a44 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	685b      	ldr	r3, [r3, #4]
 8004a32:	4a0e      	ldr	r2, [pc, #56]	; (8004a6c <UART_AdvFeatureConfig+0x164>)
 8004a34:	4013      	ands	r3, r2
 8004a36:	0019      	movs	r1, r3
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	430a      	orrs	r2, r1
 8004a42:	605a      	str	r2, [r3, #4]
  }
}
 8004a44:	46c0      	nop			; (mov r8, r8)
 8004a46:	46bd      	mov	sp, r7
 8004a48:	b002      	add	sp, #8
 8004a4a:	bd80      	pop	{r7, pc}
 8004a4c:	fffdffff 	.word	0xfffdffff
 8004a50:	fffeffff 	.word	0xfffeffff
 8004a54:	fffbffff 	.word	0xfffbffff
 8004a58:	ffff7fff 	.word	0xffff7fff
 8004a5c:	ffffefff 	.word	0xffffefff
 8004a60:	ffffdfff 	.word	0xffffdfff
 8004a64:	ffefffff 	.word	0xffefffff
 8004a68:	ff9fffff 	.word	0xff9fffff
 8004a6c:	fff7ffff 	.word	0xfff7ffff

08004a70 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004a70:	b580      	push	{r7, lr}
 8004a72:	b092      	sub	sp, #72	; 0x48
 8004a74:	af02      	add	r7, sp, #8
 8004a76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	2284      	movs	r2, #132	; 0x84
 8004a7c:	2100      	movs	r1, #0
 8004a7e:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004a80:	f7fc ff96 	bl	80019b0 <HAL_GetTick>
 8004a84:	0003      	movs	r3, r0
 8004a86:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	2208      	movs	r2, #8
 8004a90:	4013      	ands	r3, r2
 8004a92:	2b08      	cmp	r3, #8
 8004a94:	d12c      	bne.n	8004af0 <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004a96:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004a98:	2280      	movs	r2, #128	; 0x80
 8004a9a:	0391      	lsls	r1, r2, #14
 8004a9c:	6878      	ldr	r0, [r7, #4]
 8004a9e:	4a46      	ldr	r2, [pc, #280]	; (8004bb8 <UART_CheckIdleState+0x148>)
 8004aa0:	9200      	str	r2, [sp, #0]
 8004aa2:	2200      	movs	r2, #0
 8004aa4:	f000 f88c 	bl	8004bc0 <UART_WaitOnFlagUntilTimeout>
 8004aa8:	1e03      	subs	r3, r0, #0
 8004aaa:	d021      	beq.n	8004af0 <UART_CheckIdleState+0x80>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004aac:	f3ef 8310 	mrs	r3, PRIMASK
 8004ab0:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8004ab2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8004ab4:	63bb      	str	r3, [r7, #56]	; 0x38
 8004ab6:	2301      	movs	r3, #1
 8004ab8:	62bb      	str	r3, [r7, #40]	; 0x28
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004aba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004abc:	f383 8810 	msr	PRIMASK, r3
}
 8004ac0:	46c0      	nop			; (mov r8, r8)
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	681a      	ldr	r2, [r3, #0]
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	2180      	movs	r1, #128	; 0x80
 8004ace:	438a      	bics	r2, r1
 8004ad0:	601a      	str	r2, [r3, #0]
 8004ad2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ad4:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004ad6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ad8:	f383 8810 	msr	PRIMASK, r3
}
 8004adc:	46c0      	nop			; (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	2220      	movs	r2, #32
 8004ae2:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	2278      	movs	r2, #120	; 0x78
 8004ae8:	2100      	movs	r1, #0
 8004aea:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004aec:	2303      	movs	r3, #3
 8004aee:	e05f      	b.n	8004bb0 <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	2204      	movs	r2, #4
 8004af8:	4013      	ands	r3, r2
 8004afa:	2b04      	cmp	r3, #4
 8004afc:	d146      	bne.n	8004b8c <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004afe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004b00:	2280      	movs	r2, #128	; 0x80
 8004b02:	03d1      	lsls	r1, r2, #15
 8004b04:	6878      	ldr	r0, [r7, #4]
 8004b06:	4a2c      	ldr	r2, [pc, #176]	; (8004bb8 <UART_CheckIdleState+0x148>)
 8004b08:	9200      	str	r2, [sp, #0]
 8004b0a:	2200      	movs	r2, #0
 8004b0c:	f000 f858 	bl	8004bc0 <UART_WaitOnFlagUntilTimeout>
 8004b10:	1e03      	subs	r3, r0, #0
 8004b12:	d03b      	beq.n	8004b8c <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004b14:	f3ef 8310 	mrs	r3, PRIMASK
 8004b18:	60fb      	str	r3, [r7, #12]
  return(result);
 8004b1a:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004b1c:	637b      	str	r3, [r7, #52]	; 0x34
 8004b1e:	2301      	movs	r3, #1
 8004b20:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004b22:	693b      	ldr	r3, [r7, #16]
 8004b24:	f383 8810 	msr	PRIMASK, r3
}
 8004b28:	46c0      	nop			; (mov r8, r8)
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	681a      	ldr	r2, [r3, #0]
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	4921      	ldr	r1, [pc, #132]	; (8004bbc <UART_CheckIdleState+0x14c>)
 8004b36:	400a      	ands	r2, r1
 8004b38:	601a      	str	r2, [r3, #0]
 8004b3a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004b3c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004b3e:	697b      	ldr	r3, [r7, #20]
 8004b40:	f383 8810 	msr	PRIMASK, r3
}
 8004b44:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004b46:	f3ef 8310 	mrs	r3, PRIMASK
 8004b4a:	61bb      	str	r3, [r7, #24]
  return(result);
 8004b4c:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004b4e:	633b      	str	r3, [r7, #48]	; 0x30
 8004b50:	2301      	movs	r3, #1
 8004b52:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004b54:	69fb      	ldr	r3, [r7, #28]
 8004b56:	f383 8810 	msr	PRIMASK, r3
}
 8004b5a:	46c0      	nop			; (mov r8, r8)
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	689a      	ldr	r2, [r3, #8]
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	2101      	movs	r1, #1
 8004b68:	438a      	bics	r2, r1
 8004b6a:	609a      	str	r2, [r3, #8]
 8004b6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b6e:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004b70:	6a3b      	ldr	r3, [r7, #32]
 8004b72:	f383 8810 	msr	PRIMASK, r3
}
 8004b76:	46c0      	nop			; (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	2280      	movs	r2, #128	; 0x80
 8004b7c:	2120      	movs	r1, #32
 8004b7e:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	2278      	movs	r2, #120	; 0x78
 8004b84:	2100      	movs	r1, #0
 8004b86:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004b88:	2303      	movs	r3, #3
 8004b8a:	e011      	b.n	8004bb0 <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	2220      	movs	r2, #32
 8004b90:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	2280      	movs	r2, #128	; 0x80
 8004b96:	2120      	movs	r1, #32
 8004b98:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	2200      	movs	r2, #0
 8004b9e:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	2200      	movs	r2, #0
 8004ba4:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	2278      	movs	r2, #120	; 0x78
 8004baa:	2100      	movs	r1, #0
 8004bac:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004bae:	2300      	movs	r3, #0
}
 8004bb0:	0018      	movs	r0, r3
 8004bb2:	46bd      	mov	sp, r7
 8004bb4:	b010      	add	sp, #64	; 0x40
 8004bb6:	bd80      	pop	{r7, pc}
 8004bb8:	01ffffff 	.word	0x01ffffff
 8004bbc:	fffffedf 	.word	0xfffffedf

08004bc0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004bc0:	b580      	push	{r7, lr}
 8004bc2:	b084      	sub	sp, #16
 8004bc4:	af00      	add	r7, sp, #0
 8004bc6:	60f8      	str	r0, [r7, #12]
 8004bc8:	60b9      	str	r1, [r7, #8]
 8004bca:	603b      	str	r3, [r7, #0]
 8004bcc:	1dfb      	adds	r3, r7, #7
 8004bce:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004bd0:	e04b      	b.n	8004c6a <UART_WaitOnFlagUntilTimeout+0xaa>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004bd2:	69bb      	ldr	r3, [r7, #24]
 8004bd4:	3301      	adds	r3, #1
 8004bd6:	d048      	beq.n	8004c6a <UART_WaitOnFlagUntilTimeout+0xaa>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004bd8:	f7fc feea 	bl	80019b0 <HAL_GetTick>
 8004bdc:	0002      	movs	r2, r0
 8004bde:	683b      	ldr	r3, [r7, #0]
 8004be0:	1ad3      	subs	r3, r2, r3
 8004be2:	69ba      	ldr	r2, [r7, #24]
 8004be4:	429a      	cmp	r2, r3
 8004be6:	d302      	bcc.n	8004bee <UART_WaitOnFlagUntilTimeout+0x2e>
 8004be8:	69bb      	ldr	r3, [r7, #24]
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	d101      	bne.n	8004bf2 <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 8004bee:	2303      	movs	r3, #3
 8004bf0:	e04b      	b.n	8004c8a <UART_WaitOnFlagUntilTimeout+0xca>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	2204      	movs	r2, #4
 8004bfa:	4013      	ands	r3, r2
 8004bfc:	d035      	beq.n	8004c6a <UART_WaitOnFlagUntilTimeout+0xaa>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	69db      	ldr	r3, [r3, #28]
 8004c04:	2208      	movs	r2, #8
 8004c06:	4013      	ands	r3, r2
 8004c08:	2b08      	cmp	r3, #8
 8004c0a:	d111      	bne.n	8004c30 <UART_WaitOnFlagUntilTimeout+0x70>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	2208      	movs	r2, #8
 8004c12:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	0018      	movs	r0, r3
 8004c18:	f000 f83c 	bl	8004c94 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	2284      	movs	r2, #132	; 0x84
 8004c20:	2108      	movs	r1, #8
 8004c22:	5099      	str	r1, [r3, r2]

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	2278      	movs	r2, #120	; 0x78
 8004c28:	2100      	movs	r1, #0
 8004c2a:	5499      	strb	r1, [r3, r2]

           return HAL_ERROR;
 8004c2c:	2301      	movs	r3, #1
 8004c2e:	e02c      	b.n	8004c8a <UART_WaitOnFlagUntilTimeout+0xca>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	69da      	ldr	r2, [r3, #28]
 8004c36:	2380      	movs	r3, #128	; 0x80
 8004c38:	011b      	lsls	r3, r3, #4
 8004c3a:	401a      	ands	r2, r3
 8004c3c:	2380      	movs	r3, #128	; 0x80
 8004c3e:	011b      	lsls	r3, r3, #4
 8004c40:	429a      	cmp	r2, r3
 8004c42:	d112      	bne.n	8004c6a <UART_WaitOnFlagUntilTimeout+0xaa>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	2280      	movs	r2, #128	; 0x80
 8004c4a:	0112      	lsls	r2, r2, #4
 8004c4c:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	0018      	movs	r0, r3
 8004c52:	f000 f81f 	bl	8004c94 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	2284      	movs	r2, #132	; 0x84
 8004c5a:	2120      	movs	r1, #32
 8004c5c:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	2278      	movs	r2, #120	; 0x78
 8004c62:	2100      	movs	r1, #0
 8004c64:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8004c66:	2303      	movs	r3, #3
 8004c68:	e00f      	b.n	8004c8a <UART_WaitOnFlagUntilTimeout+0xca>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	69db      	ldr	r3, [r3, #28]
 8004c70:	68ba      	ldr	r2, [r7, #8]
 8004c72:	4013      	ands	r3, r2
 8004c74:	68ba      	ldr	r2, [r7, #8]
 8004c76:	1ad3      	subs	r3, r2, r3
 8004c78:	425a      	negs	r2, r3
 8004c7a:	4153      	adcs	r3, r2
 8004c7c:	b2db      	uxtb	r3, r3
 8004c7e:	001a      	movs	r2, r3
 8004c80:	1dfb      	adds	r3, r7, #7
 8004c82:	781b      	ldrb	r3, [r3, #0]
 8004c84:	429a      	cmp	r2, r3
 8004c86:	d0a4      	beq.n	8004bd2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004c88:	2300      	movs	r3, #0
}
 8004c8a:	0018      	movs	r0, r3
 8004c8c:	46bd      	mov	sp, r7
 8004c8e:	b004      	add	sp, #16
 8004c90:	bd80      	pop	{r7, pc}
	...

08004c94 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004c94:	b580      	push	{r7, lr}
 8004c96:	b08e      	sub	sp, #56	; 0x38
 8004c98:	af00      	add	r7, sp, #0
 8004c9a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004c9c:	f3ef 8310 	mrs	r3, PRIMASK
 8004ca0:	617b      	str	r3, [r7, #20]
  return(result);
 8004ca2:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004ca4:	637b      	str	r3, [r7, #52]	; 0x34
 8004ca6:	2301      	movs	r3, #1
 8004ca8:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004caa:	69bb      	ldr	r3, [r7, #24]
 8004cac:	f383 8810 	msr	PRIMASK, r3
}
 8004cb0:	46c0      	nop			; (mov r8, r8)
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	681a      	ldr	r2, [r3, #0]
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	4926      	ldr	r1, [pc, #152]	; (8004d58 <UART_EndRxTransfer+0xc4>)
 8004cbe:	400a      	ands	r2, r1
 8004cc0:	601a      	str	r2, [r3, #0]
 8004cc2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004cc4:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004cc6:	69fb      	ldr	r3, [r7, #28]
 8004cc8:	f383 8810 	msr	PRIMASK, r3
}
 8004ccc:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004cce:	f3ef 8310 	mrs	r3, PRIMASK
 8004cd2:	623b      	str	r3, [r7, #32]
  return(result);
 8004cd4:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004cd6:	633b      	str	r3, [r7, #48]	; 0x30
 8004cd8:	2301      	movs	r3, #1
 8004cda:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004cdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cde:	f383 8810 	msr	PRIMASK, r3
}
 8004ce2:	46c0      	nop			; (mov r8, r8)
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	689a      	ldr	r2, [r3, #8]
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	2101      	movs	r1, #1
 8004cf0:	438a      	bics	r2, r1
 8004cf2:	609a      	str	r2, [r3, #8]
 8004cf4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004cf6:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004cf8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004cfa:	f383 8810 	msr	PRIMASK, r3
}
 8004cfe:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004d04:	2b01      	cmp	r3, #1
 8004d06:	d118      	bne.n	8004d3a <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004d08:	f3ef 8310 	mrs	r3, PRIMASK
 8004d0c:	60bb      	str	r3, [r7, #8]
  return(result);
 8004d0e:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004d10:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004d12:	2301      	movs	r3, #1
 8004d14:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	f383 8810 	msr	PRIMASK, r3
}
 8004d1c:	46c0      	nop			; (mov r8, r8)
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	681a      	ldr	r2, [r3, #0]
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	2110      	movs	r1, #16
 8004d2a:	438a      	bics	r2, r1
 8004d2c:	601a      	str	r2, [r3, #0]
 8004d2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d30:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004d32:	693b      	ldr	r3, [r7, #16]
 8004d34:	f383 8810 	msr	PRIMASK, r3
}
 8004d38:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	2280      	movs	r2, #128	; 0x80
 8004d3e:	2120      	movs	r1, #32
 8004d40:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	2200      	movs	r2, #0
 8004d46:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	2200      	movs	r2, #0
 8004d4c:	669a      	str	r2, [r3, #104]	; 0x68
}
 8004d4e:	46c0      	nop			; (mov r8, r8)
 8004d50:	46bd      	mov	sp, r7
 8004d52:	b00e      	add	sp, #56	; 0x38
 8004d54:	bd80      	pop	{r7, pc}
 8004d56:	46c0      	nop			; (mov r8, r8)
 8004d58:	fffffedf 	.word	0xfffffedf

08004d5c <nRF24_CSN_Select>:
#include <nrf24_Button.h>
#include "main.h"


void nRF24_CSN_Select(uint16_t Sel_CSN_Pin)
{
 8004d5c:	b580      	push	{r7, lr}
 8004d5e:	b082      	sub	sp, #8
 8004d60:	af00      	add	r7, sp, #0
 8004d62:	0002      	movs	r2, r0
 8004d64:	1dbb      	adds	r3, r7, #6
 8004d66:	801a      	strh	r2, [r3, #0]
	switch (Sel_CSN_Pin)
 8004d68:	1dbb      	adds	r3, r7, #6
 8004d6a:	881b      	ldrh	r3, [r3, #0]
 8004d6c:	2b08      	cmp	r3, #8
 8004d6e:	d107      	bne.n	8004d80 <nRF24_CSN_Select+0x24>
	{
		case nRF_CSN_Pin:
			HAL_GPIO_WritePin(GPIOA, nRF_CSN_Pin, GPIO_PIN_RESET);
 8004d70:	23a0      	movs	r3, #160	; 0xa0
 8004d72:	05db      	lsls	r3, r3, #23
 8004d74:	2200      	movs	r2, #0
 8004d76:	2108      	movs	r1, #8
 8004d78:	0018      	movs	r0, r3
 8004d7a:	f7fd fc36 	bl	80025ea <HAL_GPIO_WritePin>
			break;
 8004d7e:	e000      	b.n	8004d82 <nRF24_CSN_Select+0x26>
		default:
			break;
 8004d80:	46c0      	nop			; (mov r8, r8)
	}
}
 8004d82:	46c0      	nop			; (mov r8, r8)
 8004d84:	46bd      	mov	sp, r7
 8004d86:	b002      	add	sp, #8
 8004d88:	bd80      	pop	{r7, pc}

08004d8a <nRF24_CSN_UnSelect>:

void nRF24_CSN_UnSelect(uint16_t Sel_CSN_Pin)
{
 8004d8a:	b580      	push	{r7, lr}
 8004d8c:	b082      	sub	sp, #8
 8004d8e:	af00      	add	r7, sp, #0
 8004d90:	0002      	movs	r2, r0
 8004d92:	1dbb      	adds	r3, r7, #6
 8004d94:	801a      	strh	r2, [r3, #0]
	switch (Sel_CSN_Pin)
 8004d96:	1dbb      	adds	r3, r7, #6
 8004d98:	881b      	ldrh	r3, [r3, #0]
 8004d9a:	2b08      	cmp	r3, #8
 8004d9c:	d107      	bne.n	8004dae <nRF24_CSN_UnSelect+0x24>
	{
		case nRF_CSN_Pin:
			HAL_GPIO_WritePin(GPIOA, nRF_CSN_Pin, GPIO_PIN_SET);
 8004d9e:	23a0      	movs	r3, #160	; 0xa0
 8004da0:	05db      	lsls	r3, r3, #23
 8004da2:	2201      	movs	r2, #1
 8004da4:	2108      	movs	r1, #8
 8004da6:	0018      	movs	r0, r3
 8004da8:	f7fd fc1f 	bl	80025ea <HAL_GPIO_WritePin>
			break;
 8004dac:	e000      	b.n	8004db0 <nRF24_CSN_UnSelect+0x26>
		default:
			break;
 8004dae:	46c0      	nop			; (mov r8, r8)
	}
}
 8004db0:	46c0      	nop			; (mov r8, r8)
 8004db2:	46bd      	mov	sp, r7
 8004db4:	b002      	add	sp, #8
 8004db6:	bd80      	pop	{r7, pc}

08004db8 <nRF24_CE_Enable>:

void nRF24_CE_Enable(uint16_t Sel_CE_Pin)
{
 8004db8:	b580      	push	{r7, lr}
 8004dba:	b082      	sub	sp, #8
 8004dbc:	af00      	add	r7, sp, #0
 8004dbe:	0002      	movs	r2, r0
 8004dc0:	1dbb      	adds	r3, r7, #6
 8004dc2:	801a      	strh	r2, [r3, #0]
	switch (Sel_CE_Pin)
 8004dc4:	1dbb      	adds	r3, r7, #6
 8004dc6:	881b      	ldrh	r3, [r3, #0]
 8004dc8:	2b04      	cmp	r3, #4
 8004dca:	d106      	bne.n	8004dda <nRF24_CE_Enable+0x22>
	{
		case nRF_CE_Pin:
			HAL_GPIO_WritePin(nRF_CE_GPIO_Port, nRF_CE_Pin, GPIO_PIN_SET);
 8004dcc:	4b05      	ldr	r3, [pc, #20]	; (8004de4 <nRF24_CE_Enable+0x2c>)
 8004dce:	2201      	movs	r2, #1
 8004dd0:	2104      	movs	r1, #4
 8004dd2:	0018      	movs	r0, r3
 8004dd4:	f7fd fc09 	bl	80025ea <HAL_GPIO_WritePin>
			break;
 8004dd8:	e000      	b.n	8004ddc <nRF24_CE_Enable+0x24>
		default:
			break;
 8004dda:	46c0      	nop			; (mov r8, r8)
	}
}
 8004ddc:	46c0      	nop			; (mov r8, r8)
 8004dde:	46bd      	mov	sp, r7
 8004de0:	b002      	add	sp, #8
 8004de2:	bd80      	pop	{r7, pc}
 8004de4:	50000400 	.word	0x50000400

08004de8 <nRF24_CE_Disable>:

void nRF24_CE_Disable(uint16_t Sel_CE_Pin)
{
 8004de8:	b580      	push	{r7, lr}
 8004dea:	b082      	sub	sp, #8
 8004dec:	af00      	add	r7, sp, #0
 8004dee:	0002      	movs	r2, r0
 8004df0:	1dbb      	adds	r3, r7, #6
 8004df2:	801a      	strh	r2, [r3, #0]
	switch (Sel_CE_Pin)
 8004df4:	1dbb      	adds	r3, r7, #6
 8004df6:	881b      	ldrh	r3, [r3, #0]
 8004df8:	2b04      	cmp	r3, #4
 8004dfa:	d106      	bne.n	8004e0a <nRF24_CE_Disable+0x22>
	{
		case nRF_CE_Pin:
			HAL_GPIO_WritePin(nRF_CE_GPIO_Port, nRF_CE_Pin, GPIO_PIN_RESET);
 8004dfc:	4b05      	ldr	r3, [pc, #20]	; (8004e14 <nRF24_CE_Disable+0x2c>)
 8004dfe:	2200      	movs	r2, #0
 8004e00:	2104      	movs	r1, #4
 8004e02:	0018      	movs	r0, r3
 8004e04:	f7fd fbf1 	bl	80025ea <HAL_GPIO_WritePin>
			break;
 8004e08:	e000      	b.n	8004e0c <nRF24_CE_Disable+0x24>
		default:
			break;
 8004e0a:	46c0      	nop			; (mov r8, r8)
	}
}
 8004e0c:	46c0      	nop			; (mov r8, r8)
 8004e0e:	46bd      	mov	sp, r7
 8004e10:	b002      	add	sp, #8
 8004e12:	bd80      	pop	{r7, pc}
 8004e14:	50000400 	.word	0x50000400

08004e18 <nRF24_WriteReg>:
// input:
//   Sel_CSN_Pin - Select the RF Module
//   reg - number of register to write
//   data - value to write
void nRF24_WriteReg(uint16_t Sel_CSN_Pin, uint8_t reg, uint8_t data)
{
 8004e18:	b590      	push	{r4, r7, lr}
 8004e1a:	b085      	sub	sp, #20
 8004e1c:	af00      	add	r7, sp, #0
 8004e1e:	0004      	movs	r4, r0
 8004e20:	0008      	movs	r0, r1
 8004e22:	0011      	movs	r1, r2
 8004e24:	1dbb      	adds	r3, r7, #6
 8004e26:	1c22      	adds	r2, r4, #0
 8004e28:	801a      	strh	r2, [r3, #0]
 8004e2a:	1d7b      	adds	r3, r7, #5
 8004e2c:	1c02      	adds	r2, r0, #0
 8004e2e:	701a      	strb	r2, [r3, #0]
 8004e30:	1d3b      	adds	r3, r7, #4
 8004e32:	1c0a      	adds	r2, r1, #0
 8004e34:	701a      	strb	r2, [r3, #0]
	uint8_t buf[2];
	buf[0] = reg | 1<<5;                                       //Set the 6th bit of the reg to make it a write command
 8004e36:	1d7b      	adds	r3, r7, #5
 8004e38:	781b      	ldrb	r3, [r3, #0]
 8004e3a:	2220      	movs	r2, #32
 8004e3c:	4313      	orrs	r3, r2
 8004e3e:	b2da      	uxtb	r2, r3
 8004e40:	240c      	movs	r4, #12
 8004e42:	193b      	adds	r3, r7, r4
 8004e44:	701a      	strb	r2, [r3, #0]
	buf[1] = data;
 8004e46:	193b      	adds	r3, r7, r4
 8004e48:	1d3a      	adds	r2, r7, #4
 8004e4a:	7812      	ldrb	r2, [r2, #0]
 8004e4c:	705a      	strb	r2, [r3, #1]

	switch(Sel_CSN_Pin)
 8004e4e:	1dbb      	adds	r3, r7, #6
 8004e50:	881b      	ldrh	r3, [r3, #0]
 8004e52:	2b08      	cmp	r3, #8
 8004e54:	d10d      	bne.n	8004e72 <nRF24_WriteReg+0x5a>
	{
	case nRF_CSN_Pin:
		nRF24_CSN_Select(nRF_CSN_Pin);                         //Pull CSN pin low to select the nRF24 on SPI BUS
 8004e56:	2008      	movs	r0, #8
 8004e58:	f7ff ff80 	bl	8004d5c <nRF24_CSN_Select>
		HAL_SPI_Transmit(&hspi1, buf, 2, 1000);                //Write command and register address (001AAAAA) and then the data to be written
 8004e5c:	23fa      	movs	r3, #250	; 0xfa
 8004e5e:	009b      	lsls	r3, r3, #2
 8004e60:	1939      	adds	r1, r7, r4
 8004e62:	4806      	ldr	r0, [pc, #24]	; (8004e7c <nRF24_WriteReg+0x64>)
 8004e64:	2202      	movs	r2, #2
 8004e66:	f7fe fb55 	bl	8003514 <HAL_SPI_Transmit>
		nRF24_CSN_UnSelect(nRF_CSN_Pin);                       //Pull CSN pin high to unselect the nRF24 on SPI BUS
 8004e6a:	2008      	movs	r0, #8
 8004e6c:	f7ff ff8d 	bl	8004d8a <nRF24_CSN_UnSelect>
		break;
 8004e70:	e000      	b.n	8004e74 <nRF24_WriteReg+0x5c>
	default:
		break;
 8004e72:	46c0      	nop			; (mov r8, r8)
	}
}
 8004e74:	46c0      	nop			; (mov r8, r8)
 8004e76:	46bd      	mov	sp, r7
 8004e78:	b005      	add	sp, #20
 8004e7a:	bd90      	pop	{r4, r7, pc}
 8004e7c:	20000180 	.word	0x20000180

08004e80 <nRF24_WriteMBReg>:
//   Sel_CSN_Pin - Select the RF Module
//   reg - number of register to write
//   data - pointer to the buffer with data to write
//   size - number of bytes to write
void nRF24_WriteMBReg(uint16_t Sel_CSN_Pin, uint8_t reg, uint8_t *data, uint8_t size)
{
 8004e80:	b590      	push	{r4, r7, lr}
 8004e82:	b085      	sub	sp, #20
 8004e84:	af00      	add	r7, sp, #0
 8004e86:	0004      	movs	r4, r0
 8004e88:	0008      	movs	r0, r1
 8004e8a:	603a      	str	r2, [r7, #0]
 8004e8c:	0019      	movs	r1, r3
 8004e8e:	1dbb      	adds	r3, r7, #6
 8004e90:	1c22      	adds	r2, r4, #0
 8004e92:	801a      	strh	r2, [r3, #0]
 8004e94:	1d7b      	adds	r3, r7, #5
 8004e96:	1c02      	adds	r2, r0, #0
 8004e98:	701a      	strb	r2, [r3, #0]
 8004e9a:	1d3b      	adds	r3, r7, #4
 8004e9c:	1c0a      	adds	r2, r1, #0
 8004e9e:	701a      	strb	r2, [r3, #0]
	uint8_t buf[2];
	buf[0] = reg | 1<<5;                                       //Set the 6th bit of the reg to make it a write command
 8004ea0:	1d7b      	adds	r3, r7, #5
 8004ea2:	781b      	ldrb	r3, [r3, #0]
 8004ea4:	2220      	movs	r2, #32
 8004ea6:	4313      	orrs	r3, r2
 8004ea8:	b2da      	uxtb	r2, r3
 8004eaa:	240c      	movs	r4, #12
 8004eac:	193b      	adds	r3, r7, r4
 8004eae:	701a      	strb	r2, [r3, #0]
//	buf[1] = data;

	switch(Sel_CSN_Pin)
 8004eb0:	1dbb      	adds	r3, r7, #6
 8004eb2:	881b      	ldrh	r3, [r3, #0]
 8004eb4:	2b08      	cmp	r3, #8
 8004eb6:	d116      	bne.n	8004ee6 <nRF24_WriteMBReg+0x66>
	{
	case nRF_CSN_Pin:
		nRF24_CSN_Select(nRF_CSN_Pin);                         //Pull CSN pin low to select the nRF24 on SPI BUS
 8004eb8:	2008      	movs	r0, #8
 8004eba:	f7ff ff4f 	bl	8004d5c <nRF24_CSN_Select>
		HAL_SPI_Transmit(&hspi1, buf, 1, 1000);                //Write command and register address (001AAAAA)
 8004ebe:	23fa      	movs	r3, #250	; 0xfa
 8004ec0:	009b      	lsls	r3, r3, #2
 8004ec2:	1939      	adds	r1, r7, r4
 8004ec4:	480a      	ldr	r0, [pc, #40]	; (8004ef0 <nRF24_WriteMBReg+0x70>)
 8004ec6:	2201      	movs	r2, #1
 8004ec8:	f7fe fb24 	bl	8003514 <HAL_SPI_Transmit>
		HAL_SPI_Transmit(&hspi1, data, size, 1000);            //Send the data to be written in that address
 8004ecc:	1d3b      	adds	r3, r7, #4
 8004ece:	781b      	ldrb	r3, [r3, #0]
 8004ed0:	b29a      	uxth	r2, r3
 8004ed2:	23fa      	movs	r3, #250	; 0xfa
 8004ed4:	009b      	lsls	r3, r3, #2
 8004ed6:	6839      	ldr	r1, [r7, #0]
 8004ed8:	4805      	ldr	r0, [pc, #20]	; (8004ef0 <nRF24_WriteMBReg+0x70>)
 8004eda:	f7fe fb1b 	bl	8003514 <HAL_SPI_Transmit>
		nRF24_CSN_UnSelect(nRF_CSN_Pin);                       //Pull CSN pin high to unselect the nRF24 on SPI BUS
 8004ede:	2008      	movs	r0, #8
 8004ee0:	f7ff ff53 	bl	8004d8a <nRF24_CSN_UnSelect>
		break;
 8004ee4:	e000      	b.n	8004ee8 <nRF24_WriteMBReg+0x68>
	default:
		break;
 8004ee6:	46c0      	nop			; (mov r8, r8)
	}
}
 8004ee8:	46c0      	nop			; (mov r8, r8)
 8004eea:	46bd      	mov	sp, r7
 8004eec:	b005      	add	sp, #20
 8004eee:	bd90      	pop	{r4, r7, pc}
 8004ef0:	20000180 	.word	0x20000180

08004ef4 <nRF24_ReadReg>:
// Reads a value of register
// input:
//   Sel_CSN_Pin - Select the RF Module
//   reg - number of register to read
// return: value of register
uint8_t nRF24_ReadReg(uint16_t Sel_CSN_Pin, uint8_t reg) {
 8004ef4:	b590      	push	{r4, r7, lr}
 8004ef6:	b085      	sub	sp, #20
 8004ef8:	af00      	add	r7, sp, #0
 8004efa:	0002      	movs	r2, r0
 8004efc:	1dbb      	adds	r3, r7, #6
 8004efe:	801a      	strh	r2, [r3, #0]
 8004f00:	1d7b      	adds	r3, r7, #5
 8004f02:	1c0a      	adds	r2, r1, #0
 8004f04:	701a      	strb	r2, [r3, #0]

	uint8_t data = 0;
 8004f06:	240f      	movs	r4, #15
 8004f08:	193b      	adds	r3, r7, r4
 8004f0a:	2200      	movs	r2, #0
 8004f0c:	701a      	strb	r2, [r3, #0]

	switch(Sel_CSN_Pin)
 8004f0e:	1dbb      	adds	r3, r7, #6
 8004f10:	881b      	ldrh	r3, [r3, #0]
 8004f12:	2b08      	cmp	r3, #8
 8004f14:	d114      	bne.n	8004f40 <nRF24_ReadReg+0x4c>
	{
	case nRF_CSN_Pin:
		nRF24_CSN_Select(nRF_CSN_Pin);                       //Pull CSN pin low to select the nRF24 on SPI BUS
 8004f16:	2008      	movs	r0, #8
 8004f18:	f7ff ff20 	bl	8004d5c <nRF24_CSN_Select>
		HAL_SPI_Transmit(&hspi1, &reg, 1, 1000);               //Sending the read command and register address (000AAAAA)
 8004f1c:	23fa      	movs	r3, #250	; 0xfa
 8004f1e:	009b      	lsls	r3, r3, #2
 8004f20:	1d79      	adds	r1, r7, #5
 8004f22:	480b      	ldr	r0, [pc, #44]	; (8004f50 <nRF24_ReadReg+0x5c>)
 8004f24:	2201      	movs	r2, #1
 8004f26:	f7fe faf5 	bl	8003514 <HAL_SPI_Transmit>
		HAL_SPI_Receive(&hspi1, &data, 1, 1000);               //Reading the one byte received
 8004f2a:	23fa      	movs	r3, #250	; 0xfa
 8004f2c:	009b      	lsls	r3, r3, #2
 8004f2e:	1939      	adds	r1, r7, r4
 8004f30:	4807      	ldr	r0, [pc, #28]	; (8004f50 <nRF24_ReadReg+0x5c>)
 8004f32:	2201      	movs	r2, #1
 8004f34:	f7fe fc4c 	bl	80037d0 <HAL_SPI_Receive>
		nRF24_CSN_UnSelect(nRF_CSN_Pin);                       //Pull CSN pin high to unselect the nRF24 on SPI BUS
 8004f38:	2008      	movs	r0, #8
 8004f3a:	f7ff ff26 	bl	8004d8a <nRF24_CSN_UnSelect>
		break;
 8004f3e:	e000      	b.n	8004f42 <nRF24_ReadReg+0x4e>
	default:
        break;
 8004f40:	46c0      	nop			; (mov r8, r8)
	}

	return data;
 8004f42:	230f      	movs	r3, #15
 8004f44:	18fb      	adds	r3, r7, r3
 8004f46:	781b      	ldrb	r3, [r3, #0]
}
 8004f48:	0018      	movs	r0, r3
 8004f4a:	46bd      	mov	sp, r7
 8004f4c:	b005      	add	sp, #20
 8004f4e:	bd90      	pop	{r4, r7, pc}
 8004f50:	20000180 	.word	0x20000180

08004f54 <nRF24_ReadMBReg>:
// Reads multiple bytes starting from a particular register
// input:
//   reg - number of register to write
//   data - pointer to the buffer with data to write
//   size - number of bytes to write
void nRF24_ReadMBReg(uint16_t Sel_CSN_Pin, uint8_t reg, uint8_t *data, uint8_t size) {
 8004f54:	b590      	push	{r4, r7, lr}
 8004f56:	b083      	sub	sp, #12
 8004f58:	af00      	add	r7, sp, #0
 8004f5a:	0004      	movs	r4, r0
 8004f5c:	0008      	movs	r0, r1
 8004f5e:	603a      	str	r2, [r7, #0]
 8004f60:	0019      	movs	r1, r3
 8004f62:	1dbb      	adds	r3, r7, #6
 8004f64:	1c22      	adds	r2, r4, #0
 8004f66:	801a      	strh	r2, [r3, #0]
 8004f68:	1d7b      	adds	r3, r7, #5
 8004f6a:	1c02      	adds	r2, r0, #0
 8004f6c:	701a      	strb	r2, [r3, #0]
 8004f6e:	1d3b      	adds	r3, r7, #4
 8004f70:	1c0a      	adds	r2, r1, #0
 8004f72:	701a      	strb	r2, [r3, #0]

	switch(Sel_CSN_Pin)
 8004f74:	1dbb      	adds	r3, r7, #6
 8004f76:	881b      	ldrh	r3, [r3, #0]
 8004f78:	2b08      	cmp	r3, #8
 8004f7a:	d116      	bne.n	8004faa <nRF24_ReadMBReg+0x56>
	{
	case nRF_CSN_Pin:
		nRF24_CSN_Select(nRF_CSN_Pin);                      //Pull CSN pin low to select the nRF24 on SPI BUS
 8004f7c:	2008      	movs	r0, #8
 8004f7e:	f7ff feed 	bl	8004d5c <nRF24_CSN_Select>
		HAL_SPI_Transmit(&hspi1, &reg, 1, 1000);       //Sending the read command and register address (000AAAAA)
 8004f82:	23fa      	movs	r3, #250	; 0xfa
 8004f84:	009b      	lsls	r3, r3, #2
 8004f86:	1d79      	adds	r1, r7, #5
 8004f88:	480a      	ldr	r0, [pc, #40]	; (8004fb4 <nRF24_ReadMBReg+0x60>)
 8004f8a:	2201      	movs	r2, #1
 8004f8c:	f7fe fac2 	bl	8003514 <HAL_SPI_Transmit>
		HAL_SPI_Receive(&hspi1, data, size, 1000);     //Reading the received bytes
 8004f90:	1d3b      	adds	r3, r7, #4
 8004f92:	781b      	ldrb	r3, [r3, #0]
 8004f94:	b29a      	uxth	r2, r3
 8004f96:	23fa      	movs	r3, #250	; 0xfa
 8004f98:	009b      	lsls	r3, r3, #2
 8004f9a:	6839      	ldr	r1, [r7, #0]
 8004f9c:	4805      	ldr	r0, [pc, #20]	; (8004fb4 <nRF24_ReadMBReg+0x60>)
 8004f9e:	f7fe fc17 	bl	80037d0 <HAL_SPI_Receive>
		nRF24_CSN_UnSelect(nRF_CSN_Pin);		              //Pull CSN pin low to select the nRF24 on SPI BUS
 8004fa2:	2008      	movs	r0, #8
 8004fa4:	f7ff fef1 	bl	8004d8a <nRF24_CSN_UnSelect>
		break;
 8004fa8:	e000      	b.n	8004fac <nRF24_ReadMBReg+0x58>
	default:
		break;
 8004faa:	46c0      	nop			; (mov r8, r8)
	}
}
 8004fac:	46c0      	nop			; (mov r8, r8)
 8004fae:	46bd      	mov	sp, r7
 8004fb0:	b003      	add	sp, #12
 8004fb2:	bd90      	pop	{r4, r7, pc}
 8004fb4:	20000180 	.word	0x20000180

08004fb8 <nRF24_Reset>:
// Reset all the nRF24's registers
// input:
//   Sel_CSN_Pin - Select the RF Module
//   reg - number of register to write
void nRF24_Reset(uint16_t Sel_CSN_Pin, uint8_t Reg)
{
 8004fb8:	b590      	push	{r4, r7, lr}
 8004fba:	b089      	sub	sp, #36	; 0x24
 8004fbc:	af00      	add	r7, sp, #0
 8004fbe:	0002      	movs	r2, r0
 8004fc0:	1dbb      	adds	r3, r7, #6
 8004fc2:	801a      	strh	r2, [r3, #0]
 8004fc4:	1d7b      	adds	r3, r7, #5
 8004fc6:	1c0a      	adds	r2, r1, #0
 8004fc8:	701a      	strb	r2, [r3, #0]
	uint8_t rx_addr_p0_def[5] = {0x53, 0x52, 0x36, 0x34, 0x00};
 8004fca:	2318      	movs	r3, #24
 8004fcc:	18fb      	adds	r3, r7, r3
 8004fce:	4a60      	ldr	r2, [pc, #384]	; (8005150 <nRF24_Reset+0x198>)
 8004fd0:	6811      	ldr	r1, [r2, #0]
 8004fd2:	6019      	str	r1, [r3, #0]
 8004fd4:	7912      	ldrb	r2, [r2, #4]
 8004fd6:	711a      	strb	r2, [r3, #4]
	uint8_t rx_addr_p1_def[5] = {0x53, 0x52, 0x36, 0x34, 0x01};
 8004fd8:	2310      	movs	r3, #16
 8004fda:	18fb      	adds	r3, r7, r3
 8004fdc:	4a5d      	ldr	r2, [pc, #372]	; (8005154 <nRF24_Reset+0x19c>)
 8004fde:	6811      	ldr	r1, [r2, #0]
 8004fe0:	6019      	str	r1, [r3, #0]
 8004fe2:	7912      	ldrb	r2, [r2, #4]
 8004fe4:	711a      	strb	r2, [r3, #4]
	uint8_t tx_adrr_def[5] = {0x53, 0x52, 0x36, 0x34, 0x00};
 8004fe6:	2308      	movs	r3, #8
 8004fe8:	18fb      	adds	r3, r7, r3
 8004fea:	4a59      	ldr	r2, [pc, #356]	; (8005150 <nRF24_Reset+0x198>)
 8004fec:	6811      	ldr	r1, [r2, #0]
 8004fee:	6019      	str	r1, [r3, #0]
 8004ff0:	7912      	ldrb	r2, [r2, #4]
 8004ff2:	711a      	strb	r2, [r3, #4]

	switch(Sel_CSN_Pin)
 8004ff4:	1dbb      	adds	r3, r7, #6
 8004ff6:	881b      	ldrh	r3, [r3, #0]
 8004ff8:	2b08      	cmp	r3, #8
 8004ffa:	d000      	beq.n	8004ffe <nRF24_Reset+0x46>
 8004ffc:	e0a2      	b.n	8005144 <nRF24_Reset+0x18c>
	{
	case nRF_CSN_Pin:
		if(Reg == nRF24_REG_STATUS)
 8004ffe:	1d7b      	adds	r3, r7, #5
 8005000:	781b      	ldrb	r3, [r3, #0]
 8005002:	2b07      	cmp	r3, #7
 8005004:	d105      	bne.n	8005012 <nRF24_Reset+0x5a>
		{
			nRF24_WriteReg(nRF_CSN_Pin, nRF24_REG_STATUS, 0x00);
 8005006:	2200      	movs	r2, #0
 8005008:	2107      	movs	r1, #7
 800500a:	2008      	movs	r0, #8
 800500c:	f7ff ff04 	bl	8004e18 <nRF24_WriteReg>
			nRF24_WriteReg(nRF_CSN_Pin, nRF24_REG_RX_PW_P5, 0x13);                    //Set the Pipe5 Payload width to 32 Byte
			nRF24_WriteReg(nRF_CSN_Pin, nRF24_REG_FIFO_STATUS, 0x11);                 //RX_EMPTY=1, RX_FULL=0, TX_EMPTY=1, TX_FULL=0, TX_REUSE=0
			nRF24_WriteReg(nRF_CSN_Pin, nRF24_REG_DYNPD, 0);                          //Disable dynamic payload length
			nRF24_WriteReg(nRF_CSN_Pin, nRF24_REG_FEATURE, 0);                        //
		}
		break;
 8005010:	e099      	b.n	8005146 <nRF24_Reset+0x18e>
		else if(Reg == nRF24_REG_FIFO_STATUS)
 8005012:	1d7b      	adds	r3, r7, #5
 8005014:	781b      	ldrb	r3, [r3, #0]
 8005016:	2b17      	cmp	r3, #23
 8005018:	d105      	bne.n	8005026 <nRF24_Reset+0x6e>
			nRF24_WriteReg(nRF_CSN_Pin, nRF24_REG_FIFO_STATUS, 0x11);
 800501a:	2211      	movs	r2, #17
 800501c:	2117      	movs	r1, #23
 800501e:	2008      	movs	r0, #8
 8005020:	f7ff fefa 	bl	8004e18 <nRF24_WriteReg>
		break;
 8005024:	e08f      	b.n	8005146 <nRF24_Reset+0x18e>
			nRF24_WriteReg(nRF_CSN_Pin, nRF24_REG_CONFIG, 0x0B);                      //PRIM_RX=1, PWR_UP=1, EN_CRC=1
 8005026:	220b      	movs	r2, #11
 8005028:	2100      	movs	r1, #0
 800502a:	2008      	movs	r0, #8
 800502c:	f7ff fef4 	bl	8004e18 <nRF24_WriteReg>
			nRF24_WriteReg(nRF_CSN_Pin, nRF24_REG_EN_AA, 0x3F);                       //Enable AA for all pipes
 8005030:	223f      	movs	r2, #63	; 0x3f
 8005032:	2101      	movs	r1, #1
 8005034:	2008      	movs	r0, #8
 8005036:	f7ff feef 	bl	8004e18 <nRF24_WriteReg>
			nRF24_WriteReg(nRF_CSN_Pin, nRF24_REG_EN_RXADDR, 0x3F);                   //Enable RX addresses for all pipes
 800503a:	223f      	movs	r2, #63	; 0x3f
 800503c:	2102      	movs	r1, #2
 800503e:	2008      	movs	r0, #8
 8005040:	f7ff feea 	bl	8004e18 <nRF24_WriteReg>
			nRF24_WriteReg(nRF_CSN_Pin, nRF24_REG_SETUP_AW, 0x03);                    //Set Address width to 5 Bytes
 8005044:	2203      	movs	r2, #3
 8005046:	2103      	movs	r1, #3
 8005048:	2008      	movs	r0, #8
 800504a:	f7ff fee5 	bl	8004e18 <nRF24_WriteReg>
			nRF24_WriteReg(nRF_CSN_Pin, nRF24_REG_SETUP_RETR, 0x8A);                  //Set retransmit delay to 2000us and retry count to 10
 800504e:	228a      	movs	r2, #138	; 0x8a
 8005050:	2104      	movs	r1, #4
 8005052:	2008      	movs	r0, #8
 8005054:	f7ff fee0 	bl	8004e18 <nRF24_WriteReg>
			nRF24_WriteReg(nRF_CSN_Pin, nRF24_REG_RF_CH, 0x02);                       //Set the Frequency Channel to 2
 8005058:	2202      	movs	r2, #2
 800505a:	2105      	movs	r1, #5
 800505c:	2008      	movs	r0, #8
 800505e:	f7ff fedb 	bl	8004e18 <nRF24_WriteReg>
			nRF24_WriteReg(nRF_CSN_Pin, nRF24_REG_RF_SETUP, 0x0F);                    //LNA_HCURR=1, RF_PWR=11(0dBm), RF_DR=1
 8005062:	220f      	movs	r2, #15
 8005064:	2106      	movs	r1, #6
 8005066:	2008      	movs	r0, #8
 8005068:	f7ff fed6 	bl	8004e18 <nRF24_WriteReg>
			nRF24_WriteReg(nRF_CSN_Pin, nRF24_REG_STATUS, 0x00);                      //Reset the STATUS register
 800506c:	2200      	movs	r2, #0
 800506e:	2107      	movs	r1, #7
 8005070:	2008      	movs	r0, #8
 8005072:	f7ff fed1 	bl	8004e18 <nRF24_WriteReg>
			nRF24_WriteReg(nRF_CSN_Pin, nRF24_REG_OBSERVE_TX, 0x00);                  //Reset the Transmit observe register
 8005076:	2200      	movs	r2, #0
 8005078:	2108      	movs	r1, #8
 800507a:	2008      	movs	r0, #8
 800507c:	f7ff fecc 	bl	8004e18 <nRF24_WriteReg>
			nRF24_WriteReg(nRF_CSN_Pin, nRF24_REG_RPD, 0x00);                         //Reset the received power detector
 8005080:	2200      	movs	r2, #0
 8005082:	2109      	movs	r1, #9
 8005084:	2008      	movs	r0, #8
 8005086:	f7ff fec7 	bl	8004e18 <nRF24_WriteReg>
			rx_addr_p0_def[4] = 0x00;
 800508a:	2118      	movs	r1, #24
 800508c:	187b      	adds	r3, r7, r1
 800508e:	2200      	movs	r2, #0
 8005090:	711a      	strb	r2, [r3, #4]
			rx_addr_p1_def[4] = 0x01;
 8005092:	2410      	movs	r4, #16
 8005094:	193b      	adds	r3, r7, r4
 8005096:	2201      	movs	r2, #1
 8005098:	711a      	strb	r2, [r3, #4]
			nRF24_WriteMBReg(nRF_CSN_Pin, nRF24_REG_RX_ADDR_P0, rx_addr_p0_def, 5);   //Set the Pipe0 address to {0x53, 0x52, 0x36, 0x34, 0x00}
 800509a:	187a      	adds	r2, r7, r1
 800509c:	2305      	movs	r3, #5
 800509e:	210a      	movs	r1, #10
 80050a0:	2008      	movs	r0, #8
 80050a2:	f7ff feed 	bl	8004e80 <nRF24_WriteMBReg>
			nRF24_WriteMBReg(nRF_CSN_Pin, nRF24_REG_RX_ADDR_P1, rx_addr_p1_def, 5);   //Set the Pipe0 address to {0x53, 0x52, 0x36, 0x34, 0x01}
 80050a6:	193a      	adds	r2, r7, r4
 80050a8:	2305      	movs	r3, #5
 80050aa:	210b      	movs	r1, #11
 80050ac:	2008      	movs	r0, #8
 80050ae:	f7ff fee7 	bl	8004e80 <nRF24_WriteMBReg>
			nRF24_WriteReg(nRF_CSN_Pin, nRF24_REG_RX_ADDR_P2, 0x02);                  //Set the Pipe0 address to {0x53, 0x52, 0x36, 0x34, 0x02}
 80050b2:	2202      	movs	r2, #2
 80050b4:	210c      	movs	r1, #12
 80050b6:	2008      	movs	r0, #8
 80050b8:	f7ff feae 	bl	8004e18 <nRF24_WriteReg>
			nRF24_WriteReg(nRF_CSN_Pin, nRF24_REG_RX_ADDR_P3, 0x03);                  //Set the Pipe0 address to {0x53, 0x52, 0x36, 0x34, 0x03}
 80050bc:	2203      	movs	r2, #3
 80050be:	210d      	movs	r1, #13
 80050c0:	2008      	movs	r0, #8
 80050c2:	f7ff fea9 	bl	8004e18 <nRF24_WriteReg>
			nRF24_WriteReg(nRF_CSN_Pin, nRF24_REG_RX_ADDR_P4, 0x04);                  //Set the Pipe0 address to {0x53, 0x52, 0x36, 0x34, 0x04}
 80050c6:	2204      	movs	r2, #4
 80050c8:	210e      	movs	r1, #14
 80050ca:	2008      	movs	r0, #8
 80050cc:	f7ff fea4 	bl	8004e18 <nRF24_WriteReg>
			nRF24_WriteReg(nRF_CSN_Pin, nRF24_REG_RX_ADDR_P5, 0x05);                  //Set the Pipe0 address to {0x53, 0x52, 0x36, 0x34, 0x05}
 80050d0:	2205      	movs	r2, #5
 80050d2:	210f      	movs	r1, #15
 80050d4:	2008      	movs	r0, #8
 80050d6:	f7ff fe9f 	bl	8004e18 <nRF24_WriteReg>
			nRF24_WriteMBReg(nRF_CSN_Pin, nRF24_REG_TX_ADDR, tx_adrr_def, 5);         //Set the TX address to {0x53, 0x52, 0x36, 0x34, 0x00}
 80050da:	2308      	movs	r3, #8
 80050dc:	18fa      	adds	r2, r7, r3
 80050de:	2305      	movs	r3, #5
 80050e0:	2110      	movs	r1, #16
 80050e2:	2008      	movs	r0, #8
 80050e4:	f7ff fecc 	bl	8004e80 <nRF24_WriteMBReg>
			nRF24_WriteReg(nRF_CSN_Pin, nRF24_REG_RX_PW_P0, 0x13);                    //Set the Pipe0 Payload width to 32 Byte
 80050e8:	2213      	movs	r2, #19
 80050ea:	2111      	movs	r1, #17
 80050ec:	2008      	movs	r0, #8
 80050ee:	f7ff fe93 	bl	8004e18 <nRF24_WriteReg>
			nRF24_WriteReg(nRF_CSN_Pin, nRF24_REG_RX_PW_P1, 0x13);                    //Set the Pipe1 Payload width to 32 Byte
 80050f2:	2213      	movs	r2, #19
 80050f4:	2112      	movs	r1, #18
 80050f6:	2008      	movs	r0, #8
 80050f8:	f7ff fe8e 	bl	8004e18 <nRF24_WriteReg>
			nRF24_WriteReg(nRF_CSN_Pin, nRF24_REG_RX_PW_P2, 0x13);                    //Set the Pipe2 Payload width to 32 Byte
 80050fc:	2213      	movs	r2, #19
 80050fe:	2113      	movs	r1, #19
 8005100:	2008      	movs	r0, #8
 8005102:	f7ff fe89 	bl	8004e18 <nRF24_WriteReg>
			nRF24_WriteReg(nRF_CSN_Pin, nRF24_REG_RX_PW_P3, 0x13);                    //Set the Pipe3 Payload width to 32 Byte
 8005106:	2213      	movs	r2, #19
 8005108:	2114      	movs	r1, #20
 800510a:	2008      	movs	r0, #8
 800510c:	f7ff fe84 	bl	8004e18 <nRF24_WriteReg>
			nRF24_WriteReg(nRF_CSN_Pin, nRF24_REG_RX_PW_P4, 0x13);                    //Set the Pipe4 Payload width to 32 Byte
 8005110:	2213      	movs	r2, #19
 8005112:	2115      	movs	r1, #21
 8005114:	2008      	movs	r0, #8
 8005116:	f7ff fe7f 	bl	8004e18 <nRF24_WriteReg>
			nRF24_WriteReg(nRF_CSN_Pin, nRF24_REG_RX_PW_P5, 0x13);                    //Set the Pipe5 Payload width to 32 Byte
 800511a:	2213      	movs	r2, #19
 800511c:	2116      	movs	r1, #22
 800511e:	2008      	movs	r0, #8
 8005120:	f7ff fe7a 	bl	8004e18 <nRF24_WriteReg>
			nRF24_WriteReg(nRF_CSN_Pin, nRF24_REG_FIFO_STATUS, 0x11);                 //RX_EMPTY=1, RX_FULL=0, TX_EMPTY=1, TX_FULL=0, TX_REUSE=0
 8005124:	2211      	movs	r2, #17
 8005126:	2117      	movs	r1, #23
 8005128:	2008      	movs	r0, #8
 800512a:	f7ff fe75 	bl	8004e18 <nRF24_WriteReg>
			nRF24_WriteReg(nRF_CSN_Pin, nRF24_REG_DYNPD, 0);                          //Disable dynamic payload length
 800512e:	2200      	movs	r2, #0
 8005130:	211c      	movs	r1, #28
 8005132:	2008      	movs	r0, #8
 8005134:	f7ff fe70 	bl	8004e18 <nRF24_WriteReg>
			nRF24_WriteReg(nRF_CSN_Pin, nRF24_REG_FEATURE, 0);                        //
 8005138:	2200      	movs	r2, #0
 800513a:	211d      	movs	r1, #29
 800513c:	2008      	movs	r0, #8
 800513e:	f7ff fe6b 	bl	8004e18 <nRF24_WriteReg>
		break;
 8005142:	e000      	b.n	8005146 <nRF24_Reset+0x18e>

	default:
		break;
 8005144:	46c0      	nop			; (mov r8, r8)

	}

}
 8005146:	46c0      	nop			; (mov r8, r8)
 8005148:	46bd      	mov	sp, r7
 800514a:	b009      	add	sp, #36	; 0x24
 800514c:	bd90      	pop	{r4, r7, pc}
 800514e:	46c0      	nop			; (mov r8, r8)
 8005150:	080060cc 	.word	0x080060cc
 8005154:	080060d4 	.word	0x080060d4

08005158 <nRF24_Init>:


// Configures the transceiver to its initial state
//Enabling the data pipe 0
void nRF24_Init(uint16_t Sel_CSN_Pin)
{
 8005158:	b580      	push	{r7, lr}
 800515a:	b082      	sub	sp, #8
 800515c:	af00      	add	r7, sp, #0
 800515e:	0002      	movs	r2, r0
 8005160:	1dbb      	adds	r3, r7, #6
 8005162:	801a      	strh	r2, [r3, #0]

	switch(Sel_CSN_Pin)
 8005164:	1dbb      	adds	r3, r7, #6
 8005166:	881b      	ldrh	r3, [r3, #0]
 8005168:	2b08      	cmp	r3, #8
 800516a:	d12a      	bne.n	80051c2 <nRF24_Init+0x6a>
	{
	case nRF_CSN_Pin:


		nRF24_CE_Disable(nRF_CSN_Pin);                             //Disable the chip before configuring the device
 800516c:	2008      	movs	r0, #8
 800516e:	f7ff fe3b 	bl	8004de8 <nRF24_CE_Disable>

		nRF24_Reset(nRF_CSN_Pin, 0);                               //Reset the Module registers with predefined value
 8005172:	2100      	movs	r1, #0
 8005174:	2008      	movs	r0, #8
 8005176:	f7ff ff1f 	bl	8004fb8 <nRF24_Reset>

		nRF24_WriteReg(nRF_CSN_Pin, nRF24_REG_CONFIG, 0x0A);       /******************************************************************************
 800517a:	220a      	movs	r2, #10
 800517c:	2100      	movs	r1, #0
 800517e:	2008      	movs	r0, #8
 8005180:	f7ff fe4a 	bl	8004e18 <nRF24_WriteReg>
		                                                             * CONFIG.3 EN_CRC = 1;           Enabling the CRC
		                                                             * CONFIG.2 CRCO = 0;             1 byte CRC encoding scheme
		                                                             * CONFIG.1 PWR_UP = 1;           Put the device into POWER UP mode
		                                                             * CONFIG.0 PRIM_RX = 0;          Put the device into PRX mode
		                                                             ******************************************************************************/
		nRF24_WriteReg(nRF_CSN_Pin, nRF24_REG_EN_AA, 0x00);		 /******************************************************************************
 8005184:	2200      	movs	r2, #0
 8005186:	2101      	movs	r1, #1
 8005188:	2008      	movs	r0, #8
 800518a:	f7ff fe45 	bl	8004e18 <nRF24_WriteReg>
		                                                             * EN_AA.3   ENAA_P3 = 0;         Enable auto acknowledgement data pipe 3
		                                                             * EN_AA.2   ENAA_P2 = 0;         Enable auto acknowledgement data pipe 2
		                                                             * EN_AA.1   ENAA_P1 = 0;         Enable auto acknowledgement data pipe 1
		                                                             * EN_AA.0   ENAA_P0 = 1;         Enable auto acknowledgement data pipe 0
		                                                             ******************************************************************************/
		nRF24_WriteReg(nRF_CSN_Pin, nRF24_REG_EN_RXADDR, 0x03);	 /******************************************************************************
 800518e:	2203      	movs	r2, #3
 8005190:	2102      	movs	r1, #2
 8005192:	2008      	movs	r0, #8
 8005194:	f7ff fe40 	bl	8004e18 <nRF24_WriteReg>
		                                                             * EN_RXADDR.3   ERX_P3=0;        Enable data pipe 3
		                                                             * EN_RXADDR.2   ERX_P2=0;        Enable data pipe 2
		                                                             * EN_RXADDR.1   ERX_P1=0;        Enable data pipe 1
		                                                             * EN_RXADDR.0   ERX_P0=1;        Enable data pipe 0
		                                                             ******************************************************************************/
		nRF24_WriteReg(nRF_CSN_Pin, nRF24_REG_SETUP_AW, 0x03);  	 /******************************************************************************
 8005198:	2203      	movs	r2, #3
 800519a:	2103      	movs	r1, #3
 800519c:	2008      	movs	r0, #8
 800519e:	f7ff fe3b 	bl	8004e18 <nRF24_WriteReg>
		                                                             * SETUP_AW.7:2  Reserved=000000; '00' - Illegal
		                                                             * SETUP_AW.1:0  AW=11;           '01' - 3 bytes
		                                                             *                                '10' - 4 bytes
		                                                             *                                '11' – 5 bytes
		                                                             ******************************************************************************/
		nRF24_WriteReg(nRF_CSN_Pin, nRF24_REG_SETUP_RETR, 0x00);	 /******************************************************************************
 80051a2:	2200      	movs	r2, #0
 80051a4:	2104      	movs	r1, #4
 80051a6:	2008      	movs	r0, #8
 80051a8:	f7ff fe36 	bl	8004e18 <nRF24_WriteReg>
		                                                             *Retry = 10 times                 '0000' - Retransmit Disabled
		                                                             *                                 '0001' - 1 count on fail of AA
        		                                                     *                                 ......
		                                                             *                                 '1111' - 15 counts on fail of AA
		                                                             ******************************************************************************/
		nRF24_WriteReg(nRF_CSN_Pin, nRF24_REG_RF_CH, 0x01); 	     /******************************************************************************
 80051ac:	2201      	movs	r2, #1
 80051ae:	2105      	movs	r1, #5
 80051b0:	2008      	movs	r0, #8
 80051b2:	f7ff fe31 	bl	8004e18 <nRF24_WriteReg>
		                                                             * RF_CH 0x05 Address - RF Channel
		                                                             * RF_CH.7   Reserved=0;           Only '0' allowed
		                                                             * RF_CH.6:0 RF_CH=0000010;        Sets the frequency channel nRF24L01 operates on
		                                                             ******************************************************************************/
		nRF24_WriteReg(nRF_CSN_Pin, nRF24_REG_RF_SETUP, 0x0F);	     /******************************************************************************
 80051b6:	220f      	movs	r2, #15
 80051b8:	2106      	movs	r1, #6
 80051ba:	2008      	movs	r0, #8
 80051bc:	f7ff fe2c 	bl	8004e18 <nRF24_WriteReg>
		                                                             * RF_SETUP.3     RF_DR=1;         Air Data Rate - '0' for 1Mbps, '1' for 2Mbps
		                                                             * RF_SETUP.2:1   RF_PWR=11;       Set RF output power in TX mode - '00' for -18dBm, '01' for -12dBm, '10' for -6dBm, '11' for 0dBm
		                                                             * RF_SETUP.0     LNA_HCURR=1;     Setup LNA gain
		                                                             ******************************************************************************/
		//nRF24_CE_Enable(nRF_CSN_Pin);                                //Enable the chip after configuring the device
		break;
 80051c0:	e000      	b.n	80051c4 <nRF24_Init+0x6c>

	default:
		break;
 80051c2:	46c0      	nop			; (mov r8, r8)

	}
}
 80051c4:	46c0      	nop			; (mov r8, r8)
 80051c6:	46bd      	mov	sp, r7
 80051c8:	b002      	add	sp, #8
 80051ca:	bd80      	pop	{r7, pc}

080051cc <nRF24_TxMode>:


void nRF24_TxMode(uint16_t Sel_CSN_Pin, uint8_t *TxAddr, uint8_t *RxAddr, uint8_t channel)
{
 80051cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80051ce:	b087      	sub	sp, #28
 80051d0:	af00      	add	r7, sp, #0
 80051d2:	60b9      	str	r1, [r7, #8]
 80051d4:	607a      	str	r2, [r7, #4]
 80051d6:	0019      	movs	r1, r3
 80051d8:	250e      	movs	r5, #14
 80051da:	197b      	adds	r3, r7, r5
 80051dc:	1c02      	adds	r2, r0, #0
 80051de:	801a      	strh	r2, [r3, #0]
 80051e0:	260d      	movs	r6, #13
 80051e2:	19bb      	adds	r3, r7, r6
 80051e4:	1c0a      	adds	r2, r1, #0
 80051e6:	701a      	strb	r2, [r3, #0]
	uint8_t config = 0;
 80051e8:	2417      	movs	r4, #23
 80051ea:	193b      	adds	r3, r7, r4
 80051ec:	2200      	movs	r2, #0
 80051ee:	701a      	strb	r2, [r3, #0]

	switch(Sel_CSN_Pin)
 80051f0:	197b      	adds	r3, r7, r5
 80051f2:	881b      	ldrh	r3, [r3, #0]
 80051f4:	2b08      	cmp	r3, #8
 80051f6:	d12c      	bne.n	8005252 <nRF24_TxMode+0x86>
	{
	case nRF_CSN_Pin:

		nRF24_CE_Disable(nRF_CSN_Pin);                                   //Disable the chip before configuring the device (Should be held low while configuring the nRF24)
 80051f8:	2008      	movs	r0, #8
 80051fa:	f7ff fdf5 	bl	8004de8 <nRF24_CE_Disable>

		nRF24_WriteReg(nRF_CSN_Pin, nRF24_REG_RF_CH, channel);           //Select the channel
 80051fe:	19bb      	adds	r3, r7, r6
 8005200:	781b      	ldrb	r3, [r3, #0]
 8005202:	001a      	movs	r2, r3
 8005204:	2105      	movs	r1, #5
 8005206:	2008      	movs	r0, #8
 8005208:	f7ff fe06 	bl	8004e18 <nRF24_WriteReg>
		nRF24_WriteMBReg(nRF_CSN_Pin, nRF24_REG_TX_ADDR, TxAddr, 5);     //Write the TX address
 800520c:	68ba      	ldr	r2, [r7, #8]
 800520e:	2305      	movs	r3, #5
 8005210:	2110      	movs	r1, #16
 8005212:	2008      	movs	r0, #8
 8005214:	f7ff fe34 	bl	8004e80 <nRF24_WriteMBReg>

		nRF24_WriteMBReg(nRF_CSN_Pin, nRF24_REG_RX_ADDR_P0, RxAddr, 5);  //Write the RX address
 8005218:	687a      	ldr	r2, [r7, #4]
 800521a:	2305      	movs	r3, #5
 800521c:	210a      	movs	r1, #10
 800521e:	2008      	movs	r0, #8
 8005220:	f7ff fe2e 	bl	8004e80 <nRF24_WriteMBReg>

		config = nRF24_ReadReg(nRF_CSN_Pin, nRF24_REG_CONFIG);
 8005224:	0025      	movs	r5, r4
 8005226:	193c      	adds	r4, r7, r4
 8005228:	2100      	movs	r1, #0
 800522a:	2008      	movs	r0, #8
 800522c:	f7ff fe62 	bl	8004ef4 <nRF24_ReadReg>
 8005230:	0003      	movs	r3, r0
 8005232:	7023      	strb	r3, [r4, #0]
		config = config | (1<<1);
 8005234:	002c      	movs	r4, r5
 8005236:	193b      	adds	r3, r7, r4
 8005238:	193a      	adds	r2, r7, r4
 800523a:	7812      	ldrb	r2, [r2, #0]
 800523c:	2102      	movs	r1, #2
 800523e:	430a      	orrs	r2, r1
 8005240:	701a      	strb	r2, [r3, #0]
		nRF24_WriteReg(nRF_CSN_Pin, nRF24_REG_CONFIG, config);           //Power up the device in PTX mode using PWR_UP and PRIM_RX bits in CONFIG register
 8005242:	193b      	adds	r3, r7, r4
 8005244:	781b      	ldrb	r3, [r3, #0]
 8005246:	001a      	movs	r2, r3
 8005248:	2100      	movs	r1, #0
 800524a:	2008      	movs	r0, #8
 800524c:	f7ff fde4 	bl	8004e18 <nRF24_WriteReg>

		//nRF24_CE_Enable(Sel_B_Module1);                                //Enable the chip after configuring the device (Should be held low while configuring the nRF24)
		break;
 8005250:	e000      	b.n	8005254 <nRF24_TxMode+0x88>

	default:
		break;
 8005252:	46c0      	nop			; (mov r8, r8)

	}
}
 8005254:	46c0      	nop			; (mov r8, r8)
 8005256:	46bd      	mov	sp, r7
 8005258:	b007      	add	sp, #28
 800525a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800525c <nRF24_Transmit>:


uint8_t nRF24_Transmit(uint16_t Sel_CSN_Pin, uint8_t *data)
{
 800525c:	b5b0      	push	{r4, r5, r7, lr}
 800525e:	b084      	sub	sp, #16
 8005260:	af00      	add	r7, sp, #0
 8005262:	0002      	movs	r2, r0
 8005264:	6039      	str	r1, [r7, #0]
 8005266:	1dbb      	adds	r3, r7, #6
 8005268:	801a      	strh	r2, [r3, #0]
	uint8_t cmdtosend = 0;
 800526a:	240c      	movs	r4, #12
 800526c:	193b      	adds	r3, r7, r4
 800526e:	2200      	movs	r2, #0
 8005270:	701a      	strb	r2, [r3, #0]
	uint8_t STATUS_Register = 0;
 8005272:	230f      	movs	r3, #15
 8005274:	18fb      	adds	r3, r7, r3
 8005276:	2200      	movs	r2, #0
 8005278:	701a      	strb	r2, [r3, #0]
    uint8_t Tr_Wait = 1;
 800527a:	230e      	movs	r3, #14
 800527c:	18fb      	adds	r3, r7, r3
 800527e:	2201      	movs	r2, #1
 8005280:	701a      	strb	r2, [r3, #0]
    uint8_t Tr_Success = 0;
 8005282:	230d      	movs	r3, #13
 8005284:	18fb      	adds	r3, r7, r3
 8005286:	2200      	movs	r2, #0
 8005288:	701a      	strb	r2, [r3, #0]
	switch(Sel_CSN_Pin)
 800528a:	1dbb      	adds	r3, r7, #6
 800528c:	881b      	ldrh	r3, [r3, #0]
 800528e:	2b08      	cmp	r3, #8
 8005290:	d16f      	bne.n	8005372 <nRF24_Transmit+0x116>
	{
	case nRF_CSN_Pin:

		nRF24_CSN_Select(nRF_CSN_Pin);                                                   //Pull CSN pin low to select the module1 on SPI BUS
 8005292:	2008      	movs	r0, #8
 8005294:	f7ff fd62 	bl	8004d5c <nRF24_CSN_Select>

		cmdtosend = nRF24_CMD_W_TX_PAYLOAD;                                                //Payload transmit command
 8005298:	193b      	adds	r3, r7, r4
 800529a:	22a0      	movs	r2, #160	; 0xa0
 800529c:	701a      	strb	r2, [r3, #0]
		HAL_SPI_Transmit(&hspi1, &cmdtosend, 1, 100);
 800529e:	1939      	adds	r1, r7, r4
 80052a0:	4836      	ldr	r0, [pc, #216]	; (800537c <nRF24_Transmit+0x120>)
 80052a2:	2364      	movs	r3, #100	; 0x64
 80052a4:	2201      	movs	r2, #1
 80052a6:	f7fe f935 	bl	8003514 <HAL_SPI_Transmit>
		HAL_SPI_Transmit(&hspi1, data, 19, 100);
 80052aa:	6839      	ldr	r1, [r7, #0]
 80052ac:	4833      	ldr	r0, [pc, #204]	; (800537c <nRF24_Transmit+0x120>)
 80052ae:	2364      	movs	r3, #100	; 0x64
 80052b0:	2213      	movs	r2, #19
 80052b2:	f7fe f92f 	bl	8003514 <HAL_SPI_Transmit>

		nRF24_CE_Enable(nRF_CE_Pin);                                                    //Enable the module1
 80052b6:	2004      	movs	r0, #4
 80052b8:	f7ff fd7e 	bl	8004db8 <nRF24_CE_Enable>
		HAL_Delay(1);
 80052bc:	2001      	movs	r0, #1
 80052be:	f7fc fb81 	bl	80019c4 <HAL_Delay>
		nRF24_CE_Disable(nRF_CSN_Pin);                                   //Disable the chip
 80052c2:	2008      	movs	r0, #8
 80052c4:	f7ff fd90 	bl	8004de8 <nRF24_CE_Disable>

		while(Tr_Wait == 1)
 80052c8:	e047      	b.n	800535a <nRF24_Transmit+0xfe>
		{
			STATUS_Register = nRF24_ReadReg(nRF_CSN_Pin, nRF24_REG_STATUS);             //Reading the STATUS register
 80052ca:	250f      	movs	r5, #15
 80052cc:	197c      	adds	r4, r7, r5
 80052ce:	2107      	movs	r1, #7
 80052d0:	2008      	movs	r0, #8
 80052d2:	f7ff fe0f 	bl	8004ef4 <nRF24_ReadReg>
 80052d6:	0003      	movs	r3, r0
 80052d8:	7023      	strb	r3, [r4, #0]
			if((STATUS_Register & (1<<5)) != 0)                                  //check TX_EMPTY flag to be 1 along with Reserved pin to be 0
 80052da:	002c      	movs	r4, r5
 80052dc:	193b      	adds	r3, r7, r4
 80052de:	781b      	ldrb	r3, [r3, #0]
 80052e0:	2220      	movs	r2, #32
 80052e2:	4013      	ands	r3, r2
 80052e4:	d01b      	beq.n	800531e <nRF24_Transmit+0xc2>
			{
				HAL_UART_Transmit(&hlpuart1, (uint8_t *)"Data Transmitted Successfully\n",30,100);
 80052e6:	4926      	ldr	r1, [pc, #152]	; (8005380 <nRF24_Transmit+0x124>)
 80052e8:	4826      	ldr	r0, [pc, #152]	; (8005384 <nRF24_Transmit+0x128>)
 80052ea:	2364      	movs	r3, #100	; 0x64
 80052ec:	221e      	movs	r2, #30
 80052ee:	f7fe ffe7 	bl	80042c0 <HAL_UART_Transmit>

				//Remove the interrupt pin
				STATUS_Register = STATUS_Register | (1<<5);     //Write 1 to TX_DS to reset it
 80052f2:	0020      	movs	r0, r4
 80052f4:	183b      	adds	r3, r7, r0
 80052f6:	183a      	adds	r2, r7, r0
 80052f8:	7812      	ldrb	r2, [r2, #0]
 80052fa:	2120      	movs	r1, #32
 80052fc:	430a      	orrs	r2, r1
 80052fe:	701a      	strb	r2, [r3, #0]
				nRF24_WriteReg(nRF_CSN_Pin, nRF24_REG_STATUS, STATUS_Register);
 8005300:	183b      	adds	r3, r7, r0
 8005302:	781b      	ldrb	r3, [r3, #0]
 8005304:	001a      	movs	r2, r3
 8005306:	2107      	movs	r1, #7
 8005308:	2008      	movs	r0, #8
 800530a:	f7ff fd85 	bl	8004e18 <nRF24_WriteReg>

				Tr_Wait = 0;
 800530e:	230e      	movs	r3, #14
 8005310:	18fb      	adds	r3, r7, r3
 8005312:	2200      	movs	r2, #0
 8005314:	701a      	strb	r2, [r3, #0]
				Tr_Success = 1;
 8005316:	230d      	movs	r3, #13
 8005318:	18fb      	adds	r3, r7, r3
 800531a:	2201      	movs	r2, #1
 800531c:	701a      	strb	r2, [r3, #0]

			}
			if((STATUS_Register & (1<<4)) != 0)                                  //check TX_EMPTY flag to be 1 along with Reserved pin to be 0
 800531e:	240f      	movs	r4, #15
 8005320:	193b      	adds	r3, r7, r4
 8005322:	781b      	ldrb	r3, [r3, #0]
 8005324:	2210      	movs	r2, #16
 8005326:	4013      	ands	r3, r2
 8005328:	d017      	beq.n	800535a <nRF24_Transmit+0xfe>
			{
				HAL_UART_Transmit(&hlpuart1, (uint8_t *)"Maximum Retry Reached\n",22,100);
 800532a:	4917      	ldr	r1, [pc, #92]	; (8005388 <nRF24_Transmit+0x12c>)
 800532c:	4815      	ldr	r0, [pc, #84]	; (8005384 <nRF24_Transmit+0x128>)
 800532e:	2364      	movs	r3, #100	; 0x64
 8005330:	2216      	movs	r2, #22
 8005332:	f7fe ffc5 	bl	80042c0 <HAL_UART_Transmit>

				//Remove the interrupt pin
				STATUS_Register = STATUS_Register | (1<<4);   //Write 1 to MAX_RT to reset it
 8005336:	0020      	movs	r0, r4
 8005338:	183b      	adds	r3, r7, r0
 800533a:	183a      	adds	r2, r7, r0
 800533c:	7812      	ldrb	r2, [r2, #0]
 800533e:	2110      	movs	r1, #16
 8005340:	430a      	orrs	r2, r1
 8005342:	701a      	strb	r2, [r3, #0]
				nRF24_WriteReg(nRF_CSN_Pin, nRF24_REG_STATUS, STATUS_Register);
 8005344:	183b      	adds	r3, r7, r0
 8005346:	781b      	ldrb	r3, [r3, #0]
 8005348:	001a      	movs	r2, r3
 800534a:	2107      	movs	r1, #7
 800534c:	2008      	movs	r0, #8
 800534e:	f7ff fd63 	bl	8004e18 <nRF24_WriteReg>

				Tr_Wait = 0;
 8005352:	230e      	movs	r3, #14
 8005354:	18fb      	adds	r3, r7, r3
 8005356:	2200      	movs	r2, #0
 8005358:	701a      	strb	r2, [r3, #0]
		while(Tr_Wait == 1)
 800535a:	230e      	movs	r3, #14
 800535c:	18fb      	adds	r3, r7, r3
 800535e:	781b      	ldrb	r3, [r3, #0]
 8005360:	2b01      	cmp	r3, #1
 8005362:	d0b2      	beq.n	80052ca <nRF24_Transmit+0x6e>
			}
		}
		nRF24_CSN_UnSelect(nRF_CSN_Pin);
 8005364:	2008      	movs	r0, #8
 8005366:	f7ff fd10 	bl	8004d8a <nRF24_CSN_UnSelect>
		return Tr_Success;
 800536a:	230d      	movs	r3, #13
 800536c:	18fb      	adds	r3, r7, r3
 800536e:	781b      	ldrb	r3, [r3, #0]
 8005370:	e000      	b.n	8005374 <nRF24_Transmit+0x118>


	default:
		return 0;
 8005372:	2300      	movs	r3, #0
	}
}
 8005374:	0018      	movs	r0, r3
 8005376:	46bd      	mov	sp, r7
 8005378:	b004      	add	sp, #16
 800537a:	bdb0      	pop	{r4, r5, r7, pc}
 800537c:	20000180 	.word	0x20000180
 8005380:	080060dc 	.word	0x080060dc
 8005384:	200000f8 	.word	0x200000f8
 8005388:	080060fc 	.word	0x080060fc

0800538c <nRF24_Power>:

	}
}

void nRF24_Power(uint16_t Sel_CSN_Pin, uint8_t On_Off_Cmd)
{
 800538c:	b580      	push	{r7, lr}
 800538e:	b082      	sub	sp, #8
 8005390:	af00      	add	r7, sp, #0
 8005392:	0002      	movs	r2, r0
 8005394:	1dbb      	adds	r3, r7, #6
 8005396:	801a      	strh	r2, [r3, #0]
 8005398:	1d7b      	adds	r3, r7, #5
 800539a:	1c0a      	adds	r2, r1, #0
 800539c:	701a      	strb	r2, [r3, #0]
	switch(Sel_CSN_Pin)
 800539e:	1dbb      	adds	r3, r7, #6
 80053a0:	881b      	ldrh	r3, [r3, #0]
 80053a2:	2b08      	cmp	r3, #8
 80053a4:	d113      	bne.n	80053ce <nRF24_Power+0x42>
	{
	case nRF_CSN_Pin:
		if(On_Off_Cmd == 1)
 80053a6:	1d7b      	adds	r3, r7, #5
 80053a8:	781b      	ldrb	r3, [r3, #0]
 80053aa:	2b01      	cmp	r3, #1
 80053ac:	d105      	bne.n	80053ba <nRF24_Power+0x2e>
		{
			nRF24_WriteReg(nRF_CSN_Pin, nRF24_REG_CONFIG, 0x0A);
 80053ae:	220a      	movs	r2, #10
 80053b0:	2100      	movs	r1, #0
 80053b2:	2008      	movs	r0, #8
 80053b4:	f7ff fd30 	bl	8004e18 <nRF24_WriteReg>
		}
		else if(On_Off_Cmd == 0)
		{
			nRF24_WriteReg(nRF_CSN_Pin, nRF24_REG_CONFIG, 0x08);
		}
		break;
 80053b8:	e00b      	b.n	80053d2 <nRF24_Power+0x46>
		else if(On_Off_Cmd == 0)
 80053ba:	1d7b      	adds	r3, r7, #5
 80053bc:	781b      	ldrb	r3, [r3, #0]
 80053be:	2b00      	cmp	r3, #0
 80053c0:	d107      	bne.n	80053d2 <nRF24_Power+0x46>
			nRF24_WriteReg(nRF_CSN_Pin, nRF24_REG_CONFIG, 0x08);
 80053c2:	2208      	movs	r2, #8
 80053c4:	2100      	movs	r1, #0
 80053c6:	2008      	movs	r0, #8
 80053c8:	f7ff fd26 	bl	8004e18 <nRF24_WriteReg>
		break;
 80053cc:	e001      	b.n	80053d2 <nRF24_Power+0x46>
	default:
		break;
 80053ce:	46c0      	nop			; (mov r8, r8)
 80053d0:	e000      	b.n	80053d4 <nRF24_Power+0x48>
		break;
 80053d2:	46c0      	nop			; (mov r8, r8)
	}
}
 80053d4:	46c0      	nop			; (mov r8, r8)
 80053d6:	46bd      	mov	sp, r7
 80053d8:	b002      	add	sp, #8
 80053da:	bd80      	pop	{r7, pc}

080053dc <__errno>:
 80053dc:	4b01      	ldr	r3, [pc, #4]	; (80053e4 <__errno+0x8>)
 80053de:	6818      	ldr	r0, [r3, #0]
 80053e0:	4770      	bx	lr
 80053e2:	46c0      	nop			; (mov r8, r8)
 80053e4:	2000001c 	.word	0x2000001c

080053e8 <__libc_init_array>:
 80053e8:	b570      	push	{r4, r5, r6, lr}
 80053ea:	2600      	movs	r6, #0
 80053ec:	4d0c      	ldr	r5, [pc, #48]	; (8005420 <__libc_init_array+0x38>)
 80053ee:	4c0d      	ldr	r4, [pc, #52]	; (8005424 <__libc_init_array+0x3c>)
 80053f0:	1b64      	subs	r4, r4, r5
 80053f2:	10a4      	asrs	r4, r4, #2
 80053f4:	42a6      	cmp	r6, r4
 80053f6:	d109      	bne.n	800540c <__libc_init_array+0x24>
 80053f8:	2600      	movs	r6, #0
 80053fa:	f000 fc8b 	bl	8005d14 <_init>
 80053fe:	4d0a      	ldr	r5, [pc, #40]	; (8005428 <__libc_init_array+0x40>)
 8005400:	4c0a      	ldr	r4, [pc, #40]	; (800542c <__libc_init_array+0x44>)
 8005402:	1b64      	subs	r4, r4, r5
 8005404:	10a4      	asrs	r4, r4, #2
 8005406:	42a6      	cmp	r6, r4
 8005408:	d105      	bne.n	8005416 <__libc_init_array+0x2e>
 800540a:	bd70      	pop	{r4, r5, r6, pc}
 800540c:	00b3      	lsls	r3, r6, #2
 800540e:	58eb      	ldr	r3, [r5, r3]
 8005410:	4798      	blx	r3
 8005412:	3601      	adds	r6, #1
 8005414:	e7ee      	b.n	80053f4 <__libc_init_array+0xc>
 8005416:	00b3      	lsls	r3, r6, #2
 8005418:	58eb      	ldr	r3, [r5, r3]
 800541a:	4798      	blx	r3
 800541c:	3601      	adds	r6, #1
 800541e:	e7f2      	b.n	8005406 <__libc_init_array+0x1e>
 8005420:	080061cc 	.word	0x080061cc
 8005424:	080061cc 	.word	0x080061cc
 8005428:	080061cc 	.word	0x080061cc
 800542c:	080061d0 	.word	0x080061d0

08005430 <memset>:
 8005430:	0003      	movs	r3, r0
 8005432:	1882      	adds	r2, r0, r2
 8005434:	4293      	cmp	r3, r2
 8005436:	d100      	bne.n	800543a <memset+0xa>
 8005438:	4770      	bx	lr
 800543a:	7019      	strb	r1, [r3, #0]
 800543c:	3301      	adds	r3, #1
 800543e:	e7f9      	b.n	8005434 <memset+0x4>

08005440 <siprintf>:
 8005440:	b40e      	push	{r1, r2, r3}
 8005442:	b500      	push	{lr}
 8005444:	490b      	ldr	r1, [pc, #44]	; (8005474 <siprintf+0x34>)
 8005446:	b09c      	sub	sp, #112	; 0x70
 8005448:	ab1d      	add	r3, sp, #116	; 0x74
 800544a:	9002      	str	r0, [sp, #8]
 800544c:	9006      	str	r0, [sp, #24]
 800544e:	9107      	str	r1, [sp, #28]
 8005450:	9104      	str	r1, [sp, #16]
 8005452:	4809      	ldr	r0, [pc, #36]	; (8005478 <siprintf+0x38>)
 8005454:	4909      	ldr	r1, [pc, #36]	; (800547c <siprintf+0x3c>)
 8005456:	cb04      	ldmia	r3!, {r2}
 8005458:	9105      	str	r1, [sp, #20]
 800545a:	6800      	ldr	r0, [r0, #0]
 800545c:	a902      	add	r1, sp, #8
 800545e:	9301      	str	r3, [sp, #4]
 8005460:	f000 f870 	bl	8005544 <_svfiprintf_r>
 8005464:	2300      	movs	r3, #0
 8005466:	9a02      	ldr	r2, [sp, #8]
 8005468:	7013      	strb	r3, [r2, #0]
 800546a:	b01c      	add	sp, #112	; 0x70
 800546c:	bc08      	pop	{r3}
 800546e:	b003      	add	sp, #12
 8005470:	4718      	bx	r3
 8005472:	46c0      	nop			; (mov r8, r8)
 8005474:	7fffffff 	.word	0x7fffffff
 8005478:	2000001c 	.word	0x2000001c
 800547c:	ffff0208 	.word	0xffff0208

08005480 <__ssputs_r>:
 8005480:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005482:	688e      	ldr	r6, [r1, #8]
 8005484:	b085      	sub	sp, #20
 8005486:	0007      	movs	r7, r0
 8005488:	000c      	movs	r4, r1
 800548a:	9203      	str	r2, [sp, #12]
 800548c:	9301      	str	r3, [sp, #4]
 800548e:	429e      	cmp	r6, r3
 8005490:	d83c      	bhi.n	800550c <__ssputs_r+0x8c>
 8005492:	2390      	movs	r3, #144	; 0x90
 8005494:	898a      	ldrh	r2, [r1, #12]
 8005496:	00db      	lsls	r3, r3, #3
 8005498:	421a      	tst	r2, r3
 800549a:	d034      	beq.n	8005506 <__ssputs_r+0x86>
 800549c:	6909      	ldr	r1, [r1, #16]
 800549e:	6823      	ldr	r3, [r4, #0]
 80054a0:	6960      	ldr	r0, [r4, #20]
 80054a2:	1a5b      	subs	r3, r3, r1
 80054a4:	9302      	str	r3, [sp, #8]
 80054a6:	2303      	movs	r3, #3
 80054a8:	4343      	muls	r3, r0
 80054aa:	0fdd      	lsrs	r5, r3, #31
 80054ac:	18ed      	adds	r5, r5, r3
 80054ae:	9b01      	ldr	r3, [sp, #4]
 80054b0:	9802      	ldr	r0, [sp, #8]
 80054b2:	3301      	adds	r3, #1
 80054b4:	181b      	adds	r3, r3, r0
 80054b6:	106d      	asrs	r5, r5, #1
 80054b8:	42ab      	cmp	r3, r5
 80054ba:	d900      	bls.n	80054be <__ssputs_r+0x3e>
 80054bc:	001d      	movs	r5, r3
 80054be:	0553      	lsls	r3, r2, #21
 80054c0:	d532      	bpl.n	8005528 <__ssputs_r+0xa8>
 80054c2:	0029      	movs	r1, r5
 80054c4:	0038      	movs	r0, r7
 80054c6:	f000 fb53 	bl	8005b70 <_malloc_r>
 80054ca:	1e06      	subs	r6, r0, #0
 80054cc:	d109      	bne.n	80054e2 <__ssputs_r+0x62>
 80054ce:	230c      	movs	r3, #12
 80054d0:	603b      	str	r3, [r7, #0]
 80054d2:	2340      	movs	r3, #64	; 0x40
 80054d4:	2001      	movs	r0, #1
 80054d6:	89a2      	ldrh	r2, [r4, #12]
 80054d8:	4240      	negs	r0, r0
 80054da:	4313      	orrs	r3, r2
 80054dc:	81a3      	strh	r3, [r4, #12]
 80054de:	b005      	add	sp, #20
 80054e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80054e2:	9a02      	ldr	r2, [sp, #8]
 80054e4:	6921      	ldr	r1, [r4, #16]
 80054e6:	f000 faba 	bl	8005a5e <memcpy>
 80054ea:	89a3      	ldrh	r3, [r4, #12]
 80054ec:	4a14      	ldr	r2, [pc, #80]	; (8005540 <__ssputs_r+0xc0>)
 80054ee:	401a      	ands	r2, r3
 80054f0:	2380      	movs	r3, #128	; 0x80
 80054f2:	4313      	orrs	r3, r2
 80054f4:	81a3      	strh	r3, [r4, #12]
 80054f6:	9b02      	ldr	r3, [sp, #8]
 80054f8:	6126      	str	r6, [r4, #16]
 80054fa:	18f6      	adds	r6, r6, r3
 80054fc:	6026      	str	r6, [r4, #0]
 80054fe:	6165      	str	r5, [r4, #20]
 8005500:	9e01      	ldr	r6, [sp, #4]
 8005502:	1aed      	subs	r5, r5, r3
 8005504:	60a5      	str	r5, [r4, #8]
 8005506:	9b01      	ldr	r3, [sp, #4]
 8005508:	429e      	cmp	r6, r3
 800550a:	d900      	bls.n	800550e <__ssputs_r+0x8e>
 800550c:	9e01      	ldr	r6, [sp, #4]
 800550e:	0032      	movs	r2, r6
 8005510:	9903      	ldr	r1, [sp, #12]
 8005512:	6820      	ldr	r0, [r4, #0]
 8005514:	f000 faac 	bl	8005a70 <memmove>
 8005518:	68a3      	ldr	r3, [r4, #8]
 800551a:	2000      	movs	r0, #0
 800551c:	1b9b      	subs	r3, r3, r6
 800551e:	60a3      	str	r3, [r4, #8]
 8005520:	6823      	ldr	r3, [r4, #0]
 8005522:	199e      	adds	r6, r3, r6
 8005524:	6026      	str	r6, [r4, #0]
 8005526:	e7da      	b.n	80054de <__ssputs_r+0x5e>
 8005528:	002a      	movs	r2, r5
 800552a:	0038      	movs	r0, r7
 800552c:	f000 fb96 	bl	8005c5c <_realloc_r>
 8005530:	1e06      	subs	r6, r0, #0
 8005532:	d1e0      	bne.n	80054f6 <__ssputs_r+0x76>
 8005534:	0038      	movs	r0, r7
 8005536:	6921      	ldr	r1, [r4, #16]
 8005538:	f000 faae 	bl	8005a98 <_free_r>
 800553c:	e7c7      	b.n	80054ce <__ssputs_r+0x4e>
 800553e:	46c0      	nop			; (mov r8, r8)
 8005540:	fffffb7f 	.word	0xfffffb7f

08005544 <_svfiprintf_r>:
 8005544:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005546:	b0a1      	sub	sp, #132	; 0x84
 8005548:	9003      	str	r0, [sp, #12]
 800554a:	001d      	movs	r5, r3
 800554c:	898b      	ldrh	r3, [r1, #12]
 800554e:	000f      	movs	r7, r1
 8005550:	0016      	movs	r6, r2
 8005552:	061b      	lsls	r3, r3, #24
 8005554:	d511      	bpl.n	800557a <_svfiprintf_r+0x36>
 8005556:	690b      	ldr	r3, [r1, #16]
 8005558:	2b00      	cmp	r3, #0
 800555a:	d10e      	bne.n	800557a <_svfiprintf_r+0x36>
 800555c:	2140      	movs	r1, #64	; 0x40
 800555e:	f000 fb07 	bl	8005b70 <_malloc_r>
 8005562:	6038      	str	r0, [r7, #0]
 8005564:	6138      	str	r0, [r7, #16]
 8005566:	2800      	cmp	r0, #0
 8005568:	d105      	bne.n	8005576 <_svfiprintf_r+0x32>
 800556a:	230c      	movs	r3, #12
 800556c:	9a03      	ldr	r2, [sp, #12]
 800556e:	3801      	subs	r0, #1
 8005570:	6013      	str	r3, [r2, #0]
 8005572:	b021      	add	sp, #132	; 0x84
 8005574:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005576:	2340      	movs	r3, #64	; 0x40
 8005578:	617b      	str	r3, [r7, #20]
 800557a:	2300      	movs	r3, #0
 800557c:	ac08      	add	r4, sp, #32
 800557e:	6163      	str	r3, [r4, #20]
 8005580:	3320      	adds	r3, #32
 8005582:	7663      	strb	r3, [r4, #25]
 8005584:	3310      	adds	r3, #16
 8005586:	76a3      	strb	r3, [r4, #26]
 8005588:	9507      	str	r5, [sp, #28]
 800558a:	0035      	movs	r5, r6
 800558c:	782b      	ldrb	r3, [r5, #0]
 800558e:	2b00      	cmp	r3, #0
 8005590:	d001      	beq.n	8005596 <_svfiprintf_r+0x52>
 8005592:	2b25      	cmp	r3, #37	; 0x25
 8005594:	d147      	bne.n	8005626 <_svfiprintf_r+0xe2>
 8005596:	1bab      	subs	r3, r5, r6
 8005598:	9305      	str	r3, [sp, #20]
 800559a:	42b5      	cmp	r5, r6
 800559c:	d00c      	beq.n	80055b8 <_svfiprintf_r+0x74>
 800559e:	0032      	movs	r2, r6
 80055a0:	0039      	movs	r1, r7
 80055a2:	9803      	ldr	r0, [sp, #12]
 80055a4:	f7ff ff6c 	bl	8005480 <__ssputs_r>
 80055a8:	1c43      	adds	r3, r0, #1
 80055aa:	d100      	bne.n	80055ae <_svfiprintf_r+0x6a>
 80055ac:	e0ae      	b.n	800570c <_svfiprintf_r+0x1c8>
 80055ae:	6962      	ldr	r2, [r4, #20]
 80055b0:	9b05      	ldr	r3, [sp, #20]
 80055b2:	4694      	mov	ip, r2
 80055b4:	4463      	add	r3, ip
 80055b6:	6163      	str	r3, [r4, #20]
 80055b8:	782b      	ldrb	r3, [r5, #0]
 80055ba:	2b00      	cmp	r3, #0
 80055bc:	d100      	bne.n	80055c0 <_svfiprintf_r+0x7c>
 80055be:	e0a5      	b.n	800570c <_svfiprintf_r+0x1c8>
 80055c0:	2201      	movs	r2, #1
 80055c2:	2300      	movs	r3, #0
 80055c4:	4252      	negs	r2, r2
 80055c6:	6062      	str	r2, [r4, #4]
 80055c8:	a904      	add	r1, sp, #16
 80055ca:	3254      	adds	r2, #84	; 0x54
 80055cc:	1852      	adds	r2, r2, r1
 80055ce:	1c6e      	adds	r6, r5, #1
 80055d0:	6023      	str	r3, [r4, #0]
 80055d2:	60e3      	str	r3, [r4, #12]
 80055d4:	60a3      	str	r3, [r4, #8]
 80055d6:	7013      	strb	r3, [r2, #0]
 80055d8:	65a3      	str	r3, [r4, #88]	; 0x58
 80055da:	2205      	movs	r2, #5
 80055dc:	7831      	ldrb	r1, [r6, #0]
 80055de:	4854      	ldr	r0, [pc, #336]	; (8005730 <_svfiprintf_r+0x1ec>)
 80055e0:	f000 fa32 	bl	8005a48 <memchr>
 80055e4:	1c75      	adds	r5, r6, #1
 80055e6:	2800      	cmp	r0, #0
 80055e8:	d11f      	bne.n	800562a <_svfiprintf_r+0xe6>
 80055ea:	6822      	ldr	r2, [r4, #0]
 80055ec:	06d3      	lsls	r3, r2, #27
 80055ee:	d504      	bpl.n	80055fa <_svfiprintf_r+0xb6>
 80055f0:	2353      	movs	r3, #83	; 0x53
 80055f2:	a904      	add	r1, sp, #16
 80055f4:	185b      	adds	r3, r3, r1
 80055f6:	2120      	movs	r1, #32
 80055f8:	7019      	strb	r1, [r3, #0]
 80055fa:	0713      	lsls	r3, r2, #28
 80055fc:	d504      	bpl.n	8005608 <_svfiprintf_r+0xc4>
 80055fe:	2353      	movs	r3, #83	; 0x53
 8005600:	a904      	add	r1, sp, #16
 8005602:	185b      	adds	r3, r3, r1
 8005604:	212b      	movs	r1, #43	; 0x2b
 8005606:	7019      	strb	r1, [r3, #0]
 8005608:	7833      	ldrb	r3, [r6, #0]
 800560a:	2b2a      	cmp	r3, #42	; 0x2a
 800560c:	d016      	beq.n	800563c <_svfiprintf_r+0xf8>
 800560e:	0035      	movs	r5, r6
 8005610:	2100      	movs	r1, #0
 8005612:	200a      	movs	r0, #10
 8005614:	68e3      	ldr	r3, [r4, #12]
 8005616:	782a      	ldrb	r2, [r5, #0]
 8005618:	1c6e      	adds	r6, r5, #1
 800561a:	3a30      	subs	r2, #48	; 0x30
 800561c:	2a09      	cmp	r2, #9
 800561e:	d94e      	bls.n	80056be <_svfiprintf_r+0x17a>
 8005620:	2900      	cmp	r1, #0
 8005622:	d111      	bne.n	8005648 <_svfiprintf_r+0x104>
 8005624:	e017      	b.n	8005656 <_svfiprintf_r+0x112>
 8005626:	3501      	adds	r5, #1
 8005628:	e7b0      	b.n	800558c <_svfiprintf_r+0x48>
 800562a:	4b41      	ldr	r3, [pc, #260]	; (8005730 <_svfiprintf_r+0x1ec>)
 800562c:	6822      	ldr	r2, [r4, #0]
 800562e:	1ac0      	subs	r0, r0, r3
 8005630:	2301      	movs	r3, #1
 8005632:	4083      	lsls	r3, r0
 8005634:	4313      	orrs	r3, r2
 8005636:	002e      	movs	r6, r5
 8005638:	6023      	str	r3, [r4, #0]
 800563a:	e7ce      	b.n	80055da <_svfiprintf_r+0x96>
 800563c:	9b07      	ldr	r3, [sp, #28]
 800563e:	1d19      	adds	r1, r3, #4
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	9107      	str	r1, [sp, #28]
 8005644:	2b00      	cmp	r3, #0
 8005646:	db01      	blt.n	800564c <_svfiprintf_r+0x108>
 8005648:	930b      	str	r3, [sp, #44]	; 0x2c
 800564a:	e004      	b.n	8005656 <_svfiprintf_r+0x112>
 800564c:	425b      	negs	r3, r3
 800564e:	60e3      	str	r3, [r4, #12]
 8005650:	2302      	movs	r3, #2
 8005652:	4313      	orrs	r3, r2
 8005654:	6023      	str	r3, [r4, #0]
 8005656:	782b      	ldrb	r3, [r5, #0]
 8005658:	2b2e      	cmp	r3, #46	; 0x2e
 800565a:	d10a      	bne.n	8005672 <_svfiprintf_r+0x12e>
 800565c:	786b      	ldrb	r3, [r5, #1]
 800565e:	2b2a      	cmp	r3, #42	; 0x2a
 8005660:	d135      	bne.n	80056ce <_svfiprintf_r+0x18a>
 8005662:	9b07      	ldr	r3, [sp, #28]
 8005664:	3502      	adds	r5, #2
 8005666:	1d1a      	adds	r2, r3, #4
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	9207      	str	r2, [sp, #28]
 800566c:	2b00      	cmp	r3, #0
 800566e:	db2b      	blt.n	80056c8 <_svfiprintf_r+0x184>
 8005670:	9309      	str	r3, [sp, #36]	; 0x24
 8005672:	4e30      	ldr	r6, [pc, #192]	; (8005734 <_svfiprintf_r+0x1f0>)
 8005674:	2203      	movs	r2, #3
 8005676:	0030      	movs	r0, r6
 8005678:	7829      	ldrb	r1, [r5, #0]
 800567a:	f000 f9e5 	bl	8005a48 <memchr>
 800567e:	2800      	cmp	r0, #0
 8005680:	d006      	beq.n	8005690 <_svfiprintf_r+0x14c>
 8005682:	2340      	movs	r3, #64	; 0x40
 8005684:	1b80      	subs	r0, r0, r6
 8005686:	4083      	lsls	r3, r0
 8005688:	6822      	ldr	r2, [r4, #0]
 800568a:	3501      	adds	r5, #1
 800568c:	4313      	orrs	r3, r2
 800568e:	6023      	str	r3, [r4, #0]
 8005690:	7829      	ldrb	r1, [r5, #0]
 8005692:	2206      	movs	r2, #6
 8005694:	4828      	ldr	r0, [pc, #160]	; (8005738 <_svfiprintf_r+0x1f4>)
 8005696:	1c6e      	adds	r6, r5, #1
 8005698:	7621      	strb	r1, [r4, #24]
 800569a:	f000 f9d5 	bl	8005a48 <memchr>
 800569e:	2800      	cmp	r0, #0
 80056a0:	d03c      	beq.n	800571c <_svfiprintf_r+0x1d8>
 80056a2:	4b26      	ldr	r3, [pc, #152]	; (800573c <_svfiprintf_r+0x1f8>)
 80056a4:	2b00      	cmp	r3, #0
 80056a6:	d125      	bne.n	80056f4 <_svfiprintf_r+0x1b0>
 80056a8:	2207      	movs	r2, #7
 80056aa:	9b07      	ldr	r3, [sp, #28]
 80056ac:	3307      	adds	r3, #7
 80056ae:	4393      	bics	r3, r2
 80056b0:	3308      	adds	r3, #8
 80056b2:	9307      	str	r3, [sp, #28]
 80056b4:	6963      	ldr	r3, [r4, #20]
 80056b6:	9a04      	ldr	r2, [sp, #16]
 80056b8:	189b      	adds	r3, r3, r2
 80056ba:	6163      	str	r3, [r4, #20]
 80056bc:	e765      	b.n	800558a <_svfiprintf_r+0x46>
 80056be:	4343      	muls	r3, r0
 80056c0:	0035      	movs	r5, r6
 80056c2:	2101      	movs	r1, #1
 80056c4:	189b      	adds	r3, r3, r2
 80056c6:	e7a6      	b.n	8005616 <_svfiprintf_r+0xd2>
 80056c8:	2301      	movs	r3, #1
 80056ca:	425b      	negs	r3, r3
 80056cc:	e7d0      	b.n	8005670 <_svfiprintf_r+0x12c>
 80056ce:	2300      	movs	r3, #0
 80056d0:	200a      	movs	r0, #10
 80056d2:	001a      	movs	r2, r3
 80056d4:	3501      	adds	r5, #1
 80056d6:	6063      	str	r3, [r4, #4]
 80056d8:	7829      	ldrb	r1, [r5, #0]
 80056da:	1c6e      	adds	r6, r5, #1
 80056dc:	3930      	subs	r1, #48	; 0x30
 80056de:	2909      	cmp	r1, #9
 80056e0:	d903      	bls.n	80056ea <_svfiprintf_r+0x1a6>
 80056e2:	2b00      	cmp	r3, #0
 80056e4:	d0c5      	beq.n	8005672 <_svfiprintf_r+0x12e>
 80056e6:	9209      	str	r2, [sp, #36]	; 0x24
 80056e8:	e7c3      	b.n	8005672 <_svfiprintf_r+0x12e>
 80056ea:	4342      	muls	r2, r0
 80056ec:	0035      	movs	r5, r6
 80056ee:	2301      	movs	r3, #1
 80056f0:	1852      	adds	r2, r2, r1
 80056f2:	e7f1      	b.n	80056d8 <_svfiprintf_r+0x194>
 80056f4:	ab07      	add	r3, sp, #28
 80056f6:	9300      	str	r3, [sp, #0]
 80056f8:	003a      	movs	r2, r7
 80056fa:	0021      	movs	r1, r4
 80056fc:	4b10      	ldr	r3, [pc, #64]	; (8005740 <_svfiprintf_r+0x1fc>)
 80056fe:	9803      	ldr	r0, [sp, #12]
 8005700:	e000      	b.n	8005704 <_svfiprintf_r+0x1c0>
 8005702:	bf00      	nop
 8005704:	9004      	str	r0, [sp, #16]
 8005706:	9b04      	ldr	r3, [sp, #16]
 8005708:	3301      	adds	r3, #1
 800570a:	d1d3      	bne.n	80056b4 <_svfiprintf_r+0x170>
 800570c:	89bb      	ldrh	r3, [r7, #12]
 800570e:	980d      	ldr	r0, [sp, #52]	; 0x34
 8005710:	065b      	lsls	r3, r3, #25
 8005712:	d400      	bmi.n	8005716 <_svfiprintf_r+0x1d2>
 8005714:	e72d      	b.n	8005572 <_svfiprintf_r+0x2e>
 8005716:	2001      	movs	r0, #1
 8005718:	4240      	negs	r0, r0
 800571a:	e72a      	b.n	8005572 <_svfiprintf_r+0x2e>
 800571c:	ab07      	add	r3, sp, #28
 800571e:	9300      	str	r3, [sp, #0]
 8005720:	003a      	movs	r2, r7
 8005722:	0021      	movs	r1, r4
 8005724:	4b06      	ldr	r3, [pc, #24]	; (8005740 <_svfiprintf_r+0x1fc>)
 8005726:	9803      	ldr	r0, [sp, #12]
 8005728:	f000 f87c 	bl	8005824 <_printf_i>
 800572c:	e7ea      	b.n	8005704 <_svfiprintf_r+0x1c0>
 800572e:	46c0      	nop			; (mov r8, r8)
 8005730:	08006190 	.word	0x08006190
 8005734:	08006196 	.word	0x08006196
 8005738:	0800619a 	.word	0x0800619a
 800573c:	00000000 	.word	0x00000000
 8005740:	08005481 	.word	0x08005481

08005744 <_printf_common>:
 8005744:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005746:	0015      	movs	r5, r2
 8005748:	9301      	str	r3, [sp, #4]
 800574a:	688a      	ldr	r2, [r1, #8]
 800574c:	690b      	ldr	r3, [r1, #16]
 800574e:	000c      	movs	r4, r1
 8005750:	9000      	str	r0, [sp, #0]
 8005752:	4293      	cmp	r3, r2
 8005754:	da00      	bge.n	8005758 <_printf_common+0x14>
 8005756:	0013      	movs	r3, r2
 8005758:	0022      	movs	r2, r4
 800575a:	602b      	str	r3, [r5, #0]
 800575c:	3243      	adds	r2, #67	; 0x43
 800575e:	7812      	ldrb	r2, [r2, #0]
 8005760:	2a00      	cmp	r2, #0
 8005762:	d001      	beq.n	8005768 <_printf_common+0x24>
 8005764:	3301      	adds	r3, #1
 8005766:	602b      	str	r3, [r5, #0]
 8005768:	6823      	ldr	r3, [r4, #0]
 800576a:	069b      	lsls	r3, r3, #26
 800576c:	d502      	bpl.n	8005774 <_printf_common+0x30>
 800576e:	682b      	ldr	r3, [r5, #0]
 8005770:	3302      	adds	r3, #2
 8005772:	602b      	str	r3, [r5, #0]
 8005774:	6822      	ldr	r2, [r4, #0]
 8005776:	2306      	movs	r3, #6
 8005778:	0017      	movs	r7, r2
 800577a:	401f      	ands	r7, r3
 800577c:	421a      	tst	r2, r3
 800577e:	d027      	beq.n	80057d0 <_printf_common+0x8c>
 8005780:	0023      	movs	r3, r4
 8005782:	3343      	adds	r3, #67	; 0x43
 8005784:	781b      	ldrb	r3, [r3, #0]
 8005786:	1e5a      	subs	r2, r3, #1
 8005788:	4193      	sbcs	r3, r2
 800578a:	6822      	ldr	r2, [r4, #0]
 800578c:	0692      	lsls	r2, r2, #26
 800578e:	d430      	bmi.n	80057f2 <_printf_common+0xae>
 8005790:	0022      	movs	r2, r4
 8005792:	9901      	ldr	r1, [sp, #4]
 8005794:	9800      	ldr	r0, [sp, #0]
 8005796:	9e08      	ldr	r6, [sp, #32]
 8005798:	3243      	adds	r2, #67	; 0x43
 800579a:	47b0      	blx	r6
 800579c:	1c43      	adds	r3, r0, #1
 800579e:	d025      	beq.n	80057ec <_printf_common+0xa8>
 80057a0:	2306      	movs	r3, #6
 80057a2:	6820      	ldr	r0, [r4, #0]
 80057a4:	682a      	ldr	r2, [r5, #0]
 80057a6:	68e1      	ldr	r1, [r4, #12]
 80057a8:	2500      	movs	r5, #0
 80057aa:	4003      	ands	r3, r0
 80057ac:	2b04      	cmp	r3, #4
 80057ae:	d103      	bne.n	80057b8 <_printf_common+0x74>
 80057b0:	1a8d      	subs	r5, r1, r2
 80057b2:	43eb      	mvns	r3, r5
 80057b4:	17db      	asrs	r3, r3, #31
 80057b6:	401d      	ands	r5, r3
 80057b8:	68a3      	ldr	r3, [r4, #8]
 80057ba:	6922      	ldr	r2, [r4, #16]
 80057bc:	4293      	cmp	r3, r2
 80057be:	dd01      	ble.n	80057c4 <_printf_common+0x80>
 80057c0:	1a9b      	subs	r3, r3, r2
 80057c2:	18ed      	adds	r5, r5, r3
 80057c4:	2700      	movs	r7, #0
 80057c6:	42bd      	cmp	r5, r7
 80057c8:	d120      	bne.n	800580c <_printf_common+0xc8>
 80057ca:	2000      	movs	r0, #0
 80057cc:	e010      	b.n	80057f0 <_printf_common+0xac>
 80057ce:	3701      	adds	r7, #1
 80057d0:	68e3      	ldr	r3, [r4, #12]
 80057d2:	682a      	ldr	r2, [r5, #0]
 80057d4:	1a9b      	subs	r3, r3, r2
 80057d6:	42bb      	cmp	r3, r7
 80057d8:	ddd2      	ble.n	8005780 <_printf_common+0x3c>
 80057da:	0022      	movs	r2, r4
 80057dc:	2301      	movs	r3, #1
 80057de:	9901      	ldr	r1, [sp, #4]
 80057e0:	9800      	ldr	r0, [sp, #0]
 80057e2:	9e08      	ldr	r6, [sp, #32]
 80057e4:	3219      	adds	r2, #25
 80057e6:	47b0      	blx	r6
 80057e8:	1c43      	adds	r3, r0, #1
 80057ea:	d1f0      	bne.n	80057ce <_printf_common+0x8a>
 80057ec:	2001      	movs	r0, #1
 80057ee:	4240      	negs	r0, r0
 80057f0:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80057f2:	2030      	movs	r0, #48	; 0x30
 80057f4:	18e1      	adds	r1, r4, r3
 80057f6:	3143      	adds	r1, #67	; 0x43
 80057f8:	7008      	strb	r0, [r1, #0]
 80057fa:	0021      	movs	r1, r4
 80057fc:	1c5a      	adds	r2, r3, #1
 80057fe:	3145      	adds	r1, #69	; 0x45
 8005800:	7809      	ldrb	r1, [r1, #0]
 8005802:	18a2      	adds	r2, r4, r2
 8005804:	3243      	adds	r2, #67	; 0x43
 8005806:	3302      	adds	r3, #2
 8005808:	7011      	strb	r1, [r2, #0]
 800580a:	e7c1      	b.n	8005790 <_printf_common+0x4c>
 800580c:	0022      	movs	r2, r4
 800580e:	2301      	movs	r3, #1
 8005810:	9901      	ldr	r1, [sp, #4]
 8005812:	9800      	ldr	r0, [sp, #0]
 8005814:	9e08      	ldr	r6, [sp, #32]
 8005816:	321a      	adds	r2, #26
 8005818:	47b0      	blx	r6
 800581a:	1c43      	adds	r3, r0, #1
 800581c:	d0e6      	beq.n	80057ec <_printf_common+0xa8>
 800581e:	3701      	adds	r7, #1
 8005820:	e7d1      	b.n	80057c6 <_printf_common+0x82>
	...

08005824 <_printf_i>:
 8005824:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005826:	b08b      	sub	sp, #44	; 0x2c
 8005828:	9206      	str	r2, [sp, #24]
 800582a:	000a      	movs	r2, r1
 800582c:	3243      	adds	r2, #67	; 0x43
 800582e:	9307      	str	r3, [sp, #28]
 8005830:	9005      	str	r0, [sp, #20]
 8005832:	9204      	str	r2, [sp, #16]
 8005834:	7e0a      	ldrb	r2, [r1, #24]
 8005836:	000c      	movs	r4, r1
 8005838:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800583a:	2a78      	cmp	r2, #120	; 0x78
 800583c:	d807      	bhi.n	800584e <_printf_i+0x2a>
 800583e:	2a62      	cmp	r2, #98	; 0x62
 8005840:	d809      	bhi.n	8005856 <_printf_i+0x32>
 8005842:	2a00      	cmp	r2, #0
 8005844:	d100      	bne.n	8005848 <_printf_i+0x24>
 8005846:	e0c1      	b.n	80059cc <_printf_i+0x1a8>
 8005848:	2a58      	cmp	r2, #88	; 0x58
 800584a:	d100      	bne.n	800584e <_printf_i+0x2a>
 800584c:	e08c      	b.n	8005968 <_printf_i+0x144>
 800584e:	0026      	movs	r6, r4
 8005850:	3642      	adds	r6, #66	; 0x42
 8005852:	7032      	strb	r2, [r6, #0]
 8005854:	e022      	b.n	800589c <_printf_i+0x78>
 8005856:	0010      	movs	r0, r2
 8005858:	3863      	subs	r0, #99	; 0x63
 800585a:	2815      	cmp	r0, #21
 800585c:	d8f7      	bhi.n	800584e <_printf_i+0x2a>
 800585e:	f7fa fc5b 	bl	8000118 <__gnu_thumb1_case_shi>
 8005862:	0016      	.short	0x0016
 8005864:	fff6001f 	.word	0xfff6001f
 8005868:	fff6fff6 	.word	0xfff6fff6
 800586c:	001ffff6 	.word	0x001ffff6
 8005870:	fff6fff6 	.word	0xfff6fff6
 8005874:	fff6fff6 	.word	0xfff6fff6
 8005878:	003600a8 	.word	0x003600a8
 800587c:	fff6009a 	.word	0xfff6009a
 8005880:	00b9fff6 	.word	0x00b9fff6
 8005884:	0036fff6 	.word	0x0036fff6
 8005888:	fff6fff6 	.word	0xfff6fff6
 800588c:	009e      	.short	0x009e
 800588e:	0026      	movs	r6, r4
 8005890:	681a      	ldr	r2, [r3, #0]
 8005892:	3642      	adds	r6, #66	; 0x42
 8005894:	1d11      	adds	r1, r2, #4
 8005896:	6019      	str	r1, [r3, #0]
 8005898:	6813      	ldr	r3, [r2, #0]
 800589a:	7033      	strb	r3, [r6, #0]
 800589c:	2301      	movs	r3, #1
 800589e:	e0a7      	b.n	80059f0 <_printf_i+0x1cc>
 80058a0:	6808      	ldr	r0, [r1, #0]
 80058a2:	6819      	ldr	r1, [r3, #0]
 80058a4:	1d0a      	adds	r2, r1, #4
 80058a6:	0605      	lsls	r5, r0, #24
 80058a8:	d50b      	bpl.n	80058c2 <_printf_i+0x9e>
 80058aa:	680d      	ldr	r5, [r1, #0]
 80058ac:	601a      	str	r2, [r3, #0]
 80058ae:	2d00      	cmp	r5, #0
 80058b0:	da03      	bge.n	80058ba <_printf_i+0x96>
 80058b2:	232d      	movs	r3, #45	; 0x2d
 80058b4:	9a04      	ldr	r2, [sp, #16]
 80058b6:	426d      	negs	r5, r5
 80058b8:	7013      	strb	r3, [r2, #0]
 80058ba:	4b61      	ldr	r3, [pc, #388]	; (8005a40 <_printf_i+0x21c>)
 80058bc:	270a      	movs	r7, #10
 80058be:	9303      	str	r3, [sp, #12]
 80058c0:	e01b      	b.n	80058fa <_printf_i+0xd6>
 80058c2:	680d      	ldr	r5, [r1, #0]
 80058c4:	601a      	str	r2, [r3, #0]
 80058c6:	0641      	lsls	r1, r0, #25
 80058c8:	d5f1      	bpl.n	80058ae <_printf_i+0x8a>
 80058ca:	b22d      	sxth	r5, r5
 80058cc:	e7ef      	b.n	80058ae <_printf_i+0x8a>
 80058ce:	680d      	ldr	r5, [r1, #0]
 80058d0:	6819      	ldr	r1, [r3, #0]
 80058d2:	1d08      	adds	r0, r1, #4
 80058d4:	6018      	str	r0, [r3, #0]
 80058d6:	062e      	lsls	r6, r5, #24
 80058d8:	d501      	bpl.n	80058de <_printf_i+0xba>
 80058da:	680d      	ldr	r5, [r1, #0]
 80058dc:	e003      	b.n	80058e6 <_printf_i+0xc2>
 80058de:	066d      	lsls	r5, r5, #25
 80058e0:	d5fb      	bpl.n	80058da <_printf_i+0xb6>
 80058e2:	680d      	ldr	r5, [r1, #0]
 80058e4:	b2ad      	uxth	r5, r5
 80058e6:	4b56      	ldr	r3, [pc, #344]	; (8005a40 <_printf_i+0x21c>)
 80058e8:	2708      	movs	r7, #8
 80058ea:	9303      	str	r3, [sp, #12]
 80058ec:	2a6f      	cmp	r2, #111	; 0x6f
 80058ee:	d000      	beq.n	80058f2 <_printf_i+0xce>
 80058f0:	3702      	adds	r7, #2
 80058f2:	0023      	movs	r3, r4
 80058f4:	2200      	movs	r2, #0
 80058f6:	3343      	adds	r3, #67	; 0x43
 80058f8:	701a      	strb	r2, [r3, #0]
 80058fa:	6863      	ldr	r3, [r4, #4]
 80058fc:	60a3      	str	r3, [r4, #8]
 80058fe:	2b00      	cmp	r3, #0
 8005900:	db03      	blt.n	800590a <_printf_i+0xe6>
 8005902:	2204      	movs	r2, #4
 8005904:	6821      	ldr	r1, [r4, #0]
 8005906:	4391      	bics	r1, r2
 8005908:	6021      	str	r1, [r4, #0]
 800590a:	2d00      	cmp	r5, #0
 800590c:	d102      	bne.n	8005914 <_printf_i+0xf0>
 800590e:	9e04      	ldr	r6, [sp, #16]
 8005910:	2b00      	cmp	r3, #0
 8005912:	d00c      	beq.n	800592e <_printf_i+0x10a>
 8005914:	9e04      	ldr	r6, [sp, #16]
 8005916:	0028      	movs	r0, r5
 8005918:	0039      	movs	r1, r7
 800591a:	f7fa fc8d 	bl	8000238 <__aeabi_uidivmod>
 800591e:	9b03      	ldr	r3, [sp, #12]
 8005920:	3e01      	subs	r6, #1
 8005922:	5c5b      	ldrb	r3, [r3, r1]
 8005924:	7033      	strb	r3, [r6, #0]
 8005926:	002b      	movs	r3, r5
 8005928:	0005      	movs	r5, r0
 800592a:	429f      	cmp	r7, r3
 800592c:	d9f3      	bls.n	8005916 <_printf_i+0xf2>
 800592e:	2f08      	cmp	r7, #8
 8005930:	d109      	bne.n	8005946 <_printf_i+0x122>
 8005932:	6823      	ldr	r3, [r4, #0]
 8005934:	07db      	lsls	r3, r3, #31
 8005936:	d506      	bpl.n	8005946 <_printf_i+0x122>
 8005938:	6863      	ldr	r3, [r4, #4]
 800593a:	6922      	ldr	r2, [r4, #16]
 800593c:	4293      	cmp	r3, r2
 800593e:	dc02      	bgt.n	8005946 <_printf_i+0x122>
 8005940:	2330      	movs	r3, #48	; 0x30
 8005942:	3e01      	subs	r6, #1
 8005944:	7033      	strb	r3, [r6, #0]
 8005946:	9b04      	ldr	r3, [sp, #16]
 8005948:	1b9b      	subs	r3, r3, r6
 800594a:	6123      	str	r3, [r4, #16]
 800594c:	9b07      	ldr	r3, [sp, #28]
 800594e:	0021      	movs	r1, r4
 8005950:	9300      	str	r3, [sp, #0]
 8005952:	9805      	ldr	r0, [sp, #20]
 8005954:	9b06      	ldr	r3, [sp, #24]
 8005956:	aa09      	add	r2, sp, #36	; 0x24
 8005958:	f7ff fef4 	bl	8005744 <_printf_common>
 800595c:	1c43      	adds	r3, r0, #1
 800595e:	d14c      	bne.n	80059fa <_printf_i+0x1d6>
 8005960:	2001      	movs	r0, #1
 8005962:	4240      	negs	r0, r0
 8005964:	b00b      	add	sp, #44	; 0x2c
 8005966:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005968:	3145      	adds	r1, #69	; 0x45
 800596a:	700a      	strb	r2, [r1, #0]
 800596c:	4a34      	ldr	r2, [pc, #208]	; (8005a40 <_printf_i+0x21c>)
 800596e:	9203      	str	r2, [sp, #12]
 8005970:	681a      	ldr	r2, [r3, #0]
 8005972:	6821      	ldr	r1, [r4, #0]
 8005974:	ca20      	ldmia	r2!, {r5}
 8005976:	601a      	str	r2, [r3, #0]
 8005978:	0608      	lsls	r0, r1, #24
 800597a:	d516      	bpl.n	80059aa <_printf_i+0x186>
 800597c:	07cb      	lsls	r3, r1, #31
 800597e:	d502      	bpl.n	8005986 <_printf_i+0x162>
 8005980:	2320      	movs	r3, #32
 8005982:	4319      	orrs	r1, r3
 8005984:	6021      	str	r1, [r4, #0]
 8005986:	2710      	movs	r7, #16
 8005988:	2d00      	cmp	r5, #0
 800598a:	d1b2      	bne.n	80058f2 <_printf_i+0xce>
 800598c:	2320      	movs	r3, #32
 800598e:	6822      	ldr	r2, [r4, #0]
 8005990:	439a      	bics	r2, r3
 8005992:	6022      	str	r2, [r4, #0]
 8005994:	e7ad      	b.n	80058f2 <_printf_i+0xce>
 8005996:	2220      	movs	r2, #32
 8005998:	6809      	ldr	r1, [r1, #0]
 800599a:	430a      	orrs	r2, r1
 800599c:	6022      	str	r2, [r4, #0]
 800599e:	0022      	movs	r2, r4
 80059a0:	2178      	movs	r1, #120	; 0x78
 80059a2:	3245      	adds	r2, #69	; 0x45
 80059a4:	7011      	strb	r1, [r2, #0]
 80059a6:	4a27      	ldr	r2, [pc, #156]	; (8005a44 <_printf_i+0x220>)
 80059a8:	e7e1      	b.n	800596e <_printf_i+0x14a>
 80059aa:	0648      	lsls	r0, r1, #25
 80059ac:	d5e6      	bpl.n	800597c <_printf_i+0x158>
 80059ae:	b2ad      	uxth	r5, r5
 80059b0:	e7e4      	b.n	800597c <_printf_i+0x158>
 80059b2:	681a      	ldr	r2, [r3, #0]
 80059b4:	680d      	ldr	r5, [r1, #0]
 80059b6:	1d10      	adds	r0, r2, #4
 80059b8:	6949      	ldr	r1, [r1, #20]
 80059ba:	6018      	str	r0, [r3, #0]
 80059bc:	6813      	ldr	r3, [r2, #0]
 80059be:	062e      	lsls	r6, r5, #24
 80059c0:	d501      	bpl.n	80059c6 <_printf_i+0x1a2>
 80059c2:	6019      	str	r1, [r3, #0]
 80059c4:	e002      	b.n	80059cc <_printf_i+0x1a8>
 80059c6:	066d      	lsls	r5, r5, #25
 80059c8:	d5fb      	bpl.n	80059c2 <_printf_i+0x19e>
 80059ca:	8019      	strh	r1, [r3, #0]
 80059cc:	2300      	movs	r3, #0
 80059ce:	9e04      	ldr	r6, [sp, #16]
 80059d0:	6123      	str	r3, [r4, #16]
 80059d2:	e7bb      	b.n	800594c <_printf_i+0x128>
 80059d4:	681a      	ldr	r2, [r3, #0]
 80059d6:	1d11      	adds	r1, r2, #4
 80059d8:	6019      	str	r1, [r3, #0]
 80059da:	6816      	ldr	r6, [r2, #0]
 80059dc:	2100      	movs	r1, #0
 80059de:	0030      	movs	r0, r6
 80059e0:	6862      	ldr	r2, [r4, #4]
 80059e2:	f000 f831 	bl	8005a48 <memchr>
 80059e6:	2800      	cmp	r0, #0
 80059e8:	d001      	beq.n	80059ee <_printf_i+0x1ca>
 80059ea:	1b80      	subs	r0, r0, r6
 80059ec:	6060      	str	r0, [r4, #4]
 80059ee:	6863      	ldr	r3, [r4, #4]
 80059f0:	6123      	str	r3, [r4, #16]
 80059f2:	2300      	movs	r3, #0
 80059f4:	9a04      	ldr	r2, [sp, #16]
 80059f6:	7013      	strb	r3, [r2, #0]
 80059f8:	e7a8      	b.n	800594c <_printf_i+0x128>
 80059fa:	6923      	ldr	r3, [r4, #16]
 80059fc:	0032      	movs	r2, r6
 80059fe:	9906      	ldr	r1, [sp, #24]
 8005a00:	9805      	ldr	r0, [sp, #20]
 8005a02:	9d07      	ldr	r5, [sp, #28]
 8005a04:	47a8      	blx	r5
 8005a06:	1c43      	adds	r3, r0, #1
 8005a08:	d0aa      	beq.n	8005960 <_printf_i+0x13c>
 8005a0a:	6823      	ldr	r3, [r4, #0]
 8005a0c:	079b      	lsls	r3, r3, #30
 8005a0e:	d415      	bmi.n	8005a3c <_printf_i+0x218>
 8005a10:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005a12:	68e0      	ldr	r0, [r4, #12]
 8005a14:	4298      	cmp	r0, r3
 8005a16:	daa5      	bge.n	8005964 <_printf_i+0x140>
 8005a18:	0018      	movs	r0, r3
 8005a1a:	e7a3      	b.n	8005964 <_printf_i+0x140>
 8005a1c:	0022      	movs	r2, r4
 8005a1e:	2301      	movs	r3, #1
 8005a20:	9906      	ldr	r1, [sp, #24]
 8005a22:	9805      	ldr	r0, [sp, #20]
 8005a24:	9e07      	ldr	r6, [sp, #28]
 8005a26:	3219      	adds	r2, #25
 8005a28:	47b0      	blx	r6
 8005a2a:	1c43      	adds	r3, r0, #1
 8005a2c:	d098      	beq.n	8005960 <_printf_i+0x13c>
 8005a2e:	3501      	adds	r5, #1
 8005a30:	68e3      	ldr	r3, [r4, #12]
 8005a32:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005a34:	1a9b      	subs	r3, r3, r2
 8005a36:	42ab      	cmp	r3, r5
 8005a38:	dcf0      	bgt.n	8005a1c <_printf_i+0x1f8>
 8005a3a:	e7e9      	b.n	8005a10 <_printf_i+0x1ec>
 8005a3c:	2500      	movs	r5, #0
 8005a3e:	e7f7      	b.n	8005a30 <_printf_i+0x20c>
 8005a40:	080061a1 	.word	0x080061a1
 8005a44:	080061b2 	.word	0x080061b2

08005a48 <memchr>:
 8005a48:	b2c9      	uxtb	r1, r1
 8005a4a:	1882      	adds	r2, r0, r2
 8005a4c:	4290      	cmp	r0, r2
 8005a4e:	d101      	bne.n	8005a54 <memchr+0xc>
 8005a50:	2000      	movs	r0, #0
 8005a52:	4770      	bx	lr
 8005a54:	7803      	ldrb	r3, [r0, #0]
 8005a56:	428b      	cmp	r3, r1
 8005a58:	d0fb      	beq.n	8005a52 <memchr+0xa>
 8005a5a:	3001      	adds	r0, #1
 8005a5c:	e7f6      	b.n	8005a4c <memchr+0x4>

08005a5e <memcpy>:
 8005a5e:	2300      	movs	r3, #0
 8005a60:	b510      	push	{r4, lr}
 8005a62:	429a      	cmp	r2, r3
 8005a64:	d100      	bne.n	8005a68 <memcpy+0xa>
 8005a66:	bd10      	pop	{r4, pc}
 8005a68:	5ccc      	ldrb	r4, [r1, r3]
 8005a6a:	54c4      	strb	r4, [r0, r3]
 8005a6c:	3301      	adds	r3, #1
 8005a6e:	e7f8      	b.n	8005a62 <memcpy+0x4>

08005a70 <memmove>:
 8005a70:	b510      	push	{r4, lr}
 8005a72:	4288      	cmp	r0, r1
 8005a74:	d902      	bls.n	8005a7c <memmove+0xc>
 8005a76:	188b      	adds	r3, r1, r2
 8005a78:	4298      	cmp	r0, r3
 8005a7a:	d303      	bcc.n	8005a84 <memmove+0x14>
 8005a7c:	2300      	movs	r3, #0
 8005a7e:	e007      	b.n	8005a90 <memmove+0x20>
 8005a80:	5c8b      	ldrb	r3, [r1, r2]
 8005a82:	5483      	strb	r3, [r0, r2]
 8005a84:	3a01      	subs	r2, #1
 8005a86:	d2fb      	bcs.n	8005a80 <memmove+0x10>
 8005a88:	bd10      	pop	{r4, pc}
 8005a8a:	5ccc      	ldrb	r4, [r1, r3]
 8005a8c:	54c4      	strb	r4, [r0, r3]
 8005a8e:	3301      	adds	r3, #1
 8005a90:	429a      	cmp	r2, r3
 8005a92:	d1fa      	bne.n	8005a8a <memmove+0x1a>
 8005a94:	e7f8      	b.n	8005a88 <memmove+0x18>
	...

08005a98 <_free_r>:
 8005a98:	b570      	push	{r4, r5, r6, lr}
 8005a9a:	0005      	movs	r5, r0
 8005a9c:	2900      	cmp	r1, #0
 8005a9e:	d010      	beq.n	8005ac2 <_free_r+0x2a>
 8005aa0:	1f0c      	subs	r4, r1, #4
 8005aa2:	6823      	ldr	r3, [r4, #0]
 8005aa4:	2b00      	cmp	r3, #0
 8005aa6:	da00      	bge.n	8005aaa <_free_r+0x12>
 8005aa8:	18e4      	adds	r4, r4, r3
 8005aaa:	0028      	movs	r0, r5
 8005aac:	f000 f918 	bl	8005ce0 <__malloc_lock>
 8005ab0:	4a1d      	ldr	r2, [pc, #116]	; (8005b28 <_free_r+0x90>)
 8005ab2:	6813      	ldr	r3, [r2, #0]
 8005ab4:	2b00      	cmp	r3, #0
 8005ab6:	d105      	bne.n	8005ac4 <_free_r+0x2c>
 8005ab8:	6063      	str	r3, [r4, #4]
 8005aba:	6014      	str	r4, [r2, #0]
 8005abc:	0028      	movs	r0, r5
 8005abe:	f000 f917 	bl	8005cf0 <__malloc_unlock>
 8005ac2:	bd70      	pop	{r4, r5, r6, pc}
 8005ac4:	42a3      	cmp	r3, r4
 8005ac6:	d908      	bls.n	8005ada <_free_r+0x42>
 8005ac8:	6821      	ldr	r1, [r4, #0]
 8005aca:	1860      	adds	r0, r4, r1
 8005acc:	4283      	cmp	r3, r0
 8005ace:	d1f3      	bne.n	8005ab8 <_free_r+0x20>
 8005ad0:	6818      	ldr	r0, [r3, #0]
 8005ad2:	685b      	ldr	r3, [r3, #4]
 8005ad4:	1841      	adds	r1, r0, r1
 8005ad6:	6021      	str	r1, [r4, #0]
 8005ad8:	e7ee      	b.n	8005ab8 <_free_r+0x20>
 8005ada:	001a      	movs	r2, r3
 8005adc:	685b      	ldr	r3, [r3, #4]
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	d001      	beq.n	8005ae6 <_free_r+0x4e>
 8005ae2:	42a3      	cmp	r3, r4
 8005ae4:	d9f9      	bls.n	8005ada <_free_r+0x42>
 8005ae6:	6811      	ldr	r1, [r2, #0]
 8005ae8:	1850      	adds	r0, r2, r1
 8005aea:	42a0      	cmp	r0, r4
 8005aec:	d10b      	bne.n	8005b06 <_free_r+0x6e>
 8005aee:	6820      	ldr	r0, [r4, #0]
 8005af0:	1809      	adds	r1, r1, r0
 8005af2:	1850      	adds	r0, r2, r1
 8005af4:	6011      	str	r1, [r2, #0]
 8005af6:	4283      	cmp	r3, r0
 8005af8:	d1e0      	bne.n	8005abc <_free_r+0x24>
 8005afa:	6818      	ldr	r0, [r3, #0]
 8005afc:	685b      	ldr	r3, [r3, #4]
 8005afe:	1841      	adds	r1, r0, r1
 8005b00:	6011      	str	r1, [r2, #0]
 8005b02:	6053      	str	r3, [r2, #4]
 8005b04:	e7da      	b.n	8005abc <_free_r+0x24>
 8005b06:	42a0      	cmp	r0, r4
 8005b08:	d902      	bls.n	8005b10 <_free_r+0x78>
 8005b0a:	230c      	movs	r3, #12
 8005b0c:	602b      	str	r3, [r5, #0]
 8005b0e:	e7d5      	b.n	8005abc <_free_r+0x24>
 8005b10:	6821      	ldr	r1, [r4, #0]
 8005b12:	1860      	adds	r0, r4, r1
 8005b14:	4283      	cmp	r3, r0
 8005b16:	d103      	bne.n	8005b20 <_free_r+0x88>
 8005b18:	6818      	ldr	r0, [r3, #0]
 8005b1a:	685b      	ldr	r3, [r3, #4]
 8005b1c:	1841      	adds	r1, r0, r1
 8005b1e:	6021      	str	r1, [r4, #0]
 8005b20:	6063      	str	r3, [r4, #4]
 8005b22:	6054      	str	r4, [r2, #4]
 8005b24:	e7ca      	b.n	8005abc <_free_r+0x24>
 8005b26:	46c0      	nop			; (mov r8, r8)
 8005b28:	20000228 	.word	0x20000228

08005b2c <sbrk_aligned>:
 8005b2c:	b570      	push	{r4, r5, r6, lr}
 8005b2e:	4e0f      	ldr	r6, [pc, #60]	; (8005b6c <sbrk_aligned+0x40>)
 8005b30:	000d      	movs	r5, r1
 8005b32:	6831      	ldr	r1, [r6, #0]
 8005b34:	0004      	movs	r4, r0
 8005b36:	2900      	cmp	r1, #0
 8005b38:	d102      	bne.n	8005b40 <sbrk_aligned+0x14>
 8005b3a:	f000 f8bf 	bl	8005cbc <_sbrk_r>
 8005b3e:	6030      	str	r0, [r6, #0]
 8005b40:	0029      	movs	r1, r5
 8005b42:	0020      	movs	r0, r4
 8005b44:	f000 f8ba 	bl	8005cbc <_sbrk_r>
 8005b48:	1c43      	adds	r3, r0, #1
 8005b4a:	d00a      	beq.n	8005b62 <sbrk_aligned+0x36>
 8005b4c:	2303      	movs	r3, #3
 8005b4e:	1cc5      	adds	r5, r0, #3
 8005b50:	439d      	bics	r5, r3
 8005b52:	42a8      	cmp	r0, r5
 8005b54:	d007      	beq.n	8005b66 <sbrk_aligned+0x3a>
 8005b56:	1a29      	subs	r1, r5, r0
 8005b58:	0020      	movs	r0, r4
 8005b5a:	f000 f8af 	bl	8005cbc <_sbrk_r>
 8005b5e:	1c43      	adds	r3, r0, #1
 8005b60:	d101      	bne.n	8005b66 <sbrk_aligned+0x3a>
 8005b62:	2501      	movs	r5, #1
 8005b64:	426d      	negs	r5, r5
 8005b66:	0028      	movs	r0, r5
 8005b68:	bd70      	pop	{r4, r5, r6, pc}
 8005b6a:	46c0      	nop			; (mov r8, r8)
 8005b6c:	2000022c 	.word	0x2000022c

08005b70 <_malloc_r>:
 8005b70:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005b72:	2203      	movs	r2, #3
 8005b74:	1ccb      	adds	r3, r1, #3
 8005b76:	4393      	bics	r3, r2
 8005b78:	3308      	adds	r3, #8
 8005b7a:	0006      	movs	r6, r0
 8005b7c:	001f      	movs	r7, r3
 8005b7e:	2b0c      	cmp	r3, #12
 8005b80:	d232      	bcs.n	8005be8 <_malloc_r+0x78>
 8005b82:	270c      	movs	r7, #12
 8005b84:	42b9      	cmp	r1, r7
 8005b86:	d831      	bhi.n	8005bec <_malloc_r+0x7c>
 8005b88:	0030      	movs	r0, r6
 8005b8a:	f000 f8a9 	bl	8005ce0 <__malloc_lock>
 8005b8e:	4d32      	ldr	r5, [pc, #200]	; (8005c58 <_malloc_r+0xe8>)
 8005b90:	682b      	ldr	r3, [r5, #0]
 8005b92:	001c      	movs	r4, r3
 8005b94:	2c00      	cmp	r4, #0
 8005b96:	d12e      	bne.n	8005bf6 <_malloc_r+0x86>
 8005b98:	0039      	movs	r1, r7
 8005b9a:	0030      	movs	r0, r6
 8005b9c:	f7ff ffc6 	bl	8005b2c <sbrk_aligned>
 8005ba0:	0004      	movs	r4, r0
 8005ba2:	1c43      	adds	r3, r0, #1
 8005ba4:	d11e      	bne.n	8005be4 <_malloc_r+0x74>
 8005ba6:	682c      	ldr	r4, [r5, #0]
 8005ba8:	0025      	movs	r5, r4
 8005baa:	2d00      	cmp	r5, #0
 8005bac:	d14a      	bne.n	8005c44 <_malloc_r+0xd4>
 8005bae:	6823      	ldr	r3, [r4, #0]
 8005bb0:	0029      	movs	r1, r5
 8005bb2:	18e3      	adds	r3, r4, r3
 8005bb4:	0030      	movs	r0, r6
 8005bb6:	9301      	str	r3, [sp, #4]
 8005bb8:	f000 f880 	bl	8005cbc <_sbrk_r>
 8005bbc:	9b01      	ldr	r3, [sp, #4]
 8005bbe:	4283      	cmp	r3, r0
 8005bc0:	d143      	bne.n	8005c4a <_malloc_r+0xda>
 8005bc2:	6823      	ldr	r3, [r4, #0]
 8005bc4:	3703      	adds	r7, #3
 8005bc6:	1aff      	subs	r7, r7, r3
 8005bc8:	2303      	movs	r3, #3
 8005bca:	439f      	bics	r7, r3
 8005bcc:	3708      	adds	r7, #8
 8005bce:	2f0c      	cmp	r7, #12
 8005bd0:	d200      	bcs.n	8005bd4 <_malloc_r+0x64>
 8005bd2:	270c      	movs	r7, #12
 8005bd4:	0039      	movs	r1, r7
 8005bd6:	0030      	movs	r0, r6
 8005bd8:	f7ff ffa8 	bl	8005b2c <sbrk_aligned>
 8005bdc:	1c43      	adds	r3, r0, #1
 8005bde:	d034      	beq.n	8005c4a <_malloc_r+0xda>
 8005be0:	6823      	ldr	r3, [r4, #0]
 8005be2:	19df      	adds	r7, r3, r7
 8005be4:	6027      	str	r7, [r4, #0]
 8005be6:	e013      	b.n	8005c10 <_malloc_r+0xa0>
 8005be8:	2b00      	cmp	r3, #0
 8005bea:	dacb      	bge.n	8005b84 <_malloc_r+0x14>
 8005bec:	230c      	movs	r3, #12
 8005bee:	2500      	movs	r5, #0
 8005bf0:	6033      	str	r3, [r6, #0]
 8005bf2:	0028      	movs	r0, r5
 8005bf4:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8005bf6:	6822      	ldr	r2, [r4, #0]
 8005bf8:	1bd1      	subs	r1, r2, r7
 8005bfa:	d420      	bmi.n	8005c3e <_malloc_r+0xce>
 8005bfc:	290b      	cmp	r1, #11
 8005bfe:	d917      	bls.n	8005c30 <_malloc_r+0xc0>
 8005c00:	19e2      	adds	r2, r4, r7
 8005c02:	6027      	str	r7, [r4, #0]
 8005c04:	42a3      	cmp	r3, r4
 8005c06:	d111      	bne.n	8005c2c <_malloc_r+0xbc>
 8005c08:	602a      	str	r2, [r5, #0]
 8005c0a:	6863      	ldr	r3, [r4, #4]
 8005c0c:	6011      	str	r1, [r2, #0]
 8005c0e:	6053      	str	r3, [r2, #4]
 8005c10:	0030      	movs	r0, r6
 8005c12:	0025      	movs	r5, r4
 8005c14:	f000 f86c 	bl	8005cf0 <__malloc_unlock>
 8005c18:	2207      	movs	r2, #7
 8005c1a:	350b      	adds	r5, #11
 8005c1c:	1d23      	adds	r3, r4, #4
 8005c1e:	4395      	bics	r5, r2
 8005c20:	1aea      	subs	r2, r5, r3
 8005c22:	429d      	cmp	r5, r3
 8005c24:	d0e5      	beq.n	8005bf2 <_malloc_r+0x82>
 8005c26:	1b5b      	subs	r3, r3, r5
 8005c28:	50a3      	str	r3, [r4, r2]
 8005c2a:	e7e2      	b.n	8005bf2 <_malloc_r+0x82>
 8005c2c:	605a      	str	r2, [r3, #4]
 8005c2e:	e7ec      	b.n	8005c0a <_malloc_r+0x9a>
 8005c30:	6862      	ldr	r2, [r4, #4]
 8005c32:	42a3      	cmp	r3, r4
 8005c34:	d101      	bne.n	8005c3a <_malloc_r+0xca>
 8005c36:	602a      	str	r2, [r5, #0]
 8005c38:	e7ea      	b.n	8005c10 <_malloc_r+0xa0>
 8005c3a:	605a      	str	r2, [r3, #4]
 8005c3c:	e7e8      	b.n	8005c10 <_malloc_r+0xa0>
 8005c3e:	0023      	movs	r3, r4
 8005c40:	6864      	ldr	r4, [r4, #4]
 8005c42:	e7a7      	b.n	8005b94 <_malloc_r+0x24>
 8005c44:	002c      	movs	r4, r5
 8005c46:	686d      	ldr	r5, [r5, #4]
 8005c48:	e7af      	b.n	8005baa <_malloc_r+0x3a>
 8005c4a:	230c      	movs	r3, #12
 8005c4c:	0030      	movs	r0, r6
 8005c4e:	6033      	str	r3, [r6, #0]
 8005c50:	f000 f84e 	bl	8005cf0 <__malloc_unlock>
 8005c54:	e7cd      	b.n	8005bf2 <_malloc_r+0x82>
 8005c56:	46c0      	nop			; (mov r8, r8)
 8005c58:	20000228 	.word	0x20000228

08005c5c <_realloc_r>:
 8005c5c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005c5e:	0007      	movs	r7, r0
 8005c60:	000e      	movs	r6, r1
 8005c62:	0014      	movs	r4, r2
 8005c64:	2900      	cmp	r1, #0
 8005c66:	d105      	bne.n	8005c74 <_realloc_r+0x18>
 8005c68:	0011      	movs	r1, r2
 8005c6a:	f7ff ff81 	bl	8005b70 <_malloc_r>
 8005c6e:	0005      	movs	r5, r0
 8005c70:	0028      	movs	r0, r5
 8005c72:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8005c74:	2a00      	cmp	r2, #0
 8005c76:	d103      	bne.n	8005c80 <_realloc_r+0x24>
 8005c78:	f7ff ff0e 	bl	8005a98 <_free_r>
 8005c7c:	0025      	movs	r5, r4
 8005c7e:	e7f7      	b.n	8005c70 <_realloc_r+0x14>
 8005c80:	f000 f83e 	bl	8005d00 <_malloc_usable_size_r>
 8005c84:	9001      	str	r0, [sp, #4]
 8005c86:	4284      	cmp	r4, r0
 8005c88:	d803      	bhi.n	8005c92 <_realloc_r+0x36>
 8005c8a:	0035      	movs	r5, r6
 8005c8c:	0843      	lsrs	r3, r0, #1
 8005c8e:	42a3      	cmp	r3, r4
 8005c90:	d3ee      	bcc.n	8005c70 <_realloc_r+0x14>
 8005c92:	0021      	movs	r1, r4
 8005c94:	0038      	movs	r0, r7
 8005c96:	f7ff ff6b 	bl	8005b70 <_malloc_r>
 8005c9a:	1e05      	subs	r5, r0, #0
 8005c9c:	d0e8      	beq.n	8005c70 <_realloc_r+0x14>
 8005c9e:	9b01      	ldr	r3, [sp, #4]
 8005ca0:	0022      	movs	r2, r4
 8005ca2:	429c      	cmp	r4, r3
 8005ca4:	d900      	bls.n	8005ca8 <_realloc_r+0x4c>
 8005ca6:	001a      	movs	r2, r3
 8005ca8:	0031      	movs	r1, r6
 8005caa:	0028      	movs	r0, r5
 8005cac:	f7ff fed7 	bl	8005a5e <memcpy>
 8005cb0:	0031      	movs	r1, r6
 8005cb2:	0038      	movs	r0, r7
 8005cb4:	f7ff fef0 	bl	8005a98 <_free_r>
 8005cb8:	e7da      	b.n	8005c70 <_realloc_r+0x14>
	...

08005cbc <_sbrk_r>:
 8005cbc:	2300      	movs	r3, #0
 8005cbe:	b570      	push	{r4, r5, r6, lr}
 8005cc0:	4d06      	ldr	r5, [pc, #24]	; (8005cdc <_sbrk_r+0x20>)
 8005cc2:	0004      	movs	r4, r0
 8005cc4:	0008      	movs	r0, r1
 8005cc6:	602b      	str	r3, [r5, #0]
 8005cc8:	f7fb fda6 	bl	8001818 <_sbrk>
 8005ccc:	1c43      	adds	r3, r0, #1
 8005cce:	d103      	bne.n	8005cd8 <_sbrk_r+0x1c>
 8005cd0:	682b      	ldr	r3, [r5, #0]
 8005cd2:	2b00      	cmp	r3, #0
 8005cd4:	d000      	beq.n	8005cd8 <_sbrk_r+0x1c>
 8005cd6:	6023      	str	r3, [r4, #0]
 8005cd8:	bd70      	pop	{r4, r5, r6, pc}
 8005cda:	46c0      	nop			; (mov r8, r8)
 8005cdc:	20000230 	.word	0x20000230

08005ce0 <__malloc_lock>:
 8005ce0:	b510      	push	{r4, lr}
 8005ce2:	4802      	ldr	r0, [pc, #8]	; (8005cec <__malloc_lock+0xc>)
 8005ce4:	f000 f814 	bl	8005d10 <__retarget_lock_acquire_recursive>
 8005ce8:	bd10      	pop	{r4, pc}
 8005cea:	46c0      	nop			; (mov r8, r8)
 8005cec:	20000234 	.word	0x20000234

08005cf0 <__malloc_unlock>:
 8005cf0:	b510      	push	{r4, lr}
 8005cf2:	4802      	ldr	r0, [pc, #8]	; (8005cfc <__malloc_unlock+0xc>)
 8005cf4:	f000 f80d 	bl	8005d12 <__retarget_lock_release_recursive>
 8005cf8:	bd10      	pop	{r4, pc}
 8005cfa:	46c0      	nop			; (mov r8, r8)
 8005cfc:	20000234 	.word	0x20000234

08005d00 <_malloc_usable_size_r>:
 8005d00:	1f0b      	subs	r3, r1, #4
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	1f18      	subs	r0, r3, #4
 8005d06:	2b00      	cmp	r3, #0
 8005d08:	da01      	bge.n	8005d0e <_malloc_usable_size_r+0xe>
 8005d0a:	580b      	ldr	r3, [r1, r0]
 8005d0c:	18c0      	adds	r0, r0, r3
 8005d0e:	4770      	bx	lr

08005d10 <__retarget_lock_acquire_recursive>:
 8005d10:	4770      	bx	lr

08005d12 <__retarget_lock_release_recursive>:
 8005d12:	4770      	bx	lr

08005d14 <_init>:
 8005d14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005d16:	46c0      	nop			; (mov r8, r8)
 8005d18:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005d1a:	bc08      	pop	{r3}
 8005d1c:	469e      	mov	lr, r3
 8005d1e:	4770      	bx	lr

08005d20 <_fini>:
 8005d20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005d22:	46c0      	nop			; (mov r8, r8)
 8005d24:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005d26:	bc08      	pop	{r3}
 8005d28:	469e      	mov	lr, r3
 8005d2a:	4770      	bx	lr
